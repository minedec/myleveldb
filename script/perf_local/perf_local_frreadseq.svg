<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="886.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="869" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="869" > </text>
<g id="frames">
<g >
<title>leveldb::GetLengthPrefixedSlice (2,666,666 samples, 0.16%)</title><rect x="319.2" y="533" width="1.9" height="15.0" fill="rgb(208,60,51)" rx="2" ry="2" />
<text  x="322.18" y="543.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::DoCompactionWork (146,666,630 samples, 8.81%)</title><rect x="256.8" y="597" width="104.0" height="15.0" fill="rgb(251,50,51)" rx="2" ry="2" />
<text  x="259.78" y="607.5" >leveldb::DBI..</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (1,333,333 samples, 0.08%)</title><rect x="345.7" y="421" width="0.9" height="15.0" fill="rgb(211,167,13)" rx="2" ry="2" />
<text  x="348.66" y="431.5" ></text>
</g>
<g >
<title>__x64_sys_futex (3,999,999 samples, 0.24%)</title><rect x="947.9" y="485" width="2.9" height="15.0" fill="rgb(243,140,26)" rx="2" ry="2" />
<text  x="950.95" y="495.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseToSpans (1,333,333 samples, 0.08%)</title><rect x="255.8" y="453" width="1.0" height="15.0" fill="rgb(218,209,6)" rx="2" ry="2" />
<text  x="258.83" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_eq (1,333,333 samples, 0.08%)</title><rect x="226.5" y="469" width="1.0" height="15.0" fill="rgb(236,212,41)" rx="2" ry="2" />
<text  x="229.52" y="479.5" ></text>
</g>
<g >
<title>[libunwind.so.8.0.1] (1,333,333 samples, 0.08%)</title><rect x="1111.5" y="565" width="1.0" height="15.0" fill="rgb(212,229,22)" rx="2" ry="2" />
<text  x="1114.52" y="575.5" ></text>
</g>
<g >
<title>leveldb::EncodeVarint32 (2,666,666 samples, 0.16%)</title><rect x="444.9" y="533" width="1.9" height="15.0" fill="rgb(244,95,47)" rx="2" ry="2" />
<text  x="447.94" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (6,666,665 samples, 0.40%)</title><rect x="1064.2" y="533" width="4.8" height="15.0" fill="rgb(235,39,33)" rx="2" ry="2" />
<text  x="1067.25" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (1,333,333 samples, 0.08%)</title><rect x="79.0" y="421" width="1.0" height="15.0" fill="rgb(232,206,49)" rx="2" ry="2" />
<text  x="82.02" y="431.5" ></text>
</g>
<g >
<title>from_kprojid (1,333,333 samples, 0.08%)</title><rect x="844.9" y="261" width="0.9" height="15.0" fill="rgb(225,39,51)" rx="2" ry="2" />
<text  x="847.89" y="271.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (1,333,333 samples, 0.08%)</title><rect x="98.9" y="373" width="0.9" height="15.0" fill="rgb(253,47,28)" rx="2" ry="2" />
<text  x="101.88" y="383.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.08%)</title><rect x="349.4" y="517" width="1.0" height="15.0" fill="rgb(242,203,35)" rx="2" ry="2" />
<text  x="352.44" y="527.5" ></text>
</g>
<g >
<title>leveldb::VersionEdit::~VersionEdit (1,333,333 samples, 0.08%)</title><rect x="1123.8" y="709" width="1.0" height="15.0" fill="rgb(243,56,38)" rx="2" ry="2" />
<text  x="1126.81" y="719.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (3,999,999 samples, 0.24%)</title><rect x="273.8" y="549" width="2.8" height="15.0" fill="rgb(237,211,33)" rx="2" ry="2" />
<text  x="276.80" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,333,333 samples, 0.08%)</title><rect x="305.0" y="453" width="0.9" height="15.0" fill="rgb(217,164,9)" rx="2" ry="2" />
<text  x="308.00" y="463.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (1,333,333 samples, 0.08%)</title><rect x="994.3" y="389" width="0.9" height="15.0" fill="rgb(222,161,17)" rx="2" ry="2" />
<text  x="997.28" y="399.5" ></text>
</g>
<g >
<title>filename_lookup (1,333,333 samples, 0.08%)</title><rect x="1128.5" y="533" width="1.0" height="15.0" fill="rgb(253,151,5)" rx="2" ry="2" />
<text  x="1131.54" y="543.5" ></text>
</g>
<g >
<title>leveldb::WriteBatch::Clear (15,999,996 samples, 0.96%)</title><rect x="1090.7" y="629" width="11.4" height="15.0" fill="rgb(209,26,38)" rx="2" ry="2" />
<text  x="1093.72" y="639.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MemTableInserter::~MemTableInserter (1,333,333 samples, 0.08%)</title><rect x="434.5" y="581" width="1.0" height="15.0" fill="rgb(227,107,37)" rx="2" ry="2" />
<text  x="437.54" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_default_append (25,333,327 samples, 1.52%)</title><rect x="194.4" y="501" width="17.9" height="15.0" fill="rgb(216,107,35)" rx="2" ry="2" />
<text  x="197.38" y="511.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;char*, unsigned long&gt; (25,333,327 samples, 1.52%)</title><rect x="194.4" y="453" width="17.9" height="15.0" fill="rgb(213,197,11)" rx="2" ry="2" />
<text  x="197.38" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size@plt (1,333,333 samples, 0.08%)</title><rect x="225.6" y="421" width="0.9" height="15.0" fill="rgb(205,213,12)" rx="2" ry="2" />
<text  x="228.58" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1,333,333 samples, 0.08%)</title><rect x="1171.1" y="805" width="0.9" height="15.0" fill="rgb(232,72,37)" rx="2" ry="2" />
<text  x="1174.09" y="815.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::~PosixWritableFile (1,333,333 samples, 0.08%)</title><rect x="1121.9" y="677" width="1.0" height="15.0" fill="rgb(242,176,52)" rx="2" ry="2" />
<text  x="1124.92" y="687.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteBlock (1,333,333 samples, 0.08%)</title><rect x="193.4" y="533" width="1.0" height="15.0" fill="rgb(243,37,35)" rx="2" ry="2" />
<text  x="196.43" y="543.5" ></text>
</g>
<g >
<title>snappy::internal::WorkingMemory::GetHashTable (1,333,333 samples, 0.08%)</title><rect x="176.4" y="453" width="1.0" height="15.0" fill="rgb(234,10,35)" rx="2" ry="2" />
<text  x="179.41" y="463.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.08%)</title><rect x="128.2" y="373" width="0.9" height="15.0" fill="rgb(250,149,19)" rx="2" ry="2" />
<text  x="131.19" y="383.5" ></text>
</g>
<g >
<title>uncharge_batch (1,333,333 samples, 0.08%)</title><rect x="1118.1" y="501" width="1.0" height="15.0" fill="rgb(252,26,14)" rx="2" ry="2" />
<text  x="1121.14" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt; &gt;::construct&lt;std::__future_base::_State_baseV2&gt; (1,333,333 samples, 0.08%)</title><rect x="1167.3" y="789" width="1.0" height="15.0" fill="rgb(217,143,11)" rx="2" ry="2" />
<text  x="1170.31" y="799.5" ></text>
</g>
<g >
<title>iov_iter_copy_from_user_atomic (1,333,333 samples, 0.08%)</title><rect x="856.2" y="357" width="1.0" height="15.0" fill="rgb(218,14,14)" rx="2" ry="2" />
<text  x="859.23" y="367.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (7,999,998 samples, 0.48%)</title><rect x="19.5" y="533" width="5.6" height="15.0" fill="rgb(208,106,6)" rx="2" ry="2" />
<text  x="22.46" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (6,666,665 samples, 0.40%)</title><rect x="102.7" y="437" width="4.7" height="15.0" fill="rgb(217,117,17)" rx="2" ry="2" />
<text  x="105.66" y="447.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BackgroundCall (493,333,210 samples, 29.65%)</title><rect x="10.9" y="629" width="349.9" height="15.0" fill="rgb(212,2,38)" rx="2" ry="2" />
<text  x="13.95" y="639.5" >leveldb::DBImpl::BackgroundCall</text>
</g>
<g >
<title>leveldb::Slice::Slice (2,666,666 samples, 0.16%)</title><rect x="702.1" y="565" width="1.9" height="15.0" fill="rgb(242,108,28)" rx="2" ry="2" />
<text  x="705.12" y="575.5" ></text>
</g>
<g >
<title>leveldb::WriteBatch::Handler::~Handler (1,333,333 samples, 0.08%)</title><rect x="434.5" y="565" width="1.0" height="15.0" fill="rgb(217,122,0)" rx="2" ry="2" />
<text  x="437.54" y="575.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (1,333,333 samples, 0.08%)</title><rect x="304.1" y="389" width="0.9" height="15.0" fill="rgb(247,217,22)" rx="2" ry="2" />
<text  x="307.05" y="399.5" ></text>
</g>
<g >
<title>do_futex (11,999,997 samples, 0.72%)</title><rect x="958.3" y="453" width="8.6" height="15.0" fill="rgb(227,74,35)" rx="2" ry="2" />
<text  x="961.35" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (3,999,999 samples, 0.24%)</title><rect x="315.4" y="517" width="2.8" height="15.0" fill="rgb(207,224,50)" rx="2" ry="2" />
<text  x="318.40" y="527.5" ></text>
</g>
<g >
<title>leveldb::EncodeFixed32 (2,666,666 samples, 0.16%)</title><rect x="869.5" y="565" width="1.9" height="15.0" fill="rgb(223,36,19)" rx="2" ry="2" />
<text  x="872.47" y="575.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.08%)</title><rect x="92.3" y="373" width="0.9" height="15.0" fill="rgb(224,52,7)" rx="2" ry="2" />
<text  x="95.26" y="383.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::RemoveObsoleteFiles (3,999,999 samples, 0.24%)</title><rect x="10.9" y="581" width="2.9" height="15.0" fill="rgb(205,71,15)" rx="2" ry="2" />
<text  x="13.95" y="591.5" ></text>
</g>
<g >
<title>std::future&lt;leveldb::Status&gt;::future (13,333,330 samples, 0.80%)</title><rect x="1026.4" y="597" width="9.5" height="15.0" fill="rgb(220,218,6)" rx="2" ry="2" />
<text  x="1029.43" y="607.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (2,666,666 samples, 0.16%)</title><rect x="37.4" y="501" width="1.9" height="15.0" fill="rgb(208,109,48)" rx="2" ry="2" />
<text  x="40.42" y="511.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,333,333 samples, 0.08%)</title><rect x="310.7" y="293" width="0.9" height="15.0" fill="rgb(252,94,6)" rx="2" ry="2" />
<text  x="313.67" y="303.5" ></text>
</g>
<g >
<title>_dl_runtime_resolve_xsavec (1,333,333 samples, 0.08%)</title><rect x="1114.4" y="629" width="0.9" height="15.0" fill="rgb(253,229,11)" rx="2" ry="2" />
<text  x="1117.36" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1,333,333 samples, 0.08%)</title><rect x="141.4" y="501" width="1.0" height="15.0" fill="rgb(236,157,25)" rx="2" ry="2" />
<text  x="144.43" y="511.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (2,666,666 samples, 0.16%)</title><rect x="337.1" y="533" width="1.9" height="15.0" fill="rgb(213,151,42)" rx="2" ry="2" />
<text  x="340.15" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (1,333,333 samples, 0.08%)</title><rect x="121.6" y="453" width="0.9" height="15.0" fill="rgb(231,60,38)" rx="2" ry="2" />
<text  x="124.57" y="463.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (22,666,661 samples, 1.36%)</title><rect x="287.0" y="485" width="16.1" height="15.0" fill="rgb(231,228,24)" rx="2" ry="2" />
<text  x="290.04" y="495.5" ></text>
</g>
<g >
<title>snappy::RawCompress (1,333,333 samples, 0.08%)</title><rect x="307.8" y="469" width="1.0" height="15.0" fill="rgb(223,18,34)" rx="2" ry="2" />
<text  x="310.84" y="479.5" ></text>
</g>
<g >
<title>ksys_read (1,333,333 samples, 0.08%)</title><rect x="1124.8" y="565" width="0.9" height="15.0" fill="rgb(206,192,49)" rx="2" ry="2" />
<text  x="1127.76" y="575.5" ></text>
</g>
<g >
<title>__GI___libc_read (1,333,333 samples, 0.08%)</title><rect x="1124.8" y="629" width="0.9" height="15.0" fill="rgb(234,108,11)" rx="2" ry="2" />
<text  x="1127.76" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.08%)</title><rect x="1044.4" y="501" width="0.9" height="15.0" fill="rgb(249,21,36)" rx="2" ry="2" />
<text  x="1047.39" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1,333,333 samples, 0.08%)</title><rect x="314.5" y="501" width="0.9" height="15.0" fill="rgb(237,59,47)" rx="2" ry="2" />
<text  x="317.46" y="511.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Value (5,333,332 samples, 0.32%)</title><rect x="350.4" y="517" width="3.8" height="15.0" fill="rgb(217,25,17)" rx="2" ry="2" />
<text  x="353.38" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (2,666,666 samples, 0.16%)</title><rect x="342.8" y="469" width="1.9" height="15.0" fill="rgb(205,94,53)" rx="2" ry="2" />
<text  x="345.82" y="479.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (1,333,333 samples, 0.08%)</title><rect x="262.5" y="517" width="0.9" height="15.0" fill="rgb(228,157,39)" rx="2" ry="2" />
<text  x="265.45" y="527.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.08%)</title><rect x="303.1" y="453" width="1.0" height="15.0" fill="rgb(228,177,11)" rx="2" ry="2" />
<text  x="306.11" y="463.5" ></text>
</g>
<g >
<title>leveldb::Status::Status (1,333,333 samples, 0.08%)</title><rect x="187.8" y="501" width="0.9" height="15.0" fill="rgb(238,33,15)" rx="2" ry="2" />
<text  x="190.76" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (15,999,996 samples, 0.96%)</title><rect x="216.1" y="501" width="11.4" height="15.0" fill="rgb(206,207,27)" rx="2" ry="2" />
<text  x="219.12" y="511.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (1,333,333 samples, 0.08%)</title><rect x="305.0" y="485" width="0.9" height="15.0" fill="rgb(244,21,17)" rx="2" ry="2" />
<text  x="308.00" y="495.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (2,666,666 samples, 0.16%)</title><rect x="323.0" y="565" width="1.9" height="15.0" fill="rgb(230,11,21)" rx="2" ry="2" />
<text  x="325.96" y="575.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (6,666,665 samples, 0.40%)</title><rect x="267.2" y="549" width="4.7" height="15.0" fill="rgb(231,62,24)" rx="2" ry="2" />
<text  x="270.18" y="559.5" ></text>
</g>
<g >
<title>libpmem_init (1,333,333 samples, 0.08%)</title><rect x="1113.4" y="757" width="1.0" height="15.0" fill="rgb(217,87,18)" rx="2" ry="2" />
<text  x="1116.41" y="767.5" ></text>
</g>
<g >
<title>seq_printf (1,333,333 samples, 0.08%)</title><rect x="1124.8" y="469" width="0.9" height="15.0" fill="rgb(224,192,15)" rx="2" ry="2" />
<text  x="1127.76" y="479.5" ></text>
</g>
<g >
<title>leveldb::Status::ok (1,333,333 samples, 0.08%)</title><rect x="716.3" y="581" width="0.9" height="15.0" fill="rgb(214,67,27)" rx="2" ry="2" />
<text  x="719.30" y="591.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BGWork (493,333,210 samples, 29.65%)</title><rect x="10.9" y="645" width="349.9" height="15.0" fill="rgb(208,167,7)" rx="2" ry="2" />
<text  x="13.95" y="655.5" >leveldb::DBImpl::BGWork</text>
</g>
<g >
<title>std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::_M_erase_at_end (1,333,333 samples, 0.08%)</title><rect x="184.9" y="501" width="1.0" height="15.0" fill="rgb(215,119,29)" rx="2" ry="2" />
<text  x="187.92" y="511.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::ok (3,999,999 samples, 0.24%)</title><rect x="185.9" y="533" width="2.8" height="15.0" fill="rgb(246,225,25)" rx="2" ry="2" />
<text  x="188.87" y="543.5" ></text>
</g>
<g >
<title>operator new[] (5,333,332 samples, 0.32%)</title><rect x="179.2" y="517" width="3.8" height="15.0" fill="rgb(242,39,40)" rx="2" ry="2" />
<text  x="182.25" y="527.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="315.4" y="485" width="0.9" height="15.0" fill="rgb(240,206,43)" rx="2" ry="2" />
<text  x="318.40" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl (1,333,333 samples, 0.08%)</title><rect x="1187.2" y="789" width="0.9" height="15.0" fill="rgb(254,157,30)" rx="2" ry="2" />
<text  x="1190.16" y="799.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (1,333,333 samples, 0.08%)</title><rect x="69.6" y="517" width="0.9" height="15.0" fill="rgb(223,181,33)" rx="2" ry="2" />
<text  x="72.57" y="527.5" ></text>
</g>
<g >
<title>__ext4_journal_stop (17,333,329 samples, 1.04%)</title><rect x="793.8" y="341" width="12.3" height="15.0" fill="rgb(253,158,25)" rx="2" ry="2" />
<text  x="796.83" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5,333,332 samples, 0.32%)</title><rect x="287.0" y="437" width="3.8" height="15.0" fill="rgb(233,95,44)" rx="2" ry="2" />
<text  x="290.04" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::end (1,333,333 samples, 0.08%)</title><rect x="408.1" y="581" width="0.9" height="15.0" fill="rgb(226,61,8)" rx="2" ry="2" />
<text  x="411.06" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_default_append (1,333,333 samples, 0.08%)</title><rect x="322.0" y="517" width="1.0" height="15.0" fill="rgb(234,203,44)" rx="2" ry="2" />
<text  x="325.02" y="527.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (23,999,994 samples, 1.44%)</title><rect x="286.1" y="501" width="17.0" height="15.0" fill="rgb(227,202,48)" rx="2" ry="2" />
<text  x="289.09" y="511.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::_M_head (1,333,333 samples, 0.08%)</title><rect x="988.6" y="293" width="1.0" height="15.0" fill="rgb(227,220,17)" rx="2" ry="2" />
<text  x="991.61" y="303.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2,666,666 samples, 0.16%)</title><rect x="239.8" y="469" width="1.9" height="15.0" fill="rgb(210,164,25)" rx="2" ry="2" />
<text  x="242.76" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (2,666,666 samples, 0.16%)</title><rect x="239.8" y="501" width="1.9" height="15.0" fill="rgb(220,116,29)" rx="2" ry="2" />
<text  x="242.76" y="511.5" ></text>
</g>
<g >
<title>getname_flags (1,333,333 samples, 0.08%)</title><rect x="1113.4" y="517" width="1.0" height="15.0" fill="rgb(244,64,28)" rx="2" ry="2" />
<text  x="1116.41" y="527.5" ></text>
</g>
<g >
<title>leveldb::MemTable::KeyComparator::operator (3,999,999 samples, 0.24%)</title><rect x="1148.4" y="805" width="2.8" height="15.0" fill="rgb(208,203,0)" rx="2" ry="2" />
<text  x="1151.40" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_allocate_buckets (1,333,333 samples, 0.08%)</title><rect x="294.6" y="389" width="0.9" height="15.0" fill="rgb(230,160,8)" rx="2" ry="2" />
<text  x="297.60" y="399.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.08%)</title><rect x="875.1" y="517" width="1.0" height="15.0" fill="rgb(252,50,25)" rx="2" ry="2" />
<text  x="878.14" y="527.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (43,999,989 samples, 2.64%)</title><rect x="969.7" y="453" width="31.2" height="15.0" fill="rgb(228,96,6)" rx="2" ry="2" />
<text  x="972.70" y="463.5" >st..</text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.08%)</title><rect x="307.8" y="373" width="1.0" height="15.0" fill="rgb(219,66,51)" rx="2" ry="2" />
<text  x="310.84" y="383.5" ></text>
</g>
<g >
<title>leveldb::port::CondVar::CondVar (2,666,666 samples, 0.16%)</title><rect x="416.6" y="581" width="1.9" height="15.0" fill="rgb(238,24,44)" rx="2" ry="2" />
<text  x="419.57" y="591.5" ></text>
</g>
<g >
<title>rebalance_domains (1,333,333 samples, 0.08%)</title><rect x="985.8" y="277" width="0.9" height="15.0" fill="rgb(238,182,18)" rx="2" ry="2" />
<text  x="988.77" y="287.5" ></text>
</g>
<g >
<title>__GI_madvise (1,333,333 samples, 0.08%)</title><rect x="321.1" y="357" width="0.9" height="15.0" fill="rgb(250,209,46)" rx="2" ry="2" />
<text  x="324.07" y="367.5" ></text>
</g>
<g >
<title>run_rebalance_domains (2,666,666 samples, 0.16%)</title><rect x="533.8" y="389" width="1.9" height="15.0" fill="rgb(227,187,13)" rx="2" ry="2" />
<text  x="536.81" y="399.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (3,999,999 samples, 0.24%)</title><rect x="324.9" y="581" width="2.8" height="15.0" fill="rgb(229,203,23)" rx="2" ry="2" />
<text  x="327.86" y="591.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BuildBatchGroup (14,666,663 samples, 0.88%)</title><rect x="403.3" y="597" width="10.4" height="15.0" fill="rgb(215,133,51)" rx="2" ry="2" />
<text  x="406.33" y="607.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="333.4" y="501" width="0.9" height="15.0" fill="rgb(237,185,7)" rx="2" ry="2" />
<text  x="336.37" y="511.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (3,999,999 samples, 0.24%)</title><rect x="800.4" y="293" width="2.9" height="15.0" fill="rgb(231,115,46)" rx="2" ry="2" />
<text  x="803.45" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (5,333,332 samples, 0.32%)</title><rect x="236.0" y="501" width="3.8" height="15.0" fill="rgb(254,69,33)" rx="2" ry="2" />
<text  x="238.98" y="511.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.08%)</title><rect x="62.0" y="501" width="0.9" height="15.0" fill="rgb(223,40,10)" rx="2" ry="2" />
<text  x="65.00" y="511.5" ></text>
</g>
<g >
<title>main (18,666,662 samples, 1.12%)</title><rect x="1115.3" y="773" width="13.2" height="15.0" fill="rgb(236,168,30)" rx="2" ry="2" />
<text  x="1118.30" y="783.5" ></text>
</g>
<g >
<title>leveldb::port::Snappy_Compress (1,333,333 samples, 0.08%)</title><rect x="193.4" y="517" width="1.0" height="15.0" fill="rgb(207,160,36)" rx="2" ry="2" />
<text  x="196.43" y="527.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (1,333,333 samples, 0.08%)</title><rect x="1131.4" y="789" width="0.9" height="15.0" fill="rgb(241,0,41)" rx="2" ry="2" />
<text  x="1134.38" y="799.5" ></text>
</g>
<g >
<title>__x64_sys_rt_sigprocmask (1,333,333 samples, 0.08%)</title><rect x="441.2" y="165" width="0.9" height="15.0" fill="rgb(241,4,35)" rx="2" ry="2" />
<text  x="444.15" y="175.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::NoBarrier_SetNext (3,999,999 samples, 0.24%)</title><rect x="683.2" y="517" width="2.8" height="15.0" fill="rgb(210,210,51)" rx="2" ry="2" />
<text  x="686.21" y="527.5" ></text>
</g>
<g >
<title>operator new[] (3,999,999 samples, 0.24%)</title><rect x="1036.8" y="597" width="2.9" height="15.0" fill="rgb(228,16,19)" rx="2" ry="2" />
<text  x="1039.83" y="607.5" ></text>
</g>
<g >
<title>proc_reg_read (1,333,333 samples, 0.08%)</title><rect x="1124.8" y="517" width="0.9" height="15.0" fill="rgb(248,215,41)" rx="2" ry="2" />
<text  x="1127.76" y="527.5" ></text>
</g>
<g >
<title>do_page_fault (3,999,999 samples, 0.24%)</title><rect x="393.9" y="549" width="2.8" height="15.0" fill="rgb(216,192,50)" rx="2" ry="2" />
<text  x="396.88" y="559.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed64 (2,666,666 samples, 0.16%)</title><rect x="253.9" y="549" width="1.9" height="15.0" fill="rgb(217,33,9)" rx="2" ry="2" />
<text  x="256.94" y="559.5" ></text>
</g>
<g >
<title>free_unref_page_list (2,666,666 samples, 0.16%)</title><rect x="1116.2" y="517" width="1.9" height="15.0" fill="rgb(229,90,16)" rx="2" ry="2" />
<text  x="1119.25" y="527.5" ></text>
</g>
<g >
<title>ext4_da_write_end (85,333,312 samples, 5.13%)</title><rect x="793.8" y="357" width="60.5" height="15.0" fill="rgb(205,131,42)" rx="2" ry="2" />
<text  x="796.83" y="367.5" >ext4_d..</text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (13,333,330 samples, 0.80%)</title><rect x="1001.8" y="581" width="9.5" height="15.0" fill="rgb(249,95,5)" rx="2" ry="2" />
<text  x="1004.84" y="591.5" ></text>
</g>
<g >
<title>page_fault (3,999,999 samples, 0.24%)</title><rect x="1163.5" y="789" width="2.9" height="15.0" fill="rgb(238,11,3)" rx="2" ry="2" />
<text  x="1166.53" y="799.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (2,666,666 samples, 0.16%)</title><rect x="1021.7" y="549" width="1.9" height="15.0" fill="rgb(241,113,7)" rx="2" ry="2" />
<text  x="1024.70" y="559.5" ></text>
</g>
<g >
<title>madvise_free_pte_range (1,333,333 samples, 0.08%)</title><rect x="255.8" y="229" width="1.0" height="15.0" fill="rgb(228,226,17)" rx="2" ry="2" />
<text  x="258.83" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (7,999,998 samples, 0.48%)</title><rect x="94.2" y="421" width="5.6" height="15.0" fill="rgb(221,123,15)" rx="2" ry="2" />
<text  x="97.15" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (3,999,999 samples, 0.24%)</title><rect x="62.9" y="517" width="2.9" height="15.0" fill="rgb(212,165,50)" rx="2" ry="2" />
<text  x="65.95" y="527.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.08%)</title><rect x="10.0" y="741" width="0.9" height="15.0" fill="rgb(223,206,32)" rx="2" ry="2" />
<text  x="13.00" y="751.5" ></text>
</g>
<g >
<title>std::make_shared&lt;std::__future_base::_State_baseV2&gt; (26,666,660 samples, 1.60%)</title><rect x="1039.7" y="597" width="18.9" height="15.0" fill="rgb(230,21,51)" rx="2" ry="2" />
<text  x="1042.66" y="607.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Value (2,666,666 samples, 0.16%)</title><rect x="305.9" y="469" width="1.9" height="15.0" fill="rgb(237,13,19)" rx="2" ry="2" />
<text  x="308.95" y="479.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.08%)</title><rect x="383.5" y="581" width="0.9" height="15.0" fill="rgb(245,2,8)" rx="2" ry="2" />
<text  x="386.48" y="591.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (2,666,666 samples, 0.16%)</title><rect x="456.3" y="469" width="1.9" height="15.0" fill="rgb(251,20,54)" rx="2" ry="2" />
<text  x="459.28" y="479.5" ></text>
</g>
<g >
<title>swake_up (1,333,333 samples, 0.08%)</title><rect x="315.4" y="389" width="0.9" height="15.0" fill="rgb(230,182,1)" rx="2" ry="2" />
<text  x="318.40" y="399.5" ></text>
</g>
<g >
<title>futex_wake (33,333,325 samples, 2.00%)</title><rect x="944.2" y="517" width="23.6" height="15.0" fill="rgb(221,205,19)" rx="2" ry="2" />
<text  x="947.17" y="527.5" >f..</text>
</g>
<g >
<title>leveldb::IteratorWrapper::Next (7,999,998 samples, 0.48%)</title><rect x="266.2" y="565" width="5.7" height="15.0" fill="rgb(232,110,22)" rx="2" ry="2" />
<text  x="269.23" y="575.5" ></text>
</g>
<g >
<title>snappy::Compress (1,333,333 samples, 0.08%)</title><rect x="307.8" y="453" width="1.0" height="15.0" fill="rgb(221,171,44)" rx="2" ry="2" />
<text  x="310.84" y="463.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteBlock (51,999,987 samples, 3.12%)</title><rect x="142.4" y="517" width="36.8" height="15.0" fill="rgb(228,6,24)" rx="2" ry="2" />
<text  x="145.37" y="527.5" >lev..</text>
</g>
<g >
<title>[libunwind.so.8.0.1] (1,333,333 samples, 0.08%)</title><rect x="441.2" y="293" width="0.9" height="15.0" fill="rgb(226,26,47)" rx="2" ry="2" />
<text  x="444.15" y="303.5" ></text>
</g>
<g >
<title>file_update_time (6,666,665 samples, 0.40%)</title><rect x="767.4" y="373" width="4.7" height="15.0" fill="rgb(253,98,2)" rx="2" ry="2" />
<text  x="770.36" y="383.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (1,333,333 samples, 0.08%)</title><rect x="791.9" y="261" width="1.0" height="15.0" fill="rgb(247,194,50)" rx="2" ry="2" />
<text  x="794.94" y="271.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.08%)</title><rect x="38.4" y="485" width="0.9" height="15.0" fill="rgb(216,175,43)" rx="2" ry="2" />
<text  x="41.37" y="495.5" ></text>
</g>
<g >
<title>__gthread_once (90,666,644 samples, 5.45%)</title><rect x="937.5" y="549" width="64.3" height="15.0" fill="rgb(232,11,14)" rx="2" ry="2" />
<text  x="940.55" y="559.5" >__gthre..</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (2,666,666 samples, 0.16%)</title><rect x="982.9" y="373" width="1.9" height="15.0" fill="rgb(220,47,36)" rx="2" ry="2" />
<text  x="985.93" y="383.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2,666,666 samples, 0.16%)</title><rect x="533.8" y="453" width="1.9" height="15.0" fill="rgb(215,119,50)" rx="2" ry="2" />
<text  x="536.81" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (22,666,661 samples, 1.36%)</title><rect x="287.0" y="469" width="16.1" height="15.0" fill="rgb(243,43,31)" rx="2" ry="2" />
<text  x="290.04" y="479.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.08%)</title><rect x="1000.0" y="389" width="0.9" height="15.0" fill="rgb(214,218,37)" rx="2" ry="2" />
<text  x="1002.95" y="399.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::DecommitSpan (1,333,333 samples, 0.08%)</title><rect x="105.5" y="213" width="0.9" height="15.0" fill="rgb(238,201,39)" rx="2" ry="2" />
<text  x="108.50" y="223.5" ></text>
</g>
<g >
<title>__libc_open64 (2,666,666 samples, 0.16%)</title><rect x="1125.7" y="645" width="1.9" height="15.0" fill="rgb(248,211,35)" rx="2" ry="2" />
<text  x="1128.71" y="655.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::_Reset::~_Reset (6,666,665 samples, 0.40%)</title><rect x="1018.9" y="597" width="4.7" height="15.0" fill="rgb(251,19,47)" rx="2" ry="2" />
<text  x="1021.86" y="607.5" ></text>
</g>
<g >
<title>arch_freq_prepare_all (2,666,666 samples, 0.16%)</title><rect x="1125.7" y="469" width="1.9" height="15.0" fill="rgb(246,101,34)" rx="2" ry="2" />
<text  x="1128.71" y="479.5" ></text>
</g>
<g >
<title>leveldb::port::Mutex::Unlock (1,333,333 samples, 0.08%)</title><rect x="920.5" y="597" width="1.0" height="15.0" fill="rgb(247,212,50)" rx="2" ry="2" />
<text  x="923.53" y="607.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1,333,333 samples, 0.08%)</title><rect x="235.0" y="437" width="1.0" height="15.0" fill="rgb(213,126,33)" rx="2" ry="2" />
<text  x="238.03" y="447.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (2,666,666 samples, 0.16%)</title><rect x="323.0" y="581" width="1.9" height="15.0" fill="rgb(206,62,50)" rx="2" ry="2" />
<text  x="325.96" y="591.5" ></text>
</g>
<g >
<title>__do_softirq (2,666,666 samples, 0.16%)</title><rect x="533.8" y="405" width="1.9" height="15.0" fill="rgb(242,47,15)" rx="2" ry="2" />
<text  x="536.81" y="415.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::DecommitSpan (1,333,333 samples, 0.08%)</title><rect x="321.1" y="389" width="0.9" height="15.0" fill="rgb(244,17,3)" rx="2" ry="2" />
<text  x="324.07" y="399.5" ></text>
</g>
<g >
<title>__ext4_journal_get_write_access (1,333,333 samples, 0.08%)</title><rect x="851.5" y="261" width="1.0" height="15.0" fill="rgb(247,215,1)" rx="2" ry="2" />
<text  x="854.51" y="271.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::DoCompactionWork (1,333,333 samples, 0.08%)</title><rect x="1134.2" y="805" width="1.0" height="15.0" fill="rgb(243,43,20)" rx="2" ry="2" />
<text  x="1137.21" y="815.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (2,666,666 samples, 0.16%)</title><rect x="1138.0" y="789" width="1.9" height="15.0" fill="rgb(218,69,12)" rx="2" ry="2" />
<text  x="1141.00" y="799.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get (1,333,333 samples, 0.08%)</title><rect x="976.3" y="357" width="1.0" height="15.0" fill="rgb(239,201,36)" rx="2" ry="2" />
<text  x="979.31" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl&lt;std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.16%)</title><rect x="978.2" y="357" width="1.9" height="15.0" fill="rgb(205,155,43)" rx="2" ry="2" />
<text  x="981.21" y="367.5" ></text>
</g>
<g >
<title>link_path_walk (1,333,333 samples, 0.08%)</title><rect x="1115.3" y="597" width="0.9" height="15.0" fill="rgb(221,178,17)" rx="2" ry="2" />
<text  x="1118.30" y="607.5" ></text>
</g>
<g >
<title>handle_mm_fault (2,666,666 samples, 0.16%)</title><rect x="87.5" y="389" width="1.9" height="15.0" fill="rgb(253,1,5)" rx="2" ry="2" />
<text  x="90.53" y="399.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; &gt;::_M_init_functor (6,666,665 samples, 0.40%)</title><rect x="1005.6" y="549" width="4.8" height="15.0" fill="rgb(251,1,12)" rx="2" ry="2" />
<text  x="1008.62" y="559.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.08%)</title><rect x="1076.5" y="517" width="1.0" height="15.0" fill="rgb(237,58,35)" rx="2" ry="2" />
<text  x="1079.54" y="527.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::key (3,999,999 samples, 0.24%)</title><rect x="318.2" y="549" width="2.9" height="15.0" fill="rgb(246,93,16)" rx="2" ry="2" />
<text  x="321.24" y="559.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (2,666,666 samples, 0.16%)</title><rect x="310.7" y="373" width="1.9" height="15.0" fill="rgb(250,36,20)" rx="2" ry="2" />
<text  x="313.67" y="383.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.08%)</title><rect x="988.6" y="309" width="1.0" height="15.0" fill="rgb(247,182,28)" rx="2" ry="2" />
<text  x="991.61" y="319.5" ></text>
</g>
<g >
<title>leveldb::Arena::~Arena (1,333,333 samples, 0.08%)</title><rect x="255.8" y="549" width="1.0" height="15.0" fill="rgb(222,48,42)" rx="2" ry="2" />
<text  x="258.83" y="559.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::key (1,333,333 samples, 0.08%)</title><rect x="276.6" y="533" width="1.0" height="15.0" fill="rgb(239,191,53)" rx="2" ry="2" />
<text  x="279.63" y="543.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2,666,666 samples, 0.16%)</title><rect x="135.8" y="357" width="1.8" height="15.0" fill="rgb(239,142,5)" rx="2" ry="2" />
<text  x="138.75" y="367.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::promise (35,999,991 samples, 2.16%)</title><rect x="1035.9" y="613" width="25.5" height="15.0" fill="rgb(219,136,5)" rx="2" ry="2" />
<text  x="1038.88" y="623.5" >s..</text>
</g>
<g >
<title>set_root (1,333,333 samples, 0.08%)</title><rect x="1128.5" y="485" width="1.0" height="15.0" fill="rgb(206,106,18)" rx="2" ry="2" />
<text  x="1131.54" y="495.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Rep::Rep (2,666,666 samples, 0.16%)</title><rect x="310.7" y="517" width="1.9" height="15.0" fill="rgb(239,26,49)" rx="2" ry="2" />
<text  x="313.67" y="527.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1,333,333 samples, 0.08%)</title><rect x="322.0" y="405" width="1.0" height="15.0" fill="rgb(212,226,33)" rx="2" ry="2" />
<text  x="325.02" y="415.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (2,666,666 samples, 0.16%)</title><rect x="127.2" y="437" width="1.9" height="15.0" fill="rgb(224,66,15)" rx="2" ry="2" />
<text  x="130.24" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt;::operator* (1,333,333 samples, 0.08%)</title><rect x="410.9" y="565" width="0.9" height="15.0" fill="rgb(253,164,6)" rx="2" ry="2" />
<text  x="413.90" y="575.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.08%)</title><rect x="300.3" y="309" width="0.9" height="15.0" fill="rgb(237,42,50)" rx="2" ry="2" />
<text  x="303.27" y="319.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1,333,333 samples, 0.08%)</title><rect x="243.5" y="517" width="1.0" height="15.0" fill="rgb(214,191,42)" rx="2" ry="2" />
<text  x="246.54" y="527.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,333,333 samples, 0.08%)</title><rect x="235.0" y="453" width="1.0" height="15.0" fill="rgb(241,40,9)" rx="2" ry="2" />
<text  x="238.03" y="463.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (1,333,333 samples, 0.08%)</title><rect x="177.4" y="453" width="0.9" height="15.0" fill="rgb(209,20,10)" rx="2" ry="2" />
<text  x="180.36" y="463.5" ></text>
</g>
<g >
<title>__ext4_journal_stop (1,333,333 samples, 0.08%)</title><rect x="811.8" y="293" width="0.9" height="15.0" fill="rgb(246,15,13)" rx="2" ry="2" />
<text  x="814.79" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::begin (6,666,665 samples, 0.40%)</title><rect x="925.3" y="581" width="4.7" height="15.0" fill="rgb(217,71,0)" rx="2" ry="2" />
<text  x="928.26" y="591.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (2,666,666 samples, 0.16%)</title><rect x="1106.8" y="597" width="1.9" height="15.0" fill="rgb(237,157,41)" rx="2" ry="2" />
<text  x="1109.79" y="607.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (2,666,666 samples, 0.16%)</title><rect x="127.2" y="453" width="1.9" height="15.0" fill="rgb(252,56,9)" rx="2" ry="2" />
<text  x="130.24" y="463.5" ></text>
</g>
<g >
<title>leveldb::Status::operator= (2,666,666 samples, 0.16%)</title><rect x="717.2" y="581" width="1.9" height="15.0" fill="rgb(206,96,50)" rx="2" ry="2" />
<text  x="720.24" y="591.5" ></text>
</g>
<g >
<title>leveldb::DestroyDB (9,333,331 samples, 0.56%)</title><rect x="1115.3" y="741" width="6.6" height="15.0" fill="rgb(214,46,18)" rx="2" ry="2" />
<text  x="1118.30" y="751.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (2,666,666 samples, 0.16%)</title><rect x="986.7" y="357" width="1.9" height="15.0" fill="rgb(227,102,15)" rx="2" ry="2" />
<text  x="989.71" y="367.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.08%)</title><rect x="1113.4" y="613" width="1.0" height="15.0" fill="rgb(246,83,35)" rx="2" ry="2" />
<text  x="1116.41" y="623.5" ></text>
</g>
<g >
<title>_IO_new_file_fopen (2,666,666 samples, 0.16%)</title><rect x="1125.7" y="677" width="1.9" height="15.0" fill="rgb(246,123,44)" rx="2" ry="2" />
<text  x="1128.71" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (2,666,666 samples, 0.16%)</title><rect x="234.1" y="517" width="1.9" height="15.0" fill="rgb(212,38,49)" rx="2" ry="2" />
<text  x="237.09" y="527.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.08%)</title><rect x="10.9" y="501" width="1.0" height="15.0" fill="rgb(217,130,21)" rx="2" ry="2" />
<text  x="13.95" y="511.5" ></text>
</g>
<g >
<title>madvise_free_single_vma (1,333,333 samples, 0.08%)</title><rect x="321.1" y="277" width="0.9" height="15.0" fill="rgb(224,150,26)" rx="2" ry="2" />
<text  x="324.07" y="287.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1,333,333 samples, 0.08%)</title><rect x="1010.4" y="565" width="0.9" height="15.0" fill="rgb(220,156,41)" rx="2" ry="2" />
<text  x="1013.35" y="575.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.08%)</title><rect x="457.2" y="453" width="1.0" height="15.0" fill="rgb(241,121,38)" rx="2" ry="2" />
<text  x="460.23" y="463.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;leveldb::Status&gt;::_M_destroy (3,999,999 samples, 0.24%)</title><rect x="1083.2" y="437" width="2.8" height="15.0" fill="rgb(219,85,41)" rx="2" ry="2" />
<text  x="1086.16" y="447.5" ></text>
</g>
<g >
<title>leveldb::MutexLock::MutexLock (3,999,999 samples, 0.24%)</title><rect x="418.5" y="597" width="2.8" height="15.0" fill="rgb(218,51,33)" rx="2" ry="2" />
<text  x="421.46" y="607.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (2,666,666 samples, 0.16%)</title><rect x="319.2" y="517" width="1.9" height="15.0" fill="rgb(220,3,47)" rx="2" ry="2" />
<text  x="322.18" y="527.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (3,999,999 samples, 0.24%)</title><rect x="450.6" y="485" width="2.8" height="15.0" fill="rgb(221,162,39)" rx="2" ry="2" />
<text  x="453.61" y="495.5" ></text>
</g>
<g >
<title>leveldb::port::Snappy_Compress (1,333,333 samples, 0.08%)</title><rect x="307.8" y="485" width="1.0" height="15.0" fill="rgb(251,166,47)" rx="2" ry="2" />
<text  x="310.84" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1,333,333 samples, 0.08%)</title><rect x="183.0" y="517" width="1.0" height="15.0" fill="rgb(244,128,31)" rx="2" ry="2" />
<text  x="186.03" y="527.5" ></text>
</g>
<g >
<title>leveldb::port::Mutex::Lock (1,333,333 samples, 0.08%)</title><rect x="919.6" y="597" width="0.9" height="15.0" fill="rgb(205,73,35)" rx="2" ry="2" />
<text  x="922.58" y="607.5" ></text>
</g>
<g >
<title>leveldb::Random::Next (1,333,333 samples, 0.08%)</title><rect x="687.9" y="485" width="1.0" height="15.0" fill="rgb(223,27,44)" rx="2" ry="2" />
<text  x="690.93" y="495.5" ></text>
</g>
<g >
<title>file_free_rcu (1,333,333 samples, 0.08%)</title><rect x="963.1" y="325" width="0.9" height="15.0" fill="rgb(210,191,19)" rx="2" ry="2" />
<text  x="966.08" y="335.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed64 (2,666,666 samples, 0.16%)</title><rect x="705.9" y="565" width="1.9" height="15.0" fill="rgb(249,73,52)" rx="2" ry="2" />
<text  x="708.90" y="575.5" ></text>
</g>
<g >
<title>__GI___clone (1,550,666,279 samples, 93.19%)</title><rect x="10.9" y="805" width="1099.7" height="15.0" fill="rgb(237,106,23)" rx="2" ry="2" />
<text  x="13.95" y="815.5" >__GI___clone</text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (1,333,333 samples, 0.08%)</title><rect x="1111.5" y="677" width="1.0" height="15.0" fill="rgb(237,215,8)" rx="2" ry="2" />
<text  x="1114.52" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (2,666,666 samples, 0.16%)</title><rect x="234.1" y="469" width="1.9" height="15.0" fill="rgb(226,10,51)" rx="2" ry="2" />
<text  x="237.09" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2,666,666 samples, 0.16%)</title><rect x="345.7" y="485" width="1.8" height="15.0" fill="rgb(230,7,0)" rx="2" ry="2" />
<text  x="348.66" y="495.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32 (10,666,664 samples, 0.64%)</title><rect x="692.7" y="549" width="7.5" height="15.0" fill="rgb(214,161,19)" rx="2" ry="2" />
<text  x="695.66" y="559.5" ></text>
</g>
<g >
<title>__do_page_fault (11,999,997 samples, 0.72%)</title><rect x="202.9" y="341" width="8.5" height="15.0" fill="rgb(217,128,39)" rx="2" ry="2" />
<text  x="205.88" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_S_cget (1,333,333 samples, 0.08%)</title><rect x="317.3" y="469" width="0.9" height="15.0" fill="rgb(236,102,7)" rx="2" ry="2" />
<text  x="320.29" y="479.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (1,333,333 samples, 0.08%)</title><rect x="276.6" y="501" width="1.0" height="15.0" fill="rgb(233,177,23)" rx="2" ry="2" />
<text  x="279.63" y="511.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.08%)</title><rect x="333.4" y="485" width="0.9" height="15.0" fill="rgb(253,153,23)" rx="2" ry="2" />
<text  x="336.37" y="495.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseListToSpans (1,333,333 samples, 0.08%)</title><rect x="1121.9" y="597" width="1.0" height="15.0" fill="rgb(207,68,30)" rx="2" ry="2" />
<text  x="1124.92" y="607.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (1,333,333 samples, 0.08%)</title><rect x="108.3" y="437" width="1.0" height="15.0" fill="rgb(230,72,16)" rx="2" ry="2" />
<text  x="111.33" y="447.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.08%)</title><rect x="812.7" y="213" width="1.0" height="15.0" fill="rgb(226,173,4)" rx="2" ry="2" />
<text  x="815.74" y="223.5" ></text>
</g>
<g >
<title>[libtcmalloc.so.4.3.0] (1,333,333 samples, 0.08%)</title><rect x="1111.5" y="613" width="1.0" height="15.0" fill="rgb(214,177,35)" rx="2" ry="2" />
<text  x="1114.52" y="623.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (17,333,329 samples, 1.04%)</title><rect x="639.7" y="437" width="12.3" height="15.0" fill="rgb(251,63,23)" rx="2" ry="2" />
<text  x="642.71" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt;::allocate (3,999,999 samples, 0.24%)</title><rect x="114.0" y="437" width="2.8" height="15.0" fill="rgb(234,90,22)" rx="2" ry="2" />
<text  x="117.01" y="447.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.08%)</title><rect x="1127.6" y="501" width="0.9" height="15.0" fill="rgb(230,171,3)" rx="2" ry="2" />
<text  x="1130.60" y="511.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::DoWrite (1,057,333,069 samples, 63.54%)</title><rect x="360.8" y="645" width="749.8" height="15.0" fill="rgb(237,223,43)" rx="2" ry="2" />
<text  x="363.79" y="655.5" >leveldb::Benchmark::DoWrite</text>
</g>
<g >
<title>vfs_read (1,333,333 samples, 0.08%)</title><rect x="1124.8" y="549" width="0.9" height="15.0" fill="rgb(247,122,34)" rx="2" ry="2" />
<text  x="1127.76" y="559.5" ></text>
</g>
<g >
<title>__x64_sys_clone (1,333,333 samples, 0.08%)</title><rect x="10.0" y="725" width="0.9" height="15.0" fill="rgb(252,150,36)" rx="2" ry="2" />
<text  x="13.00" y="735.5" ></text>
</g>
<g >
<title>GetStackTrace (1,333,333 samples, 0.08%)</title><rect x="441.2" y="373" width="0.9" height="15.0" fill="rgb(216,141,21)" rx="2" ry="2" />
<text  x="444.15" y="383.5" ></text>
</g>
<g >
<title>generic_write_end (66,666,650 samples, 4.01%)</title><rect x="806.1" y="341" width="47.3" height="15.0" fill="rgb(210,82,5)" rx="2" ry="2" />
<text  x="809.12" y="351.5" >gene..</text>
</g>
<g >
<title>walk_component (1,333,333 samples, 0.08%)</title><rect x="1115.3" y="581" width="0.9" height="15.0" fill="rgb(216,127,44)" rx="2" ry="2" />
<text  x="1118.30" y="591.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;*, unsigned long&gt; (1,333,333 samples, 0.08%)</title><rect x="1127.6" y="645" width="0.9" height="15.0" fill="rgb(228,120,18)" rx="2" ry="2" />
<text  x="1130.60" y="655.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;unsigned long, char&gt; (2,666,666 samples, 0.16%)</title><rect x="310.7" y="405" width="1.9" height="15.0" fill="rgb(211,135,1)" rx="2" ry="2" />
<text  x="313.67" y="415.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::SetCount (1,333,333 samples, 0.08%)</title><rect x="1157.9" y="805" width="0.9" height="15.0" fill="rgb(208,133,26)" rx="2" ry="2" />
<text  x="1160.85" y="815.5" ></text>
</g>
<g >
<title>clear_page_erms (1,333,333 samples, 0.08%)</title><rect x="180.2" y="325" width="0.9" height="15.0" fill="rgb(251,171,46)" rx="2" ry="2" />
<text  x="183.19" y="335.5" ></text>
</g>
<g >
<title>page_fault (3,999,999 samples, 0.24%)</title><rect x="393.9" y="565" width="2.8" height="15.0" fill="rgb(217,146,39)" rx="2" ry="2" />
<text  x="396.88" y="575.5" ></text>
</g>
<g >
<title>read_pages (2,666,666 samples, 0.16%)</title><rect x="1164.5" y="613" width="1.9" height="15.0" fill="rgb(236,17,21)" rx="2" ry="2" />
<text  x="1167.47" y="623.5" ></text>
</g>
<g >
<title>__vfs_write (155,999,961 samples, 9.38%)</title><rect x="754.1" y="421" width="110.6" height="15.0" fill="rgb(222,16,47)" rx="2" ry="2" />
<text  x="757.12" y="431.5" >__vfs_write</text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadNodeMain (493,333,210 samples, 29.65%)</title><rect x="10.9" y="661" width="349.9" height="15.0" fill="rgb(252,37,3)" rx="2" ry="2" />
<text  x="13.95" y="671.5" >leveldb::(anonymous namespace)::PosixEnv::Backg..</text>
</g>
<g >
<title>page_cache_async_readahead (2,666,666 samples, 0.16%)</title><rect x="1164.5" y="661" width="1.9" height="15.0" fill="rgb(235,95,39)" rx="2" ry="2" />
<text  x="1167.47" y="671.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.08%)</title><rect x="985.8" y="309" width="0.9" height="15.0" fill="rgb(235,52,36)" rx="2" ry="2" />
<text  x="988.77" y="319.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1,333,333 samples, 0.08%)</title><rect x="1151.2" y="805" width="1.0" height="15.0" fill="rgb(207,215,41)" rx="2" ry="2" />
<text  x="1154.23" y="815.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; (1,333,333 samples, 0.08%)</title><rect x="122.5" y="453" width="1.0" height="15.0" fill="rgb(206,124,34)" rx="2" ry="2" />
<text  x="125.52" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::push_back (5,333,332 samples, 0.32%)</title><rect x="189.6" y="533" width="3.8" height="15.0" fill="rgb(208,218,16)" rx="2" ry="2" />
<text  x="192.65" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2,666,666 samples, 0.16%)</title><rect x="335.3" y="549" width="1.8" height="15.0" fill="rgb(237,113,25)" rx="2" ry="2" />
<text  x="338.26" y="559.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (1,333,333 samples, 0.08%)</title><rect x="276.6" y="517" width="1.0" height="15.0" fill="rgb(238,65,23)" rx="2" ry="2" />
<text  x="279.63" y="527.5" ></text>
</g>
<g >
<title>balance_dirty_pages_ratelimited (3,999,999 samples, 0.24%)</title><rect x="772.1" y="357" width="2.8" height="15.0" fill="rgb(239,150,30)" rx="2" ry="2" />
<text  x="775.08" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator[] (2,666,666 samples, 0.16%)</title><rect x="710.6" y="581" width="1.9" height="15.0" fill="rgb(222,110,33)" rx="2" ry="2" />
<text  x="713.62" y="591.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::Recover (2,666,666 samples, 0.16%)</title><rect x="1121.9" y="709" width="1.9" height="15.0" fill="rgb(218,202,21)" rx="2" ry="2" />
<text  x="1124.92" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (2,666,666 samples, 0.16%)</title><rect x="232.2" y="501" width="1.9" height="15.0" fill="rgb(235,200,45)" rx="2" ry="2" />
<text  x="235.20" y="511.5" ></text>
</g>
<g >
<title>__find_get_block (1,333,333 samples, 0.08%)</title><rect x="848.7" y="229" width="0.9" height="15.0" fill="rgb(218,151,18)" rx="2" ry="2" />
<text  x="851.67" y="239.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1,333,333 samples, 0.08%)</title><rect x="36.5" y="501" width="0.9" height="15.0" fill="rgb(210,121,50)" rx="2" ry="2" />
<text  x="39.47" y="511.5" ></text>
</g>
<g >
<title>leveldb::EncodeFixed64 (3,999,999 samples, 0.24%)</title><rect x="442.1" y="533" width="2.8" height="15.0" fill="rgb(231,156,4)" rx="2" ry="2" />
<text  x="445.10" y="543.5" ></text>
</g>
<g >
<title>cpumask_next_and (1,333,333 samples, 0.08%)</title><rect x="812.7" y="149" width="1.0" height="15.0" fill="rgb(245,32,6)" rx="2" ry="2" />
<text  x="815.74" y="159.5" ></text>
</g>
<g >
<title>page_counter_uncharge (1,333,333 samples, 0.08%)</title><rect x="1118.1" y="485" width="1.0" height="15.0" fill="rgb(206,192,47)" rx="2" ry="2" />
<text  x="1121.14" y="495.5" ></text>
</g>
<g >
<title>_ULx86_64_init_local (1,333,333 samples, 0.08%)</title><rect x="1111.5" y="597" width="1.0" height="15.0" fill="rgb(249,102,24)" rx="2" ry="2" />
<text  x="1114.52" y="607.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,333,333 samples, 0.08%)</title><rect x="180.2" y="373" width="0.9" height="15.0" fill="rgb(213,201,52)" rx="2" ry="2" />
<text  x="183.19" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_addr (1,333,333 samples, 0.08%)</title><rect x="345.7" y="389" width="0.9" height="15.0" fill="rgb(241,8,31)" rx="2" ry="2" />
<text  x="348.66" y="399.5" ></text>
</g>
<g >
<title>drop_buffers (1,333,333 samples, 0.08%)</title><rect x="12.8" y="261" width="1.0" height="15.0" fill="rgb(224,192,25)" rx="2" ry="2" />
<text  x="15.84" y="271.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Add (43,999,989 samples, 2.64%)</title><rect x="278.5" y="533" width="31.2" height="15.0" fill="rgb(235,10,25)" rx="2" ry="2" />
<text  x="281.53" y="543.5" >le..</text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (6,666,665 samples, 0.40%)</title><rect x="453.4" y="485" width="4.8" height="15.0" fill="rgb(236,124,54)" rx="2" ry="2" />
<text  x="456.45" y="495.5" ></text>
</g>
<g >
<title>leveldb::PutVarint32 (2,666,666 samples, 0.16%)</title><rect x="1104.9" y="597" width="1.9" height="15.0" fill="rgb(231,118,48)" rx="2" ry="2" />
<text  x="1107.90" y="607.5" ></text>
</g>
<g >
<title>ext4_mark_iloc_dirty (46,666,655 samples, 2.80%)</title><rect x="813.7" y="277" width="33.1" height="15.0" fill="rgb(218,23,24)" rx="2" ry="2" />
<text  x="816.69" y="287.5" >ex..</text>
</g>
<g >
<title>std::__invoke&lt;void  (1,550,666,279 samples, 93.19%)</title><rect x="10.9" y="709" width="1099.7" height="15.0" fill="rgb(233,225,5)" rx="2" ry="2" />
<text  x="13.95" y="719.5" >std::__invoke&lt;void </text>
</g>
<g >
<title>get_page_from_freelist (1,333,333 samples, 0.08%)</title><rect x="310.7" y="245" width="0.9" height="15.0" fill="rgb(231,83,51)" rx="2" ry="2" />
<text  x="313.67" y="255.5" ></text>
</g>
<g >
<title>_ULx86_64_dwarf_search_unwind_table (1,333,333 samples, 0.08%)</title><rect x="441.2" y="261" width="0.9" height="15.0" fill="rgb(237,187,3)" rx="2" ry="2" />
<text  x="444.15" y="271.5" ></text>
</g>
<g >
<title>[libunwind.so.8.0.1] (1,333,333 samples, 0.08%)</title><rect x="1111.5" y="581" width="1.0" height="15.0" fill="rgb(235,53,42)" rx="2" ry="2" />
<text  x="1114.52" y="591.5" ></text>
</g>
<g >
<title>unmap_page_range (1,333,333 samples, 0.08%)</title><rect x="309.7" y="341" width="1.0" height="15.0" fill="rgb(226,127,0)" rx="2" ry="2" />
<text  x="312.73" y="351.5" ></text>
</g>
<g >
<title>ext4_filemap_fault (2,666,666 samples, 0.16%)</title><rect x="1164.5" y="693" width="1.9" height="15.0" fill="rgb(235,72,5)" rx="2" ry="2" />
<text  x="1167.47" y="703.5" ></text>
</g>
<g >
<title>std::swap&lt;char const*&gt; (2,666,666 samples, 0.16%)</title><rect x="425.1" y="581" width="1.9" height="15.0" fill="rgb(235,187,33)" rx="2" ry="2" />
<text  x="428.08" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (2,666,666 samples, 0.16%)</title><rect x="1185.3" y="805" width="1.9" height="15.0" fill="rgb(226,213,46)" rx="2" ry="2" />
<text  x="1188.27" y="815.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::AllocLarge (1,333,333 samples, 0.08%)</title><rect x="182.1" y="421" width="0.9" height="15.0" fill="rgb(236,99,25)" rx="2" ry="2" />
<text  x="185.08" y="431.5" ></text>
</g>
<g >
<title>path_init (1,333,333 samples, 0.08%)</title><rect x="1128.5" y="501" width="1.0" height="15.0" fill="rgb(223,5,45)" rx="2" ry="2" />
<text  x="1131.54" y="511.5" ></text>
</g>
<g >
<title>elf_dynamic_do_Rela (2,666,666 samples, 0.16%)</title><rect x="1129.5" y="709" width="1.9" height="15.0" fill="rgb(215,9,4)" rx="2" ry="2" />
<text  x="1132.49" y="719.5" ></text>
</g>
<g >
<title>__walk_page_range (1,333,333 samples, 0.08%)</title><rect x="255.8" y="245" width="1.0" height="15.0" fill="rgb(219,57,14)" rx="2" ry="2" />
<text  x="258.83" y="255.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;char*, unsigned long, char&gt; (25,333,327 samples, 1.52%)</title><rect x="194.4" y="485" width="17.9" height="15.0" fill="rgb(217,203,15)" rx="2" ry="2" />
<text  x="197.38" y="495.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (49,333,321 samples, 2.96%)</title><rect x="535.7" y="453" width="35.0" height="15.0" fill="rgb(232,80,26)" rx="2" ry="2" />
<text  x="538.71" y="463.5" >le..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.08%)</title><rect x="106.4" y="421" width="1.0" height="15.0" fill="rgb(220,220,17)" rx="2" ry="2" />
<text  x="109.44" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.16%)</title><rect x="1058.6" y="549" width="1.9" height="15.0" fill="rgb(241,42,23)" rx="2" ry="2" />
<text  x="1061.57" y="559.5" ></text>
</g>
<g >
<title>leveldb::Block::Block (1,333,333 samples, 0.08%)</title><rect x="268.1" y="485" width="1.0" height="15.0" fill="rgb(223,196,22)" rx="2" ry="2" />
<text  x="271.12" y="495.5" ></text>
</g>
<g >
<title>leveldb::Slice::remove_prefix (2,666,666 samples, 0.16%)</title><rect x="700.2" y="549" width="1.9" height="15.0" fill="rgb(253,174,44)" rx="2" ry="2" />
<text  x="703.22" y="559.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;char*, unsigned long&gt; (25,333,327 samples, 1.52%)</title><rect x="194.4" y="469" width="17.9" height="15.0" fill="rgb(237,25,21)" rx="2" ry="2" />
<text  x="197.38" y="479.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="307.8" y="405" width="1.0" height="15.0" fill="rgb(251,116,9)" rx="2" ry="2" />
<text  x="310.84" y="415.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (5,333,332 samples, 0.32%)</title><rect x="340.9" y="549" width="3.8" height="15.0" fill="rgb(218,99,0)" rx="2" ry="2" />
<text  x="343.93" y="559.5" ></text>
</g>
<g >
<title>do_page_fault (2,666,666 samples, 0.16%)</title><rect x="310.7" y="341" width="1.9" height="15.0" fill="rgb(249,134,1)" rx="2" ry="2" />
<text  x="313.67" y="351.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::__basic_future (11,999,997 samples, 0.72%)</title><rect x="1027.4" y="581" width="8.5" height="15.0" fill="rgb(215,20,36)" rx="2" ry="2" />
<text  x="1030.37" y="591.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.08%)</title><rect x="1128.5" y="613" width="1.0" height="15.0" fill="rgb(236,189,14)" rx="2" ry="2" />
<text  x="1131.54" y="623.5" ></text>
</g>
<g >
<title>unmap_single_vma (1,333,333 samples, 0.08%)</title><rect x="309.7" y="357" width="1.0" height="15.0" fill="rgb(215,197,12)" rx="2" ry="2" />
<text  x="312.73" y="367.5" ></text>
</g>
<g >
<title>start_this_handle (3,999,999 samples, 0.24%)</title><rect x="781.5" y="309" width="2.9" height="15.0" fill="rgb(249,46,2)" rx="2" ry="2" />
<text  x="784.54" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,666,666 samples, 0.16%)</title><rect x="11.9" y="517" width="1.9" height="15.0" fill="rgb(214,120,49)" rx="2" ry="2" />
<text  x="14.89" y="527.5" ></text>
</g>
<g >
<title>rebalance_domains (1,333,333 samples, 0.08%)</title><rect x="812.7" y="181" width="1.0" height="15.0" fill="rgb(214,49,36)" rx="2" ry="2" />
<text  x="815.74" y="191.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (1,333,333 samples, 0.08%)</title><rect x="115.9" y="357" width="0.9" height="15.0" fill="rgb(240,133,8)" rx="2" ry="2" />
<text  x="118.90" y="367.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::status (1,333,333 samples, 0.08%)</title><rect x="357.9" y="533" width="1.0" height="15.0" fill="rgb(254,2,22)" rx="2" ry="2" />
<text  x="360.95" y="543.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::~promise (38,666,657 samples, 2.32%)</title><rect x="1061.4" y="613" width="27.4" height="15.0" fill="rgb(244,149,39)" rx="2" ry="2" />
<text  x="1064.41" y="623.5" >s..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (2,666,666 samples, 0.16%)</title><rect x="325.8" y="533" width="1.9" height="15.0" fill="rgb(251,185,49)" rx="2" ry="2" />
<text  x="328.80" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (1,333,333 samples, 0.08%)</title><rect x="343.8" y="437" width="0.9" height="15.0" fill="rgb(220,196,49)" rx="2" ry="2" />
<text  x="346.77" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, false, true&gt;::operator (1,333,333 samples, 0.08%)</title><rect x="1173.9" y="805" width="1.0" height="15.0" fill="rgb(223,116,46)" rx="2" ry="2" />
<text  x="1176.93" y="815.5" ></text>
</g>
<g >
<title>snappy::RawCompress (27,999,993 samples, 1.68%)</title><rect x="158.4" y="485" width="19.9" height="15.0" fill="rgb(229,149,51)" rx="2" ry="2" />
<text  x="161.45" y="495.5" ></text>
</g>
<g >
<title>jbd2_journal_stop (1,333,333 samples, 0.08%)</title><rect x="852.5" y="293" width="0.9" height="15.0" fill="rgb(222,120,38)" rx="2" ry="2" />
<text  x="855.45" y="303.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (22,666,661 samples, 1.36%)</title><rect x="212.3" y="549" width="16.1" height="15.0" fill="rgb(253,4,19)" rx="2" ry="2" />
<text  x="215.34" y="559.5" ></text>
</g>
<g >
<title>std::move&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (1,333,333 samples, 0.08%)</title><rect x="241.7" y="533" width="0.9" height="15.0" fill="rgb(223,93,53)" rx="2" ry="2" />
<text  x="244.65" y="543.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (1,333,333 samples, 0.08%)</title><rect x="128.2" y="405" width="0.9" height="15.0" fill="rgb(242,16,31)" rx="2" ry="2" />
<text  x="131.19" y="415.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.08%)</title><rect x="619.9" y="357" width="0.9" height="15.0" fill="rgb(211,117,10)" rx="2" ry="2" />
<text  x="622.86" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1,333,333 samples, 0.08%)</title><rect x="324.9" y="533" width="0.9" height="15.0" fill="rgb(223,106,3)" rx="2" ry="2" />
<text  x="327.86" y="543.5" ></text>
</g>
<g >
<title>leveldb::MutexLock::~MutexLock (1,333,333 samples, 0.08%)</title><rect x="421.3" y="597" width="0.9" height="15.0" fill="rgb(232,95,40)" rx="2" ry="2" />
<text  x="424.30" y="607.5" ></text>
</g>
<g >
<title>ext4_releasepage (1,333,333 samples, 0.08%)</title><rect x="12.8" y="309" width="1.0" height="15.0" fill="rgb(252,101,44)" rx="2" ry="2" />
<text  x="15.84" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (22,666,661 samples, 1.36%)</title><rect x="212.3" y="533" width="16.1" height="15.0" fill="rgb(241,198,53)" rx="2" ry="2" />
<text  x="215.34" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.08%)</title><rect x="1052.9" y="501" width="0.9" height="15.0" fill="rgb(228,174,23)" rx="2" ry="2" />
<text  x="1055.90" y="511.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::status (1,333,333 samples, 0.08%)</title><rect x="187.8" y="517" width="0.9" height="15.0" fill="rgb(213,86,53)" rx="2" ry="2" />
<text  x="190.76" y="527.5" ></text>
</g>
<g >
<title>get_futex_key_refs.isra.16 (1,333,333 samples, 0.08%)</title><rect x="963.1" y="421" width="0.9" height="15.0" fill="rgb(211,185,27)" rx="2" ry="2" />
<text  x="966.08" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::resize (2,666,666 samples, 0.16%)</title><rect x="310.7" y="501" width="1.9" height="15.0" fill="rgb(214,47,11)" rx="2" ry="2" />
<text  x="313.67" y="511.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::TableBuilder (25,333,327 samples, 1.52%)</title><rect x="194.4" y="549" width="17.9" height="15.0" fill="rgb(252,17,18)" rx="2" ry="2" />
<text  x="197.38" y="559.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1,333,333 samples, 0.08%)</title><rect x="1114.4" y="693" width="0.9" height="15.0" fill="rgb(218,211,5)" rx="2" ry="2" />
<text  x="1117.36" y="703.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.08%)</title><rect x="309.7" y="469" width="1.0" height="15.0" fill="rgb(232,195,53)" rx="2" ry="2" />
<text  x="312.73" y="479.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (7,999,998 samples, 0.48%)</title><rect x="676.6" y="469" width="5.7" height="15.0" fill="rgb(244,6,50)" rx="2" ry="2" />
<text  x="679.59" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (65,333,317 samples, 3.93%)</title><rect x="77.1" y="485" width="46.4" height="15.0" fill="rgb(217,135,13)" rx="2" ry="2" />
<text  x="80.13" y="495.5" >std:..</text>
</g>
<g >
<title>rebalance_domains (1,333,333 samples, 0.08%)</title><rect x="962.1" y="325" width="1.0" height="15.0" fill="rgb(214,77,50)" rx="2" ry="2" />
<text  x="965.13" y="335.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.08%)</title><rect x="105.5" y="149" width="0.9" height="15.0" fill="rgb(253,93,27)" rx="2" ry="2" />
<text  x="108.50" y="159.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::Add (10,666,664 samples, 0.64%)</title><rect x="278.5" y="517" width="7.6" height="15.0" fill="rgb(249,152,13)" rx="2" ry="2" />
<text  x="281.53" y="527.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (2,666,666 samples, 0.16%)</title><rect x="135.8" y="373" width="1.8" height="15.0" fill="rgb(237,106,45)" rx="2" ry="2" />
<text  x="138.75" y="383.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::_M_head (1,333,333 samples, 0.08%)</title><rect x="1059.5" y="517" width="1.0" height="15.0" fill="rgb(242,10,23)" rx="2" ry="2" />
<text  x="1062.52" y="527.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseListToSpans (1,333,333 samples, 0.08%)</title><rect x="255.8" y="469" width="1.0" height="15.0" fill="rgb(238,67,31)" rx="2" ry="2" />
<text  x="258.83" y="479.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (10,666,664 samples, 0.64%)</title><rect x="258.7" y="565" width="7.5" height="15.0" fill="rgb(237,63,9)" rx="2" ry="2" />
<text  x="261.67" y="575.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1,333,333 samples, 0.08%)</title><rect x="1131.4" y="805" width="0.9" height="15.0" fill="rgb(205,46,42)" rx="2" ry="2" />
<text  x="1134.38" y="815.5" ></text>
</g>
<g >
<title>memmove_movnt_avx512f_clwb (10,666,664 samples, 0.64%)</title><rect x="1158.8" y="805" width="7.6" height="15.0" fill="rgb(213,168,8)" rx="2" ry="2" />
<text  x="1161.80" y="815.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt; &gt;::destroy&lt;std::__future_base::_State_baseV2&gt; (1,333,333 samples, 0.08%)</title><rect x="1178.7" y="805" width="0.9" height="15.0" fill="rgb(233,98,27)" rx="2" ry="2" />
<text  x="1181.65" y="815.5" ></text>
</g>
<g >
<title>leveldb::port::Snappy_Compress (30,666,659 samples, 1.84%)</title><rect x="157.5" y="501" width="21.7" height="15.0" fill="rgb(223,158,54)" rx="2" ry="2" />
<text  x="160.50" y="511.5" >l..</text>
</g>
<g >
<title>hash_futex (2,666,666 samples, 0.16%)</title><rect x="965.0" y="437" width="1.9" height="15.0" fill="rgb(221,126,50)" rx="2" ry="2" />
<text  x="967.97" y="447.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_S_check&lt;std::__future_base::_State_baseV2&gt; (1,333,333 samples, 0.08%)</title><rect x="1174.9" y="789" width="0.9" height="15.0" fill="rgb(253,58,48)" rx="2" ry="2" />
<text  x="1177.87" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (2,666,666 samples, 0.16%)</title><rect x="79.0" y="453" width="1.9" height="15.0" fill="rgb(211,191,31)" rx="2" ry="2" />
<text  x="82.02" y="463.5" ></text>
</g>
<g >
<title>leveldb::Status::~Status (1,333,333 samples, 0.08%)</title><rect x="878.0" y="565" width="0.9" height="15.0" fill="rgb(226,127,46)" rx="2" ry="2" />
<text  x="880.98" y="575.5" ></text>
</g>
<g >
<title>TCMalloc_SystemRelease (1,333,333 samples, 0.08%)</title><rect x="255.8" y="389" width="1.0" height="15.0" fill="rgb(250,35,42)" rx="2" ry="2" />
<text  x="258.83" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (9,333,331 samples, 0.56%)</title><rect x="220.8" y="485" width="6.7" height="15.0" fill="rgb(220,191,3)" rx="2" ry="2" />
<text  x="223.85" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (2,666,666 samples, 0.16%)</title><rect x="1058.6" y="565" width="1.9" height="15.0" fill="rgb(240,80,26)" rx="2" ry="2" />
<text  x="1061.57" y="575.5" ></text>
</g>
<g >
<title>leveldb::Status::Status (2,666,666 samples, 0.16%)</title><rect x="722.9" y="533" width="1.9" height="15.0" fill="rgb(238,216,20)" rx="2" ry="2" />
<text  x="725.92" y="543.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; &gt;::_M_manager (1,333,333 samples, 0.08%)</title><rect x="1010.4" y="549" width="0.9" height="15.0" fill="rgb(224,103,44)" rx="2" ry="2" />
<text  x="1013.35" y="559.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.08%)</title><rect x="104.6" y="341" width="0.9" height="15.0" fill="rgb(234,226,19)" rx="2" ry="2" />
<text  x="107.55" y="351.5" ></text>
</g>
<g >
<title>std::__fill_a&lt;char&gt; (1,333,333 samples, 0.08%)</title><rect x="322.0" y="421" width="1.0" height="15.0" fill="rgb(221,170,27)" rx="2" ry="2" />
<text  x="325.02" y="431.5" ></text>
</g>
<g >
<title>page_fault (3,999,999 samples, 0.24%)</title><rect x="179.2" y="437" width="2.9" height="15.0" fill="rgb(230,212,54)" rx="2" ry="2" />
<text  x="182.25" y="447.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (5,333,332 samples, 0.32%)</title><rect x="179.2" y="501" width="3.8" height="15.0" fill="rgb(250,31,23)" rx="2" ry="2" />
<text  x="182.25" y="511.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (5,333,332 samples, 0.32%)</title><rect x="179.2" y="469" width="3.8" height="15.0" fill="rgb(229,222,5)" rx="2" ry="2" />
<text  x="182.25" y="479.5" ></text>
</g>
<g >
<title>__GI__IO_getline_info (1,333,333 samples, 0.08%)</title><rect x="1124.8" y="677" width="0.9" height="15.0" fill="rgb(220,222,39)" rx="2" ry="2" />
<text  x="1127.76" y="687.5" ></text>
</g>
<g >
<title>leveldb::ReadBlock (1,333,333 samples, 0.08%)</title><rect x="269.1" y="485" width="0.9" height="15.0" fill="rgb(205,65,17)" rx="2" ry="2" />
<text  x="272.07" y="495.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,666,666 samples, 0.16%)</title><rect x="1125.7" y="613" width="1.9" height="15.0" fill="rgb(231,179,35)" rx="2" ry="2" />
<text  x="1128.71" y="623.5" ></text>
</g>
<g >
<title>__x64_sys_unlink (2,666,666 samples, 0.16%)</title><rect x="11.9" y="501" width="1.9" height="15.0" fill="rgb(248,76,26)" rx="2" ry="2" />
<text  x="14.89" y="511.5" ></text>
</g>
<g >
<title>util_unmap (1,333,333 samples, 0.08%)</title><rect x="309.7" y="501" width="1.0" height="15.0" fill="rgb(247,11,40)" rx="2" ry="2" />
<text  x="312.73" y="511.5" ></text>
</g>
<g >
<title>[libunwind.so.8.0.1] (1,333,333 samples, 0.08%)</title><rect x="441.2" y="309" width="0.9" height="15.0" fill="rgb(244,227,20)" rx="2" ry="2" />
<text  x="444.15" y="319.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (1,333,333 samples, 0.08%)</title><rect x="1140.8" y="805" width="1.0" height="15.0" fill="rgb(229,221,4)" rx="2" ry="2" />
<text  x="1143.83" y="815.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl (3,999,999 samples, 0.24%)</title><rect x="1050.1" y="437" width="2.8" height="15.0" fill="rgb(246,159,22)" rx="2" ry="2" />
<text  x="1053.06" y="447.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl (1,333,333 samples, 0.08%)</title><rect x="1052.0" y="405" width="0.9" height="15.0" fill="rgb(235,201,8)" rx="2" ry="2" />
<text  x="1054.96" y="415.5" ></text>
</g>
<g >
<title>find_next_and_bit (1,333,333 samples, 0.08%)</title><rect x="962.1" y="293" width="1.0" height="15.0" fill="rgb(247,156,11)" rx="2" ry="2" />
<text  x="965.13" y="303.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (6,666,665 samples, 0.40%)</title><rect x="652.0" y="437" width="4.7" height="15.0" fill="rgb(212,84,36)" rx="2" ry="2" />
<text  x="655.00" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;, std::allocator&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt; &gt; &gt;::_M_default_append (1,333,333 samples, 0.08%)</title><rect x="1127.6" y="677" width="0.9" height="15.0" fill="rgb(243,176,40)" rx="2" ry="2" />
<text  x="1130.60" y="687.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;*, unsigned long&gt; (1,333,333 samples, 0.08%)</title><rect x="1127.6" y="629" width="0.9" height="15.0" fill="rgb(248,208,11)" rx="2" ry="2" />
<text  x="1130.60" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5,333,332 samples, 0.32%)</title><rect x="340.9" y="485" width="3.8" height="15.0" fill="rgb(214,111,36)" rx="2" ry="2" />
<text  x="343.93" y="495.5" ></text>
</g>
<g >
<title>leveldb::test::RandomString (11,999,997 samples, 0.72%)</title><rect x="385.4" y="597" width="8.5" height="15.0" fill="rgb(237,228,54)" rx="2" ry="2" />
<text  x="388.37" y="607.5" ></text>
</g>
<g >
<title>path_openat (2,666,666 samples, 0.16%)</title><rect x="1125.7" y="549" width="1.9" height="15.0" fill="rgb(221,149,43)" rx="2" ry="2" />
<text  x="1128.71" y="559.5" ></text>
</g>
<g >
<title>add_to_page_cache_lru (3,999,999 samples, 0.24%)</title><rect x="790.0" y="309" width="2.9" height="15.0" fill="rgb(246,48,35)" rx="2" ry="2" />
<text  x="793.05" y="319.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.08%)</title><rect x="984.8" y="373" width="1.0" height="15.0" fill="rgb(232,181,15)" rx="2" ry="2" />
<text  x="987.82" y="383.5" ></text>
</g>
<g >
<title>irq_exit (2,666,666 samples, 0.16%)</title><rect x="533.8" y="421" width="1.9" height="15.0" fill="rgb(234,66,9)" rx="2" ry="2" />
<text  x="536.81" y="431.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.08%)</title><rect x="875.1" y="501" width="1.0" height="15.0" fill="rgb(205,170,54)" rx="2" ry="2" />
<text  x="878.14" y="511.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.08%)</title><rect x="440.2" y="357" width="1.0" height="15.0" fill="rgb(205,27,1)" rx="2" ry="2" />
<text  x="443.21" y="367.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_set_result (94,666,643 samples, 5.69%)</title><rect x="934.7" y="581" width="67.1" height="15.0" fill="rgb(221,2,26)" rx="2" ry="2" />
<text  x="937.71" y="591.5" >std::__..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (2,666,666 samples, 0.16%)</title><rect x="288.9" y="405" width="1.9" height="15.0" fill="rgb(239,106,20)" rx="2" ry="2" />
<text  x="291.93" y="415.5" ></text>
</g>
<g >
<title>_dl_relocate_object (2,666,666 samples, 0.16%)</title><rect x="1129.5" y="725" width="1.9" height="15.0" fill="rgb(234,41,32)" rx="2" ry="2" />
<text  x="1132.49" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get_deleter (1,333,333 samples, 0.08%)</title><rect x="985.8" y="373" width="0.9" height="15.0" fill="rgb(244,86,48)" rx="2" ry="2" />
<text  x="988.77" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (1,333,333 samples, 0.08%)</title><rect x="79.0" y="437" width="1.0" height="15.0" fill="rgb(232,78,11)" rx="2" ry="2" />
<text  x="82.02" y="447.5" ></text>
</g>
<g >
<title>jbd2__journal_start (9,333,331 samples, 0.56%)</title><rect x="777.8" y="325" width="6.6" height="15.0" fill="rgb(213,37,27)" rx="2" ry="2" />
<text  x="780.76" y="335.5" ></text>
</g>
<g >
<title>__libc_start_main (19,999,995 samples, 1.20%)</title><rect x="1114.4" y="789" width="14.1" height="15.0" fill="rgb(218,195,8)" rx="2" ry="2" />
<text  x="1117.36" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (2,666,666 samples, 0.16%)</title><rect x="1172.0" y="805" width="1.9" height="15.0" fill="rgb(244,180,7)" rx="2" ry="2" />
<text  x="1175.04" y="815.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__future_base::_State_baseV2&gt;::~new_allocator (1,333,333 samples, 0.08%)</title><rect x="1057.6" y="565" width="1.0" height="15.0" fill="rgb(210,115,12)" rx="2" ry="2" />
<text  x="1060.63" y="575.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (21,333,328 samples, 1.28%)</title><rect x="1042.5" y="533" width="15.1" height="15.0" fill="rgb(222,119,50)" rx="2" ry="2" />
<text  x="1045.50" y="543.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (43,999,989 samples, 2.64%)</title><rect x="969.7" y="469" width="31.2" height="15.0" fill="rgb(229,149,24)" rx="2" ry="2" />
<text  x="972.70" y="479.5" >st..</text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.08%)</title><rect x="875.1" y="485" width="1.0" height="15.0" fill="rgb(252,130,48)" rx="2" ry="2" />
<text  x="878.14" y="495.5" ></text>
</g>
<g >
<title>swake_up (1,333,333 samples, 0.08%)</title><rect x="727.6" y="421" width="1.0" height="15.0" fill="rgb(224,134,20)" rx="2" ry="2" />
<text  x="730.64" y="431.5" ></text>
</g>
<g >
<title>delete_from_page_cache_batch (1,333,333 samples, 0.08%)</title><rect x="1119.1" y="549" width="0.9" height="15.0" fill="rgb(236,94,51)" rx="2" ry="2" />
<text  x="1122.09" y="559.5" ></text>
</g>
<g >
<title>block_invalidatepage (1,333,333 samples, 0.08%)</title><rect x="1121.0" y="501" width="0.9" height="15.0" fill="rgb(226,169,6)" rx="2" ry="2" />
<text  x="1123.98" y="511.5" ></text>
</g>
<g >
<title>__x64_sys_getdents (1,333,333 samples, 0.08%)</title><rect x="10.9" y="485" width="1.0" height="15.0" fill="rgb(251,223,6)" rx="2" ry="2" />
<text  x="13.95" y="495.5" ></text>
</g>
<g >
<title>leveldb::MemTable::~MemTable (1,333,333 samples, 0.08%)</title><rect x="255.8" y="565" width="1.0" height="15.0" fill="rgb(230,218,29)" rx="2" ry="2" />
<text  x="258.83" y="575.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1,333,333 samples, 0.08%)</title><rect x="357.0" y="469" width="0.9" height="15.0" fill="rgb(225,91,4)" rx="2" ry="2" />
<text  x="360.00" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (7,999,998 samples, 0.48%)</title><rect x="236.0" y="517" width="5.7" height="15.0" fill="rgb(233,137,50)" rx="2" ry="2" />
<text  x="238.98" y="527.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__future_base::_Result_base*, false&gt;::_Head_base (1,333,333 samples, 0.08%)</title><rect x="1052.0" y="389" width="0.9" height="15.0" fill="rgb(220,202,2)" rx="2" ry="2" />
<text  x="1054.96" y="399.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::Delete (1,333,333 samples, 0.08%)</title><rect x="321.1" y="421" width="0.9" height="15.0" fill="rgb(231,98,46)" rx="2" ry="2" />
<text  x="324.07" y="431.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1,333,333 samples, 0.08%)</title><rect x="138.6" y="421" width="0.9" height="15.0" fill="rgb(246,24,23)" rx="2" ry="2" />
<text  x="141.59" y="431.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (1,333,333 samples, 0.08%)</title><rect x="1000.0" y="405" width="0.9" height="15.0" fill="rgb(247,71,21)" rx="2" ry="2" />
<text  x="1002.95" y="415.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (3,999,999 samples, 0.24%)</title><rect x="439.3" y="469" width="2.8" height="15.0" fill="rgb(212,98,17)" rx="2" ry="2" />
<text  x="442.26" y="479.5" ></text>
</g>
<g >
<title>find_get_entry (1,333,333 samples, 0.08%)</title><rect x="792.9" y="309" width="0.9" height="15.0" fill="rgb(221,163,37)" rx="2" ry="2" />
<text  x="795.88" y="319.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (2,666,666 samples, 0.16%)</title><rect x="440.2" y="437" width="1.9" height="15.0" fill="rgb(212,120,14)" rx="2" ry="2" />
<text  x="443.21" y="447.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;&gt; &gt; (1,333,333 samples, 0.08%)</title><rect x="120.6" y="453" width="1.0" height="15.0" fill="rgb(212,39,23)" rx="2" ry="2" />
<text  x="123.62" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;leveldb::DBImpl::Writer*&gt;::destroy&lt;leveldb::DBImpl::Writer*&gt; (1,333,333 samples, 0.08%)</title><rect x="931.9" y="565" width="0.9" height="15.0" fill="rgb(216,55,1)" rx="2" ry="2" />
<text  x="934.88" y="575.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.08%)</title><rect x="619.9" y="373" width="0.9" height="15.0" fill="rgb(212,24,54)" rx="2" ry="2" />
<text  x="622.86" y="383.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; (1,333,333 samples, 0.08%)</title><rect x="302.2" y="437" width="0.9" height="15.0" fill="rgb(240,198,23)" rx="2" ry="2" />
<text  x="305.16" y="447.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1,333,333 samples, 0.08%)</title><rect x="455.3" y="437" width="1.0" height="15.0" fill="rgb(247,85,41)" rx="2" ry="2" />
<text  x="458.34" y="447.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (1,333,333 samples, 0.08%)</title><rect x="791.9" y="277" width="1.0" height="15.0" fill="rgb(252,136,50)" rx="2" ry="2" />
<text  x="794.94" y="287.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2,666,666 samples, 0.16%)</title><rect x="337.1" y="549" width="1.9" height="15.0" fill="rgb(227,227,52)" rx="2" ry="2" />
<text  x="340.15" y="559.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.08%)</title><rect x="307.8" y="389" width="1.0" height="15.0" fill="rgb(239,182,40)" rx="2" ry="2" />
<text  x="310.84" y="399.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set (43,999,989 samples, 2.64%)</title><rect x="969.7" y="437" width="31.2" height="15.0" fill="rgb(233,80,41)" rx="2" ry="2" />
<text  x="972.70" y="447.5" >st..</text>
</g>
<g >
<title>map_id_up (1,333,333 samples, 0.08%)</title><rect x="845.8" y="245" width="1.0" height="15.0" fill="rgb(242,207,0)" rx="2" ry="2" />
<text  x="848.83" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr (3,999,999 samples, 0.24%)</title><rect x="977.3" y="373" width="2.8" height="15.0" fill="rgb(246,183,28)" rx="2" ry="2" />
<text  x="980.26" y="383.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1,333,333 samples, 0.08%)</title><rect x="272.9" y="549" width="0.9" height="15.0" fill="rgb(244,193,8)" rx="2" ry="2" />
<text  x="275.85" y="559.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (2,666,666 samples, 0.16%)</title><rect x="28.9" y="517" width="1.9" height="15.0" fill="rgb(236,118,18)" rx="2" ry="2" />
<text  x="31.91" y="527.5" ></text>
</g>
<g >
<title>ext4_mark_inode_dirty (55,999,986 samples, 3.37%)</title><rect x="812.7" y="293" width="39.8" height="15.0" fill="rgb(205,204,1)" rx="2" ry="2" />
<text  x="815.74" y="303.5" >ext..</text>
</g>
<g >
<title>release_pages (3,999,999 samples, 0.24%)</title><rect x="1116.2" y="533" width="2.9" height="15.0" fill="rgb(249,196,3)" rx="2" ry="2" />
<text  x="1119.25" y="543.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (1,333,333 samples, 0.08%)</title><rect x="36.5" y="485" width="0.9" height="15.0" fill="rgb(251,152,14)" rx="2" ry="2" />
<text  x="39.47" y="495.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; (1,333,333 samples, 0.08%)</title><rect x="132.9" y="389" width="1.0" height="15.0" fill="rgb(244,89,25)" rx="2" ry="2" />
<text  x="135.92" y="399.5" ></text>
</g>
<g >
<title>load_balance (1,333,333 samples, 0.08%)</title><rect x="985.8" y="261" width="0.9" height="15.0" fill="rgb(226,17,23)" rx="2" ry="2" />
<text  x="988.77" y="271.5" ></text>
</g>
<g >
<title>std::fill_n&lt;char*, unsigned long, char&gt; (25,333,327 samples, 1.52%)</title><rect x="194.4" y="437" width="17.9" height="15.0" fill="rgb(244,5,50)" rx="2" ry="2" />
<text  x="197.38" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,333,333 samples, 0.08%)</title><rect x="131.0" y="469" width="1.0" height="15.0" fill="rgb(247,213,14)" rx="2" ry="2" />
<text  x="134.03" y="479.5" ></text>
</g>
<g >
<title>_pthread_cleanup_pop (1,333,333 samples, 0.08%)</title><rect x="943.2" y="517" width="1.0" height="15.0" fill="rgb(240,110,32)" rx="2" ry="2" />
<text  x="946.22" y="527.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::GetMaxHeight (1,333,333 samples, 0.08%)</title><rect x="469.5" y="501" width="1.0" height="15.0" fill="rgb(220,204,3)" rx="2" ry="2" />
<text  x="472.52" y="511.5" ></text>
</g>
<g >
<title>do_page_fault (3,999,999 samples, 0.24%)</title><rect x="179.2" y="421" width="2.9" height="15.0" fill="rgb(226,172,18)" rx="2" ry="2" />
<text  x="182.25" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_ebo_helper&lt;0, std::allocator&lt;std::__future_base::_State_baseV2&gt;, true&gt;::_Sp_ebo_helper (1,333,333 samples, 0.08%)</title><rect x="1044.4" y="485" width="0.9" height="15.0" fill="rgb(240,229,28)" rx="2" ry="2" />
<text  x="1047.39" y="495.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.08%)</title><rect x="383.5" y="565" width="0.9" height="15.0" fill="rgb(224,161,4)" rx="2" ry="2" />
<text  x="386.48" y="575.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (1,333,333 samples, 0.08%)</title><rect x="970.6" y="405" width="1.0" height="15.0" fill="rgb(220,60,49)" rx="2" ry="2" />
<text  x="973.64" y="415.5" ></text>
</g>
<g >
<title>vfs_statx (1,333,333 samples, 0.08%)</title><rect x="1113.4" y="549" width="1.0" height="15.0" fill="rgb(209,108,36)" rx="2" ry="2" />
<text  x="1116.41" y="559.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed64 (1,333,333 samples, 0.08%)</title><rect x="621.7" y="453" width="1.0" height="15.0" fill="rgb(214,147,35)" rx="2" ry="2" />
<text  x="624.75" y="463.5" ></text>
</g>
<g >
<title>std::locale::locale (1,333,333 samples, 0.08%)</title><rect x="1114.4" y="709" width="0.9" height="15.0" fill="rgb(216,157,43)" rx="2" ry="2" />
<text  x="1117.36" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data@plt (1,333,333 samples, 0.08%)</title><rect x="134.8" y="373" width="1.0" height="15.0" fill="rgb(228,3,29)" rx="2" ry="2" />
<text  x="137.81" y="383.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2,666,666 samples, 0.16%)</title><rect x="67.7" y="517" width="1.9" height="15.0" fill="rgb(217,90,17)" rx="2" ry="2" />
<text  x="70.68" y="527.5" ></text>
</g>
<g >
<title>std::operator&amp; (5,333,332 samples, 0.32%)</title><rect x="678.5" y="453" width="3.8" height="15.0" fill="rgb(234,7,34)" rx="2" ry="2" />
<text  x="681.48" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__future_base::_State_baseV2&gt;::~new_allocator (1,333,333 samples, 0.08%)</title><rect x="1056.7" y="501" width="0.9" height="15.0" fill="rgb(239,224,14)" rx="2" ry="2" />
<text  x="1059.68" y="511.5" ></text>
</g>
<g >
<title>leveldb::Status::Status (1,333,333 samples, 0.08%)</title><rect x="415.6" y="581" width="1.0" height="15.0" fill="rgb(219,8,3)" rx="2" ry="2" />
<text  x="418.62" y="591.5" ></text>
</g>
<g >
<title>madvise_free_page_range.isra.16 (1,333,333 samples, 0.08%)</title><rect x="321.1" y="261" width="0.9" height="15.0" fill="rgb(208,77,31)" rx="2" ry="2" />
<text  x="324.07" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::resize (1,333,333 samples, 0.08%)</title><rect x="322.0" y="533" width="1.0" height="15.0" fill="rgb(224,38,46)" rx="2" ry="2" />
<text  x="325.02" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.08%)</title><rect x="1166.4" y="789" width="0.9" height="15.0" fill="rgb(241,118,17)" rx="2" ry="2" />
<text  x="1169.36" y="799.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1,333,333 samples, 0.08%)</title><rect x="76.2" y="485" width="0.9" height="15.0" fill="rgb(216,136,5)" rx="2" ry="2" />
<text  x="79.19" y="495.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::New (1,333,333 samples, 0.08%)</title><rect x="182.1" y="437" width="0.9" height="15.0" fill="rgb(209,155,15)" rx="2" ry="2" />
<text  x="185.08" y="447.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.08%)</title><rect x="10.9" y="517" width="1.0" height="15.0" fill="rgb(208,9,10)" rx="2" ry="2" />
<text  x="13.95" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (3,999,999 samples, 0.24%)</title><rect x="126.3" y="485" width="2.8" height="15.0" fill="rgb(235,180,36)" rx="2" ry="2" />
<text  x="129.30" y="495.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::RemoveFile (9,333,331 samples, 0.56%)</title><rect x="1115.3" y="725" width="6.6" height="15.0" fill="rgb(217,124,5)" rx="2" ry="2" />
<text  x="1118.30" y="735.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (6,666,665 samples, 0.40%)</title><rect x="344.7" y="549" width="4.7" height="15.0" fill="rgb(219,102,36)" rx="2" ry="2" />
<text  x="347.71" y="559.5" ></text>
</g>
<g >
<title>__readdir (1,333,333 samples, 0.08%)</title><rect x="10.9" y="549" width="1.0" height="15.0" fill="rgb(230,106,40)" rx="2" ry="2" />
<text  x="13.95" y="559.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (2,666,666 samples, 0.16%)</title><rect x="1152.2" y="789" width="1.9" height="15.0" fill="rgb(226,71,6)" rx="2" ry="2" />
<text  x="1155.18" y="799.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt;::deque (1,333,333 samples, 0.08%)</title><rect x="1127.6" y="581" width="0.9" height="15.0" fill="rgb(254,144,53)" rx="2" ry="2" />
<text  x="1130.60" y="591.5" ></text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.08%)</title><rect x="105.5" y="357" width="0.9" height="15.0" fill="rgb(234,103,36)" rx="2" ry="2" />
<text  x="108.50" y="367.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Rep::Rep (1,333,333 samples, 0.08%)</title><rect x="322.0" y="549" width="1.0" height="15.0" fill="rgb(251,114,46)" rx="2" ry="2" />
<text  x="325.02" y="559.5" ></text>
</g>
<g >
<title>std::mutex::lock (1,333,333 samples, 0.08%)</title><rect x="420.4" y="565" width="0.9" height="15.0" fill="rgb(214,63,3)" rx="2" ry="2" />
<text  x="423.35" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (2,666,666 samples, 0.16%)</title><rect x="345.7" y="501" width="1.8" height="15.0" fill="rgb(253,132,31)" rx="2" ry="2" />
<text  x="348.66" y="511.5" ></text>
</g>
<g >
<title>rcu_bh_qs (1,333,333 samples, 0.08%)</title><rect x="433.6" y="533" width="0.9" height="15.0" fill="rgb(231,3,5)" rx="2" ry="2" />
<text  x="436.59" y="543.5" ></text>
</g>
<g >
<title>load_balance (1,333,333 samples, 0.08%)</title><rect x="812.7" y="165" width="1.0" height="15.0" fill="rgb(225,14,54)" rx="2" ry="2" />
<text  x="815.74" y="175.5" ></text>
</g>
<g >
<title>do_sys_open (2,666,666 samples, 0.16%)</title><rect x="1125.7" y="581" width="1.9" height="15.0" fill="rgb(221,97,0)" rx="2" ry="2" />
<text  x="1128.71" y="591.5" ></text>
</g>
<g >
<title>mem_cgroup_uncharge_list (1,333,333 samples, 0.08%)</title><rect x="1118.1" y="517" width="1.0" height="15.0" fill="rgb(210,25,32)" rx="2" ry="2" />
<text  x="1121.14" y="527.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1,333,333 samples, 0.08%)</title><rect x="1111.5" y="549" width="1.0" height="15.0" fill="rgb(222,176,35)" rx="2" ry="2" />
<text  x="1114.52" y="559.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (3,999,999 samples, 0.24%)</title><rect x="67.7" y="533" width="2.8" height="15.0" fill="rgb(232,227,51)" rx="2" ry="2" />
<text  x="70.68" y="543.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1,333,333 samples, 0.08%)</title><rect x="1114.4" y="661" width="0.9" height="15.0" fill="rgb(225,142,2)" rx="2" ry="2" />
<text  x="1117.36" y="671.5" ></text>
</g>
<g >
<title>iov_iter_fault_in_readable (5,333,332 samples, 0.32%)</title><rect x="857.2" y="357" width="3.8" height="15.0" fill="rgb(223,2,23)" rx="2" ry="2" />
<text  x="860.18" y="367.5" ></text>
</g>
<g >
<title>TCMalloc_SystemRelease (1,333,333 samples, 0.08%)</title><rect x="105.5" y="197" width="0.9" height="15.0" fill="rgb(206,25,9)" rx="2" ry="2" />
<text  x="108.50" y="207.5" ></text>
</g>
<g >
<title>__add_to_page_cache_locked (3,999,999 samples, 0.24%)</title><rect x="790.0" y="293" width="2.9" height="15.0" fill="rgb(235,177,9)" rx="2" ry="2" />
<text  x="793.05" y="303.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (2,666,666 samples, 0.16%)</title><rect x="303.1" y="485" width="1.9" height="15.0" fill="rgb(212,191,20)" rx="2" ry="2" />
<text  x="306.11" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter, void&gt; (6,666,665 samples, 0.40%)</title><rect x="984.8" y="389" width="4.8" height="15.0" fill="rgb(232,164,3)" rx="2" ry="2" />
<text  x="987.82" y="399.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (1,333,333 samples, 0.08%)</title><rect x="864.7" y="421" width="1.0" height="15.0" fill="rgb(231,186,46)" rx="2" ry="2" />
<text  x="867.74" y="431.5" ></text>
</g>
<g >
<title>aperfmperf_snapshot_cpu (2,666,666 samples, 0.16%)</title><rect x="1125.7" y="453" width="1.9" height="15.0" fill="rgb(252,222,42)" rx="2" ry="2" />
<text  x="1128.71" y="463.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (1,333,333 samples, 0.08%)</title><rect x="1151.2" y="789" width="1.0" height="15.0" fill="rgb(233,210,40)" rx="2" ry="2" />
<text  x="1154.23" y="799.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (1,550,666,279 samples, 93.19%)</title><rect x="10.9" y="741" width="1099.7" height="15.0" fill="rgb(225,98,28)" rx="2" ry="2" />
<text  x="13.95" y="751.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>std::move&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt;&amp;&gt; (1,333,333 samples, 0.08%)</title><rect x="1009.4" y="533" width="1.0" height="15.0" fill="rgb(221,216,6)" rx="2" ry="2" />
<text  x="1012.41" y="543.5" ></text>
</g>
<g >
<title>__GI__IO_default_xsputn (3,999,999 samples, 0.24%)</title><rect x="371.2" y="549" width="2.8" height="15.0" fill="rgb(254,4,8)" rx="2" ry="2" />
<text  x="374.19" y="559.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::Write (975,999,756 samples, 58.65%)</title><rect x="396.7" y="629" width="692.1" height="15.0" fill="rgb(234,224,42)" rx="2" ry="2" />
<text  x="399.71" y="639.5" >leveldb::DBImpl::Write</text>
</g>
<g >
<title>leveldb::MemHashTableValue::MemHashTableValue (3,999,999 samples, 0.24%)</title><rect x="139.5" y="517" width="2.9" height="15.0" fill="rgb(223,174,41)" rx="2" ry="2" />
<text  x="142.54" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (1,333,333 samples, 0.08%)</title><rect x="326.7" y="517" width="1.0" height="15.0" fill="rgb(234,126,22)" rx="2" ry="2" />
<text  x="329.75" y="527.5" ></text>
</g>
<g >
<title>seq_read (1,333,333 samples, 0.08%)</title><rect x="1124.8" y="501" width="0.9" height="15.0" fill="rgb(221,8,42)" rx="2" ry="2" />
<text  x="1127.76" y="511.5" ></text>
</g>
<g >
<title>leveldb::BuildTable (278,666,597 samples, 16.75%)</title><rect x="14.7" y="565" width="197.6" height="15.0" fill="rgb(224,25,40)" rx="2" ry="2" />
<text  x="17.73" y="575.5" >leveldb::BuildTable</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.08%)</title><rect x="105.5" y="165" width="0.9" height="15.0" fill="rgb(214,38,48)" rx="2" ry="2" />
<text  x="108.50" y="175.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1,333,333 samples, 0.08%)</title><rect x="225.6" y="437" width="0.9" height="15.0" fill="rgb(253,49,13)" rx="2" ry="2" />
<text  x="228.58" y="447.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.08%)</title><rect x="441.2" y="197" width="0.9" height="15.0" fill="rgb(216,41,40)" rx="2" ry="2" />
<text  x="444.15" y="207.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;*, unsigned long, std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt; &gt; (1,333,333 samples, 0.08%)</title><rect x="1127.6" y="661" width="0.9" height="15.0" fill="rgb(220,20,14)" rx="2" ry="2" />
<text  x="1130.60" y="671.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1,333,333 samples, 0.08%)</title><rect x="181.1" y="373" width="1.0" height="15.0" fill="rgb(253,128,13)" rx="2" ry="2" />
<text  x="184.14" y="383.5" ></text>
</g>
<g >
<title>std::operator==&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt; (1,333,333 samples, 0.08%)</title><rect x="921.5" y="581" width="0.9" height="15.0" fill="rgb(207,208,3)" rx="2" ry="2" />
<text  x="924.47" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (2,666,666 samples, 0.16%)</title><rect x="323.0" y="517" width="1.9" height="15.0" fill="rgb(215,30,14)" rx="2" ry="2" />
<text  x="325.96" y="527.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.08%)</title><rect x="315.4" y="453" width="0.9" height="15.0" fill="rgb(251,8,16)" rx="2" ry="2" />
<text  x="318.40" y="463.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (61,333,318 samples, 3.69%)</title><rect x="809.9" y="325" width="43.5" height="15.0" fill="rgb(207,110,53)" rx="2" ry="2" />
<text  x="812.90" y="335.5" >__ma..</text>
</g>
<g >
<title>leveldb::TableBuilder::WriteBlock (11,999,997 samples, 0.72%)</title><rect x="349.4" y="549" width="8.5" height="15.0" fill="rgb(213,49,19)" rx="2" ry="2" />
<text  x="352.44" y="559.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (1,333,333 samples, 0.08%)</title><rect x="209.5" y="293" width="0.9" height="15.0" fill="rgb(238,129,31)" rx="2" ry="2" />
<text  x="212.50" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result_base::_Deleter, void&gt; (6,666,665 samples, 0.40%)</title><rect x="1048.2" y="453" width="4.7" height="15.0" fill="rgb(244,78,38)" rx="2" ry="2" />
<text  x="1051.17" y="463.5" ></text>
</g>
<g >
<title>crc32c_pcl_intel_update (13,333,330 samples, 0.80%)</title><rect x="821.2" y="229" width="9.5" height="15.0" fill="rgb(221,204,38)" rx="2" ry="2" />
<text  x="824.25" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt;::allocate (1,333,333 samples, 0.08%)</title><rect x="300.3" y="421" width="0.9" height="15.0" fill="rgb(221,92,52)" rx="2" ry="2" />
<text  x="303.27" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.08%)</title><rect x="976.3" y="325" width="1.0" height="15.0" fill="rgb(221,123,46)" rx="2" ry="2" />
<text  x="979.31" y="335.5" ></text>
</g>
<g >
<title>leveldb::MemTable::Add (355,999,911 samples, 21.39%)</title><rect x="436.4" y="549" width="252.5" height="15.0" fill="rgb(206,85,45)" rx="2" ry="2" />
<text  x="439.43" y="559.5" >leveldb::MemTable::Add</text>
</g>
<g >
<title>policy_node (1,333,333 samples, 0.08%)</title><rect x="208.6" y="277" width="0.9" height="15.0" fill="rgb(242,58,49)" rx="2" ry="2" />
<text  x="211.56" y="287.5" ></text>
</g>
<g >
<title>try_to_release_page (1,333,333 samples, 0.08%)</title><rect x="12.8" y="325" width="1.0" height="15.0" fill="rgb(237,126,8)" rx="2" ry="2" />
<text  x="15.84" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (1,333,333 samples, 0.08%)</title><rect x="105.5" y="373" width="0.9" height="15.0" fill="rgb(249,102,9)" rx="2" ry="2" />
<text  x="108.50" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (1,333,333 samples, 0.08%)</title><rect x="1022.6" y="517" width="1.0" height="15.0" fill="rgb(250,97,42)" rx="2" ry="2" />
<text  x="1025.64" y="527.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="962.1" y="389" width="1.0" height="15.0" fill="rgb(224,6,23)" rx="2" ry="2" />
<text  x="965.13" y="399.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::Finish (1,333,333 samples, 0.08%)</title><rect x="142.4" y="501" width="0.9" height="15.0" fill="rgb(215,6,4)" rx="2" ry="2" />
<text  x="145.37" y="511.5" ></text>
</g>
<g >
<title>leveldb::EncodeFixed32 (1,333,333 samples, 0.08%)</title><rect x="1157.9" y="789" width="0.9" height="15.0" fill="rgb(228,71,40)" rx="2" ry="2" />
<text  x="1160.85" y="799.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (3,999,999 samples, 0.24%)</title><rect x="683.2" y="485" width="2.8" height="15.0" fill="rgb(247,122,53)" rx="2" ry="2" />
<text  x="686.21" y="495.5" ></text>
</g>
<g >
<title>generic_update_time (1,333,333 samples, 0.08%)</title><rect x="10.9" y="437" width="1.0" height="15.0" fill="rgb(218,188,21)" rx="2" ry="2" />
<text  x="13.95" y="447.5" ></text>
</g>
<g >
<title>leveldb::ParseInternalKey (3,999,999 samples, 0.24%)</title><rect x="253.0" y="565" width="2.8" height="15.0" fill="rgb(230,11,27)" rx="2" ry="2" />
<text  x="256.00" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::construct&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&gt; (1,333,333 samples, 0.08%)</title><rect x="932.8" y="565" width="1.0" height="15.0" fill="rgb(253,167,38)" rx="2" ry="2" />
<text  x="935.82" y="575.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1,333,333 samples, 0.08%)</title><rect x="108.3" y="421" width="1.0" height="15.0" fill="rgb(233,167,44)" rx="2" ry="2" />
<text  x="111.33" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1,333,333 samples, 0.08%)</title><rect x="1156.0" y="789" width="0.9" height="15.0" fill="rgb(229,156,14)" rx="2" ry="2" />
<text  x="1158.96" y="799.5" ></text>
</g>
<g >
<title>__x64_sys_write (174,666,623 samples, 10.50%)</title><rect x="744.7" y="469" width="123.8" height="15.0" fill="rgb(237,123,6)" rx="2" ry="2" />
<text  x="747.66" y="479.5" >__x64_sys_write</text>
</g>
<g >
<title>std::_Construct&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;&gt; (1,333,333 samples, 0.08%)</title><rect x="1127.6" y="613" width="0.9" height="15.0" fill="rgb(208,39,14)" rx="2" ry="2" />
<text  x="1130.60" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt;::_M_next (6,666,665 samples, 0.40%)</title><rect x="295.5" y="405" width="4.8" height="15.0" fill="rgb(223,179,7)" rx="2" ry="2" />
<text  x="298.54" y="415.5" ></text>
</g>
<g >
<title>_dl_start (3,999,999 samples, 0.24%)</title><rect x="1128.5" y="789" width="2.9" height="15.0" fill="rgb(220,83,23)" rx="2" ry="2" />
<text  x="1131.54" y="799.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.08%)</title><rect x="963.1" y="341" width="0.9" height="15.0" fill="rgb(252,177,45)" rx="2" ry="2" />
<text  x="966.08" y="351.5" ></text>
</g>
<g >
<title>leveldb::operator== (1,333,333 samples, 0.08%)</title><rect x="334.3" y="549" width="1.0" height="15.0" fill="rgb(249,82,4)" rx="2" ry="2" />
<text  x="337.31" y="559.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (55,999,986 samples, 3.37%)</title><rect x="878.9" y="565" width="39.7" height="15.0" fill="rgb(217,112,43)" rx="2" ry="2" />
<text  x="881.93" y="575.5" >lev..</text>
</g>
<g >
<title>truncate_cleanup_page (2,666,666 samples, 0.16%)</title><rect x="11.9" y="389" width="1.9" height="15.0" fill="rgb(236,102,30)" rx="2" ry="2" />
<text  x="14.89" y="399.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (2,666,666 samples, 0.16%)</title><rect x="224.6" y="453" width="1.9" height="15.0" fill="rgb(239,62,22)" rx="2" ry="2" />
<text  x="227.63" y="463.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.08%)</title><rect x="281.4" y="469" width="0.9" height="15.0" fill="rgb(239,97,48)" rx="2" ry="2" />
<text  x="284.36" y="479.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;unsigned long, char&gt; (25,333,327 samples, 1.52%)</title><rect x="194.4" y="421" width="17.9" height="15.0" fill="rgb(230,208,13)" rx="2" ry="2" />
<text  x="197.38" y="431.5" ></text>
</g>
<g >
<title>iov_iter_advance (2,666,666 samples, 0.16%)</title><rect x="854.3" y="357" width="1.9" height="15.0" fill="rgb(241,33,11)" rx="2" ry="2" />
<text  x="857.34" y="367.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (7,999,998 samples, 0.48%)</title><rect x="1141.8" y="805" width="5.7" height="15.0" fill="rgb(232,210,3)" rx="2" ry="2" />
<text  x="1144.78" y="815.5" ></text>
</g>
<g >
<title>__fget (1,333,333 samples, 0.08%)</title><rect x="748.4" y="405" width="1.0" height="15.0" fill="rgb(222,219,2)" rx="2" ry="2" />
<text  x="751.45" y="415.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,333,333 samples, 0.08%)</title><rect x="440.2" y="341" width="1.0" height="15.0" fill="rgb(212,92,28)" rx="2" ry="2" />
<text  x="443.21" y="351.5" ></text>
</g>
<g >
<title>common_file_perm (1,333,333 samples, 0.08%)</title><rect x="867.6" y="373" width="0.9" height="15.0" fill="rgb(251,166,41)" rx="2" ry="2" />
<text  x="870.58" y="383.5" ></text>
</g>
<g >
<title>futex_wake (5,333,332 samples, 0.32%)</title><rect x="960.2" y="437" width="3.8" height="15.0" fill="rgb(252,73,14)" rx="2" ry="2" />
<text  x="963.24" y="447.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::Add (10,666,664 samples, 0.64%)</title><rect x="329.6" y="565" width="7.5" height="15.0" fill="rgb(224,4,16)" rx="2" ry="2" />
<text  x="332.58" y="575.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (7,999,998 samples, 0.48%)</title><rect x="19.5" y="517" width="5.6" height="15.0" fill="rgb(207,140,36)" rx="2" ry="2" />
<text  x="22.46" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1,333,333 samples, 0.08%)</title><rect x="1105.8" y="581" width="1.0" height="15.0" fill="rgb(222,7,46)" rx="2" ry="2" />
<text  x="1108.85" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::operator (1,333,333 samples, 0.08%)</title><rect x="1184.3" y="805" width="1.0" height="15.0" fill="rgb(218,229,29)" rx="2" ry="2" />
<text  x="1187.33" y="815.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (1,333,333 samples, 0.08%)</title><rect x="10.9" y="421" width="1.0" height="15.0" fill="rgb(215,107,11)" rx="2" ry="2" />
<text  x="13.95" y="431.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.08%)</title><rect x="333.4" y="469" width="0.9" height="15.0" fill="rgb(213,12,40)" rx="2" ry="2" />
<text  x="336.37" y="479.5" ></text>
</g>
<g >
<title>std::swap&lt;std::__future_base::_Result_base*&gt; (1,333,333 samples, 0.08%)</title><rect x="995.2" y="389" width="1.0" height="15.0" fill="rgb(205,157,16)" rx="2" ry="2" />
<text  x="998.22" y="399.5" ></text>
</g>
<g >
<title>crc32c_pcl_intel_update (14,666,663 samples, 0.88%)</title><rect x="834.5" y="213" width="10.4" height="15.0" fill="rgb(214,209,34)" rx="2" ry="2" />
<text  x="837.49" y="223.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;::tuple (1,333,333 samples, 0.08%)</title><rect x="119.7" y="421" width="0.9" height="15.0" fill="rgb(213,64,44)" rx="2" ry="2" />
<text  x="122.68" y="431.5" ></text>
</g>
<g >
<title>__brelse (1,333,333 samples, 0.08%)</title><rect x="812.7" y="277" width="1.0" height="15.0" fill="rgb(219,151,37)" rx="2" ry="2" />
<text  x="815.74" y="287.5" ></text>
</g>
<g >
<title>__GI___snprintf (23,999,994 samples, 1.44%)</title><rect x="362.7" y="613" width="17.0" height="15.0" fill="rgb(218,12,27)" rx="2" ry="2" />
<text  x="365.68" y="623.5" ></text>
</g>
<g >
<title>snappy::internal::CompressFragment (1,333,333 samples, 0.08%)</title><rect x="193.4" y="469" width="1.0" height="15.0" fill="rgb(239,144,6)" rx="2" ry="2" />
<text  x="196.43" y="479.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (1,333,333 samples, 0.08%)</title><rect x="306.9" y="437" width="0.9" height="15.0" fill="rgb(233,216,39)" rx="2" ry="2" />
<text  x="309.89" y="447.5" ></text>
</g>
<g >
<title>ext4_inode_csum_set (2,666,666 samples, 0.16%)</title><rect x="769.2" y="277" width="1.9" height="15.0" fill="rgb(216,106,41)" rx="2" ry="2" />
<text  x="772.25" y="287.5" ></text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.08%)</title><rect x="300.3" y="405" width="0.9" height="15.0" fill="rgb(225,152,29)" rx="2" ry="2" />
<text  x="303.27" y="415.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::RandomGenerator::Generate (5,333,332 samples, 0.32%)</title><rect x="381.6" y="629" width="3.8" height="15.0" fill="rgb(244,164,38)" rx="2" ry="2" />
<text  x="384.59" y="639.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="383.5" y="613" width="0.9" height="15.0" fill="rgb(234,43,39)" rx="2" ry="2" />
<text  x="386.48" y="623.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt; &gt;::construct&lt;std::__future_base::_State_baseV2&gt; (10,666,664 samples, 0.64%)</title><rect x="1045.3" y="501" width="7.6" height="15.0" fill="rgb(246,47,42)" rx="2" ry="2" />
<text  x="1048.34" y="511.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.08%)</title><rect x="1139.9" y="789" width="0.9" height="15.0" fill="rgb(237,94,10)" rx="2" ry="2" />
<text  x="1142.89" y="799.5" ></text>
</g>
<g >
<title>iterate_dir (1,333,333 samples, 0.08%)</title><rect x="10.9" y="469" width="1.0" height="15.0" fill="rgb(231,36,49)" rx="2" ry="2" />
<text  x="13.95" y="479.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="383.5" y="597" width="0.9" height="15.0" fill="rgb(251,187,35)" rx="2" ry="2" />
<text  x="386.48" y="607.5" ></text>
</g>
<g >
<title>[libunwind.so.8.0.1] (1,333,333 samples, 0.08%)</title><rect x="441.2" y="325" width="0.9" height="15.0" fill="rgb(249,99,2)" rx="2" ry="2" />
<text  x="444.15" y="335.5" ></text>
</g>
<g >
<title>std::condition_variable::condition_variable (1,333,333 samples, 0.08%)</title><rect x="417.5" y="565" width="1.0" height="15.0" fill="rgb(253,113,1)" rx="2" ry="2" />
<text  x="420.52" y="575.5" ></text>
</g>
<g >
<title>snappy::RawUncompress (1,333,333 samples, 0.08%)</title><rect x="269.1" y="453" width="0.9" height="15.0" fill="rgb(222,45,13)" rx="2" ry="2" />
<text  x="272.07" y="463.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ListTooLong (1,333,333 samples, 0.08%)</title><rect x="255.8" y="517" width="1.0" height="15.0" fill="rgb(230,148,25)" rx="2" ry="2" />
<text  x="258.83" y="527.5" ></text>
</g>
<g >
<title>evict (7,999,998 samples, 0.48%)</title><rect x="1116.2" y="613" width="5.7" height="15.0" fill="rgb(236,78,3)" rx="2" ry="2" />
<text  x="1119.25" y="623.5" ></text>
</g>
<g >
<title>do_unlinkat (9,333,331 samples, 0.56%)</title><rect x="1115.3" y="645" width="6.6" height="15.0" fill="rgb(208,217,46)" rx="2" ry="2" />
<text  x="1118.30" y="655.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (2,666,666 samples, 0.16%)</title><rect x="1016.0" y="533" width="1.9" height="15.0" fill="rgb(241,103,11)" rx="2" ry="2" />
<text  x="1019.03" y="543.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.08%)</title><rect x="963.1" y="357" width="0.9" height="15.0" fill="rgb(235,80,40)" rx="2" ry="2" />
<text  x="966.08" y="367.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::InitModule (1,333,333 samples, 0.08%)</title><rect x="1112.5" y="725" width="0.9" height="15.0" fill="rgb(245,29,37)" rx="2" ry="2" />
<text  x="1115.47" y="735.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt; &gt;::destroy&lt;std::__future_base::_State_baseV2&gt; (1,333,333 samples, 0.08%)</title><rect x="1168.3" y="789" width="0.9" height="15.0" fill="rgb(250,106,53)" rx="2" ry="2" />
<text  x="1171.25" y="799.5" ></text>
</g>
<g >
<title>leveldb::Block::NumRestarts (1,333,333 samples, 0.08%)</title><rect x="268.1" y="469" width="1.0" height="15.0" fill="rgb(210,225,30)" rx="2" ry="2" />
<text  x="271.12" y="479.5" ></text>
</g>
<g >
<title>std::move&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;&amp;&gt; (1,333,333 samples, 0.08%)</title><rect x="975.4" y="373" width="0.9" height="15.0" fill="rgb(218,58,51)" rx="2" ry="2" />
<text  x="978.37" y="383.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1,333,333 samples, 0.08%)</title><rect x="235.0" y="405" width="1.0" height="15.0" fill="rgb(210,229,29)" rx="2" ry="2" />
<text  x="238.03" y="415.5" ></text>
</g>
<g >
<title>madvise_free_page_range.isra.16 (1,333,333 samples, 0.08%)</title><rect x="255.8" y="277" width="1.0" height="15.0" fill="rgb(224,89,35)" rx="2" ry="2" />
<text  x="258.83" y="287.5" ></text>
</g>
<g >
<title>leveldb::ParseInternalKey (1,333,333 samples, 0.08%)</title><rect x="327.7" y="581" width="0.9" height="15.0" fill="rgb(206,47,26)" rx="2" ry="2" />
<text  x="330.69" y="591.5" ></text>
</g>
<g >
<title>std::swap&lt;char const*&gt; (2,666,666 samples, 0.16%)</title><rect x="717.2" y="565" width="1.9" height="15.0" fill="rgb(254,16,40)" rx="2" ry="2" />
<text  x="720.24" y="575.5" ></text>
</g>
<g >
<title>std::mutex::unlock (1,333,333 samples, 0.08%)</title><rect x="421.3" y="565" width="0.9" height="15.0" fill="rgb(235,79,14)" rx="2" ry="2" />
<text  x="424.30" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (1,333,333 samples, 0.08%)</title><rect x="121.6" y="437" width="0.9" height="15.0" fill="rgb(226,38,39)" rx="2" ry="2" />
<text  x="124.57" y="447.5" ></text>
</g>
<g >
<title>__handle_mm_fault (2,666,666 samples, 0.16%)</title><rect x="87.5" y="373" width="1.9" height="15.0" fill="rgb(241,189,41)" rx="2" ry="2" />
<text  x="90.53" y="383.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (1,333,333 samples, 0.08%)</title><rect x="210.4" y="293" width="1.0" height="15.0" fill="rgb(231,190,6)" rx="2" ry="2" />
<text  x="213.45" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (2,666,666 samples, 0.16%)</title><rect x="347.5" y="501" width="1.9" height="15.0" fill="rgb(212,143,21)" rx="2" ry="2" />
<text  x="350.55" y="511.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::~__basic_future (2,666,666 samples, 0.16%)</title><rect x="1023.6" y="597" width="1.9" height="15.0" fill="rgb(228,123,10)" rx="2" ry="2" />
<text  x="1026.59" y="607.5" ></text>
</g>
<g >
<title>_dl_lookup_symbol_x (1,333,333 samples, 0.08%)</title><rect x="1114.4" y="597" width="0.9" height="15.0" fill="rgb(241,121,34)" rx="2" ry="2" />
<text  x="1117.36" y="607.5" ></text>
</g>
<g >
<title>__x64_sys_newstat (1,333,333 samples, 0.08%)</title><rect x="1128.5" y="597" width="1.0" height="15.0" fill="rgb(222,59,39)" rx="2" ry="2" />
<text  x="1131.54" y="607.5" ></text>
</g>
<g >
<title>leveldb::EncodeFixed64 (2,666,666 samples, 0.16%)</title><rect x="708.7" y="581" width="1.9" height="15.0" fill="rgb(229,92,48)" rx="2" ry="2" />
<text  x="711.73" y="591.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (5,333,332 samples, 0.32%)</title><rect x="133.9" y="405" width="3.7" height="15.0" fill="rgb(217,26,6)" rx="2" ry="2" />
<text  x="136.86" y="415.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MergingIterator::Next (19,999,995 samples, 1.20%)</title><rect x="257.7" y="581" width="14.2" height="15.0" fill="rgb(252,1,13)" rx="2" ry="2" />
<text  x="260.72" y="591.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (1,333,333 samples, 0.08%)</title><rect x="920.5" y="565" width="1.0" height="15.0" fill="rgb(233,165,6)" rx="2" ry="2" />
<text  x="923.53" y="575.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::_M_get_result (9,333,331 samples, 0.56%)</title><rect x="1012.2" y="597" width="6.7" height="15.0" fill="rgb(213,189,9)" rx="2" ry="2" />
<text  x="1015.24" y="607.5" ></text>
</g>
<g >
<title>std::__fill_a&lt;char&gt; (2,666,666 samples, 0.16%)</title><rect x="310.7" y="389" width="1.9" height="15.0" fill="rgb(224,78,28)" rx="2" ry="2" />
<text  x="313.67" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1,333,333 samples, 0.08%)</title><rect x="227.5" y="517" width="0.9" height="15.0" fill="rgb(242,145,41)" rx="2" ry="2" />
<text  x="230.47" y="527.5" ></text>
</g>
<g >
<title>leveldb::BuildTable (1,333,333 samples, 0.08%)</title><rect x="1132.3" y="805" width="1.0" height="15.0" fill="rgb(220,152,4)" rx="2" ry="2" />
<text  x="1135.32" y="815.5" ></text>
</g>
<g >
<title>ext4_reserve_inode_write (7,999,998 samples, 0.48%)</title><rect x="846.8" y="277" width="5.7" height="15.0" fill="rgb(211,54,40)" rx="2" ry="2" />
<text  x="849.78" y="287.5" ></text>
</g>
<g >
<title>__gthread_active_p (1,333,333 samples, 0.08%)</title><rect x="939.4" y="533" width="1.0" height="15.0" fill="rgb(233,9,12)" rx="2" ry="2" />
<text  x="942.44" y="543.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.08%)</title><rect x="1127.6" y="469" width="0.9" height="15.0" fill="rgb(247,115,44)" rx="2" ry="2" />
<text  x="1130.60" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,333,333 samples, 0.08%)</title><rect x="80.0" y="437" width="0.9" height="15.0" fill="rgb(221,165,8)" rx="2" ry="2" />
<text  x="82.97" y="447.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (3,999,999 samples, 0.24%)</title><rect x="1053.8" y="517" width="2.9" height="15.0" fill="rgb(229,21,53)" rx="2" ry="2" />
<text  x="1056.85" y="527.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3,999,999 samples, 0.24%)</title><rect x="62.9" y="501" width="2.9" height="15.0" fill="rgb(224,57,14)" rx="2" ry="2" />
<text  x="65.95" y="511.5" ></text>
</g>
<g >
<title>std::_Function_base::_Function_base (1,333,333 samples, 0.08%)</title><rect x="1180.5" y="789" width="1.0" height="15.0" fill="rgb(222,39,1)" rx="2" ry="2" />
<text  x="1183.54" y="799.5" ></text>
</g>
<g >
<title>smp_call_function_single (2,666,666 samples, 0.16%)</title><rect x="1125.7" y="437" width="1.9" height="15.0" fill="rgb(248,173,28)" rx="2" ry="2" />
<text  x="1128.71" y="447.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (1,333,333 samples, 0.08%)</title><rect x="300.3" y="389" width="0.9" height="15.0" fill="rgb(217,101,14)" rx="2" ry="2" />
<text  x="303.27" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::swap (11,999,997 samples, 0.72%)</title><rect x="990.5" y="405" width="8.5" height="15.0" fill="rgb(220,190,28)" rx="2" ry="2" />
<text  x="993.50" y="415.5" ></text>
</g>
<g >
<title>path_lookupat (1,333,333 samples, 0.08%)</title><rect x="1128.5" y="517" width="1.0" height="15.0" fill="rgb(211,197,24)" rx="2" ry="2" />
<text  x="1131.54" y="527.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (6,666,665 samples, 0.40%)</title><rect x="271.9" y="565" width="4.7" height="15.0" fill="rgb(247,42,29)" rx="2" ry="2" />
<text  x="274.91" y="575.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::key (14,666,663 samples, 0.88%)</title><rect x="15.7" y="549" width="10.4" height="15.0" fill="rgb(210,83,21)" rx="2" ry="2" />
<text  x="18.67" y="559.5" ></text>
</g>
<g >
<title>leveldb::Compaction::ShouldStopBefore (6,666,665 samples, 0.40%)</title><rect x="271.9" y="581" width="4.7" height="15.0" fill="rgb(214,59,17)" rx="2" ry="2" />
<text  x="274.91" y="591.5" ></text>
</g>
<g >
<title>wake_up_new_task (1,333,333 samples, 0.08%)</title><rect x="10.0" y="693" width="0.9" height="15.0" fill="rgb(223,224,50)" rx="2" ry="2" />
<text  x="13.00" y="703.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1,333,333 samples, 0.08%)</title><rect x="262.5" y="501" width="0.9" height="15.0" fill="rgb(214,213,32)" rx="2" ry="2" />
<text  x="265.45" y="511.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (1,333,333 samples, 0.08%)</title><rect x="300.3" y="341" width="0.9" height="15.0" fill="rgb(250,108,23)" rx="2" ry="2" />
<text  x="303.27" y="351.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.08%)</title><rect x="275.7" y="453" width="0.9" height="15.0" fill="rgb(251,109,23)" rx="2" ry="2" />
<text  x="278.69" y="463.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.08%)</title><rect x="979.2" y="277" width="0.9" height="15.0" fill="rgb(229,100,19)" rx="2" ry="2" />
<text  x="982.15" y="287.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (3,999,999 samples, 0.24%)</title><rect x="1181.5" y="789" width="2.8" height="15.0" fill="rgb(213,117,26)" rx="2" ry="2" />
<text  x="1184.49" y="799.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (1,333,333 samples, 0.08%)</title><rect x="306.9" y="421" width="0.9" height="15.0" fill="rgb(226,128,8)" rx="2" ry="2" />
<text  x="309.89" y="431.5" ></text>
</g>
<g >
<title>__getblk_gfp (1,333,333 samples, 0.08%)</title><rect x="848.7" y="245" width="0.9" height="15.0" fill="rgb(222,219,45)" rx="2" ry="2" />
<text  x="851.67" y="255.5" ></text>
</g>
<g >
<title>leveldb::Options::Options (1,333,333 samples, 0.08%)</title><rect x="1127.6" y="757" width="0.9" height="15.0" fill="rgb(211,182,5)" rx="2" ry="2" />
<text  x="1130.60" y="767.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (5,333,332 samples, 0.32%)</title><rect x="340.9" y="533" width="3.8" height="15.0" fill="rgb(206,26,1)" rx="2" ry="2" />
<text  x="343.93" y="543.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::~shared_ptr (37,333,324 samples, 2.24%)</title><rect x="1061.4" y="597" width="26.5" height="15.0" fill="rgb(210,210,6)" rx="2" ry="2" />
<text  x="1064.41" y="607.5" >s..</text>
</g>
<g >
<title>std::operator==&lt;char&gt; (3,999,999 samples, 0.24%)</title><rect x="134.8" y="389" width="2.8" height="15.0" fill="rgb(248,8,32)" rx="2" ry="2" />
<text  x="137.81" y="399.5" ></text>
</g>
<g >
<title>leveldb::Slice::operator[] (21,333,328 samples, 1.28%)</title><rect x="43.1" y="517" width="15.1" height="15.0" fill="rgb(217,86,33)" rx="2" ry="2" />
<text  x="46.09" y="527.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (18,666,662 samples, 1.12%)</title><rect x="144.3" y="469" width="13.2" height="15.0" fill="rgb(238,229,30)" rx="2" ry="2" />
<text  x="147.26" y="479.5" ></text>
</g>
<g >
<title>drop_futex_key_refs.isra.17 (1,333,333 samples, 0.08%)</title><rect x="961.2" y="421" width="0.9" height="15.0" fill="rgb(240,153,3)" rx="2" ry="2" />
<text  x="964.19" y="431.5" ></text>
</g>
<g >
<title>touch_atime (1,333,333 samples, 0.08%)</title><rect x="10.9" y="453" width="1.0" height="15.0" fill="rgb(223,122,10)" rx="2" ry="2" />
<text  x="13.95" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1,333,333 samples, 0.08%)</title><rect x="324.9" y="517" width="0.9" height="15.0" fill="rgb(222,42,44)" rx="2" ry="2" />
<text  x="327.86" y="527.5" ></text>
</g>
<g >
<title>rcu_report_qs_rnp (1,333,333 samples, 0.08%)</title><rect x="875.1" y="469" width="1.0" height="15.0" fill="rgb(205,68,27)" rx="2" ry="2" />
<text  x="878.14" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (1,333,333 samples, 0.08%)</title><rect x="1173.9" y="789" width="1.0" height="15.0" fill="rgb(235,205,19)" rx="2" ry="2" />
<text  x="1176.93" y="799.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (69,333,316 samples, 4.17%)</title><rect x="74.3" y="517" width="49.2" height="15.0" fill="rgb(230,60,49)" rx="2" ry="2" />
<text  x="77.29" y="527.5" >leve..</text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (3,999,999 samples, 0.24%)</title><rect x="108.3" y="453" width="2.9" height="15.0" fill="rgb(245,138,25)" rx="2" ry="2" />
<text  x="111.33" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (2,666,666 samples, 0.16%)</title><rect x="312.6" y="469" width="1.9" height="15.0" fill="rgb(208,129,22)" rx="2" ry="2" />
<text  x="315.56" y="479.5" ></text>
</g>
<g >
<title>std::fill_n&lt;char*, unsigned long, char&gt; (2,666,666 samples, 0.16%)</title><rect x="310.7" y="421" width="1.9" height="15.0" fill="rgb(213,26,44)" rx="2" ry="2" />
<text  x="313.67" y="431.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::PrintHeader (3,999,999 samples, 0.24%)</title><rect x="1124.8" y="741" width="2.8" height="15.0" fill="rgb(229,188,0)" rx="2" ry="2" />
<text  x="1127.76" y="751.5" ></text>
</g>
<g >
<title>leveldb::Status::~Status (3,999,999 samples, 0.24%)</title><rect x="427.0" y="597" width="2.8" height="15.0" fill="rgb(208,121,35)" rx="2" ry="2" />
<text  x="429.97" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (3,999,999 samples, 0.24%)</title><rect x="393.9" y="613" width="2.8" height="15.0" fill="rgb(232,92,4)" rx="2" ry="2" />
<text  x="396.88" y="623.5" ></text>
</g>
<g >
<title>__do_page_fault (3,999,999 samples, 0.24%)</title><rect x="1163.5" y="757" width="2.9" height="15.0" fill="rgb(235,50,6)" rx="2" ry="2" />
<text  x="1166.53" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1,333,333 samples, 0.08%)</title><rect x="1108.7" y="597" width="0.9" height="15.0" fill="rgb(253,175,40)" rx="2" ry="2" />
<text  x="1111.69" y="607.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (2,666,666 samples, 0.16%)</title><rect x="239.8" y="485" width="1.9" height="15.0" fill="rgb(220,227,40)" rx="2" ry="2" />
<text  x="242.76" y="495.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (2,666,666 samples, 0.16%)</title><rect x="97.9" y="389" width="1.9" height="15.0" fill="rgb(208,119,11)" rx="2" ry="2" />
<text  x="100.93" y="399.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::ok (1,333,333 samples, 0.08%)</title><rect x="357.9" y="549" width="1.0" height="15.0" fill="rgb(245,12,42)" rx="2" ry="2" />
<text  x="360.95" y="559.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::SetNext (1,333,333 samples, 0.08%)</title><rect x="686.0" y="517" width="1.0" height="15.0" fill="rgb(228,145,14)" rx="2" ry="2" />
<text  x="689.04" y="527.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.08%)</title><rect x="812.7" y="229" width="1.0" height="15.0" fill="rgb(245,17,16)" rx="2" ry="2" />
<text  x="815.74" y="239.5" ></text>
</g>
<g >
<title>note_gp_changes (1,333,333 samples, 0.08%)</title><rect x="315.4" y="421" width="0.9" height="15.0" fill="rgb(229,6,4)" rx="2" ry="2" />
<text  x="318.40" y="431.5" ></text>
</g>
<g >
<title>leveldb::Arena::~Arena (1,333,333 samples, 0.08%)</title><rect x="321.1" y="533" width="0.9" height="15.0" fill="rgb(205,137,21)" rx="2" ry="2" />
<text  x="324.07" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (26,666,660 samples, 1.60%)</title><rect x="1069.0" y="533" width="18.9" height="15.0" fill="rgb(238,147,22)" rx="2" ry="2" />
<text  x="1071.97" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.08%)</title><rect x="1170.1" y="805" width="1.0" height="15.0" fill="rgb(237,33,17)" rx="2" ry="2" />
<text  x="1173.14" y="815.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (2,666,666 samples, 0.16%)</title><rect x="788.2" y="277" width="1.8" height="15.0" fill="rgb(244,32,43)" rx="2" ry="2" />
<text  x="791.16" y="287.5" ></text>
</g>
<g >
<title>page_fault (2,666,666 samples, 0.16%)</title><rect x="310.7" y="357" width="1.9" height="15.0" fill="rgb(246,62,28)" rx="2" ry="2" />
<text  x="313.67" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (1,333,333 samples, 0.08%)</title><rect x="703.1" y="549" width="0.9" height="15.0" fill="rgb(213,55,14)" rx="2" ry="2" />
<text  x="706.06" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2,666,666 samples, 0.16%)</title><rect x="234.1" y="501" width="1.9" height="15.0" fill="rgb(224,193,12)" rx="2" ry="2" />
<text  x="237.09" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;std::__future_base::_State_baseV2,  (1,333,333 samples, 0.08%)</title><rect x="1017.9" y="581" width="1.0" height="15.0" fill="rgb(207,103,17)" rx="2" ry="2" />
<text  x="1020.92" y="591.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1,333,333 samples, 0.08%)</title><rect x="104.6" y="389" width="0.9" height="15.0" fill="rgb(213,88,0)" rx="2" ry="2" />
<text  x="107.55" y="399.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MemTableInserter::Put (357,333,244 samples, 21.47%)</title><rect x="435.5" y="565" width="253.4" height="15.0" fill="rgb(239,31,53)" rx="2" ry="2" />
<text  x="438.48" y="575.5" >leveldb::(anonymous namespace)::M..</text>
</g>
<g >
<title>leveldb::Status::OK (1,333,333 samples, 0.08%)</title><rect x="868.5" y="517" width="1.0" height="15.0" fill="rgb(206,6,2)" rx="2" ry="2" />
<text  x="871.53" y="527.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::value (6,666,665 samples, 0.40%)</title><rect x="26.1" y="549" width="4.7" height="15.0" fill="rgb(215,71,25)" rx="2" ry="2" />
<text  x="29.07" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (3,999,999 samples, 0.24%)</title><rect x="324.9" y="549" width="2.8" height="15.0" fill="rgb(239,206,47)" rx="2" ry="2" />
<text  x="327.86" y="559.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (2,666,666 samples, 0.16%)</title><rect x="115.0" y="389" width="1.8" height="15.0" fill="rgb(214,83,27)" rx="2" ry="2" />
<text  x="117.95" y="399.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.08%)</title><rect x="104.6" y="357" width="0.9" height="15.0" fill="rgb(246,56,31)" rx="2" ry="2" />
<text  x="107.55" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (3,999,999 samples, 0.24%)</title><rect x="213.3" y="485" width="2.8" height="15.0" fill="rgb(248,14,12)" rx="2" ry="2" />
<text  x="216.29" y="495.5" ></text>
</g>
<g >
<title>iput (7,999,998 samples, 0.48%)</title><rect x="1116.2" y="629" width="5.7" height="15.0" fill="rgb(227,7,39)" rx="2" ry="2" />
<text  x="1119.25" y="639.5" ></text>
</g>
<g >
<title>snappy::RawCompress (1,333,333 samples, 0.08%)</title><rect x="193.4" y="501" width="1.0" height="15.0" fill="rgb(238,81,0)" rx="2" ry="2" />
<text  x="196.43" y="511.5" ></text>
</g>
<g >
<title>filemap_fault (2,666,666 samples, 0.16%)</title><rect x="1164.5" y="677" width="1.9" height="15.0" fill="rgb(226,70,6)" rx="2" ry="2" />
<text  x="1167.47" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_ebo_helper&lt;0, std::allocator&lt;std::__future_base::_State_baseV2&gt;, true&gt;::_S_get (1,333,333 samples, 0.08%)</title><rect x="1071.8" y="501" width="1.0" height="15.0" fill="rgb(207,224,24)" rx="2" ry="2" />
<text  x="1074.81" y="511.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseToSpans (1,333,333 samples, 0.08%)</title><rect x="1121.9" y="581" width="1.0" height="15.0" fill="rgb(231,188,8)" rx="2" ry="2" />
<text  x="1124.92" y="591.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (3,999,999 samples, 0.24%)</title><rect x="303.1" y="501" width="2.8" height="15.0" fill="rgb(252,35,49)" rx="2" ry="2" />
<text  x="306.11" y="511.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl&lt;std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.08%)</title><rect x="979.2" y="309" width="0.9" height="15.0" fill="rgb(224,153,33)" rx="2" ry="2" />
<text  x="982.15" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1,333,333 samples, 0.08%)</title><rect x="66.7" y="517" width="1.0" height="15.0" fill="rgb(223,136,8)" rx="2" ry="2" />
<text  x="69.73" y="527.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (3,999,999 samples, 0.24%)</title><rect x="1152.2" y="805" width="2.8" height="15.0" fill="rgb(214,206,34)" rx="2" ry="2" />
<text  x="1155.18" y="815.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt;::_Deque_iterator (6,666,665 samples, 0.40%)</title><rect x="925.3" y="565" width="4.7" height="15.0" fill="rgb(220,38,51)" rx="2" ry="2" />
<text  x="928.26" y="575.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadNodeEntryPoint (493,333,210 samples, 29.65%)</title><rect x="10.9" y="677" width="349.9" height="15.0" fill="rgb(247,49,39)" rx="2" ry="2" />
<text  x="13.95" y="687.5" >leveldb::(anonymous namespace)::PosixEnv::Backg..</text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (3,999,999 samples, 0.24%)</title><rect x="1141.8" y="789" width="2.8" height="15.0" fill="rgb(238,194,8)" rx="2" ry="2" />
<text  x="1144.78" y="799.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (114,666,638 samples, 6.89%)</title><rect x="579.2" y="469" width="81.3" height="15.0" fill="rgb(234,5,9)" rx="2" ry="2" />
<text  x="582.20" y="479.5" >leveldb::..</text>
</g>
<g >
<title>leveldb::Slice::operator[] (2,666,666 samples, 0.16%)</title><rect x="283.3" y="501" width="1.8" height="15.0" fill="rgb(249,132,3)" rx="2" ry="2" />
<text  x="286.25" y="511.5" ></text>
</g>
<g >
<title>_do_fork (1,333,333 samples, 0.08%)</title><rect x="10.0" y="709" width="0.9" height="15.0" fill="rgb(241,27,2)" rx="2" ry="2" />
<text  x="13.00" y="719.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::Delete (1,333,333 samples, 0.08%)</title><rect x="105.5" y="245" width="0.9" height="15.0" fill="rgb(253,218,2)" rx="2" ry="2" />
<text  x="108.50" y="255.5" ></text>
</g>
<g >
<title>ext4_mark_iloc_dirty (2,666,666 samples, 0.16%)</title><rect x="769.2" y="293" width="1.9" height="15.0" fill="rgb(241,158,7)" rx="2" ry="2" />
<text  x="772.25" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (2,666,666 samples, 0.16%)</title><rect x="112.1" y="437" width="1.9" height="15.0" fill="rgb(224,101,40)" rx="2" ry="2" />
<text  x="115.12" y="447.5" ></text>
</g>
<g >
<title>seq_vprintf (1,333,333 samples, 0.08%)</title><rect x="1124.8" y="453" width="0.9" height="15.0" fill="rgb(228,147,8)" rx="2" ry="2" />
<text  x="1127.76" y="463.5" ></text>
</g>
<g >
<title>do_page_fault (3,999,999 samples, 0.24%)</title><rect x="1163.5" y="773" width="2.9" height="15.0" fill="rgb(206,191,42)" rx="2" ry="2" />
<text  x="1166.53" y="783.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;leveldb::Status&gt;::_M_set (2,666,666 samples, 0.16%)</title><rect x="973.5" y="373" width="1.9" height="15.0" fill="rgb(246,65,4)" rx="2" ry="2" />
<text  x="976.48" y="383.5" ></text>
</g>
<g >
<title>ext4_set_page_dirty (1,333,333 samples, 0.08%)</title><rect x="309.7" y="309" width="1.0" height="15.0" fill="rgb(213,36,3)" rx="2" ry="2" />
<text  x="312.73" y="319.5" ></text>
</g>
<g >
<title>leveldb::PutVarint32 (5,333,332 samples, 0.32%)</title><rect x="39.3" y="517" width="3.8" height="15.0" fill="rgb(240,202,2)" rx="2" ry="2" />
<text  x="42.31" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch (1,333,333 samples, 0.08%)</title><rect x="1034.9" y="501" width="1.0" height="15.0" fill="rgb(231,137,33)" rx="2" ry="2" />
<text  x="1037.94" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add (1,333,333 samples, 0.08%)</title><rect x="1022.6" y="501" width="1.0" height="15.0" fill="rgb(245,212,6)" rx="2" ry="2" />
<text  x="1025.64" y="511.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (2,666,666 samples, 0.16%)</title><rect x="1185.3" y="789" width="1.9" height="15.0" fill="rgb(228,8,17)" rx="2" ry="2" />
<text  x="1188.27" y="799.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_default_append (2,666,666 samples, 0.16%)</title><rect x="310.7" y="485" width="1.9" height="15.0" fill="rgb(246,26,32)" rx="2" ry="2" />
<text  x="313.67" y="495.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::PrintEnvironment (3,999,999 samples, 0.24%)</title><rect x="1124.8" y="725" width="2.8" height="15.0" fill="rgb(238,141,28)" rx="2" ry="2" />
<text  x="1127.76" y="735.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::PosixEnv (1,333,333 samples, 0.08%)</title><rect x="1127.6" y="709" width="0.9" height="15.0" fill="rgb(245,184,36)" rx="2" ry="2" />
<text  x="1130.60" y="719.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::WriteLevel0Table (341,333,248 samples, 20.51%)</title><rect x="13.8" y="581" width="242.0" height="15.0" fill="rgb(246,95,19)" rx="2" ry="2" />
<text  x="16.78" y="591.5" >leveldb::DBImpl::WriteLevel0Table</text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.08%)</title><rect x="392.9" y="549" width="1.0" height="15.0" fill="rgb(216,21,15)" rx="2" ry="2" />
<text  x="395.93" y="559.5" ></text>
</g>
<g >
<title>__fget_light (2,666,666 samples, 0.16%)</title><rect x="747.5" y="421" width="1.9" height="15.0" fill="rgb(246,2,24)" rx="2" ry="2" />
<text  x="750.50" y="431.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (1,333,333 samples, 0.08%)</title><rect x="919.6" y="565" width="0.9" height="15.0" fill="rgb(244,3,45)" rx="2" ry="2" />
<text  x="922.58" y="575.5" ></text>
</g>
<g >
<title>operator new[] (3,999,999 samples, 0.24%)</title><rect x="114.0" y="421" width="2.8" height="15.0" fill="rgb(238,157,24)" rx="2" ry="2" />
<text  x="117.01" y="431.5" ></text>
</g>
<g >
<title>lru_add_drain_cpu (1,333,333 samples, 0.08%)</title><rect x="105.5" y="69" width="0.9" height="15.0" fill="rgb(221,121,32)" rx="2" ry="2" />
<text  x="108.50" y="79.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (2,666,666 samples, 0.16%)</title><rect x="533.8" y="437" width="1.9" height="15.0" fill="rgb(226,147,29)" rx="2" ry="2" />
<text  x="536.81" y="447.5" ></text>
</g>
<g >
<title>__do_sys_madvise (1,333,333 samples, 0.08%)</title><rect x="255.8" y="309" width="1.0" height="15.0" fill="rgb(206,43,13)" rx="2" ry="2" />
<text  x="258.83" y="319.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (1,333,333 samples, 0.08%)</title><rect x="1155.0" y="789" width="1.0" height="15.0" fill="rgb(214,57,39)" rx="2" ry="2" />
<text  x="1158.02" y="799.5" ></text>
</g>
<g >
<title>ext4_mark_inode_dirty (3,999,999 samples, 0.24%)</title><rect x="769.2" y="309" width="2.9" height="15.0" fill="rgb(230,27,36)" rx="2" ry="2" />
<text  x="772.25" y="319.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::InsertRange (1,333,333 samples, 0.08%)</title><rect x="321.1" y="469" width="0.9" height="15.0" fill="rgb(246,135,25)" rx="2" ry="2" />
<text  x="324.07" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::allocate (3,999,999 samples, 0.24%)</title><rect x="114.0" y="453" width="2.8" height="15.0" fill="rgb(211,135,41)" rx="2" ry="2" />
<text  x="117.01" y="463.5" ></text>
</g>
<g >
<title>_dl_start_final (3,999,999 samples, 0.24%)</title><rect x="1128.5" y="773" width="2.9" height="15.0" fill="rgb(249,112,13)" rx="2" ry="2" />
<text  x="1131.54" y="783.5" ></text>
</g>
<g >
<title>leveldb::ParseInternalKey (1,333,333 samples, 0.08%)</title><rect x="70.5" y="533" width="1.0" height="15.0" fill="rgb(220,163,35)" rx="2" ry="2" />
<text  x="73.51" y="543.5" ></text>
</g>
<g >
<title>memcpy_erms (1,333,333 samples, 0.08%)</title><rect x="1124.8" y="437" width="0.9" height="15.0" fill="rgb(216,151,48)" rx="2" ry="2" />
<text  x="1127.76" y="447.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (45,333,322 samples, 2.72%)</title><rect x="969.7" y="485" width="32.1" height="15.0" fill="rgb(219,26,28)" rx="2" ry="2" />
<text  x="972.70" y="495.5" >st..</text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (2,666,666 samples, 0.16%)</title><rect x="440.2" y="421" width="1.9" height="15.0" fill="rgb(253,115,12)" rx="2" ry="2" />
<text  x="443.21" y="431.5" ></text>
</g>
<g >
<title>start_this_handle (1,333,333 samples, 0.08%)</title><rect x="784.4" y="325" width="0.9" height="15.0" fill="rgb(228,200,47)" rx="2" ry="2" />
<text  x="787.38" y="335.5" ></text>
</g>
<g >
<title>leveldb::BuildTable (50,666,654 samples, 3.04%)</title><rect x="276.6" y="549" width="36.0" height="15.0" fill="rgb(236,9,14)" rx="2" ry="2" />
<text  x="279.63" y="559.5" >lev..</text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (1,333,333 samples, 0.08%)</title><rect x="1180.5" y="805" width="1.0" height="15.0" fill="rgb(240,69,24)" rx="2" ry="2" />
<text  x="1183.54" y="815.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (1,333,333 samples, 0.08%)</title><rect x="1188.1" y="789" width="1.0" height="15.0" fill="rgb(239,205,36)" rx="2" ry="2" />
<text  x="1191.11" y="799.5" ></text>
</g>
<g >
<title>_raw_read_lock (2,666,666 samples, 0.16%)</title><rect x="777.8" y="309" width="1.8" height="15.0" fill="rgb(250,26,54)" rx="2" ry="2" />
<text  x="780.76" y="319.5" ></text>
</g>
<g >
<title>_dl_lookup_symbol_x (2,666,666 samples, 0.16%)</title><rect x="1129.5" y="677" width="1.9" height="15.0" fill="rgb(240,184,18)" rx="2" ry="2" />
<text  x="1132.49" y="687.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (17,333,329 samples, 1.04%)</title><rect x="230.3" y="549" width="12.3" height="15.0" fill="rgb(243,88,11)" rx="2" ry="2" />
<text  x="233.30" y="559.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (5,333,332 samples, 0.32%)</title><rect x="768.3" y="341" width="3.8" height="15.0" fill="rgb(219,25,53)" rx="2" ry="2" />
<text  x="771.30" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (13,333,330 samples, 0.80%)</title><rect x="290.8" y="437" width="9.5" height="15.0" fill="rgb(221,56,25)" rx="2" ry="2" />
<text  x="293.82" y="447.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::Delete (1,333,333 samples, 0.08%)</title><rect x="255.8" y="437" width="1.0" height="15.0" fill="rgb(207,5,48)" rx="2" ry="2" />
<text  x="258.83" y="447.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.08%)</title><rect x="300.3" y="277" width="0.9" height="15.0" fill="rgb(211,68,33)" rx="2" ry="2" />
<text  x="303.27" y="287.5" ></text>
</g>
<g >
<title>__GI___clone (1,333,333 samples, 0.08%)</title><rect x="10.0" y="773" width="0.9" height="15.0" fill="rgb(228,28,11)" rx="2" ry="2" />
<text  x="13.00" y="783.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1,333,333 samples, 0.08%)</title><rect x="1043.4" y="501" width="1.0" height="15.0" fill="rgb(242,100,52)" rx="2" ry="2" />
<text  x="1046.45" y="511.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::RemoveFile (2,666,666 samples, 0.16%)</title><rect x="11.9" y="565" width="1.9" height="15.0" fill="rgb(226,209,28)" rx="2" ry="2" />
<text  x="14.89" y="575.5" ></text>
</g>
<g >
<title>snappy::Compress (5,333,332 samples, 0.32%)</title><rect x="354.2" y="501" width="3.7" height="15.0" fill="rgb(209,178,19)" rx="2" ry="2" />
<text  x="357.17" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add (1,333,333 samples, 0.08%)</title><rect x="1110.6" y="789" width="0.9" height="15.0" fill="rgb(251,161,54)" rx="2" ry="2" />
<text  x="1113.58" y="799.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (6,666,665 samples, 0.40%)</title><rect x="102.7" y="453" width="4.7" height="15.0" fill="rgb(245,105,4)" rx="2" ry="2" />
<text  x="105.66" y="463.5" ></text>
</g>
<g >
<title>leveldb::VersionSet::SetLastSequence (1,333,333 samples, 0.08%)</title><rect x="1136.1" y="789" width="1.0" height="15.0" fill="rgb(242,84,3)" rx="2" ry="2" />
<text  x="1139.11" y="799.5" ></text>
</g>
<g >
<title>kmem_cache_free (3,999,999 samples, 0.24%)</title><rect x="803.3" y="309" width="2.8" height="15.0" fill="rgb(242,164,39)" rx="2" ry="2" />
<text  x="806.29" y="319.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.08%)</title><rect x="284.2" y="485" width="0.9" height="15.0" fill="rgb(216,110,2)" rx="2" ry="2" />
<text  x="287.20" y="495.5" ></text>
</g>
<g >
<title>ext4_reserve_inode_write (1,333,333 samples, 0.08%)</title><rect x="771.1" y="293" width="1.0" height="15.0" fill="rgb(216,77,18)" rx="2" ry="2" />
<text  x="774.14" y="303.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_S_check&lt;std::__future_base::_State_baseV2&gt; (3,999,999 samples, 0.24%)</title><rect x="1029.3" y="565" width="2.8" height="15.0" fill="rgb(208,159,39)" rx="2" ry="2" />
<text  x="1032.26" y="575.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Equal (11,999,997 samples, 0.72%)</title><rect x="449.7" y="517" width="8.5" height="15.0" fill="rgb(211,51,22)" rx="2" ry="2" />
<text  x="452.66" y="527.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::Add (46,666,655 samples, 2.80%)</title><rect x="34.6" y="533" width="33.1" height="15.0" fill="rgb(238,63,40)" rx="2" ry="2" />
<text  x="37.58" y="543.5" >le..</text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.08%)</title><rect x="1087.9" y="565" width="0.9" height="15.0" fill="rgb(234,14,10)" rx="2" ry="2" />
<text  x="1090.88" y="575.5" ></text>
</g>
<g >
<title>vfs_write (165,333,292 samples, 9.94%)</title><rect x="751.3" y="437" width="117.2" height="15.0" fill="rgb(205,225,33)" rx="2" ry="2" />
<text  x="754.28" y="447.5" >vfs_write</text>
</g>
<g >
<title>alloc_pages_vma (1,333,333 samples, 0.08%)</title><rect x="180.2" y="357" width="0.9" height="15.0" fill="rgb(238,58,52)" rx="2" ry="2" />
<text  x="183.19" y="367.5" ></text>
</g>
<g >
<title>TCMalloc_SystemRelease (1,333,333 samples, 0.08%)</title><rect x="1121.9" y="517" width="1.0" height="15.0" fill="rgb(208,153,10)" rx="2" ry="2" />
<text  x="1124.92" y="527.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="619.9" y="405" width="0.9" height="15.0" fill="rgb(218,57,51)" rx="2" ry="2" />
<text  x="622.86" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (2,666,666 samples, 0.16%)</title><rect x="303.1" y="469" width="1.9" height="15.0" fill="rgb(225,209,11)" rx="2" ry="2" />
<text  x="306.11" y="479.5" ></text>
</g>
<g >
<title>tcmalloc::SizeMap::Init (1,333,333 samples, 0.08%)</title><rect x="1112.5" y="693" width="0.9" height="15.0" fill="rgb(212,26,39)" rx="2" ry="2" />
<text  x="1115.47" y="703.5" ></text>
</g>
<g >
<title>leveldb::Random::Uniform (1,333,333 samples, 0.08%)</title><rect x="1088.8" y="629" width="1.0" height="15.0" fill="rgb(215,58,11)" rx="2" ry="2" />
<text  x="1091.83" y="639.5" ></text>
</g>
<g >
<title>__GI___sigprocmask (1,333,333 samples, 0.08%)</title><rect x="441.2" y="213" width="0.9" height="15.0" fill="rgb(211,114,50)" rx="2" ry="2" />
<text  x="444.15" y="223.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.08%)</title><rect x="1177.7" y="789" width="1.0" height="15.0" fill="rgb(227,226,8)" rx="2" ry="2" />
<text  x="1180.71" y="799.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.08%)</title><rect x="384.4" y="613" width="1.0" height="15.0" fill="rgb(234,162,30)" rx="2" ry="2" />
<text  x="387.42" y="623.5" ></text>
</g>
<g >
<title>ksys_write (174,666,623 samples, 10.50%)</title><rect x="744.7" y="453" width="123.8" height="15.0" fill="rgb(210,225,37)" rx="2" ry="2" />
<text  x="747.66" y="463.5" >ksys_write</text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (2,666,666 samples, 0.16%)</title><rect x="268.1" y="517" width="1.9" height="15.0" fill="rgb(249,127,38)" rx="2" ry="2" />
<text  x="271.12" y="527.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (3,999,999 samples, 0.24%)</title><rect x="439.3" y="453" width="2.8" height="15.0" fill="rgb(246,133,6)" rx="2" ry="2" />
<text  x="442.26" y="463.5" ></text>
</g>
<g >
<title>snappy::RawCompress (5,333,332 samples, 0.32%)</title><rect x="354.2" y="517" width="3.7" height="15.0" fill="rgb(250,78,23)" rx="2" ry="2" />
<text  x="357.17" y="527.5" ></text>
</g>
<g >
<title>[libunwind.so.8.0.1] (1,333,333 samples, 0.08%)</title><rect x="441.2" y="277" width="0.9" height="15.0" fill="rgb(249,132,45)" rx="2" ry="2" />
<text  x="444.15" y="287.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.08%)</title><rect x="271.0" y="485" width="0.9" height="15.0" fill="rgb(211,221,33)" rx="2" ry="2" />
<text  x="273.96" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (2,666,666 samples, 0.16%)</title><rect x="312.6" y="501" width="1.9" height="15.0" fill="rgb(232,58,19)" rx="2" ry="2" />
<text  x="315.56" y="511.5" ></text>
</g>
<g >
<title>__GI___pthread_once (1,333,333 samples, 0.08%)</title><rect x="938.5" y="533" width="0.9" height="15.0" fill="rgb(221,157,18)" rx="2" ry="2" />
<text  x="941.49" y="543.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed64 (1,333,333 samples, 0.08%)</title><rect x="70.5" y="517" width="1.0" height="15.0" fill="rgb(224,111,36)" rx="2" ry="2" />
<text  x="73.51" y="527.5" ></text>
</g>
<g >
<title>std::forward&lt;bool*&gt; (1,333,333 samples, 0.08%)</title><rect x="1000.9" y="469" width="0.9" height="15.0" fill="rgb(242,151,18)" rx="2" ry="2" />
<text  x="1003.90" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (5,333,332 samples, 0.32%)</title><rect x="116.8" y="453" width="3.8" height="15.0" fill="rgb(218,179,43)" rx="2" ry="2" />
<text  x="119.84" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux (1,333,333 samples, 0.08%)</title><rect x="178.3" y="485" width="0.9" height="15.0" fill="rgb(209,178,7)" rx="2" ry="2" />
<text  x="181.30" y="495.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1,333,333 samples, 0.08%)</title><rect x="1024.5" y="549" width="1.0" height="15.0" fill="rgb(237,115,32)" rx="2" ry="2" />
<text  x="1027.54" y="559.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.08%)</title><rect x="277.6" y="501" width="0.9" height="15.0" fill="rgb(232,182,44)" rx="2" ry="2" />
<text  x="280.58" y="511.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (1,333,333 samples, 0.08%)</title><rect x="255.8" y="325" width="1.0" height="15.0" fill="rgb(227,18,15)" rx="2" ry="2" />
<text  x="258.83" y="335.5" ></text>
</g>
<g >
<title>do_page_fault (13,333,330 samples, 0.80%)</title><rect x="202.9" y="357" width="9.4" height="15.0" fill="rgb(206,98,44)" rx="2" ry="2" />
<text  x="205.88" y="367.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.08%)</title><rect x="1113.4" y="597" width="1.0" height="15.0" fill="rgb(213,107,8)" rx="2" ry="2" />
<text  x="1116.41" y="607.5" ></text>
</g>
<g >
<title>leveldb::PutFixed32 (1,333,333 samples, 0.08%)</title><rect x="142.4" y="485" width="0.9" height="15.0" fill="rgb(209,213,47)" rx="2" ry="2" />
<text  x="145.37" y="495.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::Benchmark (9,333,331 samples, 0.56%)</title><rect x="1115.3" y="757" width="6.6" height="15.0" fill="rgb(238,86,36)" rx="2" ry="2" />
<text  x="1118.30" y="767.5" ></text>
</g>
<g >
<title>munmap (1,333,333 samples, 0.08%)</title><rect x="309.7" y="485" width="1.0" height="15.0" fill="rgb(240,60,7)" rx="2" ry="2" />
<text  x="312.73" y="495.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (1,333,333 samples, 0.08%)</title><rect x="243.5" y="533" width="1.0" height="15.0" fill="rgb(253,159,31)" rx="2" ry="2" />
<text  x="246.54" y="543.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::SetSequence (6,666,665 samples, 0.40%)</title><rect x="707.8" y="597" width="4.7" height="15.0" fill="rgb(207,148,47)" rx="2" ry="2" />
<text  x="710.79" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt;::_M_initialize_map (1,333,333 samples, 0.08%)</title><rect x="1127.6" y="549" width="0.9" height="15.0" fill="rgb(240,25,52)" rx="2" ry="2" />
<text  x="1130.60" y="559.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.08%)</title><rect x="727.6" y="501" width="1.0" height="15.0" fill="rgb(242,93,22)" rx="2" ry="2" />
<text  x="730.64" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (6,666,665 samples, 0.40%)</title><rect x="89.4" y="437" width="4.8" height="15.0" fill="rgb(219,221,10)" rx="2" ry="2" />
<text  x="92.42" y="447.5" ></text>
</g>
<g >
<title>_GLOBAL__sub_I__ZN7leveldb4test12RandomStringEPNS_6RandomEiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE (1,333,333 samples, 0.08%)</title><rect x="1114.4" y="757" width="0.9" height="15.0" fill="rgb(235,170,20)" rx="2" ry="2" />
<text  x="1117.36" y="767.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;char*, unsigned long&gt; (2,666,666 samples, 0.16%)</title><rect x="310.7" y="453" width="1.9" height="15.0" fill="rgb(235,105,32)" rx="2" ry="2" />
<text  x="313.67" y="463.5" ></text>
</g>
<g >
<title>kmem_cache_free (1,333,333 samples, 0.08%)</title><rect x="963.1" y="309" width="0.9" height="15.0" fill="rgb(206,224,7)" rx="2" ry="2" />
<text  x="966.08" y="319.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.08%)</title><rect x="315.4" y="437" width="0.9" height="15.0" fill="rgb(246,116,6)" rx="2" ry="2" />
<text  x="318.40" y="447.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (3,999,999 samples, 0.24%)</title><rect x="1083.2" y="405" width="2.8" height="15.0" fill="rgb(246,64,54)" rx="2" ry="2" />
<text  x="1086.16" y="415.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::DecommitSpan (1,333,333 samples, 0.08%)</title><rect x="1121.9" y="533" width="1.0" height="15.0" fill="rgb(218,57,41)" rx="2" ry="2" />
<text  x="1124.92" y="543.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.08%)</title><rect x="988.6" y="325" width="1.0" height="15.0" fill="rgb(234,223,52)" rx="2" ry="2" />
<text  x="991.61" y="335.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (30,666,659 samples, 1.84%)</title><rect x="600.0" y="437" width="21.7" height="15.0" fill="rgb(205,16,13)" rx="2" ry="2" />
<text  x="603.00" y="447.5" >l..</text>
</g>
<g >
<title>generic_update_time (6,666,665 samples, 0.40%)</title><rect x="767.4" y="357" width="4.7" height="15.0" fill="rgb(226,163,32)" rx="2" ry="2" />
<text  x="770.36" y="367.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (3,999,999 samples, 0.24%)</title><rect x="337.1" y="565" width="2.9" height="15.0" fill="rgb(210,0,36)" rx="2" ry="2" />
<text  x="340.15" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::push_back (1,333,333 samples, 0.08%)</title><rect x="932.8" y="597" width="1.0" height="15.0" fill="rgb(226,43,47)" rx="2" ry="2" />
<text  x="935.82" y="607.5" ></text>
</g>
<g >
<title>__GI__IO_file_open (2,666,666 samples, 0.16%)</title><rect x="1125.7" y="661" width="1.9" height="15.0" fill="rgb(246,175,47)" rx="2" ry="2" />
<text  x="1128.71" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (1,333,333 samples, 0.08%)</title><rect x="223.7" y="437" width="0.9" height="15.0" fill="rgb(254,39,42)" rx="2" ry="2" />
<text  x="226.69" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt;::_Deque_iterator (1,333,333 samples, 0.08%)</title><rect x="407.1" y="565" width="1.0" height="15.0" fill="rgb(215,143,25)" rx="2" ry="2" />
<text  x="410.12" y="575.5" ></text>
</g>
<g >
<title>_start (23,999,994 samples, 1.44%)</title><rect x="1114.4" y="805" width="17.0" height="15.0" fill="rgb(254,166,6)" rx="2" ry="2" />
<text  x="1117.36" y="815.5" ></text>
</g>
<g >
<title>fsnotify (2,666,666 samples, 0.16%)</title><rect x="865.7" y="421" width="1.9" height="15.0" fill="rgb(250,110,45)" rx="2" ry="2" />
<text  x="868.69" y="431.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (22,666,661 samples, 1.36%)</title><rect x="123.5" y="517" width="16.0" height="15.0" fill="rgb(224,125,36)" rx="2" ry="2" />
<text  x="126.46" y="527.5" ></text>
</g>
<g >
<title>file_free_rcu (1,333,333 samples, 0.08%)</title><rect x="333.4" y="453" width="0.9" height="15.0" fill="rgb(253,151,44)" rx="2" ry="2" />
<text  x="336.37" y="463.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (2,666,666 samples, 0.16%)</title><rect x="347.5" y="485" width="1.9" height="15.0" fill="rgb(232,169,7)" rx="2" ry="2" />
<text  x="350.55" y="495.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_set_retrieved_flag (2,666,666 samples, 0.16%)</title><rect x="1027.4" y="565" width="1.9" height="15.0" fill="rgb(254,44,29)" rx="2" ry="2" />
<text  x="1030.37" y="575.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::InsertInto (386,666,570 samples, 23.24%)</title><rect x="433.6" y="597" width="274.2" height="15.0" fill="rgb(232,176,29)" rx="2" ry="2" />
<text  x="436.59" y="607.5" >leveldb::WriteBatchInternal::InsertI..</text>
</g>
<g >
<title>__x64_sys_futex (11,999,997 samples, 0.72%)</title><rect x="958.3" y="469" width="8.6" height="15.0" fill="rgb(224,14,26)" rx="2" ry="2" />
<text  x="961.35" y="479.5" ></text>
</g>
<g >
<title>db_bench (1,663,999,584 samples, 100.00%)</title><rect x="10.0" y="821" width="1180.0" height="15.0" fill="rgb(205,108,10)" rx="2" ry="2" />
<text  x="13.00" y="831.5" >db_bench</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (9,333,331 samples, 0.56%)</title><rect x="1115.3" y="693" width="6.6" height="15.0" fill="rgb(244,226,36)" rx="2" ry="2" />
<text  x="1118.30" y="703.5" ></text>
</g>
<g >
<title>__x64_sys_newlstat (1,333,333 samples, 0.08%)</title><rect x="1113.4" y="581" width="1.0" height="15.0" fill="rgb(246,212,24)" rx="2" ry="2" />
<text  x="1116.41" y="591.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::_M_head (1,333,333 samples, 0.08%)</title><rect x="1000.0" y="357" width="0.9" height="15.0" fill="rgb(223,62,38)" rx="2" ry="2" />
<text  x="1002.95" y="367.5" ></text>
</g>
<g >
<title>truncate_inode_pages_range (7,999,998 samples, 0.48%)</title><rect x="1116.2" y="565" width="5.7" height="15.0" fill="rgb(247,139,53)" rx="2" ry="2" />
<text  x="1119.25" y="575.5" ></text>
</g>
<g >
<title>radix_tree_lookup_slot (1,333,333 samples, 0.08%)</title><rect x="792.9" y="293" width="0.9" height="15.0" fill="rgb(246,68,6)" rx="2" ry="2" />
<text  x="795.88" y="303.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::Writer::~Writer (1,333,333 samples, 0.08%)</title><rect x="1137.1" y="805" width="0.9" height="15.0" fill="rgb(222,196,11)" rx="2" ry="2" />
<text  x="1140.05" y="815.5" ></text>
</g>
<g >
<title>leveldb::MemTable::~MemTable (1,333,333 samples, 0.08%)</title><rect x="321.1" y="549" width="0.9" height="15.0" fill="rgb(246,229,10)" rx="2" ry="2" />
<text  x="324.07" y="559.5" ></text>
</g>
<g >
<title>__do_page_fault (3,999,999 samples, 0.24%)</title><rect x="86.6" y="405" width="2.8" height="15.0" fill="rgb(209,195,0)" rx="2" ry="2" />
<text  x="89.59" y="415.5" ></text>
</g>
<g >
<title>leveldb::Status::operator= (7,999,998 samples, 0.48%)</title><rect x="872.3" y="565" width="5.7" height="15.0" fill="rgb(226,29,43)" rx="2" ry="2" />
<text  x="875.31" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (2,666,666 samples, 0.16%)</title><rect x="345.7" y="453" width="1.8" height="15.0" fill="rgb(207,114,16)" rx="2" ry="2" />
<text  x="348.66" y="463.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::GrowHeap (1,333,333 samples, 0.08%)</title><rect x="105.5" y="261" width="0.9" height="15.0" fill="rgb(231,229,8)" rx="2" ry="2" />
<text  x="108.50" y="271.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (1,333,333 samples, 0.08%)</title><rect x="300.3" y="373" width="0.9" height="15.0" fill="rgb(232,188,6)" rx="2" ry="2" />
<text  x="303.27" y="383.5" ></text>
</g>
<g >
<title>leveldb::port::Snappy_Uncompress (1,333,333 samples, 0.08%)</title><rect x="269.1" y="469" width="0.9" height="15.0" fill="rgb(227,215,43)" rx="2" ry="2" />
<text  x="272.07" y="479.5" ></text>
</g>
<g >
<title>ext4_invalidatepage (1,333,333 samples, 0.08%)</title><rect x="1121.0" y="517" width="0.9" height="15.0" fill="rgb(252,52,16)" rx="2" ry="2" />
<text  x="1123.98" y="527.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (1,333,333 samples, 0.08%)</title><rect x="348.5" y="469" width="0.9" height="15.0" fill="rgb(212,222,41)" rx="2" ry="2" />
<text  x="351.49" y="479.5" ></text>
</g>
<g >
<title>__page_cache_alloc (2,666,666 samples, 0.16%)</title><rect x="788.2" y="309" width="1.8" height="15.0" fill="rgb(223,103,1)" rx="2" ry="2" />
<text  x="791.16" y="319.5" ></text>
</g>
<g >
<title>__wake_up (3,999,999 samples, 0.24%)</title><rect x="800.4" y="309" width="2.9" height="15.0" fill="rgb(220,150,13)" rx="2" ry="2" />
<text  x="803.45" y="319.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="1127.6" y="517" width="0.9" height="15.0" fill="rgb(227,39,6)" rx="2" ry="2" />
<text  x="1130.60" y="527.5" ></text>
</g>
<g >
<title>ext4_evict_inode (2,666,666 samples, 0.16%)</title><rect x="11.9" y="437" width="1.9" height="15.0" fill="rgb(215,125,1)" rx="2" ry="2" />
<text  x="14.89" y="447.5" ></text>
</g>
<g >
<title>__generic_file_write_iter (146,666,630 samples, 8.81%)</title><rect x="757.9" y="389" width="104.0" height="15.0" fill="rgb(236,139,27)" rx="2" ry="2" />
<text  x="760.90" y="399.5" >__generic_fi..</text>
</g>
<g >
<title>memcmp@plt (1,333,333 samples, 0.08%)</title><rect x="620.8" y="421" width="0.9" height="15.0" fill="rgb(231,210,30)" rx="2" ry="2" />
<text  x="623.80" y="431.5" ></text>
</g>
<g >
<title>leveldb::port::Mutex::Lock (1,333,333 samples, 0.08%)</title><rect x="420.4" y="581" width="0.9" height="15.0" fill="rgb(219,197,9)" rx="2" ry="2" />
<text  x="423.35" y="591.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1,333,333 samples, 0.08%)</title><rect x="812.7" y="197" width="1.0" height="15.0" fill="rgb(235,62,17)" rx="2" ry="2" />
<text  x="815.74" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (13,333,330 samples, 0.80%)</title><rect x="290.8" y="453" width="9.5" height="15.0" fill="rgb(233,68,23)" rx="2" ry="2" />
<text  x="293.82" y="463.5" ></text>
</g>
<g >
<title>do_page_fault (2,666,666 samples, 0.16%)</title><rect x="96.0" y="389" width="1.9" height="15.0" fill="rgb(251,91,52)" rx="2" ry="2" />
<text  x="99.04" y="399.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::Writer::Writer (5,333,332 samples, 0.32%)</title><rect x="414.7" y="597" width="3.8" height="15.0" fill="rgb(226,147,39)" rx="2" ry="2" />
<text  x="417.68" y="607.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.08%)</title><rect x="285.1" y="501" width="1.0" height="15.0" fill="rgb(246,67,10)" rx="2" ry="2" />
<text  x="288.14" y="511.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (1,333,333 samples, 0.08%)</title><rect x="105.5" y="341" width="0.9" height="15.0" fill="rgb(223,107,28)" rx="2" ry="2" />
<text  x="108.50" y="351.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (1,333,333 samples, 0.08%)</title><rect x="128.2" y="421" width="0.9" height="15.0" fill="rgb(248,148,39)" rx="2" ry="2" />
<text  x="131.19" y="431.5" ></text>
</g>
<g >
<title>rw_verify_area (1,333,333 samples, 0.08%)</title><rect x="867.6" y="421" width="0.9" height="15.0" fill="rgb(214,99,25)" rx="2" ry="2" />
<text  x="870.58" y="431.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Flush (33,333,325 samples, 2.00%)</title><rect x="286.1" y="517" width="23.6" height="15.0" fill="rgb(230,125,46)" rx="2" ry="2" />
<text  x="289.09" y="527.5" >l..</text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="985.8" y="357" width="0.9" height="15.0" fill="rgb(233,213,14)" rx="2" ry="2" />
<text  x="988.77" y="367.5" ></text>
</g>
<g >
<title>crypto_shash_update (1,333,333 samples, 0.08%)</title><rect x="770.2" y="245" width="0.9" height="15.0" fill="rgb(249,32,24)" rx="2" ry="2" />
<text  x="773.19" y="255.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::NewNode (1,333,333 samples, 0.08%)</title><rect x="682.3" y="517" width="0.9" height="15.0" fill="rgb(224,134,43)" rx="2" ry="2" />
<text  x="685.26" y="527.5" ></text>
</g>
<g >
<title>do_futex (1,333,333 samples, 0.08%)</title><rect x="966.9" y="469" width="0.9" height="15.0" fill="rgb(238,142,51)" rx="2" ry="2" />
<text  x="969.86" y="479.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (203,999,949 samples, 12.26%)</title><rect x="724.8" y="565" width="144.7" height="15.0" fill="rgb(248,9,45)" rx="2" ry="2" />
<text  x="727.81" y="575.5" >leveldb::(anonymou..</text>
</g>
<g >
<title>leveldb::TableBuilder::Finish (1,333,333 samples, 0.08%)</title><rect x="193.4" y="549" width="1.0" height="15.0" fill="rgb(207,150,41)" rx="2" ry="2" />
<text  x="196.43" y="559.5" ></text>
</g>
<g >
<title>__handle_mm_fault (5,333,332 samples, 0.32%)</title><rect x="207.6" y="309" width="3.8" height="15.0" fill="rgb(235,109,8)" rx="2" ry="2" />
<text  x="210.61" y="319.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::TableBuilder (1,333,333 samples, 0.08%)</title><rect x="322.0" y="565" width="1.0" height="15.0" fill="rgb(209,67,49)" rx="2" ry="2" />
<text  x="325.02" y="575.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::~_State_baseV2 (11,999,997 samples, 0.72%)</title><rect x="1079.4" y="485" width="8.5" height="15.0" fill="rgb(241,216,49)" rx="2" ry="2" />
<text  x="1082.38" y="495.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::MergeIntoFreeList (1,333,333 samples, 0.08%)</title><rect x="255.8" y="421" width="1.0" height="15.0" fill="rgb(207,103,53)" rx="2" ry="2" />
<text  x="258.83" y="431.5" ></text>
</g>
<g >
<title>__GI__IO_default_uflow (1,333,333 samples, 0.08%)</title><rect x="1124.8" y="661" width="0.9" height="15.0" fill="rgb(217,182,31)" rx="2" ry="2" />
<text  x="1127.76" y="671.5" ></text>
</g>
<g >
<title>leveldb::ParsedInternalKey::ParsedInternalKey (1,333,333 samples, 0.08%)</title><rect x="71.5" y="533" width="0.9" height="15.0" fill="rgb(223,218,14)" rx="2" ry="2" />
<text  x="74.46" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get (1,333,333 samples, 0.08%)</title><rect x="1184.3" y="789" width="1.0" height="15.0" fill="rgb(232,20,34)" rx="2" ry="2" />
<text  x="1187.33" y="799.5" ></text>
</g>
<g >
<title>up_read (1,333,333 samples, 0.08%)</title><rect x="395.8" y="517" width="0.9" height="15.0" fill="rgb(230,172,36)" rx="2" ry="2" />
<text  x="398.77" y="527.5" ></text>
</g>
<g >
<title>do_syscall_64 (21,333,328 samples, 1.28%)</title><rect x="952.7" y="485" width="15.1" height="15.0" fill="rgb(224,42,20)" rx="2" ry="2" />
<text  x="955.68" y="495.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,333,333 samples, 0.08%)</title><rect x="346.6" y="437" width="0.9" height="15.0" fill="rgb(234,153,3)" rx="2" ry="2" />
<text  x="349.60" y="447.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (58,666,652 samples, 3.53%)</title><rect x="811.8" y="309" width="41.6" height="15.0" fill="rgb(217,36,42)" rx="2" ry="2" />
<text  x="814.79" y="319.5" >ext..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (1,333,333 samples, 0.08%)</title><rect x="305.0" y="469" width="0.9" height="15.0" fill="rgb(243,170,3)" rx="2" ry="2" />
<text  x="308.00" y="479.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1,333,333 samples, 0.08%)</title><rect x="962.1" y="341" width="1.0" height="15.0" fill="rgb(228,16,7)" rx="2" ry="2" />
<text  x="965.13" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (2,666,666 samples, 0.16%)</title><rect x="323.0" y="533" width="1.9" height="15.0" fill="rgb(227,118,40)" rx="2" ry="2" />
<text  x="325.96" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (15,999,996 samples, 0.96%)</title><rect x="230.3" y="533" width="11.4" height="15.0" fill="rgb(251,210,20)" rx="2" ry="2" />
<text  x="233.30" y="543.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (1,333,333 samples, 0.08%)</title><rect x="339.0" y="549" width="1.0" height="15.0" fill="rgb(230,184,30)" rx="2" ry="2" />
<text  x="342.04" y="559.5" ></text>
</g>
<g >
<title>__do_page_fault (3,999,999 samples, 0.24%)</title><rect x="393.9" y="533" width="2.8" height="15.0" fill="rgb(218,94,29)" rx="2" ry="2" />
<text  x="396.88" y="543.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (1,333,333 samples, 0.08%)</title><rect x="1121.9" y="661" width="1.0" height="15.0" fill="rgb(237,211,50)" rx="2" ry="2" />
<text  x="1124.92" y="671.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (2,666,666 samples, 0.16%)</title><rect x="696.4" y="533" width="1.9" height="15.0" fill="rgb(208,154,19)" rx="2" ry="2" />
<text  x="699.44" y="543.5" ></text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.08%)</title><rect x="304.1" y="453" width="0.9" height="15.0" fill="rgb(221,174,21)" rx="2" ry="2" />
<text  x="307.05" y="463.5" ></text>
</g>
<g >
<title>handle_mm_fault (3,999,999 samples, 0.24%)</title><rect x="1163.5" y="741" width="2.9" height="15.0" fill="rgb(246,8,39)" rx="2" ry="2" />
<text  x="1166.53" y="751.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (6,666,665 samples, 0.40%)</title><rect x="980.1" y="389" width="4.7" height="15.0" fill="rgb(221,214,53)" rx="2" ry="2" />
<text  x="983.10" y="399.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.08%)</title><rect x="98.9" y="341" width="0.9" height="15.0" fill="rgb(253,119,32)" rx="2" ry="2" />
<text  x="101.88" y="351.5" ></text>
</g>
<g >
<title>__GI_madvise (1,333,333 samples, 0.08%)</title><rect x="105.5" y="181" width="0.9" height="15.0" fill="rgb(235,162,14)" rx="2" ry="2" />
<text  x="108.50" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (13,333,330 samples, 0.80%)</title><rect x="130.1" y="485" width="9.4" height="15.0" fill="rgb(219,131,40)" rx="2" ry="2" />
<text  x="133.08" y="495.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.08%)</title><rect x="228.4" y="517" width="1.0" height="15.0" fill="rgb(247,20,12)" rx="2" ry="2" />
<text  x="231.41" y="527.5" ></text>
</g>
<g >
<title>lookup_fast (1,333,333 samples, 0.08%)</title><rect x="1115.3" y="565" width="0.9" height="15.0" fill="rgb(217,11,31)" rx="2" ry="2" />
<text  x="1118.30" y="575.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (1,333,333 samples, 0.08%)</title><rect x="304.1" y="405" width="0.9" height="15.0" fill="rgb(213,93,23)" rx="2" ry="2" />
<text  x="307.05" y="415.5" ></text>
</g>
<g >
<title>pagecache_get_page (7,999,998 samples, 0.48%)</title><rect x="788.2" y="325" width="5.6" height="15.0" fill="rgb(234,96,41)" rx="2" ry="2" />
<text  x="791.16" y="335.5" ></text>
</g>
<g >
<title>ext4_mark_iloc_dirty (1,333,333 samples, 0.08%)</title><rect x="10.9" y="373" width="1.0" height="15.0" fill="rgb(239,51,47)" rx="2" ry="2" />
<text  x="13.95" y="383.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpans (1,333,333 samples, 0.08%)</title><rect x="115.0" y="373" width="0.9" height="15.0" fill="rgb(232,152,2)" rx="2" ry="2" />
<text  x="117.95" y="383.5" ></text>
</g>
<g >
<title>ext4_da_invalidatepage (2,666,666 samples, 0.16%)</title><rect x="11.9" y="373" width="1.9" height="15.0" fill="rgb(234,122,28)" rx="2" ry="2" />
<text  x="14.89" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::clear (1,333,333 samples, 0.08%)</title><rect x="184.9" y="517" width="1.0" height="15.0" fill="rgb(250,143,32)" rx="2" ry="2" />
<text  x="187.92" y="527.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseListToSpans (1,333,333 samples, 0.08%)</title><rect x="321.1" y="453" width="0.9" height="15.0" fill="rgb(208,170,54)" rx="2" ry="2" />
<text  x="324.07" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1,333,333 samples, 0.08%)</title><rect x="308.8" y="501" width="0.9" height="15.0" fill="rgb(206,209,30)" rx="2" ry="2" />
<text  x="311.78" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_allocate_buckets (2,666,666 samples, 0.16%)</title><rect x="104.6" y="405" width="1.8" height="15.0" fill="rgb(226,38,52)" rx="2" ry="2" />
<text  x="107.55" y="415.5" ></text>
</g>
<g >
<title>__do_page_fault (2,666,666 samples, 0.16%)</title><rect x="310.7" y="325" width="1.9" height="15.0" fill="rgb(209,26,37)" rx="2" ry="2" />
<text  x="313.67" y="335.5" ></text>
</g>
<g >
<title>ext4_inode_csum_set (37,333,324 samples, 2.24%)</title><rect x="818.4" y="261" width="26.5" height="15.0" fill="rgb(246,184,37)" rx="2" ry="2" />
<text  x="821.41" y="271.5" >e..</text>
</g>
<g >
<title>rcu_gp_kthread_wake (1,333,333 samples, 0.08%)</title><rect x="727.6" y="437" width="1.0" height="15.0" fill="rgb(229,117,38)" rx="2" ry="2" />
<text  x="730.64" y="447.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ReleaseToCentralCache (1,333,333 samples, 0.08%)</title><rect x="255.8" y="501" width="1.0" height="15.0" fill="rgb(234,213,47)" rx="2" ry="2" />
<text  x="258.83" y="511.5" ></text>
</g>
<g >
<title>__do_sys_newlstat (1,333,333 samples, 0.08%)</title><rect x="1113.4" y="565" width="1.0" height="15.0" fill="rgb(254,188,35)" rx="2" ry="2" />
<text  x="1116.41" y="575.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (5,333,332 samples, 0.32%)</title><rect x="345.7" y="533" width="3.7" height="15.0" fill="rgb(221,100,21)" rx="2" ry="2" />
<text  x="348.66" y="543.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (3,999,999 samples, 0.24%)</title><rect x="1148.4" y="789" width="2.8" height="15.0" fill="rgb(234,135,16)" rx="2" ry="2" />
<text  x="1151.40" y="799.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::Open (3,999,999 samples, 0.24%)</title><rect x="1121.9" y="741" width="2.9" height="15.0" fill="rgb(217,125,37)" rx="2" ry="2" />
<text  x="1124.92" y="751.5" ></text>
</g>
<g >
<title>__fopen_internal (2,666,666 samples, 0.16%)</title><rect x="1125.7" y="693" width="1.9" height="15.0" fill="rgb(208,213,12)" rx="2" ry="2" />
<text  x="1128.71" y="703.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (35,999,991 samples, 2.16%)</title><rect x="1062.4" y="549" width="25.5" height="15.0" fill="rgb(218,121,12)" rx="2" ry="2" />
<text  x="1065.36" y="559.5" >s..</text>
</g>
<g >
<title>std::move&lt;std::__future_base::_Result_base::_Deleter&amp;&gt; (2,666,666 samples, 0.16%)</title><rect x="997.1" y="373" width="1.9" height="15.0" fill="rgb(252,34,30)" rx="2" ry="2" />
<text  x="1000.12" y="383.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1,333,333 samples, 0.08%)</title><rect x="227.5" y="469" width="0.9" height="15.0" fill="rgb(253,200,28)" rx="2" ry="2" />
<text  x="230.47" y="479.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::MergeIntoFreeList (1,333,333 samples, 0.08%)</title><rect x="321.1" y="405" width="0.9" height="15.0" fill="rgb(221,109,8)" rx="2" ry="2" />
<text  x="324.07" y="415.5" ></text>
</g>
<g >
<title>__ext4_journal_start_sb (13,333,330 samples, 0.80%)</title><rect x="775.9" y="341" width="9.4" height="15.0" fill="rgb(238,206,50)" rx="2" ry="2" />
<text  x="778.87" y="351.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (1,333,333 samples, 0.08%)</title><rect x="344.7" y="533" width="1.0" height="15.0" fill="rgb(253,81,1)" rx="2" ry="2" />
<text  x="347.71" y="543.5" ></text>
</g>
<g >
<title>set_page_dirty (1,333,333 samples, 0.08%)</title><rect x="309.7" y="325" width="1.0" height="15.0" fill="rgb(232,163,42)" rx="2" ry="2" />
<text  x="312.73" y="335.5" ></text>
</g>
<g >
<title>load_balance (1,333,333 samples, 0.08%)</title><rect x="962.1" y="309" width="1.0" height="15.0" fill="rgb(241,131,46)" rx="2" ry="2" />
<text  x="965.13" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (2,666,666 samples, 0.16%)</title><rect x="234.1" y="485" width="1.9" height="15.0" fill="rgb(229,162,13)" rx="2" ry="2" />
<text  x="237.09" y="495.5" ></text>
</g>
<g >
<title>madvise_free_single_vma (1,333,333 samples, 0.08%)</title><rect x="105.5" y="101" width="0.9" height="15.0" fill="rgb(209,124,27)" rx="2" ry="2" />
<text  x="108.50" y="111.5" ></text>
</g>
<g >
<title>ext4_inode_csum.isra.59 (37,333,324 samples, 2.24%)</title><rect x="818.4" y="245" width="26.5" height="15.0" fill="rgb(216,40,19)" rx="2" ry="2" />
<text  x="821.41" y="255.5" >e..</text>
</g>
<g >
<title>snappy::internal::CompressFragment (25,333,327 samples, 1.52%)</title><rect x="158.4" y="453" width="18.0" height="15.0" fill="rgb(245,177,33)" rx="2" ry="2" />
<text  x="161.45" y="463.5" ></text>
</g>
<g >
<title>page_counter_cancel (1,333,333 samples, 0.08%)</title><rect x="1118.1" y="469" width="1.0" height="15.0" fill="rgb(215,171,42)" rx="2" ry="2" />
<text  x="1121.14" y="479.5" ></text>
</g>
<g >
<title>rcu_cblist_dequeue (1,333,333 samples, 0.08%)</title><rect x="307.8" y="341" width="1.0" height="15.0" fill="rgb(213,193,44)" rx="2" ry="2" />
<text  x="310.84" y="351.5" ></text>
</g>
<g >
<title>lru_add_drain (1,333,333 samples, 0.08%)</title><rect x="105.5" y="85" width="0.9" height="15.0" fill="rgb(222,50,50)" rx="2" ry="2" />
<text  x="108.50" y="95.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::shared_ptr (5,333,332 samples, 0.32%)</title><rect x="1032.1" y="565" width="3.8" height="15.0" fill="rgb(223,140,6)" rx="2" ry="2" />
<text  x="1035.10" y="575.5" ></text>
</g>
<g >
<title>security_file_permission (1,333,333 samples, 0.08%)</title><rect x="867.6" y="405" width="0.9" height="15.0" fill="rgb(246,98,41)" rx="2" ry="2" />
<text  x="870.58" y="415.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.16%)</title><rect x="1016.0" y="517" width="1.9" height="15.0" fill="rgb(238,135,5)" rx="2" ry="2" />
<text  x="1019.03" y="527.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (1,333,333 samples, 0.08%)</title><rect x="105.5" y="53" width="0.9" height="15.0" fill="rgb(225,154,35)" rx="2" ry="2" />
<text  x="108.50" y="63.5" ></text>
</g>
<g >
<title>rebalance_domains (1,333,333 samples, 0.08%)</title><rect x="293.7" y="325" width="0.9" height="15.0" fill="rgb(225,70,49)" rx="2" ry="2" />
<text  x="296.65" y="335.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (18,666,662 samples, 1.12%)</title><rect x="688.9" y="565" width="13.2" height="15.0" fill="rgb(227,154,1)" rx="2" ry="2" />
<text  x="691.88" y="575.5" ></text>
</g>
<g >
<title>leveldb::Slice::empty (2,666,666 samples, 0.16%)</title><rect x="704.0" y="565" width="1.9" height="15.0" fill="rgb(254,160,23)" rx="2" ry="2" />
<text  x="707.01" y="575.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (1,333,333 samples, 0.08%)</title><rect x="286.1" y="485" width="0.9" height="15.0" fill="rgb(236,166,15)" rx="2" ry="2" />
<text  x="289.09" y="495.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::New (1,333,333 samples, 0.08%)</title><rect x="441.2" y="405" width="0.9" height="15.0" fill="rgb(236,172,27)" rx="2" ry="2" />
<text  x="444.15" y="415.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_deleter (2,666,666 samples, 0.16%)</title><rect x="1086.0" y="437" width="1.9" height="15.0" fill="rgb(248,94,10)" rx="2" ry="2" />
<text  x="1088.99" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (5,333,332 samples, 0.32%)</title><rect x="212.3" y="517" width="3.8" height="15.0" fill="rgb(216,43,8)" rx="2" ry="2" />
<text  x="215.34" y="527.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::WriteUnbuffered (198,666,617 samples, 11.94%)</title><rect x="728.6" y="533" width="140.9" height="15.0" fill="rgb(234,198,7)" rx="2" ry="2" />
<text  x="731.59" y="543.5" >leveldb::(anonymo..</text>
</g>
<g >
<title>do_munmap (1,333,333 samples, 0.08%)</title><rect x="309.7" y="405" width="1.0" height="15.0" fill="rgb(210,22,2)" rx="2" ry="2" />
<text  x="312.73" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux (14,666,663 samples, 0.88%)</title><rect x="1090.7" y="613" width="10.4" height="15.0" fill="rgb(247,214,19)" rx="2" ry="2" />
<text  x="1093.72" y="623.5" ></text>
</g>
<g >
<title>leveldb::log::Writer::AddRecord (291,999,927 samples, 17.55%)</title><rect x="712.5" y="597" width="207.1" height="15.0" fill="rgb(245,91,30)" rx="2" ry="2" />
<text  x="715.52" y="607.5" >leveldb::log::Writer::AddRe..</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.08%)</title><rect x="1169.2" y="789" width="0.9" height="15.0" fill="rgb(235,203,1)" rx="2" ry="2" />
<text  x="1172.20" y="799.5" ></text>
</g>
<g >
<title>__do_page_fault (2,666,666 samples, 0.16%)</title><rect x="96.0" y="373" width="1.9" height="15.0" fill="rgb(208,23,33)" rx="2" ry="2" />
<text  x="99.04" y="383.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (2,666,666 samples, 0.16%)</title><rect x="67.7" y="501" width="1.9" height="15.0" fill="rgb(214,197,43)" rx="2" ry="2" />
<text  x="70.68" y="511.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1,333,333 samples, 0.08%)</title><rect x="98.9" y="357" width="0.9" height="15.0" fill="rgb(234,169,11)" rx="2" ry="2" />
<text  x="101.88" y="367.5" ></text>
</g>
<g >
<title>generic_perform_write (125,333,302 samples, 7.53%)</title><rect x="772.1" y="373" width="88.9" height="15.0" fill="rgb(237,141,44)" rx="2" ry="2" />
<text  x="775.08" y="383.5" >generic_pe..</text>
</g>
<g >
<title>ext4_da_get_block_prep (1,333,333 samples, 0.08%)</title><rect x="786.3" y="325" width="0.9" height="15.0" fill="rgb(229,145,1)" rx="2" ry="2" />
<text  x="789.27" y="335.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.08%)</title><rect x="1127.6" y="437" width="0.9" height="15.0" fill="rgb(234,225,5)" rx="2" ry="2" />
<text  x="1130.60" y="447.5" ></text>
</g>
<g >
<title>alloc_pages_current (2,666,666 samples, 0.16%)</title><rect x="788.2" y="293" width="1.8" height="15.0" fill="rgb(213,63,7)" rx="2" ry="2" />
<text  x="791.16" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (2,666,666 samples, 0.16%)</title><rect x="323.0" y="549" width="1.9" height="15.0" fill="rgb(234,11,6)" rx="2" ry="2" />
<text  x="325.96" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::begin (2,666,666 samples, 0.16%)</title><rect x="411.8" y="565" width="1.9" height="15.0" fill="rgb(242,15,7)" rx="2" ry="2" />
<text  x="414.84" y="575.5" ></text>
</g>
<g >
<title>__pthread_disable_asynccancel (1,333,333 samples, 0.08%)</title><rect x="736.2" y="501" width="0.9" height="15.0" fill="rgb(237,160,54)" rx="2" ry="2" />
<text  x="739.15" y="511.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (9,333,331 samples, 0.56%)</title><rect x="246.4" y="549" width="6.6" height="15.0" fill="rgb(248,127,45)" rx="2" ry="2" />
<text  x="249.38" y="559.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;1ul, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.16%)</title><rect x="1086.0" y="405" width="1.9" height="15.0" fill="rgb(206,199,38)" rx="2" ry="2" />
<text  x="1088.99" y="415.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::GrowHeap (1,333,333 samples, 0.08%)</title><rect x="441.2" y="389" width="0.9" height="15.0" fill="rgb(248,151,22)" rx="2" ry="2" />
<text  x="444.15" y="399.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.08%)</title><rect x="727.6" y="485" width="1.0" height="15.0" fill="rgb(234,196,43)" rx="2" ry="2" />
<text  x="730.64" y="495.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_set_retrieved_flag (1,333,333 samples, 0.08%)</title><rect x="1028.3" y="549" width="1.0" height="15.0" fill="rgb(225,60,3)" rx="2" ry="2" />
<text  x="1031.32" y="559.5" ></text>
</g>
<g >
<title>_IO_new_file_underflow (1,333,333 samples, 0.08%)</title><rect x="1124.8" y="645" width="0.9" height="15.0" fill="rgb(235,18,33)" rx="2" ry="2" />
<text  x="1127.76" y="655.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (53,333,320 samples, 3.21%)</title><rect x="622.7" y="453" width="37.8" height="15.0" fill="rgb(235,203,27)" rx="2" ry="2" />
<text  x="625.69" y="463.5" >lev..</text>
</g>
<g >
<title>__libc_csu_init (1,333,333 samples, 0.08%)</title><rect x="1114.4" y="773" width="0.9" height="15.0" fill="rgb(244,156,35)" rx="2" ry="2" />
<text  x="1117.36" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (1,333,333 samples, 0.08%)</title><rect x="132.9" y="405" width="1.0" height="15.0" fill="rgb(247,227,3)" rx="2" ry="2" />
<text  x="135.92" y="415.5" ></text>
</g>
<g >
<title>rcu_gp_kthread_wake (1,333,333 samples, 0.08%)</title><rect x="315.4" y="405" width="0.9" height="15.0" fill="rgb(220,126,6)" rx="2" ry="2" />
<text  x="318.40" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::FileMetaData*, std::allocator&lt;leveldb::FileMetaData*&gt; &gt;::max_size (1,333,333 samples, 0.08%)</title><rect x="1122.9" y="645" width="0.9" height="15.0" fill="rgb(254,136,26)" rx="2" ry="2" />
<text  x="1125.87" y="655.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.08%)</title><rect x="985.8" y="325" width="0.9" height="15.0" fill="rgb(242,229,14)" rx="2" ry="2" />
<text  x="988.77" y="335.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (2,666,666 samples, 0.16%)</title><rect x="779.6" y="309" width="1.9" height="15.0" fill="rgb(215,187,18)" rx="2" ry="2" />
<text  x="782.65" y="319.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.08%)</title><rect x="432.6" y="581" width="1.0" height="15.0" fill="rgb(219,97,16)" rx="2" ry="2" />
<text  x="435.64" y="591.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl (3,999,999 samples, 0.24%)</title><rect x="1058.6" y="581" width="2.8" height="15.0" fill="rgb(216,10,13)" rx="2" ry="2" />
<text  x="1061.57" y="591.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (6,666,665 samples, 0.40%)</title><rect x="125.4" y="501" width="4.7" height="15.0" fill="rgb(211,171,54)" rx="2" ry="2" />
<text  x="128.35" y="511.5" ></text>
</g>
<g >
<title>__ext4_handle_dirty_metadata (1,333,333 samples, 0.08%)</title><rect x="817.5" y="261" width="0.9" height="15.0" fill="rgb(234,117,6)" rx="2" ry="2" />
<text  x="820.47" y="271.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;char*, unsigned long, char&gt; (1,333,333 samples, 0.08%)</title><rect x="322.0" y="501" width="1.0" height="15.0" fill="rgb(237,164,2)" rx="2" ry="2" />
<text  x="325.02" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1,333,333 samples, 0.08%)</title><rect x="228.4" y="533" width="1.0" height="15.0" fill="rgb(214,160,14)" rx="2" ry="2" />
<text  x="231.41" y="543.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="875.1" y="533" width="1.0" height="15.0" fill="rgb(231,196,21)" rx="2" ry="2" />
<text  x="878.14" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;leveldb::FileMetaData*&gt; &gt;::max_size (1,333,333 samples, 0.08%)</title><rect x="1122.9" y="613" width="0.9" height="15.0" fill="rgb(219,128,36)" rx="2" ry="2" />
<text  x="1125.87" y="623.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (3,999,999 samples, 0.24%)</title><rect x="1181.5" y="805" width="2.8" height="15.0" fill="rgb(233,191,30)" rx="2" ry="2" />
<text  x="1184.49" y="815.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (22,666,661 samples, 1.36%)</title><rect x="212.3" y="565" width="16.1" height="15.0" fill="rgb(234,92,0)" rx="2" ry="2" />
<text  x="215.34" y="575.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Next (1,333,333 samples, 0.08%)</title><rect x="243.5" y="549" width="1.0" height="15.0" fill="rgb(231,26,43)" rx="2" ry="2" />
<text  x="246.54" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_S_cget (5,333,332 samples, 0.32%)</title><rect x="236.0" y="485" width="3.8" height="15.0" fill="rgb(214,66,21)" rx="2" ry="2" />
<text  x="238.98" y="495.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, false&gt;::_M_head (1,333,333 samples, 0.08%)</title><rect x="988.6" y="277" width="1.0" height="15.0" fill="rgb(240,127,2)" rx="2" ry="2" />
<text  x="991.61" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::pop_front (3,999,999 samples, 0.24%)</title><rect x="930.0" y="597" width="2.8" height="15.0" fill="rgb(236,93,24)" rx="2" ry="2" />
<text  x="932.98" y="607.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (14,666,663 samples, 0.88%)</title><rect x="1042.5" y="517" width="10.4" height="15.0" fill="rgb(217,101,16)" rx="2" ry="2" />
<text  x="1045.50" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (5,333,332 samples, 0.32%)</title><rect x="287.0" y="453" width="3.8" height="15.0" fill="rgb(227,172,4)" rx="2" ry="2" />
<text  x="290.04" y="463.5" ></text>
</g>
<g >
<title>__ext4_journal_stop (1,333,333 samples, 0.08%)</title><rect x="768.3" y="309" width="0.9" height="15.0" fill="rgb(253,75,16)" rx="2" ry="2" />
<text  x="771.30" y="319.5" ></text>
</g>
<g >
<title>__es_remove_extent (1,333,333 samples, 0.08%)</title><rect x="786.3" y="293" width="0.9" height="15.0" fill="rgb(221,18,23)" rx="2" ry="2" />
<text  x="789.27" y="303.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="963.1" y="405" width="0.9" height="15.0" fill="rgb(240,63,24)" rx="2" ry="2" />
<text  x="966.08" y="415.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (1,550,666,279 samples, 93.19%)</title><rect x="10.9" y="693" width="1099.7" height="15.0" fill="rgb(226,182,47)" rx="2" ry="2" />
<text  x="13.95" y="703.5" >std::__invoke_impl&lt;void, void </text>
</g>
<g >
<title>std::__future_base::_Result&lt;leveldb::Status&gt;::~_Result (3,999,999 samples, 0.24%)</title><rect x="1083.2" y="421" width="2.8" height="15.0" fill="rgb(254,53,44)" rx="2" ry="2" />
<text  x="1086.16" y="431.5" ></text>
</g>
<g >
<title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::__atomic_futex_unsigned (1,333,333 samples, 0.08%)</title><rect x="1047.2" y="453" width="1.0" height="15.0" fill="rgb(211,189,49)" rx="2" ry="2" />
<text  x="1050.23" y="463.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::tuple&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter, true&gt; (1,333,333 samples, 0.08%)</title><rect x="1060.5" y="565" width="0.9" height="15.0" fill="rgb(241,226,20)" rx="2" ry="2" />
<text  x="1063.46" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.08%)</title><rect x="1076.5" y="501" width="1.0" height="15.0" fill="rgb(205,145,11)" rx="2" ry="2" />
<text  x="1079.54" y="511.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteRawBlock (2,666,666 samples, 0.16%)</title><rect x="305.9" y="485" width="1.9" height="15.0" fill="rgb(238,140,49)" rx="2" ry="2" />
<text  x="308.95" y="495.5" ></text>
</g>
<g >
<title>pmem_init (1,333,333 samples, 0.08%)</title><rect x="1113.4" y="741" width="1.0" height="15.0" fill="rgb(226,50,7)" rx="2" ry="2" />
<text  x="1116.41" y="751.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.08%)</title><rect x="976.3" y="309" width="1.0" height="15.0" fill="rgb(251,41,8)" rx="2" ry="2" />
<text  x="979.31" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,333,333 samples, 0.08%)</title><rect x="138.6" y="453" width="0.9" height="15.0" fill="rgb(227,223,19)" rx="2" ry="2" />
<text  x="141.59" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (25,333,327 samples, 1.52%)</title><rect x="81.9" y="453" width="17.9" height="15.0" fill="rgb(245,126,29)" rx="2" ry="2" />
<text  x="84.86" y="463.5" ></text>
</g>
<g >
<title>leveldb::Random::Uniform (7,999,998 samples, 0.48%)</title><rect x="386.3" y="581" width="5.7" height="15.0" fill="rgb(245,191,16)" rx="2" ry="2" />
<text  x="389.31" y="591.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (1,333,333 samples, 0.08%)</title><rect x="105.5" y="133" width="0.9" height="15.0" fill="rgb(209,62,51)" rx="2" ry="2" />
<text  x="108.50" y="143.5" ></text>
</g>
<g >
<title>operator new[] (3,999,999 samples, 0.24%)</title><rect x="439.3" y="485" width="2.8" height="15.0" fill="rgb(208,181,5)" rx="2" ry="2" />
<text  x="442.26" y="495.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::set_value (109,333,306 samples, 6.57%)</title><rect x="933.8" y="597" width="77.5" height="15.0" fill="rgb(231,205,50)" rx="2" ry="2" />
<text  x="936.77" y="607.5" >std::pro..</text>
</g>
<g >
<title>std::__shared_count&lt; (3,999,999 samples, 0.24%)</title><rect x="1033.0" y="533" width="2.9" height="15.0" fill="rgb(224,223,5)" rx="2" ry="2" />
<text  x="1036.04" y="543.5" ></text>
</g>
<g >
<title>leveldb::Table::BlockReader (2,666,666 samples, 0.16%)</title><rect x="268.1" y="501" width="1.9" height="15.0" fill="rgb(210,143,20)" rx="2" ry="2" />
<text  x="271.12" y="511.5" ></text>
</g>
<g >
<title>ext4_inode_csum.isra.59 (1,333,333 samples, 0.08%)</title><rect x="10.9" y="341" width="1.0" height="15.0" fill="rgb(229,46,42)" rx="2" ry="2" />
<text  x="13.95" y="351.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (315,999,921 samples, 18.99%)</title><rect x="458.2" y="517" width="224.1" height="15.0" fill="rgb(249,29,49)" rx="2" ry="2" />
<text  x="461.17" y="527.5" >leveldb::SkipList&lt;char const*..</text>
</g>
<g >
<title>std::_Hash_bytes (1,333,333 samples, 0.08%)</title><rect x="314.5" y="453" width="0.9" height="15.0" fill="rgb(229,193,7)" rx="2" ry="2" />
<text  x="317.46" y="463.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1,333,333 samples, 0.08%)</title><rect x="800.4" y="277" width="1.0" height="15.0" fill="rgb(233,55,28)" rx="2" ry="2" />
<text  x="803.45" y="287.5" ></text>
</g>
<g >
<title>crc32c_pcl_intel_update (1,333,333 samples, 0.08%)</title><rect x="770.2" y="229" width="0.9" height="15.0" fill="rgb(206,81,29)" rx="2" ry="2" />
<text  x="773.19" y="239.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (9,333,331 samples, 0.56%)</title><rect x="1094.5" y="597" width="6.6" height="15.0" fill="rgb(253,22,4)" rx="2" ry="2" />
<text  x="1097.50" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (7,999,998 samples, 0.48%)</title><rect x="220.8" y="469" width="5.7" height="15.0" fill="rgb(246,67,7)" rx="2" ry="2" />
<text  x="223.85" y="479.5" ></text>
</g>
<g >
<title>ext4_da_write_end (5,333,332 samples, 0.32%)</title><rect x="762.6" y="373" width="3.8" height="15.0" fill="rgb(231,165,34)" rx="2" ry="2" />
<text  x="765.63" y="383.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.08%)</title><rect x="1127.6" y="485" width="0.9" height="15.0" fill="rgb(230,217,46)" rx="2" ry="2" />
<text  x="1130.60" y="495.5" ></text>
</g>
<g >
<title>__unlink (9,333,331 samples, 0.56%)</title><rect x="1115.3" y="709" width="6.6" height="15.0" fill="rgb(217,102,46)" rx="2" ry="2" />
<text  x="1118.30" y="719.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.08%)</title><rect x="333.4" y="533" width="0.9" height="15.0" fill="rgb(242,15,29)" rx="2" ry="2" />
<text  x="336.37" y="543.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (47,999,988 samples, 2.88%)</title><rect x="967.8" y="501" width="34.0" height="15.0" fill="rgb(224,210,18)" rx="2" ry="2" />
<text  x="970.80" y="511.5" >st..</text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (1,333,333 samples, 0.08%)</title><rect x="1169.2" y="805" width="0.9" height="15.0" fill="rgb(239,164,7)" rx="2" ry="2" />
<text  x="1172.20" y="815.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::SetNext (1,333,333 samples, 0.08%)</title><rect x="1155.0" y="805" width="1.0" height="15.0" fill="rgb(252,141,14)" rx="2" ry="2" />
<text  x="1158.02" y="815.5" ></text>
</g>
<g >
<title>find_busiest_group (2,666,666 samples, 0.16%)</title><rect x="533.8" y="341" width="1.9" height="15.0" fill="rgb(217,142,28)" rx="2" ry="2" />
<text  x="536.81" y="351.5" ></text>
</g>
<g >
<title>__do_sys_madvise (1,333,333 samples, 0.08%)</title><rect x="321.1" y="293" width="0.9" height="15.0" fill="rgb(247,13,28)" rx="2" ry="2" />
<text  x="324.07" y="303.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteRawBlock (6,666,665 samples, 0.40%)</title><rect x="349.4" y="533" width="4.8" height="15.0" fill="rgb(237,94,40)" rx="2" ry="2" />
<text  x="352.44" y="543.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.08%)</title><rect x="321.1" y="325" width="0.9" height="15.0" fill="rgb(238,229,0)" rx="2" ry="2" />
<text  x="324.07" y="335.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.08%)</title><rect x="619.9" y="293" width="0.9" height="15.0" fill="rgb(224,223,34)" rx="2" ry="2" />
<text  x="622.86" y="303.5" ></text>
</g>
<g >
<title>__GI_madvise (1,333,333 samples, 0.08%)</title><rect x="255.8" y="373" width="1.0" height="15.0" fill="rgb(223,121,18)" rx="2" ry="2" />
<text  x="258.83" y="383.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1,333,333 samples, 0.08%)</title><rect x="294.6" y="373" width="0.9" height="15.0" fill="rgb(226,156,33)" rx="2" ry="2" />
<text  x="297.60" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2,666,666 samples, 0.16%)</title><rect x="312.6" y="485" width="1.9" height="15.0" fill="rgb(222,34,42)" rx="2" ry="2" />
<text  x="315.56" y="495.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::Next (1,333,333 samples, 0.08%)</title><rect x="14.7" y="549" width="1.0" height="15.0" fill="rgb(211,218,48)" rx="2" ry="2" />
<text  x="17.73" y="559.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="727.6" y="533" width="1.0" height="15.0" fill="rgb(254,24,46)" rx="2" ry="2" />
<text  x="730.64" y="543.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="875.1" y="549" width="1.0" height="15.0" fill="rgb(253,189,33)" rx="2" ry="2" />
<text  x="878.14" y="559.5" ></text>
</g>
<g >
<title>std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.08%)</title><rect x="1052.9" y="517" width="0.9" height="15.0" fill="rgb(250,7,47)" rx="2" ry="2" />
<text  x="1055.90" y="527.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_rax (2,666,666 samples, 0.16%)</title><rect x="950.8" y="485" width="1.9" height="15.0" fill="rgb(231,96,15)" rx="2" ry="2" />
<text  x="953.79" y="495.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.08%)</title><rect x="293.7" y="357" width="0.9" height="15.0" fill="rgb(232,44,51)" rx="2" ry="2" />
<text  x="296.65" y="367.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock (1,333,333 samples, 0.08%)</title><rect x="920.5" y="549" width="1.0" height="15.0" fill="rgb(234,134,13)" rx="2" ry="2" />
<text  x="923.53" y="559.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::WriteWrapper (2,666,666 samples, 0.16%)</title><rect x="1135.2" y="805" width="1.9" height="15.0" fill="rgb(232,225,45)" rx="2" ry="2" />
<text  x="1138.16" y="815.5" ></text>
</g>
<g >
<title>std::fill_n&lt;char*, unsigned long, char&gt; (1,333,333 samples, 0.08%)</title><rect x="322.0" y="453" width="1.0" height="15.0" fill="rgb(230,100,4)" rx="2" ry="2" />
<text  x="325.02" y="463.5" ></text>
</g>
<g >
<title>snappy::internal::WorkingMemory::GetHashTable (1,333,333 samples, 0.08%)</title><rect x="357.0" y="485" width="0.9" height="15.0" fill="rgb(213,198,16)" rx="2" ry="2" />
<text  x="360.00" y="495.5" ></text>
</g>
<g >
<title>handle_mm_fault (2,666,666 samples, 0.16%)</title><rect x="180.2" y="389" width="1.9" height="15.0" fill="rgb(239,32,45)" rx="2" ry="2" />
<text  x="183.19" y="399.5" ></text>
</g>
<g >
<title>std::mutex::unlock (1,333,333 samples, 0.08%)</title><rect x="920.5" y="581" width="1.0" height="15.0" fill="rgb(217,167,7)" rx="2" ry="2" />
<text  x="923.53" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (1,333,333 samples, 0.08%)</title><rect x="1024.5" y="565" width="1.0" height="15.0" fill="rgb(247,16,35)" rx="2" ry="2" />
<text  x="1027.54" y="575.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (1,333,333 samples, 0.08%)</title><rect x="309.7" y="437" width="1.0" height="15.0" fill="rgb(222,48,44)" rx="2" ry="2" />
<text  x="312.73" y="447.5" ></text>
</g>
<g >
<title>snappy::RawUncompress (1,333,333 samples, 0.08%)</title><rect x="269.1" y="437" width="0.9" height="15.0" fill="rgb(215,196,11)" rx="2" ry="2" />
<text  x="272.07" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (2,666,666 samples, 0.16%)</title><rect x="232.2" y="517" width="1.9" height="15.0" fill="rgb(219,151,45)" rx="2" ry="2" />
<text  x="235.20" y="527.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (5,333,332 samples, 0.32%)</title><rect x="262.5" y="549" width="3.7" height="15.0" fill="rgb(236,59,14)" rx="2" ry="2" />
<text  x="265.45" y="559.5" ></text>
</g>
<g >
<title>__getdents (1,333,333 samples, 0.08%)</title><rect x="10.9" y="533" width="1.0" height="15.0" fill="rgb(222,173,40)" rx="2" ry="2" />
<text  x="13.95" y="543.5" ></text>
</g>
<g >
<title>operator new (1,333,333 samples, 0.08%)</title><rect x="682.3" y="501" width="0.9" height="15.0" fill="rgb(253,204,32)" rx="2" ry="2" />
<text  x="685.26" y="511.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (3,999,999 samples, 0.24%)</title><rect x="683.2" y="501" width="2.8" height="15.0" fill="rgb(227,35,54)" rx="2" ry="2" />
<text  x="686.21" y="511.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (9,333,331 samples, 0.56%)</title><rect x="912.0" y="533" width="6.6" height="15.0" fill="rgb(220,176,18)" rx="2" ry="2" />
<text  x="915.02" y="543.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (2,666,666 samples, 0.16%)</title><rect x="698.3" y="533" width="1.9" height="15.0" fill="rgb(218,120,0)" rx="2" ry="2" />
<text  x="701.33" y="543.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (3,999,999 samples, 0.24%)</title><rect x="312.6" y="549" width="2.8" height="15.0" fill="rgb(239,176,15)" rx="2" ry="2" />
<text  x="315.56" y="559.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (5,333,332 samples, 0.32%)</title><rect x="350.4" y="501" width="3.8" height="15.0" fill="rgb(244,77,41)" rx="2" ry="2" />
<text  x="353.38" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (2,666,666 samples, 0.16%)</title><rect x="109.3" y="437" width="1.9" height="15.0" fill="rgb(225,94,24)" rx="2" ry="2" />
<text  x="112.28" y="447.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.08%)</title><rect x="98.9" y="325" width="0.9" height="15.0" fill="rgb(251,37,43)" rx="2" ry="2" />
<text  x="101.88" y="335.5" ></text>
</g>
<g >
<title>leveldb::WriteBatch::Iterate (381,333,238 samples, 22.92%)</title><rect x="435.5" y="581" width="270.4" height="15.0" fill="rgb(235,170,9)" rx="2" ry="2" />
<text  x="438.48" y="591.5" >leveldb::WriteBatch::Iterate</text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (1,333,333 samples, 0.08%)</title><rect x="1147.5" y="805" width="0.9" height="15.0" fill="rgb(241,86,20)" rx="2" ry="2" />
<text  x="1150.45" y="815.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator (1,333,333 samples, 0.08%)</title><rect x="229.4" y="533" width="0.9" height="15.0" fill="rgb(242,166,21)" rx="2" ry="2" />
<text  x="232.36" y="543.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.08%)</title><rect x="339.0" y="533" width="1.0" height="15.0" fill="rgb(238,99,42)" rx="2" ry="2" />
<text  x="342.04" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;leveldb::FileMetaData*&gt;::max_size (1,333,333 samples, 0.08%)</title><rect x="1122.9" y="597" width="0.9" height="15.0" fill="rgb(247,172,52)" rx="2" ry="2" />
<text  x="1125.87" y="607.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (1,333,333 samples, 0.08%)</title><rect x="105.5" y="309" width="0.9" height="15.0" fill="rgb(237,62,10)" rx="2" ry="2" />
<text  x="108.50" y="319.5" ></text>
</g>
<g >
<title>ext4_get_group_desc (2,666,666 samples, 0.16%)</title><rect x="849.6" y="245" width="1.9" height="15.0" fill="rgb(232,173,8)" rx="2" ry="2" />
<text  x="852.62" y="255.5" ></text>
</g>
<g >
<title>call_init (3,999,999 samples, 0.24%)</title><rect x="1111.5" y="773" width="2.9" height="15.0" fill="rgb(217,214,21)" rx="2" ry="2" />
<text  x="1114.52" y="783.5" ></text>
</g>
<g >
<title>std::swap&lt;char const*&gt; (2,666,666 samples, 0.16%)</title><rect x="876.1" y="549" width="1.9" height="15.0" fill="rgb(228,21,43)" rx="2" ry="2" />
<text  x="879.09" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (3,999,999 samples, 0.24%)</title><rect x="213.3" y="501" width="2.8" height="15.0" fill="rgb(244,201,40)" rx="2" ry="2" />
<text  x="216.29" y="511.5" ></text>
</g>
<g >
<title>leveldb::Arena::AllocateFallback (3,999,999 samples, 0.24%)</title><rect x="439.3" y="517" width="2.8" height="15.0" fill="rgb(213,152,52)" rx="2" ry="2" />
<text  x="442.26" y="527.5" ></text>
</g>
<g >
<title>std::future&lt;leveldb::Status&gt;::get (17,333,329 samples, 1.04%)</title><rect x="1011.3" y="613" width="12.3" height="15.0" fill="rgb(233,46,45)" rx="2" ry="2" />
<text  x="1014.30" y="623.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::MergeIntoFreeList (1,333,333 samples, 0.08%)</title><rect x="1121.9" y="549" width="1.0" height="15.0" fill="rgb(227,136,38)" rx="2" ry="2" />
<text  x="1124.92" y="559.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (2,666,666 samples, 0.16%)</title><rect x="1175.8" y="805" width="1.9" height="15.0" fill="rgb(213,104,47)" rx="2" ry="2" />
<text  x="1178.82" y="815.5" ></text>
</g>
<g >
<title>generic_update_time (1,333,333 samples, 0.08%)</title><rect x="861.0" y="373" width="0.9" height="15.0" fill="rgb(239,191,25)" rx="2" ry="2" />
<text  x="863.96" y="383.5" ></text>
</g>
<g >
<title>leveldb::Arena::AllocateNewBlock (3,999,999 samples, 0.24%)</title><rect x="439.3" y="501" width="2.8" height="15.0" fill="rgb(210,95,8)" rx="2" ry="2" />
<text  x="442.26" y="511.5" ></text>
</g>
<g >
<title>leveldb::Env::Default (1,333,333 samples, 0.08%)</title><rect x="1127.6" y="741" width="0.9" height="15.0" fill="rgb(214,91,22)" rx="2" ry="2" />
<text  x="1130.60" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1,333,333 samples, 0.08%)</title><rect x="188.7" y="533" width="0.9" height="15.0" fill="rgb(236,206,11)" rx="2" ry="2" />
<text  x="191.70" y="543.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::~shared_ptr (2,666,666 samples, 0.16%)</title><rect x="1023.6" y="581" width="1.9" height="15.0" fill="rgb(240,113,52)" rx="2" ry="2" />
<text  x="1026.59" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1,333,333 samples, 0.08%)</title><rect x="317.3" y="501" width="0.9" height="15.0" fill="rgb(248,133,23)" rx="2" ry="2" />
<text  x="320.29" y="511.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (26,666,660 samples, 1.60%)</title><rect x="970.6" y="421" width="19.0" height="15.0" fill="rgb(228,55,19)" rx="2" ry="2" />
<text  x="973.64" y="431.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (2,666,666 samples, 0.16%)</title><rect x="115.0" y="405" width="1.8" height="15.0" fill="rgb(226,22,35)" rx="2" ry="2" />
<text  x="117.95" y="415.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.08%)</title><rect x="727.6" y="469" width="1.0" height="15.0" fill="rgb(252,181,13)" rx="2" ry="2" />
<text  x="730.64" y="479.5" ></text>
</g>
<g >
<title>__GI__IO_getline (1,333,333 samples, 0.08%)</title><rect x="1124.8" y="693" width="0.9" height="15.0" fill="rgb(222,141,20)" rx="2" ry="2" />
<text  x="1127.76" y="703.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (11,999,997 samples, 0.72%)</title><rect x="570.7" y="453" width="8.5" height="15.0" fill="rgb(233,87,26)" rx="2" ry="2" />
<text  x="573.69" y="463.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.08%)</title><rect x="440.2" y="373" width="1.0" height="15.0" fill="rgb(229,156,1)" rx="2" ry="2" />
<text  x="443.21" y="383.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (2,666,666 samples, 0.16%)</title><rect x="301.2" y="453" width="1.9" height="15.0" fill="rgb(222,113,44)" rx="2" ry="2" />
<text  x="304.22" y="463.5" ></text>
</g>
<g >
<title>try_charge (1,333,333 samples, 0.08%)</title><rect x="210.4" y="277" width="1.0" height="15.0" fill="rgb(243,170,17)" rx="2" ry="2" />
<text  x="213.45" y="287.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.08%)</title><rect x="1111.5" y="533" width="1.0" height="15.0" fill="rgb(248,104,0)" rx="2" ry="2" />
<text  x="1114.52" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__future_base::_State_baseV2&gt;::construct&lt;std::__future_base::_State_baseV2&gt; (10,666,664 samples, 0.64%)</title><rect x="1045.3" y="485" width="7.6" height="15.0" fill="rgb(215,173,39)" rx="2" ry="2" />
<text  x="1048.34" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (2,666,666 samples, 0.16%)</title><rect x="118.7" y="437" width="1.9" height="15.0" fill="rgb(234,29,8)" rx="2" ry="2" />
<text  x="121.73" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (13,333,330 samples, 0.80%)</title><rect x="290.8" y="421" width="9.5" height="15.0" fill="rgb(205,21,33)" rx="2" ry="2" />
<text  x="293.82" y="431.5" ></text>
</g>
<g >
<title>fs_read (1,333,333 samples, 0.08%)</title><rect x="1113.4" y="693" width="1.0" height="15.0" fill="rgb(206,116,15)" rx="2" ry="2" />
<text  x="1116.41" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (1,333,333 samples, 0.08%)</title><rect x="294.6" y="405" width="0.9" height="15.0" fill="rgb(246,77,14)" rx="2" ry="2" />
<text  x="297.60" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.08%)</title><rect x="1052.9" y="485" width="0.9" height="15.0" fill="rgb(250,143,43)" rx="2" ry="2" />
<text  x="1055.90" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_S_cget (1,333,333 samples, 0.08%)</title><rect x="226.5" y="453" width="1.0" height="15.0" fill="rgb(222,131,4)" rx="2" ry="2" />
<text  x="229.52" y="463.5" ></text>
</g>
<g >
<title>aa_file_perm (1,333,333 samples, 0.08%)</title><rect x="867.6" y="357" width="0.9" height="15.0" fill="rgb(234,150,13)" rx="2" ry="2" />
<text  x="870.58" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::FileMetaData*, std::allocator&lt;leveldb::FileMetaData*&gt; &gt;::_S_max_size (1,333,333 samples, 0.08%)</title><rect x="1122.9" y="629" width="0.9" height="15.0" fill="rgb(222,199,41)" rx="2" ry="2" />
<text  x="1125.87" y="639.5" ></text>
</g>
<g >
<title>_IO_vsnprintf (23,999,994 samples, 1.44%)</title><rect x="362.7" y="597" width="17.0" height="15.0" fill="rgb(208,227,1)" rx="2" ry="2" />
<text  x="365.68" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (7,999,998 samples, 0.48%)</title><rect x="132.0" y="469" width="5.6" height="15.0" fill="rgb(249,68,18)" rx="2" ry="2" />
<text  x="134.97" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (1,333,333 samples, 0.08%)</title><rect x="219.9" y="453" width="0.9" height="15.0" fill="rgb(233,8,13)" rx="2" ry="2" />
<text  x="222.90" y="463.5" ></text>
</g>
<g >
<title>leveldb::port::Snappy_Compress (5,333,332 samples, 0.32%)</title><rect x="354.2" y="533" width="3.7" height="15.0" fill="rgb(234,206,28)" rx="2" ry="2" />
<text  x="357.17" y="543.5" ></text>
</g>
<g >
<title>__do_fault (2,666,666 samples, 0.16%)</title><rect x="1164.5" y="709" width="1.9" height="15.0" fill="rgb(247,45,42)" rx="2" ry="2" />
<text  x="1167.47" y="719.5" ></text>
</g>
<g >
<title>do_lookup_x (2,666,666 samples, 0.16%)</title><rect x="1129.5" y="661" width="1.9" height="15.0" fill="rgb(246,128,23)" rx="2" ry="2" />
<text  x="1132.49" y="671.5" ></text>
</g>
<g >
<title>__handle_mm_fault (2,666,666 samples, 0.16%)</title><rect x="1164.5" y="725" width="1.9" height="15.0" fill="rgb(244,150,39)" rx="2" ry="2" />
<text  x="1167.47" y="735.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpans (1,333,333 samples, 0.08%)</title><rect x="127.2" y="421" width="1.0" height="15.0" fill="rgb(227,21,1)" rx="2" ry="2" />
<text  x="130.24" y="431.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1,333,333 samples, 0.08%)</title><rect x="455.3" y="469" width="1.0" height="15.0" fill="rgb(223,78,25)" rx="2" ry="2" />
<text  x="458.34" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (3,999,999 samples, 0.24%)</title><rect x="108.3" y="469" width="2.9" height="15.0" fill="rgb(241,218,27)" rx="2" ry="2" />
<text  x="111.33" y="479.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.08%)</title><rect x="275.7" y="485" width="0.9" height="15.0" fill="rgb(220,224,32)" rx="2" ry="2" />
<text  x="278.69" y="495.5" ></text>
</g>
<g >
<title>leveldb::Status::ok (1,333,333 samples, 0.08%)</title><rect x="871.4" y="565" width="0.9" height="15.0" fill="rgb(232,88,5)" rx="2" ry="2" />
<text  x="874.36" y="575.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.08%)</title><rect x="282.3" y="501" width="1.0" height="15.0" fill="rgb(252,217,9)" rx="2" ry="2" />
<text  x="285.31" y="511.5" ></text>
</g>
<g >
<title>_IO_new_fopen (2,666,666 samples, 0.16%)</title><rect x="1125.7" y="709" width="1.9" height="15.0" fill="rgb(224,198,45)" rx="2" ry="2" />
<text  x="1128.71" y="719.5" ></text>
</g>
<g >
<title>ext4_block_write_begin (2,666,666 samples, 0.16%)</title><rect x="785.3" y="341" width="1.9" height="15.0" fill="rgb(212,134,27)" rx="2" ry="2" />
<text  x="788.32" y="351.5" ></text>
</g>
<g >
<title>leveldb::Status::Status (1,333,333 samples, 0.08%)</title><rect x="357.9" y="517" width="1.0" height="15.0" fill="rgb(242,53,25)" rx="2" ry="2" />
<text  x="360.95" y="527.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.08%)</title><rect x="715.4" y="581" width="0.9" height="15.0" fill="rgb(244,109,35)" rx="2" ry="2" />
<text  x="718.35" y="591.5" ></text>
</g>
<g >
<title>leveldb::Random::Next (3,999,999 samples, 0.24%)</title><rect x="389.2" y="565" width="2.8" height="15.0" fill="rgb(224,4,37)" rx="2" ry="2" />
<text  x="392.15" y="575.5" ></text>
</g>
<g >
<title>__do_page_cache_readahead (2,666,666 samples, 0.16%)</title><rect x="1164.5" y="629" width="1.9" height="15.0" fill="rgb(214,216,34)" rx="2" ry="2" />
<text  x="1167.47" y="639.5" ></text>
</g>
<g >
<title>leveldb::MemTable::Unref (1,333,333 samples, 0.08%)</title><rect x="255.8" y="581" width="1.0" height="15.0" fill="rgb(214,204,22)" rx="2" ry="2" />
<text  x="258.83" y="591.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (93,333,310 samples, 5.61%)</title><rect x="513.0" y="469" width="66.2" height="15.0" fill="rgb(246,73,23)" rx="2" ry="2" />
<text  x="516.01" y="479.5" >leveldb..</text>
</g>
<g >
<title>fts_stat (1,333,333 samples, 0.08%)</title><rect x="1113.4" y="645" width="1.0" height="15.0" fill="rgb(251,132,45)" rx="2" ry="2" />
<text  x="1116.41" y="655.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::Contents (1,333,333 samples, 0.08%)</title><rect x="432.6" y="597" width="1.0" height="15.0" fill="rgb(226,90,44)" rx="2" ry="2" />
<text  x="435.64" y="607.5" ></text>
</g>
<g >
<title>iput (2,666,666 samples, 0.16%)</title><rect x="11.9" y="469" width="1.9" height="15.0" fill="rgb(208,123,9)" rx="2" ry="2" />
<text  x="14.89" y="479.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.08%)</title><rect x="441.2" y="181" width="0.9" height="15.0" fill="rgb(232,34,54)" rx="2" ry="2" />
<text  x="444.15" y="191.5" ></text>
</g>
<g >
<title>ext4_invalidatepage (2,666,666 samples, 0.16%)</title><rect x="11.9" y="357" width="1.9" height="15.0" fill="rgb(239,204,34)" rx="2" ry="2" />
<text  x="14.89" y="367.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::__setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; (1,333,333 samples, 0.08%)</title><rect x="1174.9" y="805" width="0.9" height="15.0" fill="rgb(229,107,39)" rx="2" ry="2" />
<text  x="1177.87" y="815.5" ></text>
</g>
<g >
<title>__GI_madvise (1,333,333 samples, 0.08%)</title><rect x="1121.9" y="501" width="1.0" height="15.0" fill="rgb(231,90,46)" rx="2" ry="2" />
<text  x="1124.92" y="511.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*&amp;, std::__future_base::_Result_base::_Deleter, void&gt; (2,666,666 samples, 0.16%)</title><rect x="978.2" y="325" width="1.9" height="15.0" fill="rgb(205,197,1)" rx="2" ry="2" />
<text  x="981.21" y="335.5" ></text>
</g>
<g >
<title>__libc_write (191,999,952 samples, 11.54%)</title><rect x="732.4" y="517" width="136.1" height="15.0" fill="rgb(250,65,23)" rx="2" ry="2" />
<text  x="735.37" y="527.5" >__libc_write</text>
</g>
<g >
<title>vm_munmap (1,333,333 samples, 0.08%)</title><rect x="309.7" y="421" width="1.0" height="15.0" fill="rgb(235,167,10)" rx="2" ry="2" />
<text  x="312.73" y="431.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (1,333,333 samples, 0.08%)</title><rect x="281.4" y="485" width="0.9" height="15.0" fill="rgb(213,31,7)" rx="2" ry="2" />
<text  x="284.36" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;, std::allocator&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt; &gt; &gt;::resize (1,333,333 samples, 0.08%)</title><rect x="1127.6" y="693" width="0.9" height="15.0" fill="rgb(206,218,15)" rx="2" ry="2" />
<text  x="1130.60" y="703.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (7,999,998 samples, 0.48%)</title><rect x="247.3" y="533" width="5.7" height="15.0" fill="rgb(251,4,38)" rx="2" ry="2" />
<text  x="250.32" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::push_back (1,333,333 samples, 0.08%)</title><rect x="1179.6" y="805" width="0.9" height="15.0" fill="rgb(213,197,7)" rx="2" ry="2" />
<text  x="1182.60" y="815.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.08%)</title><rect x="10.0" y="677" width="0.9" height="15.0" fill="rgb(253,169,46)" rx="2" ry="2" />
<text  x="13.00" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1,333,333 samples, 0.08%)</title><rect x="184.0" y="517" width="0.9" height="15.0" fill="rgb(210,107,39)" rx="2" ry="2" />
<text  x="186.97" y="527.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.08%)</title><rect x="328.6" y="581" width="1.0" height="15.0" fill="rgb(223,102,24)" rx="2" ry="2" />
<text  x="331.64" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::get (2,666,666 samples, 0.16%)</title><rect x="1016.0" y="549" width="1.9" height="15.0" fill="rgb(206,140,41)" rx="2" ry="2" />
<text  x="1019.03" y="559.5" ></text>
</g>
<g >
<title>std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;::queue&lt;std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt;, void&gt; (1,333,333 samples, 0.08%)</title><rect x="1127.6" y="597" width="0.9" height="15.0" fill="rgb(246,145,28)" rx="2" ry="2" />
<text  x="1130.60" y="607.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; &gt; (1,333,333 samples, 0.08%)</title><rect x="1010.4" y="517" width="0.9" height="15.0" fill="rgb(241,119,29)" rx="2" ry="2" />
<text  x="1013.35" y="527.5" ></text>
</g>
<g >
<title>__fdget_pos (5,333,332 samples, 0.32%)</title><rect x="745.6" y="437" width="3.8" height="15.0" fill="rgb(244,91,54)" rx="2" ry="2" />
<text  x="748.61" y="447.5" ></text>
</g>
<g >
<title>__x64_sys_unlink (9,333,331 samples, 0.56%)</title><rect x="1115.3" y="661" width="6.6" height="15.0" fill="rgb(218,183,10)" rx="2" ry="2" />
<text  x="1118.30" y="671.5" ></text>
</g>
<g >
<title>__walk_page_range (1,333,333 samples, 0.08%)</title><rect x="321.1" y="229" width="0.9" height="15.0" fill="rgb(251,48,17)" rx="2" ry="2" />
<text  x="324.07" y="239.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::WriteRandom (1,057,333,069 samples, 63.54%)</title><rect x="360.8" y="661" width="749.8" height="15.0" fill="rgb(213,135,7)" rx="2" ry="2" />
<text  x="363.79" y="671.5" >leveldb::Benchmark::WriteRandom</text>
</g>
<g >
<title>_ULx86_64_step (1,333,333 samples, 0.08%)</title><rect x="441.2" y="341" width="0.9" height="15.0" fill="rgb(211,45,16)" rx="2" ry="2" />
<text  x="444.15" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, false, true&gt;::operator (1,333,333 samples, 0.08%)</title><rect x="1173.0" y="789" width="0.9" height="15.0" fill="rgb(211,114,22)" rx="2" ry="2" />
<text  x="1175.98" y="799.5" ></text>
</g>
<g >
<title>openaux (1,333,333 samples, 0.08%)</title><rect x="1128.5" y="693" width="1.0" height="15.0" fill="rgb(226,97,4)" rx="2" ry="2" />
<text  x="1131.54" y="703.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (1,333,333 samples, 0.08%)</title><rect x="314.5" y="469" width="0.9" height="15.0" fill="rgb(226,173,26)" rx="2" ry="2" />
<text  x="317.46" y="479.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; &gt;::_M_destroy (1,333,333 samples, 0.08%)</title><rect x="1010.4" y="533" width="0.9" height="15.0" fill="rgb(222,189,13)" rx="2" ry="2" />
<text  x="1013.35" y="543.5" ></text>
</g>
<g >
<title>std::thread::_M_start_thread (1,333,333 samples, 0.08%)</title><rect x="10.0" y="789" width="0.9" height="15.0" fill="rgb(232,27,44)" rx="2" ry="2" />
<text  x="13.00" y="799.5" ></text>
</g>
<g >
<title>leveldb::Compaction::ShouldStopBefore (1,333,333 samples, 0.08%)</title><rect x="1133.3" y="805" width="0.9" height="15.0" fill="rgb(219,93,37)" rx="2" ry="2" />
<text  x="1136.27" y="815.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.16%)</title><rect x="1086.0" y="421" width="1.9" height="15.0" fill="rgb(237,109,37)" rx="2" ry="2" />
<text  x="1088.99" y="431.5" ></text>
</g>
<g >
<title>[anon] (1,333,333 samples, 0.08%)</title><rect x="10.0" y="805" width="0.9" height="15.0" fill="rgb(222,112,1)" rx="2" ry="2" />
<text  x="13.00" y="815.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (2,666,666 samples, 0.16%)</title><rect x="97.9" y="405" width="1.9" height="15.0" fill="rgb(226,149,38)" rx="2" ry="2" />
<text  x="100.93" y="415.5" ></text>
</g>
<g >
<title>jbd2_journal_stop (1,333,333 samples, 0.08%)</title><rect x="768.3" y="293" width="0.9" height="15.0" fill="rgb(254,220,49)" rx="2" ry="2" />
<text  x="771.30" y="303.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (47,999,988 samples, 2.88%)</title><rect x="967.8" y="517" width="34.0" height="15.0" fill="rgb(216,74,37)" rx="2" ry="2" />
<text  x="970.80" y="527.5" >st..</text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (1,333,333 samples, 0.08%)</title><rect x="1111.5" y="725" width="1.0" height="15.0" fill="rgb(246,217,33)" rx="2" ry="2" />
<text  x="1114.52" y="735.5" ></text>
</g>
<g >
<title>open_path (1,333,333 samples, 0.08%)</title><rect x="1128.5" y="661" width="1.0" height="15.0" fill="rgb(240,22,4)" rx="2" ry="2" />
<text  x="1131.54" y="671.5" ></text>
</g>
<g >
<title>leveldb::Status::operator= (1,333,333 samples, 0.08%)</title><rect x="1135.2" y="789" width="0.9" height="15.0" fill="rgb(220,113,8)" rx="2" ry="2" />
<text  x="1138.16" y="799.5" ></text>
</g>
<g >
<title>evict (2,666,666 samples, 0.16%)</title><rect x="11.9" y="453" width="1.9" height="15.0" fill="rgb(234,28,32)" rx="2" ry="2" />
<text  x="14.89" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (1,333,333 samples, 0.08%)</title><rect x="107.4" y="453" width="0.9" height="15.0" fill="rgb(235,120,46)" rx="2" ry="2" />
<text  x="110.39" y="463.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.08%)</title><rect x="962.1" y="357" width="1.0" height="15.0" fill="rgb(210,116,27)" rx="2" ry="2" />
<text  x="965.13" y="367.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock (1,333,333 samples, 0.08%)</title><rect x="919.6" y="549" width="0.9" height="15.0" fill="rgb(220,30,39)" rx="2" ry="2" />
<text  x="922.58" y="559.5" ></text>
</g>
<g >
<title>filename_parentat (1,333,333 samples, 0.08%)</title><rect x="1115.3" y="629" width="0.9" height="15.0" fill="rgb(246,110,31)" rx="2" ry="2" />
<text  x="1118.30" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (2,666,666 samples, 0.16%)</title><rect x="137.6" y="469" width="1.9" height="15.0" fill="rgb(222,140,1)" rx="2" ry="2" />
<text  x="140.64" y="479.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1,333,333 samples, 0.08%)</title><rect x="1022.6" y="533" width="1.0" height="15.0" fill="rgb(210,88,44)" rx="2" ry="2" />
<text  x="1025.64" y="543.5" ></text>
</g>
<g >
<title>ext4_inode_csum_set (1,333,333 samples, 0.08%)</title><rect x="10.9" y="357" width="1.0" height="15.0" fill="rgb(245,150,6)" rx="2" ry="2" />
<text  x="13.95" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (1,333,333 samples, 0.08%)</title><rect x="1109.6" y="613" width="1.0" height="15.0" fill="rgb(254,177,35)" rx="2" ry="2" />
<text  x="1112.63" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt;::_Deque_iterator (1,333,333 samples, 0.08%)</title><rect x="408.1" y="565" width="0.9" height="15.0" fill="rgb(254,136,45)" rx="2" ry="2" />
<text  x="411.06" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (2,666,666 samples, 0.16%)</title><rect x="323.0" y="501" width="1.9" height="15.0" fill="rgb(236,205,25)" rx="2" ry="2" />
<text  x="325.96" y="511.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::shared_ptr&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt;&gt; (22,666,661 samples, 1.36%)</title><rect x="1041.6" y="565" width="16.0" height="15.0" fill="rgb(235,21,21)" rx="2" ry="2" />
<text  x="1044.55" y="575.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (1,333,333 samples, 0.08%)</title><rect x="686.0" y="501" width="1.0" height="15.0" fill="rgb(223,138,52)" rx="2" ry="2" />
<text  x="689.04" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (2,666,666 samples, 0.16%)</title><rect x="222.7" y="453" width="1.9" height="15.0" fill="rgb(211,216,9)" rx="2" ry="2" />
<text  x="225.74" y="463.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (1,333,333 samples, 0.08%)</title><rect x="1147.5" y="789" width="0.9" height="15.0" fill="rgb(230,89,23)" rx="2" ry="2" />
<text  x="1150.45" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (7,999,998 samples, 0.48%)</title><rect x="94.2" y="437" width="5.6" height="15.0" fill="rgb(220,80,16)" rx="2" ry="2" />
<text  x="97.15" y="447.5" ></text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.08%)</title><rect x="1052.9" y="469" width="0.9" height="15.0" fill="rgb(242,109,49)" rx="2" ry="2" />
<text  x="1055.90" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.08%)</title><rect x="316.3" y="485" width="1.0" height="15.0" fill="rgb(227,144,25)" rx="2" ry="2" />
<text  x="319.35" y="495.5" ></text>
</g>
<g >
<title>_dl_init (3,999,999 samples, 0.24%)</title><rect x="1111.5" y="789" width="2.9" height="15.0" fill="rgb(240,56,16)" rx="2" ry="2" />
<text  x="1114.52" y="799.5" ></text>
</g>
<g >
<title>std::locale::_Impl::_Impl (1,333,333 samples, 0.08%)</title><rect x="1114.4" y="645" width="0.9" height="15.0" fill="rgb(254,39,0)" rx="2" ry="2" />
<text  x="1117.36" y="655.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3,999,999 samples, 0.24%)</title><rect x="393.9" y="581" width="2.8" height="15.0" fill="rgb(250,179,47)" rx="2" ry="2" />
<text  x="396.88" y="591.5" ></text>
</g>
<g >
<title>mem_cgroup_from_task (1,333,333 samples, 0.08%)</title><rect x="98.9" y="293" width="0.9" height="15.0" fill="rgb(232,41,54)" rx="2" ry="2" />
<text  x="101.88" y="303.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::WriteLevel0Table (62,666,651 samples, 3.77%)</title><rect x="276.6" y="565" width="44.5" height="15.0" fill="rgb(225,79,30)" rx="2" ry="2" />
<text  x="279.63" y="575.5" >leve..</text>
</g>
<g >
<title>__radix_tree_lookup (1,333,333 samples, 0.08%)</title><rect x="792.9" y="277" width="0.9" height="15.0" fill="rgb(231,40,34)" rx="2" ry="2" />
<text  x="795.88" y="287.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (2,666,666 samples, 0.16%)</title><rect x="451.6" y="469" width="1.8" height="15.0" fill="rgb(251,178,2)" rx="2" ry="2" />
<text  x="454.55" y="479.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Mask (1,333,333 samples, 0.08%)</title><rect x="918.6" y="565" width="1.0" height="15.0" fill="rgb(242,136,54)" rx="2" ry="2" />
<text  x="921.64" y="575.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="275.7" y="501" width="0.9" height="15.0" fill="rgb(219,206,17)" rx="2" ry="2" />
<text  x="278.69" y="511.5" ></text>
</g>
<g >
<title>__ext4_get_inode_loc (5,333,332 samples, 0.32%)</title><rect x="847.7" y="261" width="3.8" height="15.0" fill="rgb(223,46,21)" rx="2" ry="2" />
<text  x="850.72" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append@plt (1,333,333 samples, 0.08%)</title><rect x="65.8" y="517" width="0.9" height="15.0" fill="rgb(253,49,18)" rx="2" ry="2" />
<text  x="68.79" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,333,333 samples, 0.08%)</title><rect x="316.3" y="501" width="1.0" height="15.0" fill="rgb(239,11,32)" rx="2" ry="2" />
<text  x="319.35" y="511.5" ></text>
</g>
<g >
<title>down_read_trylock (1,333,333 samples, 0.08%)</title><rect x="206.7" y="325" width="0.9" height="15.0" fill="rgb(226,158,36)" rx="2" ry="2" />
<text  x="209.67" y="335.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.08%)</title><rect x="71.5" y="517" width="0.9" height="15.0" fill="rgb(230,92,15)" rx="2" ry="2" />
<text  x="74.46" y="527.5" ></text>
</g>
<g >
<title>ext4_journal_check_start (1,333,333 samples, 0.08%)</title><rect x="776.8" y="325" width="1.0" height="15.0" fill="rgb(214,54,17)" rx="2" ry="2" />
<text  x="779.81" y="335.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1,333,333 samples, 0.08%)</title><rect x="68.6" y="485" width="1.0" height="15.0" fill="rgb(236,39,39)" rx="2" ry="2" />
<text  x="71.62" y="495.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (1,333,333 samples, 0.08%)</title><rect x="1156.0" y="805" width="0.9" height="15.0" fill="rgb(207,129,43)" rx="2" ry="2" />
<text  x="1158.96" y="815.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (5,333,332 samples, 0.32%)</title><rect x="179.2" y="453" width="3.8" height="15.0" fill="rgb(244,60,48)" rx="2" ry="2" />
<text  x="182.25" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (1,333,333 samples, 0.08%)</title><rect x="1110.6" y="805" width="0.9" height="15.0" fill="rgb(225,104,29)" rx="2" ry="2" />
<text  x="1113.58" y="815.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,333,333 samples, 0.08%)</title><rect x="122.5" y="469" width="1.0" height="15.0" fill="rgb(238,214,22)" rx="2" ry="2" />
<text  x="125.52" y="479.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.08%)</title><rect x="309.7" y="453" width="1.0" height="15.0" fill="rgb(224,115,25)" rx="2" ry="2" />
<text  x="312.73" y="463.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="812.7" y="261" width="1.0" height="15.0" fill="rgb(239,167,16)" rx="2" ry="2" />
<text  x="815.74" y="271.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (34,666,658 samples, 2.08%)</title><rect x="597.2" y="453" width="24.5" height="15.0" fill="rgb(252,89,44)" rx="2" ry="2" />
<text  x="600.16" y="463.5" >l..</text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="333.4" y="517" width="0.9" height="15.0" fill="rgb(253,213,13)" rx="2" ry="2" />
<text  x="336.37" y="527.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Add (41,333,323 samples, 2.48%)</title><rect x="329.6" y="581" width="29.3" height="15.0" fill="rgb(245,146,45)" rx="2" ry="2" />
<text  x="332.58" y="591.5" >le..</text>
</g>
<g >
<title>__x64_sys_openat (2,666,666 samples, 0.16%)</title><rect x="1125.7" y="597" width="1.9" height="15.0" fill="rgb(251,214,18)" rx="2" ry="2" />
<text  x="1128.71" y="607.5" ></text>
</g>
<g >
<title>leveldb::VersionSet::Builder::SaveTo (1,333,333 samples, 0.08%)</title><rect x="1122.9" y="677" width="0.9" height="15.0" fill="rgb(225,21,53)" rx="2" ry="2" />
<text  x="1125.87" y="687.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1,333,333 samples, 0.08%)</title><rect x="180.2" y="341" width="0.9" height="15.0" fill="rgb(206,226,34)" rx="2" ry="2" />
<text  x="183.19" y="351.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (35,999,991 samples, 2.16%)</title><rect x="1062.4" y="581" width="25.5" height="15.0" fill="rgb(235,187,45)" rx="2" ry="2" />
<text  x="1065.36" y="591.5" >s..</text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (25,333,327 samples, 1.52%)</title><rect x="971.6" y="405" width="18.0" height="15.0" fill="rgb(230,167,40)" rx="2" ry="2" />
<text  x="974.59" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (5,333,332 samples, 0.32%)</title><rect x="340.9" y="517" width="3.8" height="15.0" fill="rgb(218,123,12)" rx="2" ry="2" />
<text  x="343.93" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (1,333,333 samples, 0.08%)</title><rect x="1087.9" y="597" width="0.9" height="15.0" fill="rgb(244,72,30)" rx="2" ry="2" />
<text  x="1090.88" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.08%)</title><rect x="313.5" y="437" width="1.0" height="15.0" fill="rgb(212,161,8)" rx="2" ry="2" />
<text  x="316.51" y="447.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::tuple&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*&amp;, std::__future_base::_Result_base::_Deleter, true&gt; (2,666,666 samples, 0.16%)</title><rect x="978.2" y="341" width="1.9" height="15.0" fill="rgb(216,95,35)" rx="2" ry="2" />
<text  x="981.21" y="351.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="433.6" y="581" width="0.9" height="15.0" fill="rgb(239,211,15)" rx="2" ry="2" />
<text  x="436.59" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (22,666,661 samples, 1.36%)</title><rect x="1041.6" y="549" width="16.0" height="15.0" fill="rgb(233,126,39)" rx="2" ry="2" />
<text  x="1044.55" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add (5,333,332 samples, 0.32%)</title><rect x="1065.2" y="517" width="3.8" height="15.0" fill="rgb(234,93,18)" rx="2" ry="2" />
<text  x="1068.19" y="527.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.08%)</title><rect x="128.2" y="341" width="0.9" height="15.0" fill="rgb(218,50,11)" rx="2" ry="2" />
<text  x="131.19" y="351.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="1127.6" y="533" width="0.9" height="15.0" fill="rgb(207,184,1)" rx="2" ry="2" />
<text  x="1130.60" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,333,333 samples, 0.08%)</title><rect x="219.9" y="485" width="0.9" height="15.0" fill="rgb(227,140,0)" rx="2" ry="2" />
<text  x="222.90" y="495.5" ></text>
</g>
<g >
<title>proc_reg_open (2,666,666 samples, 0.16%)</title><rect x="1125.7" y="501" width="1.9" height="15.0" fill="rgb(221,202,5)" rx="2" ry="2" />
<text  x="1128.71" y="511.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="293.7" y="389" width="0.9" height="15.0" fill="rgb(222,64,46)" rx="2" ry="2" />
<text  x="296.65" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (11,999,997 samples, 0.72%)</title><rect x="99.8" y="469" width="8.5" height="15.0" fill="rgb(213,86,37)" rx="2" ry="2" />
<text  x="102.82" y="479.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;::_Tuple_impl (1,333,333 samples, 0.08%)</title><rect x="119.7" y="405" width="0.9" height="15.0" fill="rgb(236,31,16)" rx="2" ry="2" />
<text  x="122.68" y="415.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_S_check&lt;std::__future_base::_State_baseV2&gt; (3,999,999 samples, 0.24%)</title><rect x="1012.2" y="581" width="2.9" height="15.0" fill="rgb(226,106,13)" rx="2" ry="2" />
<text  x="1015.24" y="591.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (13,333,330 samples, 0.80%)</title><rect x="130.1" y="501" width="9.4" height="15.0" fill="rgb(235,40,49)" rx="2" ry="2" />
<text  x="133.08" y="511.5" ></text>
</g>
<g >
<title>user_path_at_empty (1,333,333 samples, 0.08%)</title><rect x="1128.5" y="549" width="1.0" height="15.0" fill="rgb(252,205,19)" rx="2" ry="2" />
<text  x="1131.54" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (3,999,999 samples, 0.24%)</title><rect x="312.6" y="517" width="2.8" height="15.0" fill="rgb(245,1,45)" rx="2" ry="2" />
<text  x="315.56" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::construct&lt;leveldb::ParsedInternalKey, leveldb::ParsedInternalKey const&amp;&gt; (2,666,666 samples, 0.16%)</title><rect x="191.5" y="517" width="1.9" height="15.0" fill="rgb(254,8,12)" rx="2" ry="2" />
<text  x="194.54" y="527.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (1,333,333 samples, 0.08%)</title><rect x="227.5" y="485" width="0.9" height="15.0" fill="rgb(250,64,34)" rx="2" ry="2" />
<text  x="230.47" y="495.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (153,333,295 samples, 9.21%)</title><rect x="756.0" y="405" width="108.7" height="15.0" fill="rgb(225,154,8)" rx="2" ry="2" />
<text  x="759.01" y="415.5" >ext4_file_wri..</text>
</g>
<g >
<title>__memset_avx2_erms (25,333,327 samples, 1.52%)</title><rect x="194.4" y="389" width="17.9" height="15.0" fill="rgb(247,98,53)" rx="2" ry="2" />
<text  x="197.38" y="399.5" ></text>
</g>
<g >
<title>std::mutex::lock (1,333,333 samples, 0.08%)</title><rect x="919.6" y="581" width="0.9" height="15.0" fill="rgb(218,0,45)" rx="2" ry="2" />
<text  x="922.58" y="591.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.08%)</title><rect x="727.6" y="405" width="1.0" height="15.0" fill="rgb(230,7,37)" rx="2" ry="2" />
<text  x="730.64" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (1,333,333 samples, 0.08%)</title><rect x="300.3" y="453" width="0.9" height="15.0" fill="rgb(218,58,12)" rx="2" ry="2" />
<text  x="303.27" y="463.5" ></text>
</g>
<g >
<title>leveldb::MemTable::ApproximateMemoryUsage (1,333,333 samples, 0.08%)</title><rect x="413.7" y="581" width="1.0" height="15.0" fill="rgb(210,169,6)" rx="2" ry="2" />
<text  x="416.73" y="591.5" ></text>
</g>
<g >
<title>[libunwind.so.8.0.1] (1,333,333 samples, 0.08%)</title><rect x="441.2" y="245" width="0.9" height="15.0" fill="rgb(209,195,15)" rx="2" ry="2" />
<text  x="444.15" y="255.5" ></text>
</g>
<g >
<title>leveldb::Arena::Allocate (3,999,999 samples, 0.24%)</title><rect x="439.3" y="533" width="2.8" height="15.0" fill="rgb(253,140,1)" rx="2" ry="2" />
<text  x="442.26" y="543.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1,333,333 samples, 0.08%)</title><rect x="311.6" y="293" width="1.0" height="15.0" fill="rgb(254,16,8)" rx="2" ry="2" />
<text  x="314.62" y="303.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (3,999,999 samples, 0.24%)</title><rect x="1069.9" y="517" width="2.9" height="15.0" fill="rgb(246,128,44)" rx="2" ry="2" />
<text  x="1072.92" y="527.5" ></text>
</g>
<g >
<title>leveldb::ParseInternalKey (1,333,333 samples, 0.08%)</title><rect x="340.0" y="565" width="0.9" height="15.0" fill="rgb(246,71,40)" rx="2" ry="2" />
<text  x="342.98" y="575.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::Next (1,333,333 samples, 0.08%)</title><rect x="243.5" y="565" width="1.0" height="15.0" fill="rgb(218,10,48)" rx="2" ry="2" />
<text  x="246.54" y="575.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ReleaseToCentralCache (1,333,333 samples, 0.08%)</title><rect x="321.1" y="485" width="0.9" height="15.0" fill="rgb(241,119,42)" rx="2" ry="2" />
<text  x="324.07" y="495.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.08%)</title><rect x="875.1" y="453" width="1.0" height="15.0" fill="rgb(212,28,17)" rx="2" ry="2" />
<text  x="878.14" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (2,666,666 samples, 0.16%)</title><rect x="139.5" y="501" width="1.9" height="15.0" fill="rgb(212,179,40)" rx="2" ry="2" />
<text  x="142.54" y="511.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (3,999,999 samples, 0.24%)</title><rect x="1166.4" y="805" width="2.8" height="15.0" fill="rgb(217,23,35)" rx="2" ry="2" />
<text  x="1169.36" y="815.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (1,333,333 samples, 0.08%)</title><rect x="1087.9" y="581" width="0.9" height="15.0" fill="rgb(246,85,2)" rx="2" ry="2" />
<text  x="1090.88" y="591.5" ></text>
</g>
<g >
<title>do_syscall_64 (185,333,287 samples, 11.14%)</title><rect x="737.1" y="485" width="131.4" height="15.0" fill="rgb(252,228,46)" rx="2" ry="2" />
<text  x="740.10" y="495.5" >do_syscall_64</text>
</g>
<g >
<title>__do_page_fault (3,999,999 samples, 0.24%)</title><rect x="179.2" y="405" width="2.9" height="15.0" fill="rgb(218,226,33)" rx="2" ry="2" />
<text  x="182.25" y="415.5" ></text>
</g>
<g >
<title>generic_write_checks (1,333,333 samples, 0.08%)</title><rect x="861.9" y="389" width="1.0" height="15.0" fill="rgb(208,12,24)" rx="2" ry="2" />
<text  x="864.91" y="399.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.08%)</title><rect x="274.7" y="533" width="1.0" height="15.0" fill="rgb(243,102,35)" rx="2" ry="2" />
<text  x="277.74" y="543.5" ></text>
</g>
<g >
<title>rcu_report_qs_rnp (1,333,333 samples, 0.08%)</title><rect x="619.9" y="341" width="0.9" height="15.0" fill="rgb(208,28,29)" rx="2" ry="2" />
<text  x="622.86" y="351.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;char*, unsigned long&gt; (1,333,333 samples, 0.08%)</title><rect x="322.0" y="485" width="1.0" height="15.0" fill="rgb(236,148,7)" rx="2" ry="2" />
<text  x="325.02" y="495.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.08%)</title><rect x="293.7" y="373" width="0.9" height="15.0" fill="rgb(254,16,14)" rx="2" ry="2" />
<text  x="296.65" y="383.5" ></text>
</g>
<g >
<title>leveldb::VersionSet::Recover (1,333,333 samples, 0.08%)</title><rect x="1122.9" y="693" width="0.9" height="15.0" fill="rgb(245,22,20)" rx="2" ry="2" />
<text  x="1125.87" y="703.5" ></text>
</g>
<g >
<title>block_invalidatepage (2,666,666 samples, 0.16%)</title><rect x="11.9" y="341" width="1.9" height="15.0" fill="rgb(222,54,53)" rx="2" ry="2" />
<text  x="14.89" y="351.5" ></text>
</g>
<g >
<title>__static_initialization_and_destruction_0 (1,333,333 samples, 0.08%)</title><rect x="1114.4" y="741" width="0.9" height="15.0" fill="rgb(219,28,28)" rx="2" ry="2" />
<text  x="1117.36" y="751.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.08%)</title><rect x="255.8" y="341" width="1.0" height="15.0" fill="rgb(221,40,1)" rx="2" ry="2" />
<text  x="258.83" y="351.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::Count (1,333,333 samples, 0.08%)</title><rect x="1156.9" y="789" width="1.0" height="15.0" fill="rgb(251,31,19)" rx="2" ry="2" />
<text  x="1159.91" y="799.5" ></text>
</g>
<g >
<title>jbd2_journal_stop (14,666,663 samples, 0.88%)</title><rect x="795.7" y="325" width="10.4" height="15.0" fill="rgb(238,182,49)" rx="2" ry="2" />
<text  x="798.72" y="335.5" ></text>
</g>
<g >
<title>[libtcmalloc.so.4.3.0] (1,333,333 samples, 0.08%)</title><rect x="441.2" y="357" width="0.9" height="15.0" fill="rgb(240,66,46)" rx="2" ry="2" />
<text  x="444.15" y="367.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.08%)</title><rect x="1124.8" y="597" width="0.9" height="15.0" fill="rgb(238,60,48)" rx="2" ry="2" />
<text  x="1127.76" y="607.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1,550,666,279 samples, 93.19%)</title><rect x="10.9" y="773" width="1099.7" height="15.0" fill="rgb(240,136,52)" rx="2" ry="2" />
<text  x="13.95" y="783.5" >[libstdc++.so.6.0.29]</text>
</g>
<g >
<title>std::atomic&lt;bool&gt;::load (2,666,666 samples, 0.16%)</title><rect x="358.9" y="581" width="1.9" height="15.0" fill="rgb(232,93,12)" rx="2" ry="2" />
<text  x="361.89" y="591.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1,333,333 samples, 0.08%)</title><rect x="178.3" y="469" width="0.9" height="15.0" fill="rgb(209,54,11)" rx="2" ry="2" />
<text  x="181.30" y="479.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (2,666,666 samples, 0.16%)</title><rect x="700.2" y="533" width="1.9" height="15.0" fill="rgb(245,41,5)" rx="2" ry="2" />
<text  x="703.22" y="543.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.08%)</title><rect x="1119.1" y="533" width="0.9" height="15.0" fill="rgb(227,163,8)" rx="2" ry="2" />
<text  x="1122.09" y="543.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Valid (1,333,333 samples, 0.08%)</title><rect x="25.1" y="517" width="1.0" height="15.0" fill="rgb(253,192,49)" rx="2" ry="2" />
<text  x="28.13" y="527.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (5,333,332 samples, 0.32%)</title><rect x="179.2" y="485" width="3.8" height="15.0" fill="rgb(254,24,2)" rx="2" ry="2" />
<text  x="182.25" y="495.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (1,333,333 samples, 0.08%)</title><rect x="1031.2" y="549" width="0.9" height="15.0" fill="rgb(238,223,32)" rx="2" ry="2" />
<text  x="1034.15" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux (2,666,666 samples, 0.16%)</title><rect x="392.0" y="581" width="1.9" height="15.0" fill="rgb(219,181,23)" rx="2" ry="2" />
<text  x="394.99" y="591.5" ></text>
</g>
<g >
<title>leveldb::log::Writer::EmitPhysicalRecord (281,333,263 samples, 16.91%)</title><rect x="720.1" y="581" width="199.5" height="15.0" fill="rgb(247,155,22)" rx="2" ry="2" />
<text  x="723.08" y="591.5" >leveldb::log::Writer::Emit..</text>
</g>
<g >
<title>snappy::Compress (1,333,333 samples, 0.08%)</title><rect x="193.4" y="485" width="1.0" height="15.0" fill="rgb(215,36,24)" rx="2" ry="2" />
<text  x="196.43" y="495.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Flush (25,333,327 samples, 1.52%)</title><rect x="340.9" y="565" width="18.0" height="15.0" fill="rgb(241,195,49)" rx="2" ry="2" />
<text  x="343.93" y="575.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.08%)</title><rect x="300.3" y="293" width="0.9" height="15.0" fill="rgb(219,78,20)" rx="2" ry="2" />
<text  x="303.27" y="303.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.08%)</title><rect x="275.7" y="469" width="0.9" height="15.0" fill="rgb(229,23,41)" rx="2" ry="2" />
<text  x="278.69" y="479.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteBlock (3,999,999 samples, 0.24%)</title><rect x="305.9" y="501" width="2.9" height="15.0" fill="rgb(251,167,50)" rx="2" ry="2" />
<text  x="308.95" y="511.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (1,333,333 samples, 0.08%)</title><rect x="1111.5" y="709" width="1.0" height="15.0" fill="rgb(205,105,27)" rx="2" ry="2" />
<text  x="1114.52" y="719.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__future_base::_State_baseV2&gt;::allocator (1,333,333 samples, 0.08%)</title><rect x="1044.4" y="469" width="0.9" height="15.0" fill="rgb(214,99,54)" rx="2" ry="2" />
<text  x="1047.39" y="479.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::wait (3,999,999 samples, 0.24%)</title><rect x="1015.1" y="581" width="2.8" height="15.0" fill="rgb(209,82,48)" rx="2" ry="2" />
<text  x="1018.08" y="591.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2,666,666 samples, 0.16%)</title><rect x="801.4" y="277" width="1.9" height="15.0" fill="rgb(247,191,35)" rx="2" ry="2" />
<text  x="804.39" y="287.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.08%)</title><rect x="315.4" y="373" width="0.9" height="15.0" fill="rgb(242,64,20)" rx="2" ry="2" />
<text  x="318.40" y="383.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (1,333,333 samples, 0.08%)</title><rect x="1111.5" y="693" width="1.0" height="15.0" fill="rgb(219,54,48)" rx="2" ry="2" />
<text  x="1114.52" y="703.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (1,333,333 samples, 0.08%)</title><rect x="421.3" y="517" width="0.9" height="15.0" fill="rgb(209,131,52)" rx="2" ry="2" />
<text  x="424.30" y="527.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.08%)</title><rect x="994.3" y="357" width="0.9" height="15.0" fill="rgb(250,17,49)" rx="2" ry="2" />
<text  x="997.28" y="367.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (15,999,996 samples, 0.96%)</title><rect x="670.9" y="485" width="11.4" height="15.0" fill="rgb(237,221,33)" rx="2" ry="2" />
<text  x="673.91" y="495.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Rep::Rep (25,333,327 samples, 1.52%)</title><rect x="194.4" y="533" width="17.9" height="15.0" fill="rgb(226,49,38)" rx="2" ry="2" />
<text  x="197.38" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (2,666,666 samples, 0.16%)</title><rect x="312.6" y="453" width="1.9" height="15.0" fill="rgb(224,32,18)" rx="2" ry="2" />
<text  x="315.56" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1,333,333 samples, 0.08%)</title><rect x="42.1" y="501" width="1.0" height="15.0" fill="rgb(208,90,20)" rx="2" ry="2" />
<text  x="45.15" y="511.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Valid (1,333,333 samples, 0.08%)</title><rect x="270.0" y="517" width="1.0" height="15.0" fill="rgb(210,29,14)" rx="2" ry="2" />
<text  x="273.02" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;leveldb::ParsedInternalKey&gt;::construct&lt;leveldb::ParsedInternalKey, leveldb::ParsedInternalKey const&amp;&gt; (2,666,666 samples, 0.16%)</title><rect x="191.5" y="501" width="1.9" height="15.0" fill="rgb(226,4,36)" rx="2" ry="2" />
<text  x="194.54" y="511.5" ></text>
</g>
<g >
<title>ext4_mpage_readpages (2,666,666 samples, 0.16%)</title><rect x="1164.5" y="581" width="1.9" height="15.0" fill="rgb(209,7,35)" rx="2" ry="2" />
<text  x="1167.47" y="591.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (13,333,330 samples, 0.80%)</title><rect x="909.2" y="549" width="9.4" height="15.0" fill="rgb(212,55,34)" rx="2" ry="2" />
<text  x="912.18" y="559.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Next (1,333,333 samples, 0.08%)</title><rect x="271.0" y="533" width="0.9" height="15.0" fill="rgb(219,23,50)" rx="2" ry="2" />
<text  x="273.96" y="543.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::get_future (14,666,663 samples, 0.88%)</title><rect x="1025.5" y="613" width="10.4" height="15.0" fill="rgb(240,109,22)" rx="2" ry="2" />
<text  x="1028.48" y="623.5" ></text>
</g>
<g >
<title>leveldb::test::CompressibleString (11,999,997 samples, 0.72%)</title><rect x="385.4" y="613" width="8.5" height="15.0" fill="rgb(247,213,51)" rx="2" ry="2" />
<text  x="388.37" y="623.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (3,999,999 samples, 0.24%)</title><rect x="36.5" y="517" width="2.8" height="15.0" fill="rgb(242,33,16)" rx="2" ry="2" />
<text  x="39.47" y="527.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.08%)</title><rect x="300.3" y="325" width="0.9" height="15.0" fill="rgb(227,193,1)" rx="2" ry="2" />
<text  x="303.27" y="335.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::KeyBuffer::slice (2,666,666 samples, 0.16%)</title><rect x="379.7" y="629" width="1.9" height="15.0" fill="rgb(210,188,25)" rx="2" ry="2" />
<text  x="382.70" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.08%)</title><rect x="1075.6" y="501" width="0.9" height="15.0" fill="rgb(237,68,46)" rx="2" ry="2" />
<text  x="1078.59" y="511.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1,333,333 samples, 0.08%)</title><rect x="985.8" y="293" width="0.9" height="15.0" fill="rgb(225,62,19)" rx="2" ry="2" />
<text  x="988.77" y="303.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::SetNext (1,333,333 samples, 0.08%)</title><rect x="1154.1" y="789" width="0.9" height="15.0" fill="rgb(247,4,35)" rx="2" ry="2" />
<text  x="1157.07" y="799.5" ></text>
</g>
<g >
<title>truncate_inode_pages_final (7,999,998 samples, 0.48%)</title><rect x="1116.2" y="581" width="5.7" height="15.0" fill="rgb(241,229,18)" rx="2" ry="2" />
<text  x="1119.25" y="591.5" ></text>
</g>
<g >
<title>_IO_vfprintf_internal (22,666,661 samples, 1.36%)</title><rect x="363.6" y="581" width="16.1" height="15.0" fill="rgb(223,43,14)" rx="2" ry="2" />
<text  x="366.62" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::destroy&lt;leveldb::DBImpl::Writer*&gt; (1,333,333 samples, 0.08%)</title><rect x="931.9" y="581" width="0.9" height="15.0" fill="rgb(232,62,35)" rx="2" ry="2" />
<text  x="934.88" y="591.5" ></text>
</g>
<g >
<title>leveldb::MemTable::KeyComparator::operator (221,333,278 samples, 13.30%)</title><rect x="503.6" y="485" width="156.9" height="15.0" fill="rgb(240,104,25)" rx="2" ry="2" />
<text  x="506.56" y="495.5" >leveldb::MemTable::K..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (1,333,333 samples, 0.08%)</title><rect x="1170.1" y="789" width="1.0" height="15.0" fill="rgb(235,101,52)" rx="2" ry="2" />
<text  x="1173.14" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.08%)</title><rect x="305.0" y="437" width="0.9" height="15.0" fill="rgb(232,84,38)" rx="2" ry="2" />
<text  x="308.00" y="447.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (6,666,665 samples, 0.40%)</title><rect x="1018.9" y="565" width="4.7" height="15.0" fill="rgb(229,198,31)" rx="2" ry="2" />
<text  x="1021.86" y="575.5" ></text>
</g>
<g >
<title>free_unref_page_prepare.part.68 (1,333,333 samples, 0.08%)</title><rect x="1117.2" y="501" width="0.9" height="15.0" fill="rgb(246,120,20)" rx="2" ry="2" />
<text  x="1120.20" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (2,666,666 samples, 0.16%)</title><rect x="1188.1" y="805" width="1.9" height="15.0" fill="rgb(213,198,30)" rx="2" ry="2" />
<text  x="1191.11" y="815.5" ></text>
</g>
<g >
<title>handle_mm_fault (5,333,332 samples, 0.32%)</title><rect x="207.6" y="325" width="3.8" height="15.0" fill="rgb(219,169,51)" rx="2" ry="2" />
<text  x="210.61" y="335.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.08%)</title><rect x="105.5" y="37" width="0.9" height="15.0" fill="rgb(223,5,21)" rx="2" ry="2" />
<text  x="108.50" y="47.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::get_deleter (1,333,333 samples, 0.08%)</title><rect x="1189.1" y="789" width="0.9" height="15.0" fill="rgb(220,199,31)" rx="2" ry="2" />
<text  x="1192.05" y="799.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::InsertRange (1,333,333 samples, 0.08%)</title><rect x="1121.9" y="613" width="1.0" height="15.0" fill="rgb(221,7,37)" rx="2" ry="2" />
<text  x="1124.92" y="623.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.08%)</title><rect x="92.3" y="389" width="0.9" height="15.0" fill="rgb(237,121,51)" rx="2" ry="2" />
<text  x="95.26" y="399.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (7,999,998 samples, 0.48%)</title><rect x="151.8" y="453" width="5.7" height="15.0" fill="rgb(244,43,44)" rx="2" ry="2" />
<text  x="154.83" y="463.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;::_Tuple_impl&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,333,333 samples, 0.08%)</title><rect x="302.2" y="421" width="0.9" height="15.0" fill="rgb(222,140,10)" rx="2" ry="2" />
<text  x="305.16" y="431.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (1,550,666,279 samples, 93.19%)</title><rect x="10.9" y="725" width="1099.7" height="15.0" fill="rgb(251,79,10)" rx="2" ry="2" />
<text  x="13.95" y="735.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>operator new[] (3,999,999 samples, 0.24%)</title><rect x="126.3" y="469" width="2.8" height="15.0" fill="rgb(231,61,8)" rx="2" ry="2" />
<text  x="129.30" y="479.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::Delete (1,333,333 samples, 0.08%)</title><rect x="1121.9" y="565" width="1.0" height="15.0" fill="rgb(247,11,45)" rx="2" ry="2" />
<text  x="1124.92" y="575.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::SingletonEnv&lt;leveldb::(anonymous namespace)::PosixEnv&gt;::SingletonEnv (1,333,333 samples, 0.08%)</title><rect x="1127.6" y="725" width="0.9" height="15.0" fill="rgb(218,168,53)" rx="2" ry="2" />
<text  x="1130.60" y="735.5" ></text>
</g>
<g >
<title>__do_sys_newstat (1,333,333 samples, 0.08%)</title><rect x="1128.5" y="581" width="1.0" height="15.0" fill="rgb(252,220,47)" rx="2" ry="2" />
<text  x="1131.54" y="591.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (1,333,333 samples, 0.08%)</title><rect x="976.3" y="341" width="1.0" height="15.0" fill="rgb(207,195,16)" rx="2" ry="2" />
<text  x="979.31" y="351.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ReleaseToCentralCache (1,333,333 samples, 0.08%)</title><rect x="1121.9" y="629" width="1.0" height="15.0" fill="rgb(214,196,11)" rx="2" ry="2" />
<text  x="1124.92" y="639.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::GetChildren (1,333,333 samples, 0.08%)</title><rect x="10.9" y="565" width="1.0" height="15.0" fill="rgb(236,218,38)" rx="2" ry="2" />
<text  x="13.95" y="575.5" ></text>
</g>
<g >
<title>leveldb::Status::~Status (1,333,333 samples, 0.08%)</title><rect x="719.1" y="581" width="1.0" height="15.0" fill="rgb(248,89,14)" rx="2" ry="2" />
<text  x="722.13" y="591.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::New (1,333,333 samples, 0.08%)</title><rect x="105.5" y="277" width="0.9" height="15.0" fill="rgb(214,181,46)" rx="2" ry="2" />
<text  x="108.50" y="287.5" ></text>
</g>
<g >
<title>path_parentat (1,333,333 samples, 0.08%)</title><rect x="1115.3" y="613" width="0.9" height="15.0" fill="rgb(212,26,32)" rx="2" ry="2" />
<text  x="1118.30" y="623.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (1,333,333 samples, 0.08%)</title><rect x="277.6" y="517" width="0.9" height="15.0" fill="rgb(242,151,54)" rx="2" ry="2" />
<text  x="280.58" y="527.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (30,666,659 samples, 1.84%)</title><rect x="660.5" y="501" width="21.8" height="15.0" fill="rgb(243,173,1)" rx="2" ry="2" />
<text  x="663.51" y="511.5" >l..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::allocate (1,333,333 samples, 0.08%)</title><rect x="105.5" y="389" width="0.9" height="15.0" fill="rgb(232,35,0)" rx="2" ry="2" />
<text  x="108.50" y="399.5" ></text>
</g>
<g >
<title>show_cpuinfo (1,333,333 samples, 0.08%)</title><rect x="1124.8" y="485" width="0.9" height="15.0" fill="rgb(215,175,52)" rx="2" ry="2" />
<text  x="1127.76" y="495.5" ></text>
</g>
<g >
<title>_cond_resched (1,333,333 samples, 0.08%)</title><rect x="787.2" y="325" width="1.0" height="15.0" fill="rgb(238,124,24)" rx="2" ry="2" />
<text  x="790.21" y="335.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; (1,333,333 samples, 0.08%)</title><rect x="343.8" y="421" width="0.9" height="15.0" fill="rgb(250,125,48)" rx="2" ry="2" />
<text  x="346.77" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::__future_base::_State_baseV2&gt;::_M_ptr (1,333,333 samples, 0.08%)</title><rect x="1042.5" y="501" width="0.9" height="15.0" fill="rgb(209,125,47)" rx="2" ry="2" />
<text  x="1045.50" y="511.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (1,333,333 samples, 0.08%)</title><rect x="242.6" y="549" width="0.9" height="15.0" fill="rgb(235,228,30)" rx="2" ry="2" />
<text  x="245.60" y="559.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::user_comparator (1,333,333 samples, 0.08%)</title><rect x="1134.2" y="789" width="1.0" height="15.0" fill="rgb(245,29,52)" rx="2" ry="2" />
<text  x="1137.21" y="799.5" ></text>
</g>
<g >
<title>user_path_at_empty (1,333,333 samples, 0.08%)</title><rect x="1113.4" y="533" width="1.0" height="15.0" fill="rgb(243,116,24)" rx="2" ry="2" />
<text  x="1116.41" y="543.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (2,666,666 samples, 0.16%)</title><rect x="305.9" y="453" width="1.9" height="15.0" fill="rgb(230,202,47)" rx="2" ry="2" />
<text  x="308.95" y="463.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::MergeIntoFreeList (1,333,333 samples, 0.08%)</title><rect x="105.5" y="229" width="0.9" height="15.0" fill="rgb(220,41,43)" rx="2" ry="2" />
<text  x="108.50" y="239.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (1,333,333 samples, 0.08%)</title><rect x="105.5" y="293" width="0.9" height="15.0" fill="rgb(227,98,5)" rx="2" ry="2" />
<text  x="108.50" y="303.5" ></text>
</g>
<g >
<title>find_busiest_group (1,333,333 samples, 0.08%)</title><rect x="985.8" y="245" width="0.9" height="15.0" fill="rgb(231,212,10)" rx="2" ry="2" />
<text  x="988.77" y="255.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (3,999,999 samples, 0.24%)</title><rect x="1144.6" y="789" width="2.9" height="15.0" fill="rgb(249,188,6)" rx="2" ry="2" />
<text  x="1147.62" y="799.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::operator (1,333,333 samples, 0.08%)</title><rect x="976.3" y="373" width="1.0" height="15.0" fill="rgb(225,180,8)" rx="2" ry="2" />
<text  x="979.31" y="383.5" ></text>
</g>
<g >
<title>__d_lookup_rcu (1,333,333 samples, 0.08%)</title><rect x="1115.3" y="549" width="0.9" height="15.0" fill="rgb(221,138,0)" rx="2" ry="2" />
<text  x="1118.30" y="559.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator@plt (1,333,333 samples, 0.08%)</title><rect x="129.1" y="485" width="1.0" height="15.0" fill="rgb(205,107,49)" rx="2" ry="2" />
<text  x="132.13" y="495.5" ></text>
</g>
<g >
<title>walk_page_range (1,333,333 samples, 0.08%)</title><rect x="255.8" y="261" width="1.0" height="15.0" fill="rgb(216,171,21)" rx="2" ry="2" />
<text  x="258.83" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::empty (1,333,333 samples, 0.08%)</title><rect x="921.5" y="597" width="0.9" height="15.0" fill="rgb(208,168,36)" rx="2" ry="2" />
<text  x="924.47" y="607.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (2,666,666 samples, 0.16%)</title><rect x="1175.8" y="789" width="1.9" height="15.0" fill="rgb(234,74,50)" rx="2" ry="2" />
<text  x="1178.82" y="799.5" ></text>
</g>
<g >
<title>page_fault (3,999,999 samples, 0.24%)</title><rect x="86.6" y="437" width="2.8" height="15.0" fill="rgb(250,42,32)" rx="2" ry="2" />
<text  x="89.59" y="447.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (1,550,666,279 samples, 93.19%)</title><rect x="10.9" y="757" width="1099.7" height="15.0" fill="rgb(210,53,46)" rx="2" ry="2" />
<text  x="13.95" y="767.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (2,666,666 samples, 0.16%)</title><rect x="280.4" y="501" width="1.9" height="15.0" fill="rgb(214,203,50)" rx="2" ry="2" />
<text  x="283.42" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::get_deleter (2,666,666 samples, 0.16%)</title><rect x="1086.0" y="453" width="1.9" height="15.0" fill="rgb(240,78,5)" rx="2" ry="2" />
<text  x="1088.99" y="463.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.08%)</title><rect x="128.2" y="357" width="0.9" height="15.0" fill="rgb(216,60,4)" rx="2" ry="2" />
<text  x="131.19" y="367.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (341,333,248 samples, 20.51%)</title><rect x="446.8" y="533" width="242.1" height="15.0" fill="rgb(217,121,36)" rx="2" ry="2" />
<text  x="449.83" y="543.5" >leveldb::SkipList&lt;char const*, l..</text>
</g>
<g >
<title>leveldb::Block::Iter::key (1,333,333 samples, 0.08%)</title><rect x="271.0" y="501" width="0.9" height="15.0" fill="rgb(240,66,24)" rx="2" ry="2" />
<text  x="273.96" y="511.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::RandomHeight (2,666,666 samples, 0.16%)</title><rect x="687.0" y="517" width="1.9" height="15.0" fill="rgb(245,38,15)" rx="2" ry="2" />
<text  x="689.99" y="527.5" ></text>
</g>
<g >
<title>note_gp_changes (1,333,333 samples, 0.08%)</title><rect x="383.5" y="533" width="0.9" height="15.0" fill="rgb(209,137,4)" rx="2" ry="2" />
<text  x="386.48" y="543.5" ></text>
</g>
<g >
<title>walk_page_range (1,333,333 samples, 0.08%)</title><rect x="321.1" y="245" width="0.9" height="15.0" fill="rgb(240,8,52)" rx="2" ry="2" />
<text  x="324.07" y="255.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (2,666,666 samples, 0.16%)</title><rect x="58.2" y="517" width="1.9" height="15.0" fill="rgb(212,43,30)" rx="2" ry="2" />
<text  x="61.22" y="527.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,666,666 samples, 0.16%)</title><rect x="1125.7" y="629" width="1.9" height="15.0" fill="rgb(207,21,2)" rx="2" ry="2" />
<text  x="1128.71" y="639.5" ></text>
</g>
<g >
<title>start_thread (1,550,666,279 samples, 93.19%)</title><rect x="10.9" y="789" width="1099.7" height="15.0" fill="rgb(215,169,6)" rx="2" ry="2" />
<text  x="13.95" y="799.5" >start_thread</text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (2,666,666 samples, 0.16%)</title><rect x="342.8" y="453" width="1.9" height="15.0" fill="rgb(240,151,46)" rx="2" ry="2" />
<text  x="345.82" y="463.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (3,999,999 samples, 0.24%)</title><rect x="28.0" y="533" width="2.8" height="15.0" fill="rgb(229,198,31)" rx="2" ry="2" />
<text  x="30.96" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (7,999,998 samples, 0.48%)</title><rect x="132.0" y="437" width="5.6" height="15.0" fill="rgb(228,25,37)" rx="2" ry="2" />
<text  x="134.97" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.08%)</title><rect x="219.9" y="469" width="0.9" height="15.0" fill="rgb(232,165,32)" rx="2" ry="2" />
<text  x="222.90" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (1,333,333 samples, 0.08%)</title><rect x="345.7" y="405" width="0.9" height="15.0" fill="rgb(231,10,25)" rx="2" ry="2" />
<text  x="348.66" y="415.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="963.1" y="389" width="0.9" height="15.0" fill="rgb(221,152,32)" rx="2" ry="2" />
<text  x="966.08" y="399.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1,333,333 samples, 0.08%)</title><rect x="310.7" y="277" width="0.9" height="15.0" fill="rgb(223,25,9)" rx="2" ry="2" />
<text  x="313.67" y="287.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::ThreadBody (1,057,333,069 samples, 63.54%)</title><rect x="360.8" y="677" width="749.8" height="15.0" fill="rgb(247,45,26)" rx="2" ry="2" />
<text  x="363.79" y="687.5" >leveldb::Benchmark::ThreadBody</text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (267,999,933 samples, 16.11%)</title><rect x="470.5" y="501" width="190.0" height="15.0" fill="rgb(214,141,3)" rx="2" ry="2" />
<text  x="473.46" y="511.5" >leveldb::SkipList&lt;char c..</text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (2,666,666 samples, 0.16%)</title><rect x="232.2" y="485" width="1.9" height="15.0" fill="rgb(209,99,42)" rx="2" ry="2" />
<text  x="235.20" y="495.5" ></text>
</g>
<g >
<title>do_dentry_open (2,666,666 samples, 0.16%)</title><rect x="1125.7" y="517" width="1.9" height="15.0" fill="rgb(211,204,26)" rx="2" ry="2" />
<text  x="1128.71" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1,333,333 samples, 0.08%)</title><rect x="1172.0" y="789" width="1.0" height="15.0" fill="rgb(234,113,50)" rx="2" ry="2" />
<text  x="1175.04" y="799.5" ></text>
</g>
<g >
<title>leveldb::port::Mutex::Unlock (1,333,333 samples, 0.08%)</title><rect x="421.3" y="581" width="0.9" height="15.0" fill="rgb(225,118,2)" rx="2" ry="2" />
<text  x="424.30" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.08%)</title><rect x="1075.6" y="485" width="0.9" height="15.0" fill="rgb(223,107,5)" rx="2" ry="2" />
<text  x="1078.59" y="495.5" ></text>
</g>
<g >
<title>get_futex_key (1,333,333 samples, 0.08%)</title><rect x="964.0" y="437" width="1.0" height="15.0" fill="rgb(231,45,22)" rx="2" ry="2" />
<text  x="967.02" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,333,333 samples, 0.08%)</title><rect x="106.4" y="405" width="1.0" height="15.0" fill="rgb(205,176,37)" rx="2" ry="2" />
<text  x="109.44" y="415.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="812.7" y="245" width="1.0" height="15.0" fill="rgb(233,108,3)" rx="2" ry="2" />
<text  x="815.74" y="255.5" ></text>
</g>
<g >
<title>try_to_free_buffers (1,333,333 samples, 0.08%)</title><rect x="12.8" y="277" width="1.0" height="15.0" fill="rgb(227,130,43)" rx="2" ry="2" />
<text  x="15.84" y="287.5" ></text>
</g>
<g >
<title>__find_specmb (2,666,666 samples, 0.16%)</title><rect x="374.0" y="565" width="1.9" height="15.0" fill="rgb(245,121,48)" rx="2" ry="2" />
<text  x="377.02" y="575.5" ></text>
</g>
<g >
<title>up_write (2,666,666 samples, 0.16%)</title><rect x="862.9" y="389" width="1.8" height="15.0" fill="rgb(242,67,50)" rx="2" ry="2" />
<text  x="865.85" y="399.5" ></text>
</g>
<g >
<title>__fget_light (2,666,666 samples, 0.16%)</title><rect x="749.4" y="437" width="1.9" height="15.0" fill="rgb(229,144,29)" rx="2" ry="2" />
<text  x="752.39" y="447.5" ></text>
</g>
<g >
<title>leveldb::PutVarint32 (1,333,333 samples, 0.08%)</title><rect x="330.5" y="549" width="1.0" height="15.0" fill="rgb(223,40,4)" rx="2" ry="2" />
<text  x="333.53" y="559.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1,333,333 samples, 0.08%)</title><rect x="310.7" y="261" width="0.9" height="15.0" fill="rgb(218,37,0)" rx="2" ry="2" />
<text  x="313.67" y="271.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::MakeRoomForWrite (1,333,333 samples, 0.08%)</title><rect x="413.7" y="597" width="1.0" height="15.0" fill="rgb(251,86,43)" rx="2" ry="2" />
<text  x="416.73" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, false, true&gt;::operator (1,333,333 samples, 0.08%)</title><rect x="121.6" y="469" width="0.9" height="15.0" fill="rgb(240,42,39)" rx="2" ry="2" />
<text  x="124.57" y="479.5" ></text>
</g>
<g >
<title>__set_page_dirty_buffers (1,333,333 samples, 0.08%)</title><rect x="309.7" y="293" width="1.0" height="15.0" fill="rgb(232,48,25)" rx="2" ry="2" />
<text  x="312.73" y="303.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1,333,333 samples, 0.08%)</title><rect x="392.0" y="565" width="0.9" height="15.0" fill="rgb(234,60,1)" rx="2" ry="2" />
<text  x="394.99" y="575.5" ></text>
</g>
<g >
<title>task_numa_fault (1,333,333 samples, 0.08%)</title><rect x="88.5" y="357" width="0.9" height="15.0" fill="rgb(223,191,33)" rx="2" ry="2" />
<text  x="91.48" y="367.5" ></text>
</g>
<g >
<title>map_id_up (1,333,333 samples, 0.08%)</title><rect x="844.9" y="245" width="0.9" height="15.0" fill="rgb(210,148,36)" rx="2" ry="2" />
<text  x="847.89" y="255.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (1,333,333 samples, 0.08%)</title><rect x="920.5" y="533" width="1.0" height="15.0" fill="rgb(229,31,11)" rx="2" ry="2" />
<text  x="923.53" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (1,333,333 samples, 0.08%)</title><rect x="93.2" y="405" width="1.0" height="15.0" fill="rgb(248,161,32)" rx="2" ry="2" />
<text  x="96.21" y="415.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.16%)</title><rect x="982.9" y="357" width="1.9" height="15.0" fill="rgb(239,11,44)" rx="2" ry="2" />
<text  x="985.93" y="367.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (5,333,332 samples, 0.32%)</title><rect x="1032.1" y="549" width="3.8" height="15.0" fill="rgb(216,118,54)" rx="2" ry="2" />
<text  x="1035.10" y="559.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="985.8" y="341" width="0.9" height="15.0" fill="rgb(205,122,27)" rx="2" ry="2" />
<text  x="988.77" y="351.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.08%)</title><rect x="440.2" y="389" width="1.0" height="15.0" fill="rgb(210,213,14)" rx="2" ry="2" />
<text  x="443.21" y="399.5" ></text>
</g>
<g >
<title>ext4_readpages (2,666,666 samples, 0.16%)</title><rect x="1164.5" y="597" width="1.9" height="15.0" fill="rgb(217,192,18)" rx="2" ry="2" />
<text  x="1167.47" y="607.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::tuple&lt;std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter, true&gt; (1,333,333 samples, 0.08%)</title><rect x="1052.0" y="421" width="0.9" height="15.0" fill="rgb(207,6,33)" rx="2" ry="2" />
<text  x="1054.96" y="431.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1,333,333 samples, 0.08%)</title><rect x="36.5" y="469" width="0.9" height="15.0" fill="rgb(227,76,18)" rx="2" ry="2" />
<text  x="39.47" y="479.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__future_base::_State_baseV2&gt;::~allocator (1,333,333 samples, 0.08%)</title><rect x="1056.7" y="517" width="0.9" height="15.0" fill="rgb(218,208,41)" rx="2" ry="2" />
<text  x="1059.68" y="527.5" ></text>
</g>
<g >
<title>cpuinfo_open (2,666,666 samples, 0.16%)</title><rect x="1125.7" y="485" width="1.9" height="15.0" fill="rgb(253,59,7)" rx="2" ry="2" />
<text  x="1128.71" y="495.5" ></text>
</g>
<g >
<title>_dl_map_object (1,333,333 samples, 0.08%)</title><rect x="1128.5" y="677" width="1.0" height="15.0" fill="rgb(215,140,38)" rx="2" ry="2" />
<text  x="1131.54" y="687.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::NewDB (1,333,333 samples, 0.08%)</title><rect x="1121.9" y="693" width="1.0" height="15.0" fill="rgb(215,10,48)" rx="2" ry="2" />
<text  x="1124.92" y="703.5" ></text>
</g>
<g >
<title>tc_malloc (2,666,666 samples, 0.16%)</title><rect x="1111.5" y="741" width="1.9" height="15.0" fill="rgb(219,103,40)" rx="2" ry="2" />
<text  x="1114.52" y="751.5" ></text>
</g>
<g >
<title>std::__fill_a&lt;char&gt; (25,333,327 samples, 1.52%)</title><rect x="194.4" y="405" width="17.9" height="15.0" fill="rgb(240,197,21)" rx="2" ry="2" />
<text  x="197.38" y="415.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::__future_base::_Result_base::_Deleter, true&gt;::_Head_base&lt;std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.08%)</title><rect x="979.2" y="293" width="0.9" height="15.0" fill="rgb(208,104,51)" rx="2" ry="2" />
<text  x="982.15" y="303.5" ></text>
</g>
<g >
<title>truncate_inode_pages_final (2,666,666 samples, 0.16%)</title><rect x="11.9" y="421" width="1.9" height="15.0" fill="rgb(229,21,50)" rx="2" ry="2" />
<text  x="14.89" y="431.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (1,333,333 samples, 0.08%)</title><rect x="441.2" y="149" width="0.9" height="15.0" fill="rgb(224,142,46)" rx="2" ry="2" />
<text  x="444.15" y="159.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (3,999,999 samples, 0.24%)</title><rect x="1128.5" y="757" width="2.9" height="15.0" fill="rgb(225,80,54)" rx="2" ry="2" />
<text  x="1131.54" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__future_base::_State_baseV2&gt;::destroy&lt;std::__future_base::_State_baseV2&gt; (13,333,330 samples, 0.80%)</title><rect x="1078.4" y="501" width="9.5" height="15.0" fill="rgb(223,120,41)" rx="2" ry="2" />
<text  x="1081.43" y="511.5" ></text>
</g>
<g >
<title>__pthread_once_slow (1,333,333 samples, 0.08%)</title><rect x="1114.4" y="677" width="0.9" height="15.0" fill="rgb(205,77,11)" rx="2" ry="2" />
<text  x="1117.36" y="687.5" ></text>
</g>
<g >
<title>apparmor_file_permission (1,333,333 samples, 0.08%)</title><rect x="867.6" y="389" width="0.9" height="15.0" fill="rgb(234,205,50)" rx="2" ry="2" />
<text  x="870.58" y="399.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="307.8" y="421" width="1.0" height="15.0" fill="rgb(221,200,46)" rx="2" ry="2" />
<text  x="310.84" y="431.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (5,333,332 samples, 0.32%)</title><rect x="1072.8" y="517" width="3.7" height="15.0" fill="rgb(223,122,22)" rx="2" ry="2" />
<text  x="1075.76" y="527.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (1,333,333 samples, 0.08%)</title><rect x="1140.8" y="789" width="1.0" height="15.0" fill="rgb(237,26,38)" rx="2" ry="2" />
<text  x="1143.83" y="799.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (1,333,333 samples, 0.08%)</title><rect x="1075.6" y="469" width="0.9" height="15.0" fill="rgb(232,123,45)" rx="2" ry="2" />
<text  x="1078.59" y="479.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::CompactMemTable (63,999,984 samples, 3.85%)</title><rect x="276.6" y="581" width="45.4" height="15.0" fill="rgb(222,69,17)" rx="2" ry="2" />
<text  x="279.63" y="591.5" >leve..</text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.08%)</title><rect x="1111.5" y="517" width="1.0" height="15.0" fill="rgb(215,23,30)" rx="2" ry="2" />
<text  x="1114.52" y="527.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::DecommitSpan (1,333,333 samples, 0.08%)</title><rect x="255.8" y="405" width="1.0" height="15.0" fill="rgb(236,174,33)" rx="2" ry="2" />
<text  x="258.83" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (2,666,666 samples, 0.16%)</title><rect x="100.8" y="453" width="1.9" height="15.0" fill="rgb(208,74,53)" rx="2" ry="2" />
<text  x="103.77" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data@plt (1,333,333 samples, 0.08%)</title><rect x="97.9" y="373" width="1.0" height="15.0" fill="rgb(216,215,23)" rx="2" ry="2" />
<text  x="100.93" y="383.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;std::__future_base::_State_baseV2,  (1,333,333 samples, 0.08%)</title><rect x="1017.9" y="565" width="1.0" height="15.0" fill="rgb(232,155,20)" rx="2" ry="2" />
<text  x="1020.92" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt; &gt;::destroy&lt;std::__future_base::_State_baseV2&gt; (14,666,663 samples, 0.88%)</title><rect x="1077.5" y="517" width="10.4" height="15.0" fill="rgb(220,198,34)" rx="2" ry="2" />
<text  x="1080.48" y="527.5" ></text>
</g>
<g >
<title>leveldb::MemTable::KeyComparator::operator (10,666,664 samples, 0.64%)</title><rect x="450.6" y="501" width="7.6" height="15.0" fill="rgb(218,80,3)" rx="2" ry="2" />
<text  x="453.61" y="511.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,333,333 samples, 0.08%)</title><rect x="314.5" y="485" width="0.9" height="15.0" fill="rgb(243,146,15)" rx="2" ry="2" />
<text  x="317.46" y="495.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::OpenCompactionOutputFile (1,333,333 samples, 0.08%)</title><rect x="322.0" y="581" width="1.0" height="15.0" fill="rgb(216,160,25)" rx="2" ry="2" />
<text  x="325.02" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::begin (1,333,333 samples, 0.08%)</title><rect x="407.1" y="581" width="1.0" height="15.0" fill="rgb(226,68,13)" rx="2" ry="2" />
<text  x="410.12" y="591.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;char*, unsigned long&gt; (1,333,333 samples, 0.08%)</title><rect x="322.0" y="469" width="1.0" height="15.0" fill="rgb(230,12,43)" rx="2" ry="2" />
<text  x="325.02" y="479.5" ></text>
</g>
<g >
<title>ext4_inode_csum.isra.59 (2,666,666 samples, 0.16%)</title><rect x="769.2" y="261" width="1.9" height="15.0" fill="rgb(221,136,8)" rx="2" ry="2" />
<text  x="772.25" y="271.5" ></text>
</g>
<g >
<title>unlock_page (1,333,333 samples, 0.08%)</title><rect x="853.4" y="341" width="0.9" height="15.0" fill="rgb(240,122,24)" rx="2" ry="2" />
<text  x="856.40" y="351.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (3,999,999 samples, 0.24%)</title><rect x="263.4" y="533" width="2.8" height="15.0" fill="rgb(246,63,17)" rx="2" ry="2" />
<text  x="266.40" y="543.5" ></text>
</g>
<g >
<title>_cond_resched (1,333,333 samples, 0.08%)</title><rect x="851.5" y="245" width="1.0" height="15.0" fill="rgb(231,90,42)" rx="2" ry="2" />
<text  x="854.51" y="255.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_deleter (2,666,666 samples, 0.16%)</title><rect x="992.4" y="389" width="1.9" height="15.0" fill="rgb(212,146,9)" rx="2" ry="2" />
<text  x="995.39" y="399.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::key (11,999,997 samples, 0.72%)</title><rect x="244.5" y="565" width="8.5" height="15.0" fill="rgb(223,102,30)" rx="2" ry="2" />
<text  x="247.49" y="575.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="315.4" y="501" width="0.9" height="15.0" fill="rgb(210,115,22)" rx="2" ry="2" />
<text  x="318.40" y="511.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (3,999,999 samples, 0.24%)</title><rect x="1138.0" y="805" width="2.8" height="15.0" fill="rgb(205,223,13)" rx="2" ry="2" />
<text  x="1141.00" y="815.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (5,333,332 samples, 0.32%)</title><rect x="656.7" y="437" width="3.8" height="15.0" fill="rgb(207,135,2)" rx="2" ry="2" />
<text  x="659.73" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::front (6,666,665 samples, 0.40%)</title><rect x="409.0" y="581" width="4.7" height="15.0" fill="rgb(209,184,8)" rx="2" ry="2" />
<text  x="412.01" y="591.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="293.7" y="405" width="0.9" height="15.0" fill="rgb(212,226,0)" rx="2" ry="2" />
<text  x="296.65" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get (1,333,333 samples, 0.08%)</title><rect x="988.6" y="357" width="1.0" height="15.0" fill="rgb(212,8,54)" rx="2" ry="2" />
<text  x="991.61" y="367.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.08%)</title><rect x="315.4" y="469" width="0.9" height="15.0" fill="rgb(236,171,23)" rx="2" ry="2" />
<text  x="318.40" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::operator* (2,666,666 samples, 0.16%)</title><rect x="1016.0" y="565" width="1.9" height="15.0" fill="rgb(225,153,12)" rx="2" ry="2" />
<text  x="1019.03" y="575.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (27,999,993 samples, 1.68%)</title><rect x="947.9" y="501" width="19.9" height="15.0" fill="rgb(226,208,23)" rx="2" ry="2" />
<text  x="950.95" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (6,666,665 samples, 0.40%)</title><rect x="89.4" y="421" width="4.8" height="15.0" fill="rgb(231,119,16)" rx="2" ry="2" />
<text  x="92.42" y="431.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1,333,333 samples, 0.08%)</title><rect x="348.5" y="453" width="0.9" height="15.0" fill="rgb(226,15,50)" rx="2" ry="2" />
<text  x="351.49" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (7,999,998 samples, 0.48%)</title><rect x="132.0" y="421" width="5.6" height="15.0" fill="rgb(211,40,23)" rx="2" ry="2" />
<text  x="134.97" y="431.5" ></text>
</g>
<g >
<title>snappy::MaxCompressedLength (1,333,333 samples, 0.08%)</title><rect x="157.5" y="485" width="0.9" height="15.0" fill="rgb(221,162,51)" rx="2" ry="2" />
<text  x="160.50" y="495.5" ></text>
</g>
<g >
<title>snappy::Compress (27,999,993 samples, 1.68%)</title><rect x="158.4" y="469" width="19.9" height="15.0" fill="rgb(227,169,47)" rx="2" ry="2" />
<text  x="161.45" y="479.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.08%)</title><rect x="307.8" y="357" width="1.0" height="15.0" fill="rgb(242,161,49)" rx="2" ry="2" />
<text  x="310.84" y="367.5" ></text>
</g>
<g >
<title>snappy::internal::CompressFragment (3,999,999 samples, 0.24%)</title><rect x="354.2" y="485" width="2.8" height="15.0" fill="rgb(240,42,4)" rx="2" ry="2" />
<text  x="357.17" y="495.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (3,999,999 samples, 0.24%)</title><rect x="1012.2" y="565" width="2.9" height="15.0" fill="rgb(209,155,54)" rx="2" ry="2" />
<text  x="1015.24" y="575.5" ></text>
</g>
<g >
<title>do_lookup_x (1,333,333 samples, 0.08%)</title><rect x="1114.4" y="581" width="0.9" height="15.0" fill="rgb(211,97,53)" rx="2" ry="2" />
<text  x="1117.36" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (6,666,665 samples, 0.40%)</title><rect x="1018.9" y="581" width="4.7" height="15.0" fill="rgb(222,92,28)" rx="2" ry="2" />
<text  x="1021.86" y="591.5" ></text>
</g>
<g >
<title>TCMalloc_SystemRelease (1,333,333 samples, 0.08%)</title><rect x="321.1" y="373" width="0.9" height="15.0" fill="rgb(223,141,54)" rx="2" ry="2" />
<text  x="324.07" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (15,999,996 samples, 0.96%)</title><rect x="216.1" y="517" width="11.4" height="15.0" fill="rgb(230,149,45)" rx="2" ry="2" />
<text  x="219.12" y="527.5" ></text>
</g>
<g >
<title>fts_read (1,333,333 samples, 0.08%)</title><rect x="1113.4" y="677" width="1.0" height="15.0" fill="rgb(206,188,4)" rx="2" ry="2" />
<text  x="1116.41" y="687.5" ></text>
</g>
<g >
<title>ext4_evict_inode (7,999,998 samples, 0.48%)</title><rect x="1116.2" y="597" width="5.7" height="15.0" fill="rgb(254,168,11)" rx="2" ry="2" />
<text  x="1119.25" y="607.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (1,333,333 samples, 0.08%)</title><rect x="455.3" y="453" width="1.0" height="15.0" fill="rgb(244,51,19)" rx="2" ry="2" />
<text  x="458.34" y="463.5" ></text>
</g>
<g >
<title>ext4_es_insert_extent (1,333,333 samples, 0.08%)</title><rect x="786.3" y="309" width="0.9" height="15.0" fill="rgb(233,148,18)" rx="2" ry="2" />
<text  x="789.27" y="319.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::WriteWrapper (866,666,450 samples, 52.08%)</title><rect x="396.7" y="613" width="614.6" height="15.0" fill="rgb(250,110,7)" rx="2" ry="2" />
<text  x="399.71" y="623.5" >leveldb::DBImpl::WriteWrapper</text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::emplace_back&lt;leveldb::DBImpl::Writer*&gt; (1,333,333 samples, 0.08%)</title><rect x="932.8" y="581" width="1.0" height="15.0" fill="rgb(222,158,46)" rx="2" ry="2" />
<text  x="935.82" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (26,666,660 samples, 1.60%)</title><rect x="80.9" y="469" width="18.9" height="15.0" fill="rgb(238,211,19)" rx="2" ry="2" />
<text  x="83.91" y="479.5" ></text>
</g>
<g >
<title>leveldb::Status::operator= (6,666,665 samples, 0.40%)</title><rect x="422.2" y="597" width="4.8" height="15.0" fill="rgb(225,157,3)" rx="2" ry="2" />
<text  x="425.24" y="607.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (3,999,999 samples, 0.24%)</title><rect x="315.4" y="533" width="2.8" height="15.0" fill="rgb(240,52,16)" rx="2" ry="2" />
<text  x="318.40" y="543.5" ></text>
</g>
<g >
<title>do_unlinkat (2,666,666 samples, 0.16%)</title><rect x="11.9" y="485" width="1.9" height="15.0" fill="rgb(231,223,32)" rx="2" ry="2" />
<text  x="14.89" y="495.5" ></text>
</g>
<g >
<title>__do_sys_madvise (1,333,333 samples, 0.08%)</title><rect x="105.5" y="117" width="0.9" height="15.0" fill="rgb(211,134,39)" rx="2" ry="2" />
<text  x="108.50" y="127.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (65,333,317 samples, 3.93%)</title><rect x="77.1" y="501" width="46.4" height="15.0" fill="rgb(221,140,37)" rx="2" ry="2" />
<text  x="80.13" y="511.5" >std:..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt;::operator* (2,666,666 samples, 0.16%)</title><rect x="923.4" y="581" width="1.9" height="15.0" fill="rgb(220,194,23)" rx="2" ry="2" />
<text  x="926.37" y="591.5" ></text>
</g>
<g >
<title>__strchrnul_avx2 (2,666,666 samples, 0.16%)</title><rect x="374.0" y="549" width="1.9" height="15.0" fill="rgb(235,22,41)" rx="2" ry="2" />
<text  x="377.02" y="559.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (90,666,644 samples, 5.45%)</title><rect x="937.5" y="565" width="64.3" height="15.0" fill="rgb(224,206,6)" rx="2" ry="2" />
<text  x="940.55" y="575.5" >std::ca..</text>
</g>
<g >
<title>std::_Hash_impl::hash (1,333,333 samples, 0.08%)</title><rect x="138.6" y="437" width="0.9" height="15.0" fill="rgb(247,2,49)" rx="2" ry="2" />
<text  x="141.59" y="447.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.08%)</title><rect x="265.3" y="517" width="0.9" height="15.0" fill="rgb(205,228,30)" rx="2" ry="2" />
<text  x="268.29" y="527.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Finish (1,333,333 samples, 0.08%)</title><rect x="309.7" y="533" width="1.0" height="15.0" fill="rgb(224,82,11)" rx="2" ry="2" />
<text  x="312.73" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (2,666,666 samples, 0.16%)</title><rect x="999.0" y="421" width="1.9" height="15.0" fill="rgb(219,162,34)" rx="2" ry="2" />
<text  x="1002.01" y="431.5" ></text>
</g>
<g >
<title>rebalance_domains (2,666,666 samples, 0.16%)</title><rect x="533.8" y="373" width="1.9" height="15.0" fill="rgb(248,21,14)" rx="2" ry="2" />
<text  x="536.81" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;char*, unsigned long, char&gt; (2,666,666 samples, 0.16%)</title><rect x="310.7" y="469" width="1.9" height="15.0" fill="rgb(227,181,24)" rx="2" ry="2" />
<text  x="313.67" y="479.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Next (1,333,333 samples, 0.08%)</title><rect x="14.7" y="533" width="1.0" height="15.0" fill="rgb(238,56,25)" rx="2" ry="2" />
<text  x="17.73" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result_base::_Deleter, void&gt; (1,333,333 samples, 0.08%)</title><rect x="1187.2" y="805" width="0.9" height="15.0" fill="rgb(216,83,10)" rx="2" ry="2" />
<text  x="1190.16" y="815.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data@plt (1,333,333 samples, 0.08%)</title><rect x="271.0" y="469" width="0.9" height="15.0" fill="rgb(237,148,44)" rx="2" ry="2" />
<text  x="273.96" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_addr (2,666,666 samples, 0.16%)</title><rect x="112.1" y="421" width="1.9" height="15.0" fill="rgb(210,195,25)" rx="2" ry="2" />
<text  x="115.12" y="431.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.08%)</title><rect x="1059.5" y="533" width="1.0" height="15.0" fill="rgb(248,53,25)" rx="2" ry="2" />
<text  x="1062.52" y="543.5" ></text>
</g>
<g >
<title>leveldb::Status::OK (2,666,666 samples, 0.16%)</title><rect x="722.9" y="549" width="1.9" height="15.0" fill="rgb(239,20,1)" rx="2" ry="2" />
<text  x="725.92" y="559.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__future_base::_State_baseV2&gt;::~allocator (1,333,333 samples, 0.08%)</title><rect x="1057.6" y="581" width="1.0" height="15.0" fill="rgb(231,25,46)" rx="2" ry="2" />
<text  x="1060.63" y="591.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteRawBlock (18,666,662 samples, 1.12%)</title><rect x="144.3" y="501" width="13.2" height="15.0" fill="rgb(211,120,3)" rx="2" ry="2" />
<text  x="147.26" y="511.5" ></text>
</g>
<g >
<title>_dl_fixup (1,333,333 samples, 0.08%)</title><rect x="1114.4" y="613" width="0.9" height="15.0" fill="rgb(213,56,47)" rx="2" ry="2" />
<text  x="1117.36" y="623.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (1,333,333 samples, 0.08%)</title><rect x="353.2" y="469" width="1.0" height="15.0" fill="rgb(235,54,54)" rx="2" ry="2" />
<text  x="356.22" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt;::operator++ (2,666,666 samples, 0.16%)</title><rect x="405.2" y="581" width="1.9" height="15.0" fill="rgb(243,176,31)" rx="2" ry="2" />
<text  x="408.22" y="591.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (1,333,333 samples, 0.08%)</title><rect x="321.1" y="517" width="0.9" height="15.0" fill="rgb(247,84,27)" rx="2" ry="2" />
<text  x="324.07" y="527.5" ></text>
</g>
<g >
<title>vfs_statx (1,333,333 samples, 0.08%)</title><rect x="1128.5" y="565" width="1.0" height="15.0" fill="rgb(212,18,3)" rx="2" ry="2" />
<text  x="1131.54" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.08%)</title><rect x="345.7" y="437" width="0.9" height="15.0" fill="rgb(235,111,41)" rx="2" ry="2" />
<text  x="348.66" y="447.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.08%)</title><rect x="440.2" y="405" width="1.0" height="15.0" fill="rgb(230,109,1)" rx="2" ry="2" />
<text  x="443.21" y="415.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::Next (1,333,333 samples, 0.08%)</title><rect x="1132.3" y="789" width="1.0" height="15.0" fill="rgb(208,135,28)" rx="2" ry="2" />
<text  x="1135.32" y="799.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (1,333,333 samples, 0.08%)</title><rect x="988.6" y="341" width="1.0" height="15.0" fill="rgb(245,36,45)" rx="2" ry="2" />
<text  x="991.61" y="351.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::InsertRange (1,333,333 samples, 0.08%)</title><rect x="255.8" y="485" width="1.0" height="15.0" fill="rgb(236,209,25)" rx="2" ry="2" />
<text  x="258.83" y="495.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.08%)</title><rect x="994.3" y="373" width="0.9" height="15.0" fill="rgb(244,18,48)" rx="2" ry="2" />
<text  x="997.28" y="383.5" ></text>
</g>
<g >
<title>leveldb::MemTable::Unref (1,333,333 samples, 0.08%)</title><rect x="321.1" y="565" width="0.9" height="15.0" fill="rgb(221,9,7)" rx="2" ry="2" />
<text  x="324.07" y="575.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::Append (5,333,332 samples, 0.32%)</title><rect x="721.0" y="565" width="3.8" height="15.0" fill="rgb(224,18,37)" rx="2" ry="2" />
<text  x="724.03" y="575.5" ></text>
</g>
<g >
<title>leveldb::EncodeVarint32 (1,333,333 samples, 0.08%)</title><rect x="330.5" y="533" width="1.0" height="15.0" fill="rgb(231,28,48)" rx="2" ry="2" />
<text  x="333.53" y="543.5" ></text>
</g>
<g >
<title>__GI___lxstat (1,333,333 samples, 0.08%)</title><rect x="1113.4" y="629" width="1.0" height="15.0" fill="rgb(232,43,35)" rx="2" ry="2" />
<text  x="1116.41" y="639.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Flush (159,999,960 samples, 9.62%)</title><rect x="72.4" y="533" width="113.5" height="15.0" fill="rgb(216,104,50)" rx="2" ry="2" />
<text  x="75.40" y="543.5" >leveldb::Table..</text>
</g>
<g >
<title>tcmalloc::PageHeap::New (1,333,333 samples, 0.08%)</title><rect x="1111.5" y="661" width="1.0" height="15.0" fill="rgb(231,60,33)" rx="2" ry="2" />
<text  x="1114.52" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (5,333,332 samples, 0.32%)</title><rect x="345.7" y="517" width="3.7" height="15.0" fill="rgb(213,55,38)" rx="2" ry="2" />
<text  x="348.66" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add (1,333,333 samples, 0.08%)</title><rect x="1034.9" y="485" width="1.0" height="15.0" fill="rgb(230,214,17)" rx="2" ry="2" />
<text  x="1037.94" y="495.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.08%)</title><rect x="275.7" y="533" width="0.9" height="15.0" fill="rgb(218,51,13)" rx="2" ry="2" />
<text  x="278.69" y="543.5" ></text>
</g>
<g >
<title>ext4_da_invalidatepage (1,333,333 samples, 0.08%)</title><rect x="1121.0" y="533" width="0.9" height="15.0" fill="rgb(231,117,30)" rx="2" ry="2" />
<text  x="1123.98" y="543.5" ></text>
</g>
<g >
<title>_itoa_word (5,333,332 samples, 0.32%)</title><rect x="375.9" y="565" width="3.8" height="15.0" fill="rgb(235,207,35)" rx="2" ry="2" />
<text  x="378.91" y="575.5" ></text>
</g>
<g >
<title>check_domain_in_region (1,333,333 samples, 0.08%)</title><rect x="1113.4" y="709" width="1.0" height="15.0" fill="rgb(232,48,13)" rx="2" ry="2" />
<text  x="1116.41" y="719.5" ></text>
</g>
<g >
<title>tcmalloc::Static::InitStaticVars (1,333,333 samples, 0.08%)</title><rect x="1112.5" y="709" width="0.9" height="15.0" fill="rgb(243,65,50)" rx="2" ry="2" />
<text  x="1115.47" y="719.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (2,666,666 samples, 0.16%)</title><rect x="228.4" y="549" width="1.9" height="15.0" fill="rgb(221,185,4)" rx="2" ry="2" />
<text  x="231.41" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (14,666,663 samples, 0.88%)</title><rect x="111.2" y="469" width="10.4" height="15.0" fill="rgb(227,19,22)" rx="2" ry="2" />
<text  x="114.17" y="479.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Add (229,333,276 samples, 13.78%)</title><rect x="30.8" y="549" width="162.6" height="15.0" fill="rgb(237,156,34)" rx="2" ry="2" />
<text  x="33.80" y="559.5" >leveldb::TableBuilde..</text>
</g>
<g >
<title>__vfs_read (1,333,333 samples, 0.08%)</title><rect x="1124.8" y="533" width="0.9" height="15.0" fill="rgb(240,46,3)" rx="2" ry="2" />
<text  x="1127.76" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::clear (1,333,333 samples, 0.08%)</title><rect x="1101.1" y="613" width="1.0" height="15.0" fill="rgb(248,118,44)" rx="2" ry="2" />
<text  x="1104.12" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1,333,333 samples, 0.08%)</title><rect x="142.4" y="469" width="0.9" height="15.0" fill="rgb(225,103,25)" rx="2" ry="2" />
<text  x="145.37" y="479.5" ></text>
</g>
<g >
<title>handle_mm_fault (2,666,666 samples, 0.16%)</title><rect x="310.7" y="309" width="1.9" height="15.0" fill="rgb(220,126,23)" rx="2" ry="2" />
<text  x="313.67" y="319.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Scavenge (1,333,333 samples, 0.08%)</title><rect x="1121.9" y="645" width="1.0" height="15.0" fill="rgb(225,82,30)" rx="2" ry="2" />
<text  x="1124.92" y="655.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,333,333 samples, 0.08%)</title><rect x="300.3" y="261" width="0.9" height="15.0" fill="rgb(234,189,12)" rx="2" ry="2" />
<text  x="303.27" y="271.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (1,333,333 samples, 0.08%)</title><rect x="304.1" y="437" width="0.9" height="15.0" fill="rgb(229,124,13)" rx="2" ry="2" />
<text  x="307.05" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1,333,333 samples, 0.08%)</title><rect x="1034.9" y="517" width="1.0" height="15.0" fill="rgb(232,213,27)" rx="2" ry="2" />
<text  x="1037.94" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result_base::_Deleter, void&gt; (3,999,999 samples, 0.24%)</title><rect x="1058.6" y="597" width="2.8" height="15.0" fill="rgb(225,164,49)" rx="2" ry="2" />
<text  x="1061.57" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::front (10,666,664 samples, 0.64%)</title><rect x="922.4" y="597" width="7.6" height="15.0" fill="rgb(221,50,26)" rx="2" ry="2" />
<text  x="925.42" y="607.5" ></text>
</g>
<g >
<title>leveldb::DB::Open (3,999,999 samples, 0.24%)</title><rect x="1121.9" y="725" width="2.9" height="15.0" fill="rgb(229,135,8)" rx="2" ry="2" />
<text  x="1124.92" y="735.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (3,999,999 samples, 0.24%)</title><rect x="154.7" y="437" width="2.8" height="15.0" fill="rgb(244,11,21)" rx="2" ry="2" />
<text  x="157.66" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (7,999,998 samples, 0.48%)</title><rect x="132.0" y="453" width="5.6" height="15.0" fill="rgb(222,101,42)" rx="2" ry="2" />
<text  x="134.97" y="463.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::GrowHeap (1,333,333 samples, 0.08%)</title><rect x="1111.5" y="645" width="1.0" height="15.0" fill="rgb(227,1,28)" rx="2" ry="2" />
<text  x="1114.52" y="655.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;char*, unsigned long&gt; (2,666,666 samples, 0.16%)</title><rect x="310.7" y="437" width="1.9" height="15.0" fill="rgb(240,148,18)" rx="2" ry="2" />
<text  x="313.67" y="447.5" ></text>
</g>
<g >
<title>leveldb::VersionSet::LastSequence (1,333,333 samples, 0.08%)</title><rect x="429.8" y="597" width="1.0" height="15.0" fill="rgb(223,223,50)" rx="2" ry="2" />
<text  x="432.81" y="607.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (185,333,287 samples, 11.14%)</title><rect x="737.1" y="501" width="131.4" height="15.0" fill="rgb(245,222,15)" rx="2" ry="2" />
<text  x="740.10" y="511.5" >entry_SYSCALL_64..</text>
</g>
<g >
<title>[libunwind.so.8.0.1] (1,333,333 samples, 0.08%)</title><rect x="441.2" y="229" width="0.9" height="15.0" fill="rgb(232,196,8)" rx="2" ry="2" />
<text  x="444.15" y="239.5" ></text>
</g>
<g >
<title>leveldb::PutLengthPrefixedSlice (9,333,331 samples, 0.56%)</title><rect x="1103.0" y="613" width="6.6" height="15.0" fill="rgb(249,97,50)" rx="2" ry="2" />
<text  x="1106.01" y="623.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::TableBuilder (2,666,666 samples, 0.16%)</title><rect x="310.7" y="533" width="1.9" height="15.0" fill="rgb(217,149,48)" rx="2" ry="2" />
<text  x="313.67" y="543.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (9,333,331 samples, 0.56%)</title><rect x="51.6" y="501" width="6.6" height="15.0" fill="rgb(231,85,52)" rx="2" ry="2" />
<text  x="54.60" y="511.5" ></text>
</g>
<g >
<title>_cond_resched (1,333,333 samples, 0.08%)</title><rect x="1113.4" y="501" width="1.0" height="15.0" fill="rgb(242,171,11)" rx="2" ry="2" />
<text  x="1116.41" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (2,666,666 samples, 0.16%)</title><rect x="104.6" y="421" width="1.8" height="15.0" fill="rgb(247,71,4)" rx="2" ry="2" />
<text  x="107.55" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1,333,333 samples, 0.08%)</title><rect x="392.9" y="565" width="1.0" height="15.0" fill="rgb(229,79,16)" rx="2" ry="2" />
<text  x="395.93" y="575.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.08%)</title><rect x="336.2" y="533" width="0.9" height="15.0" fill="rgb(211,151,7)" rx="2" ry="2" />
<text  x="339.20" y="543.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,333,333 samples, 0.08%)</title><rect x="227.5" y="501" width="0.9" height="15.0" fill="rgb(245,74,54)" rx="2" ry="2" />
<text  x="230.47" y="511.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.08%)</title><rect x="1111.5" y="501" width="1.0" height="15.0" fill="rgb(254,25,15)" rx="2" ry="2" />
<text  x="1114.52" y="511.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::RandomGenerator::RandomGenerator (15,999,996 samples, 0.96%)</title><rect x="385.4" y="629" width="11.3" height="15.0" fill="rgb(252,194,11)" rx="2" ry="2" />
<text  x="388.37" y="639.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (1,333,333 samples, 0.08%)</title><rect x="321.1" y="309" width="0.9" height="15.0" fill="rgb(206,81,15)" rx="2" ry="2" />
<text  x="324.07" y="319.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (18,666,662 samples, 1.12%)</title><rect x="606.6" y="421" width="13.3" height="15.0" fill="rgb(233,228,49)" rx="2" ry="2" />
<text  x="609.62" y="431.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,666,666 samples, 0.16%)</title><rect x="11.9" y="533" width="1.9" height="15.0" fill="rgb(221,187,18)" rx="2" ry="2" />
<text  x="14.89" y="543.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::Run (7,999,998 samples, 0.48%)</title><rect x="1121.9" y="757" width="5.7" height="15.0" fill="rgb(249,208,30)" rx="2" ry="2" />
<text  x="1124.92" y="767.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.08%)</title><rect x="962.1" y="373" width="1.0" height="15.0" fill="rgb(228,186,35)" rx="2" ry="2" />
<text  x="965.13" y="383.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ListTooLong (1,333,333 samples, 0.08%)</title><rect x="321.1" y="501" width="0.9" height="15.0" fill="rgb(232,77,35)" rx="2" ry="2" />
<text  x="324.07" y="511.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (3,999,999 samples, 0.24%)</title><rect x="324.9" y="565" width="2.8" height="15.0" fill="rgb(208,189,52)" rx="2" ry="2" />
<text  x="327.86" y="575.5" ></text>
</g>
<g >
<title>truncate_inode_pages_range (2,666,666 samples, 0.16%)</title><rect x="11.9" y="405" width="1.9" height="15.0" fill="rgb(247,99,45)" rx="2" ry="2" />
<text  x="14.89" y="415.5" ></text>
</g>
<g >
<title>leveldb::Slice::operator[] (3,999,999 samples, 0.24%)</title><rect x="331.5" y="549" width="2.8" height="15.0" fill="rgb(206,189,12)" rx="2" ry="2" />
<text  x="334.47" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (1,333,333 samples, 0.08%)</title><rect x="317.3" y="485" width="0.9" height="15.0" fill="rgb(236,226,47)" rx="2" ry="2" />
<text  x="320.29" y="495.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_State_baseV2 (9,333,331 samples, 0.56%)</title><rect x="1046.3" y="469" width="6.6" height="15.0" fill="rgb(239,74,26)" rx="2" ry="2" />
<text  x="1049.28" y="479.5" ></text>
</g>
<g >
<title>note_gp_changes (1,333,333 samples, 0.08%)</title><rect x="1127.6" y="453" width="0.9" height="15.0" fill="rgb(228,20,14)" rx="2" ry="2" />
<text  x="1130.60" y="463.5" ></text>
</g>
<g >
<title>__pthread_once_slow (86,666,645 samples, 5.21%)</title><rect x="940.4" y="533" width="61.4" height="15.0" fill="rgb(238,216,46)" rx="2" ry="2" />
<text  x="943.38" y="543.5" >__pthr..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.08%)</title><rect x="131.0" y="453" width="1.0" height="15.0" fill="rgb(240,72,31)" rx="2" ry="2" />
<text  x="134.03" y="463.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1,333,333 samples, 0.08%)</title><rect x="128.2" y="325" width="0.9" height="15.0" fill="rgb(234,49,8)" rx="2" ry="2" />
<text  x="131.19" y="335.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::CompactMemTable (346,666,580 samples, 20.83%)</title><rect x="10.9" y="597" width="245.9" height="15.0" fill="rgb(221,8,4)" rx="2" ry="2" />
<text  x="13.95" y="607.5" >leveldb::DBImpl::CompactMemTable</text>
</g>
<g >
<title>__pagevec_release (3,999,999 samples, 0.24%)</title><rect x="1116.2" y="549" width="2.9" height="15.0" fill="rgb(244,106,9)" rx="2" ry="2" />
<text  x="1119.25" y="559.5" ></text>
</g>
<g >
<title>truncate_cleanup_page (2,666,666 samples, 0.16%)</title><rect x="1120.0" y="549" width="1.9" height="15.0" fill="rgb(242,129,52)" rx="2" ry="2" />
<text  x="1123.03" y="559.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.08%)</title><rect x="143.3" y="501" width="1.0" height="15.0" fill="rgb(218,35,32)" rx="2" ry="2" />
<text  x="146.32" y="511.5" ></text>
</g>
<g >
<title>_IO_fgets (1,333,333 samples, 0.08%)</title><rect x="1124.8" y="709" width="0.9" height="15.0" fill="rgb(220,52,3)" rx="2" ry="2" />
<text  x="1127.76" y="719.5" ></text>
</g>
<g >
<title>up_read (1,333,333 samples, 0.08%)</title><rect x="211.4" y="341" width="0.9" height="15.0" fill="rgb(229,212,49)" rx="2" ry="2" />
<text  x="214.39" y="351.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.08%)</title><rect x="142.4" y="453" width="0.9" height="15.0" fill="rgb(239,26,53)" rx="2" ry="2" />
<text  x="145.37" y="463.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.08%)</title><rect x="98.9" y="309" width="0.9" height="15.0" fill="rgb(210,39,26)" rx="2" ry="2" />
<text  x="101.88" y="319.5" ></text>
</g>
<g >
<title>_dl_start_user (3,999,999 samples, 0.24%)</title><rect x="1111.5" y="805" width="2.9" height="15.0" fill="rgb(223,2,7)" rx="2" ry="2" />
<text  x="1114.52" y="815.5" ></text>
</g>
<g >
<title>_dl_catch_exception (1,333,333 samples, 0.08%)</title><rect x="1128.5" y="709" width="1.0" height="15.0" fill="rgb(224,181,50)" rx="2" ry="2" />
<text  x="1131.54" y="719.5" ></text>
</g>
<g >
<title>fts_build (1,333,333 samples, 0.08%)</title><rect x="1113.4" y="661" width="1.0" height="15.0" fill="rgb(248,85,49)" rx="2" ry="2" />
<text  x="1116.41" y="671.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::KeyBuffer::Set (23,999,994 samples, 1.44%)</title><rect x="362.7" y="629" width="17.0" height="15.0" fill="rgb(246,158,54)" rx="2" ry="2" />
<text  x="365.68" y="639.5" ></text>
</g>
<g >
<title>leveldb::WriteBatch::Put (11,999,997 samples, 0.72%)</title><rect x="1102.1" y="629" width="8.5" height="15.0" fill="rgb(248,161,7)" rx="2" ry="2" />
<text  x="1105.07" y="639.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;&gt; (23,999,994 samples, 1.44%)</title><rect x="1040.6" y="581" width="17.0" height="15.0" fill="rgb(218,24,24)" rx="2" ry="2" />
<text  x="1043.61" y="591.5" ></text>
</g>
<g >
<title>vfs_open (2,666,666 samples, 0.16%)</title><rect x="1125.7" y="533" width="1.9" height="15.0" fill="rgb(250,210,18)" rx="2" ry="2" />
<text  x="1128.71" y="543.5" ></text>
</g>
<g >
<title>std::future&lt;leveldb::Status&gt;::~future (2,666,666 samples, 0.16%)</title><rect x="1023.6" y="613" width="1.9" height="15.0" fill="rgb(212,56,5)" rx="2" ry="2" />
<text  x="1026.59" y="623.5" ></text>
</g>
<g >
<title>std::swap&lt;std::__future_base::_Result_base::_Deleter&gt; (3,999,999 samples, 0.24%)</title><rect x="996.2" y="389" width="2.8" height="15.0" fill="rgb(247,106,17)" rx="2" ry="2" />
<text  x="999.17" y="399.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (21,333,328 samples, 1.28%)</title><rect x="228.4" y="565" width="15.1" height="15.0" fill="rgb(222,178,14)" rx="2" ry="2" />
<text  x="231.41" y="575.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.08%)</title><rect x="104.6" y="373" width="0.9" height="15.0" fill="rgb(234,38,25)" rx="2" ry="2" />
<text  x="107.55" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (1,333,333 samples, 0.08%)</title><rect x="1171.1" y="789" width="0.9" height="15.0" fill="rgb(220,13,47)" rx="2" ry="2" />
<text  x="1174.09" y="799.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="433.6" y="565" width="0.9" height="15.0" fill="rgb(252,134,34)" rx="2" ry="2" />
<text  x="436.59" y="575.5" ></text>
</g>
<g >
<title>madvise_free_single_vma (1,333,333 samples, 0.08%)</title><rect x="255.8" y="293" width="1.0" height="15.0" fill="rgb(239,94,13)" rx="2" ry="2" />
<text  x="258.83" y="303.5" ></text>
</g>
<g >
<title>load_balance (2,666,666 samples, 0.16%)</title><rect x="533.8" y="357" width="1.9" height="15.0" fill="rgb(207,124,3)" rx="2" ry="2" />
<text  x="536.81" y="367.5" ></text>
</g>
<g >
<title>leveldb::Status::Status (1,333,333 samples, 0.08%)</title><rect x="974.4" y="357" width="1.0" height="15.0" fill="rgb(206,158,5)" rx="2" ry="2" />
<text  x="977.42" y="367.5" ></text>
</g>
<g >
<title>ext4_mark_inode_dirty (1,333,333 samples, 0.08%)</title><rect x="10.9" y="389" width="1.0" height="15.0" fill="rgb(210,214,13)" rx="2" ry="2" />
<text  x="13.95" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::release (3,999,999 samples, 0.24%)</title><rect x="986.7" y="373" width="2.9" height="15.0" fill="rgb(219,78,26)" rx="2" ry="2" />
<text  x="989.71" y="383.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BackgroundCompaction (493,333,210 samples, 29.65%)</title><rect x="10.9" y="613" width="349.9" height="15.0" fill="rgb(212,23,14)" rx="2" ry="2" />
<text  x="13.95" y="623.5" >leveldb::DBImpl::BackgroundCompaction</text>
</g>
<g >
<title>madvise_free_pte_range (1,333,333 samples, 0.08%)</title><rect x="321.1" y="213" width="0.9" height="15.0" fill="rgb(231,180,31)" rx="2" ry="2" />
<text  x="324.07" y="223.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt;::_Deque_iterator (1,333,333 samples, 0.08%)</title><rect x="412.8" y="549" width="0.9" height="15.0" fill="rgb(249,19,50)" rx="2" ry="2" />
<text  x="415.79" y="559.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock (1,333,333 samples, 0.08%)</title><rect x="421.3" y="533" width="0.9" height="15.0" fill="rgb(236,185,43)" rx="2" ry="2" />
<text  x="424.30" y="543.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="962.1" y="405" width="1.0" height="15.0" fill="rgb(208,21,9)" rx="2" ry="2" />
<text  x="965.13" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (3,999,999 samples, 0.24%)</title><rect x="393.9" y="597" width="2.8" height="15.0" fill="rgb(231,111,34)" rx="2" ry="2" />
<text  x="396.88" y="607.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1,333,333 samples, 0.08%)</title><rect x="293.7" y="341" width="0.9" height="15.0" fill="rgb(230,6,35)" rx="2" ry="2" />
<text  x="296.65" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.08%)</title><rect x="1124.8" y="613" width="0.9" height="15.0" fill="rgb(247,227,22)" rx="2" ry="2" />
<text  x="1127.76" y="623.5" ></text>
</g>
<g >
<title>GetStackTrace (1,333,333 samples, 0.08%)</title><rect x="1111.5" y="629" width="1.0" height="15.0" fill="rgb(210,24,6)" rx="2" ry="2" />
<text  x="1114.52" y="639.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.08%)</title><rect x="619.9" y="389" width="0.9" height="15.0" fill="rgb(221,181,46)" rx="2" ry="2" />
<text  x="622.86" y="399.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (1,333,333 samples, 0.08%)</title><rect x="235.0" y="421" width="1.0" height="15.0" fill="rgb(245,152,54)" rx="2" ry="2" />
<text  x="238.03" y="431.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1,333,333 samples, 0.08%)</title><rect x="141.4" y="485" width="1.0" height="15.0" fill="rgb(227,55,45)" rx="2" ry="2" />
<text  x="144.43" y="495.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,333,333 samples, 0.08%)</title><rect x="301.2" y="437" width="1.0" height="15.0" fill="rgb(247,207,14)" rx="2" ry="2" />
<text  x="304.22" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (1,333,333 samples, 0.08%)</title><rect x="328.6" y="565" width="1.0" height="15.0" fill="rgb(240,63,10)" rx="2" ry="2" />
<text  x="331.64" y="575.5" ></text>
</g>
<g >
<title>do_filp_open (2,666,666 samples, 0.16%)</title><rect x="1125.7" y="565" width="1.9" height="15.0" fill="rgb(237,186,12)" rx="2" ry="2" />
<text  x="1128.71" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::swap (13,333,330 samples, 0.80%)</title><rect x="989.6" y="421" width="9.4" height="15.0" fill="rgb(237,160,12)" rx="2" ry="2" />
<text  x="992.55" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (3,999,999 samples, 0.24%)</title><rect x="111.2" y="453" width="2.8" height="15.0" fill="rgb(222,48,44)" rx="2" ry="2" />
<text  x="114.17" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (5,333,332 samples, 0.32%)</title><rect x="340.9" y="501" width="3.8" height="15.0" fill="rgb(237,14,27)" rx="2" ry="2" />
<text  x="343.93" y="511.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.08%)</title><rect x="1108.7" y="581" width="0.9" height="15.0" fill="rgb(231,217,12)" rx="2" ry="2" />
<text  x="1111.69" y="591.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::value (1,333,333 samples, 0.08%)</title><rect x="277.6" y="533" width="0.9" height="15.0" fill="rgb(252,26,33)" rx="2" ry="2" />
<text  x="280.58" y="543.5" ></text>
</g>
<g >
<title>ondemand_readahead (2,666,666 samples, 0.16%)</title><rect x="1164.5" y="645" width="1.9" height="15.0" fill="rgb(254,91,26)" rx="2" ry="2" />
<text  x="1167.47" y="655.5" ></text>
</g>
<g >
<title>pmem_unmap (1,333,333 samples, 0.08%)</title><rect x="309.7" y="517" width="1.0" height="15.0" fill="rgb(210,103,21)" rx="2" ry="2" />
<text  x="312.73" y="527.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; &gt;::_M_init_functor (7,999,998 samples, 0.48%)</title><rect x="1004.7" y="565" width="5.7" height="15.0" fill="rgb(250,66,16)" rx="2" ry="2" />
<text  x="1007.68" y="575.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Update (1,333,333 samples, 0.08%)</title><rect x="271.0" y="517" width="0.9" height="15.0" fill="rgb(228,8,45)" rx="2" ry="2" />
<text  x="273.96" y="527.5" ></text>
</g>
<g >
<title>grab_cache_page_write_begin (9,333,331 samples, 0.56%)</title><rect x="787.2" y="341" width="6.6" height="15.0" fill="rgb(214,35,15)" rx="2" ry="2" />
<text  x="790.21" y="351.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (1,333,333 samples, 0.08%)</title><rect x="115.9" y="373" width="0.9" height="15.0" fill="rgb(215,129,34)" rx="2" ry="2" />
<text  x="118.90" y="383.5" ></text>
</g>
<g >
<title>std::move&lt;leveldb::DBImpl::Writer*&amp;&gt; (1,333,333 samples, 0.08%)</title><rect x="1179.6" y="789" width="0.9" height="15.0" fill="rgb(206,203,45)" rx="2" ry="2" />
<text  x="1182.60" y="799.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.08%)</title><rect x="92.3" y="405" width="0.9" height="15.0" fill="rgb(249,122,3)" rx="2" ry="2" />
<text  x="95.26" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::resize (25,333,327 samples, 1.52%)</title><rect x="194.4" y="517" width="17.9" height="15.0" fill="rgb(237,16,41)" rx="2" ry="2" />
<text  x="197.38" y="527.5" ></text>
</g>
<g >
<title>std::ios_base::Init::Init (1,333,333 samples, 0.08%)</title><rect x="1114.4" y="725" width="0.9" height="15.0" fill="rgb(239,39,34)" rx="2" ry="2" />
<text  x="1117.36" y="735.5" ></text>
</g>
<g >
<title>dl_main (3,999,999 samples, 0.24%)</title><rect x="1128.5" y="741" width="2.9" height="15.0" fill="rgb(209,89,17)" rx="2" ry="2" />
<text  x="1131.54" y="751.5" ></text>
</g>
<g >
<title>__GI___xstat (1,333,333 samples, 0.08%)</title><rect x="1128.5" y="645" width="1.0" height="15.0" fill="rgb(230,162,28)" rx="2" ry="2" />
<text  x="1131.54" y="655.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.08%)</title><rect x="1000.0" y="373" width="0.9" height="15.0" fill="rgb(236,117,4)" rx="2" ry="2" />
<text  x="1002.95" y="383.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.08%)</title><rect x="380.6" y="613" width="1.0" height="15.0" fill="rgb(252,168,10)" rx="2" ry="2" />
<text  x="383.64" y="623.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.08%)</title><rect x="128.2" y="389" width="0.9" height="15.0" fill="rgb(244,144,19)" rx="2" ry="2" />
<text  x="131.19" y="399.5" ></text>
</g>
<g >
<title>do_page_fault (3,999,999 samples, 0.24%)</title><rect x="86.6" y="421" width="2.8" height="15.0" fill="rgb(234,5,39)" rx="2" ry="2" />
<text  x="89.59" y="431.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.08%)</title><rect x="433.6" y="549" width="0.9" height="15.0" fill="rgb(249,70,9)" rx="2" ry="2" />
<text  x="436.59" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_addr (1,333,333 samples, 0.08%)</title><rect x="121.6" y="421" width="0.9" height="15.0" fill="rgb(218,89,12)" rx="2" ry="2" />
<text  x="124.57" y="431.5" ></text>
</g>
<g >
<title>page_fault (2,666,666 samples, 0.16%)</title><rect x="96.0" y="405" width="1.9" height="15.0" fill="rgb(206,29,27)" rx="2" ry="2" />
<text  x="99.04" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__future_base::_State_baseV2&gt;::destroy&lt;std::__future_base::_State_baseV2&gt; (1,333,333 samples, 0.08%)</title><rect x="1178.7" y="789" width="0.9" height="15.0" fill="rgb(220,32,4)" rx="2" ry="2" />
<text  x="1181.65" y="799.5" ></text>
</g>
<g >
<title>_dl_map_object_deps (1,333,333 samples, 0.08%)</title><rect x="1128.5" y="725" width="1.0" height="15.0" fill="rgb(212,55,20)" rx="2" ry="2" />
<text  x="1131.54" y="735.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (5,333,332 samples, 0.32%)</title><rect x="768.3" y="325" width="3.8" height="15.0" fill="rgb(251,29,19)" rx="2" ry="2" />
<text  x="771.30" y="335.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseToSpans (1,333,333 samples, 0.08%)</title><rect x="321.1" y="437" width="0.9" height="15.0" fill="rgb(224,82,2)" rx="2" ry="2" />
<text  x="324.07" y="447.5" ></text>
</g>
<g >
<title>unmap_region (1,333,333 samples, 0.08%)</title><rect x="309.7" y="389" width="1.0" height="15.0" fill="rgb(207,13,27)" rx="2" ry="2" />
<text  x="312.73" y="399.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (26,666,660 samples, 1.60%)</title><rect x="774.9" y="357" width="18.9" height="15.0" fill="rgb(250,157,47)" rx="2" ry="2" />
<text  x="777.92" y="367.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.08%)</title><rect x="255.8" y="357" width="1.0" height="15.0" fill="rgb(229,51,42)" rx="2" ry="2" />
<text  x="258.83" y="367.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.08%)</title><rect x="1128.5" y="629" width="1.0" height="15.0" fill="rgb(250,97,29)" rx="2" ry="2" />
<text  x="1131.54" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::allocate (1,333,333 samples, 0.08%)</title><rect x="300.3" y="437" width="0.9" height="15.0" fill="rgb(253,68,16)" rx="2" ry="2" />
<text  x="303.27" y="447.5" ></text>
</g>
<g >
<title>get_futex_key (1,333,333 samples, 0.08%)</title><rect x="962.1" y="421" width="1.0" height="15.0" fill="rgb(252,165,36)" rx="2" ry="2" />
<text  x="965.13" y="431.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::Sequence (2,666,666 samples, 0.16%)</title><rect x="705.9" y="581" width="1.9" height="15.0" fill="rgb(210,117,3)" rx="2" ry="2" />
<text  x="708.90" y="591.5" ></text>
</g>
<g >
<title>leveldb::Random::OneIn (1,333,333 samples, 0.08%)</title><rect x="687.9" y="501" width="1.0" height="15.0" fill="rgb(223,56,43)" rx="2" ry="2" />
<text  x="690.93" y="511.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1,333,333 samples, 0.08%)</title><rect x="789.1" y="261" width="0.9" height="15.0" fill="rgb(207,113,52)" rx="2" ry="2" />
<text  x="792.10" y="271.5" ></text>
</g>
<g >
<title>crypto_shash_update (19,999,995 samples, 1.20%)</title><rect x="830.7" y="229" width="14.2" height="15.0" fill="rgb(236,49,41)" rx="2" ry="2" />
<text  x="833.71" y="239.5" ></text>
</g>
<g >
<title>__x64_sys_read (1,333,333 samples, 0.08%)</title><rect x="1124.8" y="581" width="0.9" height="15.0" fill="rgb(224,134,39)" rx="2" ry="2" />
<text  x="1127.76" y="591.5" ></text>
</g>
<g >
<title>jbd2_journal_try_to_free_buffers (1,333,333 samples, 0.08%)</title><rect x="12.8" y="293" width="1.0" height="15.0" fill="rgb(207,217,8)" rx="2" ry="2" />
<text  x="15.84" y="303.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (1,333,333 samples, 0.08%)</title><rect x="105.5" y="325" width="0.9" height="15.0" fill="rgb(222,164,32)" rx="2" ry="2" />
<text  x="108.50" y="335.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (1,333,333 samples, 0.08%)</title><rect x="300.3" y="357" width="0.9" height="15.0" fill="rgb(213,7,8)" rx="2" ry="2" />
<text  x="303.27" y="367.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (1,333,333 samples, 0.08%)</title><rect x="421.3" y="549" width="0.9" height="15.0" fill="rgb(222,178,39)" rx="2" ry="2" />
<text  x="424.30" y="559.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="275.7" y="517" width="0.9" height="15.0" fill="rgb(210,36,35)" rx="2" ry="2" />
<text  x="278.69" y="527.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;unsigned long, char&gt; (1,333,333 samples, 0.08%)</title><rect x="322.0" y="437" width="1.0" height="15.0" fill="rgb(252,26,31)" rx="2" ry="2" />
<text  x="325.02" y="447.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.08%)</title><rect x="10.0" y="757" width="0.9" height="15.0" fill="rgb(218,178,37)" rx="2" ry="2" />
<text  x="13.00" y="767.5" ></text>
</g>
<g >
<title>do_syscall_64 (9,333,331 samples, 0.56%)</title><rect x="1115.3" y="677" width="6.6" height="15.0" fill="rgb(233,199,54)" rx="2" ry="2" />
<text  x="1118.30" y="687.5" ></text>
</g>
<g >
<title>all (1,663,999,584 samples, 100%)</title><rect x="10.0" y="837" width="1180.0" height="15.0" fill="rgb(219,201,37)" rx="2" ry="2" />
<text  x="13.00" y="847.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt;::_Deque_base (1,333,333 samples, 0.08%)</title><rect x="1127.6" y="565" width="0.9" height="15.0" fill="rgb(237,214,14)" rx="2" ry="2" />
<text  x="1130.60" y="575.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (3,999,999 samples, 0.24%)</title><rect x="312.6" y="533" width="2.8" height="15.0" fill="rgb(252,180,2)" rx="2" ry="2" />
<text  x="315.56" y="543.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt;::operator (10,666,664 samples, 0.64%)</title><rect x="972.5" y="389" width="7.6" height="15.0" fill="rgb(228,202,35)" rx="2" ry="2" />
<text  x="975.53" y="399.5" ></text>
</g>
<g >
<title>leveldb::operator== (3,999,999 samples, 0.24%)</title><rect x="60.1" y="517" width="2.8" height="15.0" fill="rgb(246,37,0)" rx="2" ry="2" />
<text  x="63.11" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,333,333 samples, 0.08%)</title><rect x="131.0" y="437" width="1.0" height="15.0" fill="rgb(252,214,9)" rx="2" ry="2" />
<text  x="134.03" y="447.5" ></text>
</g>
<g >
<title>from_kuid (1,333,333 samples, 0.08%)</title><rect x="845.8" y="261" width="1.0" height="15.0" fill="rgb(230,65,45)" rx="2" ry="2" />
<text  x="848.83" y="271.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (3,999,999 samples, 0.24%)</title><rect x="759.8" y="373" width="2.8" height="15.0" fill="rgb(243,36,12)" rx="2" ry="2" />
<text  x="762.79" y="383.5" ></text>
</g>
<g >
<title>unmap_vmas (1,333,333 samples, 0.08%)</title><rect x="309.7" y="373" width="1.0" height="15.0" fill="rgb(251,18,12)" rx="2" ry="2" />
<text  x="312.73" y="383.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="619.9" y="421" width="0.9" height="15.0" fill="rgb(248,137,17)" rx="2" ry="2" />
<text  x="622.86" y="431.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Value (18,666,662 samples, 1.12%)</title><rect x="144.3" y="485" width="13.2" height="15.0" fill="rgb(240,120,34)" rx="2" ry="2" />
<text  x="147.26" y="495.5" ></text>
</g>
<g >
<title>std::__future_base::_Result_base::_Deleter::operator (3,999,999 samples, 0.24%)</title><rect x="1083.2" y="453" width="2.8" height="15.0" fill="rgb(249,191,7)" rx="2" ry="2" />
<text  x="1086.16" y="463.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (1,333,333 samples, 0.08%)</title><rect x="255.8" y="533" width="1.0" height="15.0" fill="rgb(225,43,25)" rx="2" ry="2" />
<text  x="258.83" y="543.5" ></text>
</g>
<g >
<title>page_fault (13,333,330 samples, 0.80%)</title><rect x="202.9" y="373" width="9.4" height="15.0" fill="rgb(222,11,36)" rx="2" ry="2" />
<text  x="205.88" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (2,666,666 samples, 0.16%)</title><rect x="288.9" y="421" width="1.9" height="15.0" fill="rgb(223,16,48)" rx="2" ry="2" />
<text  x="291.93" y="431.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (1,333,333 samples, 0.08%)</title><rect x="1177.7" y="805" width="1.0" height="15.0" fill="rgb(251,65,39)" rx="2" ry="2" />
<text  x="1180.71" y="815.5" ></text>
</g>
<g >
<title>leveldb::Status::~Status (1,333,333 samples, 0.08%)</title><rect x="1137.1" y="789" width="0.9" height="15.0" fill="rgb(251,69,41)" rx="2" ry="2" />
<text  x="1140.05" y="799.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::FlushBuffer (203,999,949 samples, 12.26%)</title><rect x="724.8" y="549" width="144.7" height="15.0" fill="rgb(239,30,48)" rx="2" ry="2" />
<text  x="727.81" y="559.5" >leveldb::(anonymou..</text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (1,333,333 samples, 0.08%)</title><rect x="304.1" y="421" width="0.9" height="15.0" fill="rgb(230,128,17)" rx="2" ry="2" />
<text  x="307.05" y="431.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (3,999,999 samples, 0.24%)</title><rect x="268.1" y="533" width="2.9" height="15.0" fill="rgb(228,149,13)" rx="2" ry="2" />
<text  x="271.12" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (11,999,997 samples, 0.72%)</title><rect x="1079.4" y="469" width="8.5" height="15.0" fill="rgb(225,75,33)" rx="2" ry="2" />
<text  x="1082.38" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (2,666,666 samples, 0.16%)</title><rect x="345.7" y="469" width="1.8" height="15.0" fill="rgb(232,3,37)" rx="2" ry="2" />
<text  x="348.66" y="479.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1,333,333 samples, 0.08%)</title><rect x="176.4" y="437" width="1.0" height="15.0" fill="rgb(227,63,14)" rx="2" ry="2" />
<text  x="179.41" y="447.5" ></text>
</g>
<g >
<title>snappy::internal::CompressFragment (1,333,333 samples, 0.08%)</title><rect x="307.8" y="437" width="1.0" height="15.0" fill="rgb(221,105,9)" rx="2" ry="2" />
<text  x="310.84" y="447.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::key (1,333,333 samples, 0.08%)</title><rect x="25.1" y="533" width="1.0" height="15.0" fill="rgb(225,97,54)" rx="2" ry="2" />
<text  x="28.13" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::FileMetaData*, std::allocator&lt;leveldb::FileMetaData*&gt; &gt;::reserve (1,333,333 samples, 0.08%)</title><rect x="1122.9" y="661" width="0.9" height="15.0" fill="rgb(231,116,53)" rx="2" ry="2" />
<text  x="1125.87" y="671.5" ></text>
</g>
<g >
<title>leveldb::WriteBatch::Iterate (1,333,333 samples, 0.08%)</title><rect x="1156.9" y="805" width="1.0" height="15.0" fill="rgb(217,223,52)" rx="2" ry="2" />
<text  x="1159.91" y="815.5" ></text>
</g>
<g >
<title>leveldb::VersionSet::SetLastSequence (2,666,666 samples, 0.16%)</title><rect x="430.8" y="597" width="1.8" height="15.0" fill="rgb(252,222,24)" rx="2" ry="2" />
<text  x="433.75" y="607.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1,333,333 samples, 0.08%)</title><rect x="262.5" y="533" width="0.9" height="15.0" fill="rgb(224,25,38)" rx="2" ry="2" />
<text  x="265.45" y="543.5" ></text>
</g>
<g >
<title>try_charge (1,333,333 samples, 0.08%)</title><rect x="300.3" y="245" width="0.9" height="15.0" fill="rgb(231,43,7)" rx="2" ry="2" />
<text  x="303.27" y="255.5" ></text>
</g>
<g >
<title>rcu_gp_kthread_wake (1,333,333 samples, 0.08%)</title><rect x="619.9" y="325" width="0.9" height="15.0" fill="rgb(250,75,31)" rx="2" ry="2" />
<text  x="622.86" y="335.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.08%)</title><rect x="321.1" y="341" width="0.9" height="15.0" fill="rgb(211,73,19)" rx="2" ry="2" />
<text  x="324.07" y="351.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.08%)</title><rect x="727.6" y="517" width="1.0" height="15.0" fill="rgb(229,110,42)" rx="2" ry="2" />
<text  x="730.64" y="527.5" ></text>
</g>
<g >
<title>elf_machine_rela (2,666,666 samples, 0.16%)</title><rect x="1129.5" y="693" width="1.9" height="15.0" fill="rgb(207,135,33)" rx="2" ry="2" />
<text  x="1132.49" y="703.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (3,999,999 samples, 0.24%)</title><rect x="351.3" y="485" width="2.9" height="15.0" fill="rgb(217,100,44)" rx="2" ry="2" />
<text  x="354.33" y="495.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (2,666,666 samples, 0.16%)</title><rect x="1111.5" y="757" width="1.9" height="15.0" fill="rgb(250,158,49)" rx="2" ry="2" />
<text  x="1114.52" y="767.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (3,999,999 samples, 0.24%)</title><rect x="315.4" y="549" width="2.8" height="15.0" fill="rgb(242,5,27)" rx="2" ry="2" />
<text  x="318.40" y="559.5" ></text>
</g>
<g >
<title>pmem2_auto_flush (1,333,333 samples, 0.08%)</title><rect x="1113.4" y="725" width="1.0" height="15.0" fill="rgb(219,24,21)" rx="2" ry="2" />
<text  x="1116.41" y="735.5" ></text>
</g>
<g >
<title>file_remove_privs (1,333,333 samples, 0.08%)</title><rect x="766.4" y="373" width="1.0" height="15.0" fill="rgb(230,10,50)" rx="2" ry="2" />
<text  x="769.41" y="383.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.08%)</title><rect x="383.5" y="549" width="0.9" height="15.0" fill="rgb(229,58,46)" rx="2" ry="2" />
<text  x="386.48" y="559.5" ></text>
</g>
<g >
<title>__unlink (2,666,666 samples, 0.16%)</title><rect x="11.9" y="549" width="1.9" height="15.0" fill="rgb(211,92,51)" rx="2" ry="2" />
<text  x="14.89" y="559.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (1,333,333 samples, 0.08%)</title><rect x="10.9" y="405" width="1.0" height="15.0" fill="rgb(246,166,0)" rx="2" ry="2" />
<text  x="13.95" y="415.5" ></text>
</g>
<g >
<title>leveldb::MaxGrandParentOverlapBytes (1,333,333 samples, 0.08%)</title><rect x="1133.3" y="789" width="0.9" height="15.0" fill="rgb(252,193,38)" rx="2" ry="2" />
<text  x="1136.27" y="799.5" ></text>
</g>
<g >
<title>rcu_report_qs_rnp (1,333,333 samples, 0.08%)</title><rect x="727.6" y="453" width="1.0" height="15.0" fill="rgb(242,217,40)" rx="2" ry="2" />
<text  x="730.64" y="463.5" ></text>
</g>
<g >
<title>swake_up (1,333,333 samples, 0.08%)</title><rect x="619.9" y="309" width="0.9" height="15.0" fill="rgb(235,23,10)" rx="2" ry="2" />
<text  x="622.86" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (2,666,666 samples, 0.16%)</title><rect x="79.0" y="469" width="1.9" height="15.0" fill="rgb(230,209,16)" rx="2" ry="2" />
<text  x="82.02" y="479.5" ></text>
</g>
<g >
<title>alloc_pages_vma (2,666,666 samples, 0.16%)</title><rect x="207.6" y="293" width="1.9" height="15.0" fill="rgb(207,88,54)" rx="2" ry="2" />
<text  x="210.61" y="303.5" ></text>
</g>
<g >
<title>__GI__IO_padn (3,999,999 samples, 0.24%)</title><rect x="371.2" y="565" width="2.8" height="15.0" fill="rgb(215,28,50)" rx="2" ry="2" />
<text  x="374.19" y="575.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (35,999,991 samples, 2.16%)</title><rect x="1062.4" y="565" width="25.5" height="15.0" fill="rgb(230,142,20)" rx="2" ry="2" />
<text  x="1065.36" y="575.5" >s..</text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.08%)</title><rect x="963.1" y="373" width="0.9" height="15.0" fill="rgb(232,116,26)" rx="2" ry="2" />
<text  x="966.08" y="383.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (2,666,666 samples, 0.16%)</title><rect x="75.2" y="501" width="1.9" height="15.0" fill="rgb(254,120,18)" rx="2" ry="2" />
<text  x="78.24" y="511.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl (1,333,333 samples, 0.08%)</title><rect x="1060.5" y="549" width="0.9" height="15.0" fill="rgb(248,26,34)" rx="2" ry="2" />
<text  x="1063.46" y="559.5" ></text>
</g>
<g >
<title>leveldb::Status::~Status (1,333,333 samples, 0.08%)</title><rect x="1089.8" y="629" width="0.9" height="15.0" fill="rgb(209,207,20)" rx="2" ry="2" />
<text  x="1092.78" y="639.5" ></text>
</g>
</g>
</svg>
