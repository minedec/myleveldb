<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="678.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="661" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="661" > </text>
<g id="frames">
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::_M_head (16,666,666 samples, 0.31%)</title><rect x="935.1" y="277" width="3.6" height="15.0" fill="rgb(223,37,49)" rx="2" ry="2" />
<text  x="938.06" y="287.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (49,999,998 samples, 0.93%)</title><rect x="308.6" y="245" width="11.0" height="15.0" fill="rgb(237,113,3)" rx="2" ry="2" />
<text  x="311.64" y="255.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (16,666,666 samples, 0.31%)</title><rect x="738.4" y="181" width="3.6" height="15.0" fill="rgb(209,155,43)" rx="2" ry="2" />
<text  x="741.40" y="191.5" ></text>
</g>
<g >
<title>leveldb::MemTable::Add (1,199,999,952 samples, 22.22%)</title><rect x="490.7" y="341" width="262.3" height="15.0" fill="rgb(220,138,27)" rx="2" ry="2" />
<text  x="493.74" y="351.5" >leveldb::MemTable::Add</text>
</g>
<g >
<title>page_fault (33,333,332 samples, 0.62%)</title><rect x="112.0" y="229" width="7.3" height="15.0" fill="rgb(237,180,15)" rx="2" ry="2" />
<text  x="114.98" y="239.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::WriteLevel0Table (1,816,666,594 samples, 33.64%)</title><rect x="10.0" y="373" width="397.0" height="15.0" fill="rgb(213,35,49)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >leveldb::DBImpl::WriteLevel0Table</text>
</g>
<g >
<title>leveldb::Benchmark::PrintHeader (16,666,666 samples, 0.31%)</title><rect x="1048.0" y="533" width="3.6" height="15.0" fill="rgb(212,105,51)" rx="2" ry="2" />
<text  x="1050.96" y="543.5" ></text>
</g>
<g >
<title>ext4_filemap_fault (16,666,666 samples, 0.31%)</title><rect x="1135.4" y="485" width="3.6" height="15.0" fill="rgb(209,97,24)" rx="2" ry="2" />
<text  x="1138.37" y="495.5" ></text>
</g>
<g >
<title>__do_page_fault (16,666,666 samples, 0.31%)</title><rect x="1135.4" y="549" width="3.6" height="15.0" fill="rgb(221,44,50)" rx="2" ry="2" />
<text  x="1138.37" y="559.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (83,333,330 samples, 1.54%)</title><rect x="228.5" y="309" width="18.2" height="15.0" fill="rgb(213,164,30)" rx="2" ry="2" />
<text  x="231.52" y="319.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Next (16,666,666 samples, 0.31%)</title><rect x="396.0" y="341" width="3.7" height="15.0" fill="rgb(207,207,53)" rx="2" ry="2" />
<text  x="399.05" y="351.5" ></text>
</g>
<g >
<title>do_page_fault (16,666,666 samples, 0.31%)</title><rect x="1135.4" y="565" width="3.6" height="15.0" fill="rgb(237,72,45)" rx="2" ry="2" />
<text  x="1138.37" y="575.5" ></text>
</g>
<g >
<title>std::__fill_a&lt;char&gt; (33,333,332 samples, 0.62%)</title><rect x="323.2" y="197" width="7.3" height="15.0" fill="rgb(238,29,12)" rx="2" ry="2" />
<text  x="326.21" y="207.5" ></text>
</g>
<g >
<title>do_page_fault (16,666,666 samples, 0.31%)</title><rect x="166.6" y="149" width="3.6" height="15.0" fill="rgb(210,212,11)" rx="2" ry="2" />
<text  x="169.60" y="159.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::~shared_ptr (16,666,666 samples, 0.31%)</title><rect x="1182.7" y="597" width="3.7" height="15.0" fill="rgb(243,47,26)" rx="2" ry="2" />
<text  x="1185.72" y="607.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;::_Tuple_impl (16,666,666 samples, 0.31%)</title><rect x="221.2" y="197" width="3.7" height="15.0" fill="rgb(249,91,1)" rx="2" ry="2" />
<text  x="224.23" y="207.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::wait (33,333,332 samples, 0.62%)</title><rect x="931.4" y="373" width="7.3" height="15.0" fill="rgb(208,85,35)" rx="2" ry="2" />
<text  x="934.42" y="383.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BackgroundCompaction (1,816,666,594 samples, 33.64%)</title><rect x="10.0" y="405" width="397.0" height="15.0" fill="rgb(238,210,5)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >leveldb::DBImpl::BackgroundCompaction</text>
</g>
<g >
<title>ksys_read (16,666,666 samples, 0.31%)</title><rect x="1048.0" y="357" width="3.6" height="15.0" fill="rgb(241,198,17)" rx="2" ry="2" />
<text  x="1050.96" y="367.5" ></text>
</g>
<g >
<title>truncate_inode_pages_final (16,666,666 samples, 0.31%)</title><rect x="1044.3" y="373" width="3.7" height="15.0" fill="rgb(246,54,28)" rx="2" ry="2" />
<text  x="1047.32" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter, void&gt; (66,666,664 samples, 1.23%)</title><rect x="895.0" y="181" width="14.6" height="15.0" fill="rgb(213,7,53)" rx="2" ry="2" />
<text  x="898.00" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_default_append (33,333,332 samples, 0.62%)</title><rect x="323.2" y="293" width="7.3" height="15.0" fill="rgb(221,138,44)" rx="2" ry="2" />
<text  x="326.21" y="303.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;leveldb::Status&gt;::_Result (16,666,666 samples, 0.31%)</title><rect x="964.2" y="389" width="3.6" height="15.0" fill="rgb(249,69,25)" rx="2" ry="2" />
<text  x="967.20" y="399.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (16,666,666 samples, 0.31%)</title><rect x="916.9" y="181" width="3.6" height="15.0" fill="rgb(221,115,26)" rx="2" ry="2" />
<text  x="919.85" y="191.5" ></text>
</g>
<g >
<title>do_page_fault (33,333,332 samples, 0.62%)</title><rect x="323.2" y="149" width="7.3" height="15.0" fill="rgb(233,6,4)" rx="2" ry="2" />
<text  x="326.21" y="159.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::SearchFreeAndLargeLists (16,666,666 samples, 0.31%)</title><rect x="315.9" y="213" width="3.7" height="15.0" fill="rgb(222,16,42)" rx="2" ry="2" />
<text  x="318.93" y="223.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (16,666,666 samples, 0.31%)</title><rect x="989.7" y="293" width="3.6" height="15.0" fill="rgb(233,138,46)" rx="2" ry="2" />
<text  x="992.69" y="303.5" ></text>
</g>
<g >
<title>show_cpuinfo (16,666,666 samples, 0.31%)</title><rect x="1048.0" y="277" width="3.6" height="15.0" fill="rgb(206,132,2)" rx="2" ry="2" />
<text  x="1050.96" y="287.5" ></text>
</g>
<g >
<title>std::fill_n&lt;char*, unsigned long, char&gt; (33,333,332 samples, 0.62%)</title><rect x="323.2" y="229" width="7.3" height="15.0" fill="rgb(246,224,40)" rx="2" ry="2" />
<text  x="326.21" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (149,999,994 samples, 2.78%)</title><rect x="159.3" y="245" width="32.8" height="15.0" fill="rgb(205,18,0)" rx="2" ry="2" />
<text  x="162.32" y="255.5" >st..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (616,666,642 samples, 11.42%)</title><rect x="93.8" y="277" width="134.7" height="15.0" fill="rgb(209,224,14)" rx="2" ry="2" />
<text  x="96.77" y="287.5" >std::__detail::_M..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (16,666,666 samples, 0.31%)</title><rect x="221.2" y="229" width="3.7" height="15.0" fill="rgb(211,215,1)" rx="2" ry="2" />
<text  x="224.23" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::operator* (16,666,666 samples, 0.31%)</title><rect x="935.1" y="357" width="3.6" height="15.0" fill="rgb(212,224,32)" rx="2" ry="2" />
<text  x="938.06" y="367.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (16,666,666 samples, 0.31%)</title><rect x="1044.3" y="485" width="3.7" height="15.0" fill="rgb(241,178,54)" rx="2" ry="2" />
<text  x="1047.32" y="495.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (216,666,658 samples, 4.01%)</title><rect x="618.2" y="245" width="47.4" height="15.0" fill="rgb(213,61,14)" rx="2" ry="2" />
<text  x="621.21" y="255.5" >leve..</text>
</g>
<g >
<title>handle_mm_fault (33,333,332 samples, 0.62%)</title><rect x="308.6" y="181" width="7.3" height="15.0" fill="rgb(228,85,4)" rx="2" ry="2" />
<text  x="311.64" y="191.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::emplace_back&lt;leveldb::DBImpl::Writer*&gt; (16,666,666 samples, 0.31%)</title><rect x="1179.1" y="581" width="3.6" height="15.0" fill="rgb(230,131,33)" rx="2" ry="2" />
<text  x="1182.07" y="591.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (16,666,666 samples, 0.31%)</title><rect x="607.3" y="245" width="3.6" height="15.0" fill="rgb(233,220,29)" rx="2" ry="2" />
<text  x="610.28" y="255.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (16,666,666 samples, 0.31%)</title><rect x="997.0" y="325" width="3.6" height="15.0" fill="rgb(252,211,25)" rx="2" ry="2" />
<text  x="999.98" y="335.5" ></text>
</g>
<g >
<title>do_futex (83,333,330 samples, 1.54%)</title><rect x="869.5" y="245" width="18.2" height="15.0" fill="rgb(243,48,37)" rx="2" ry="2" />
<text  x="872.51" y="255.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::_M_head (16,666,666 samples, 0.31%)</title><rect x="887.7" y="85" width="3.7" height="15.0" fill="rgb(250,19,27)" rx="2" ry="2" />
<text  x="890.72" y="95.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (16,666,666 samples, 0.31%)</title><rect x="439.8" y="405" width="3.6" height="15.0" fill="rgb(206,58,34)" rx="2" ry="2" />
<text  x="442.75" y="415.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (16,666,666 samples, 0.31%)</title><rect x="305.0" y="229" width="3.6" height="15.0" fill="rgb(229,222,27)" rx="2" ry="2" />
<text  x="308.00" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (16,666,666 samples, 0.31%)</title><rect x="170.2" y="181" width="3.7" height="15.0" fill="rgb(221,68,23)" rx="2" ry="2" />
<text  x="173.25" y="191.5" ></text>
</g>
<g >
<title>do_syscall_64 (116,666,662 samples, 2.16%)</title><rect x="862.2" y="277" width="25.5" height="15.0" fill="rgb(217,66,9)" rx="2" ry="2" />
<text  x="865.22" y="287.5" >d..</text>
</g>
<g >
<title>operator new[] (16,666,666 samples, 0.31%)</title><rect x="232.2" y="261" width="3.6" height="15.0" fill="rgb(211,189,39)" rx="2" ry="2" />
<text  x="235.16" y="271.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (33,333,332 samples, 0.62%)</title><rect x="1029.8" y="389" width="7.2" height="15.0" fill="rgb(221,101,5)" rx="2" ry="2" />
<text  x="1032.75" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (49,999,998 samples, 0.93%)</title><rect x="352.3" y="277" width="11.0" height="15.0" fill="rgb(212,198,25)" rx="2" ry="2" />
<text  x="355.35" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::allocate (66,666,664 samples, 1.23%)</title><rect x="206.7" y="245" width="14.5" height="15.0" fill="rgb(241,160,36)" rx="2" ry="2" />
<text  x="209.67" y="255.5" ></text>
</g>
<g >
<title>get_page_from_freelist (16,666,666 samples, 0.31%)</title><rect x="1120.8" y="357" width="3.6" height="15.0" fill="rgb(248,42,10)" rx="2" ry="2" />
<text  x="1123.80" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (16,666,666 samples, 0.31%)</title><rect x="199.4" y="229" width="3.6" height="15.0" fill="rgb(245,146,47)" rx="2" ry="2" />
<text  x="202.38" y="239.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MemTableInserter::MemTableInserter (16,666,666 samples, 0.31%)</title><rect x="483.5" y="373" width="3.6" height="15.0" fill="rgb(238,174,22)" rx="2" ry="2" />
<text  x="486.46" y="383.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::_M_get_result (49,999,998 samples, 0.93%)</title><rect x="931.4" y="389" width="10.9" height="15.0" fill="rgb(228,173,21)" rx="2" ry="2" />
<text  x="934.42" y="399.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;&gt; &gt; (16,666,666 samples, 0.31%)</title><rect x="224.9" y="229" width="3.6" height="15.0" fill="rgb(224,94,31)" rx="2" ry="2" />
<text  x="227.88" y="239.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (199,999,992 samples, 3.70%)</title><rect x="621.9" y="229" width="43.7" height="15.0" fill="rgb(208,101,49)" rx="2" ry="2" />
<text  x="624.85" y="239.5" >leve..</text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::~shared_ptr (16,666,666 samples, 0.31%)</title><rect x="1139.0" y="581" width="3.7" height="15.0" fill="rgb(240,69,15)" rx="2" ry="2" />
<text  x="1142.01" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (49,999,998 samples, 0.93%)</title><rect x="235.8" y="277" width="10.9" height="15.0" fill="rgb(246,158,3)" rx="2" ry="2" />
<text  x="238.80" y="287.5" ></text>
</g>
<g >
<title>ext4_evict_inode (16,666,666 samples, 0.31%)</title><rect x="1044.3" y="389" width="3.7" height="15.0" fill="rgb(249,226,17)" rx="2" ry="2" />
<text  x="1047.32" y="399.5" ></text>
</g>
<g >
<title>std::move&lt;char const*&amp;&gt; (16,666,666 samples, 0.31%)</title><rect x="476.2" y="357" width="3.6" height="15.0" fill="rgb(226,26,38)" rx="2" ry="2" />
<text  x="479.17" y="367.5" ></text>
</g>
<g >
<title>std::future&lt;leveldb::Status&gt;::get (133,333,328 samples, 2.47%)</title><rect x="927.8" y="405" width="29.1" height="15.0" fill="rgb(237,190,42)" rx="2" ry="2" />
<text  x="930.78" y="415.5" >st..</text>
</g>
<g >
<title>ext4_da_invalidatepage (16,666,666 samples, 0.31%)</title><rect x="1044.3" y="325" width="3.7" height="15.0" fill="rgb(227,26,1)" rx="2" ry="2" />
<text  x="1047.32" y="335.5" ></text>
</g>
<g >
<title>__pthread_once_slow (333,333,320 samples, 6.17%)</title><rect x="847.7" y="325" width="72.8" height="15.0" fill="rgb(245,34,39)" rx="2" ry="2" />
<text  x="850.65" y="335.5" >__pthrea..</text>
</g>
<g >
<title>__x64_sys_futex (83,333,330 samples, 1.54%)</title><rect x="869.5" y="261" width="18.2" height="15.0" fill="rgb(232,2,13)" rx="2" ry="2" />
<text  x="872.51" y="271.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::NoBarrier_SetNext (16,666,666 samples, 0.31%)</title><rect x="1069.8" y="597" width="3.7" height="15.0" fill="rgb(219,178,43)" rx="2" ry="2" />
<text  x="1072.81" y="607.5" ></text>
</g>
<g >
<title>handle_mm_fault (16,666,666 samples, 0.31%)</title><rect x="439.8" y="309" width="3.6" height="15.0" fill="rgb(215,112,26)" rx="2" ry="2" />
<text  x="442.75" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (49,999,998 samples, 0.93%)</title><rect x="352.3" y="261" width="11.0" height="15.0" fill="rgb(213,108,7)" rx="2" ry="2" />
<text  x="355.35" y="271.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (33,333,332 samples, 0.62%)</title><rect x="920.5" y="373" width="7.3" height="15.0" fill="rgb(251,14,45)" rx="2" ry="2" />
<text  x="923.49" y="383.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::WriteSeq (2,883,333,218 samples, 53.40%)</title><rect x="407.0" y="453" width="630.0" height="15.0" fill="rgb(235,126,34)" rx="2" ry="2" />
<text  x="409.98" y="463.5" >leveldb::Benchmark::WriteSeq</text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (16,666,666 samples, 0.31%)</title><rect x="960.6" y="325" width="3.6" height="15.0" fill="rgb(247,92,31)" rx="2" ry="2" />
<text  x="963.56" y="335.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (99,999,996 samples, 1.85%)</title><rect x="585.4" y="245" width="21.9" height="15.0" fill="rgb(238,147,26)" rx="2" ry="2" />
<text  x="588.43" y="255.5" >l..</text>
</g>
<g >
<title>__do_page_fault (33,333,332 samples, 0.62%)</title><rect x="308.6" y="197" width="7.3" height="15.0" fill="rgb(213,62,44)" rx="2" ry="2" />
<text  x="311.64" y="207.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (83,333,330 samples, 1.54%)</title><rect x="716.5" y="277" width="18.3" height="15.0" fill="rgb(250,213,40)" rx="2" ry="2" />
<text  x="719.54" y="287.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::_M_head (16,666,666 samples, 0.31%)</title><rect x="916.9" y="149" width="3.6" height="15.0" fill="rgb(214,132,2)" rx="2" ry="2" />
<text  x="919.85" y="159.5" ></text>
</g>
<g >
<title>std::_Function_base::_Function_base (16,666,666 samples, 0.31%)</title><rect x="924.1" y="357" width="3.7" height="15.0" fill="rgb(208,78,48)" rx="2" ry="2" />
<text  x="927.14" y="367.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (4,699,999,812 samples, 87.04%)</title><rect x="10.0" y="501" width="1027.0" height="15.0" fill="rgb(227,48,17)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >std::__invoke&lt;void </text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (16,666,666 samples, 0.31%)</title><rect x="439.8" y="389" width="3.6" height="15.0" fill="rgb(225,91,3)" rx="2" ry="2" />
<text  x="442.75" y="399.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::value (16,666,666 samples, 0.31%)</title><rect x="24.6" y="341" width="3.6" height="15.0" fill="rgb(218,154,2)" rx="2" ry="2" />
<text  x="27.57" y="351.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (16,666,666 samples, 0.31%)</title><rect x="1168.1" y="581" width="3.7" height="15.0" fill="rgb(225,56,50)" rx="2" ry="2" />
<text  x="1171.15" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (66,666,664 samples, 1.23%)</title><rect x="119.3" y="213" width="14.5" height="15.0" fill="rgb(243,13,47)" rx="2" ry="2" />
<text  x="122.26" y="223.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (33,333,332 samples, 0.62%)</title><rect x="800.3" y="341" width="7.3" height="15.0" fill="rgb(240,65,6)" rx="2" ry="2" />
<text  x="803.31" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (33,333,332 samples, 0.62%)</title><rect x="235.8" y="213" width="7.3" height="15.0" fill="rgb(236,32,36)" rx="2" ry="2" />
<text  x="238.80" y="223.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__future_base::_Result_base*, false&gt;::_M_head (16,666,666 samples, 0.31%)</title><rect x="916.9" y="133" width="3.6" height="15.0" fill="rgb(247,94,13)" rx="2" ry="2" />
<text  x="919.85" y="143.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (16,666,666 samples, 0.31%)</title><rect x="1073.5" y="581" width="3.6" height="15.0" fill="rgb(209,164,40)" rx="2" ry="2" />
<text  x="1076.46" y="591.5" ></text>
</g>
<g >
<title>snappy::internal::CompressFragment (116,666,662 samples, 2.16%)</title><rect x="279.5" y="245" width="25.5" height="15.0" fill="rgb(206,70,43)" rx="2" ry="2" />
<text  x="282.51" y="255.5" >s..</text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::RandomHeight (16,666,666 samples, 0.31%)</title><rect x="745.7" y="309" width="3.6" height="15.0" fill="rgb(219,140,50)" rx="2" ry="2" />
<text  x="748.68" y="319.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;char*, unsigned long&gt; (33,333,332 samples, 0.62%)</title><rect x="323.2" y="245" width="7.3" height="15.0" fill="rgb(221,46,21)" rx="2" ry="2" />
<text  x="326.21" y="255.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (49,999,998 samples, 0.93%)</title><rect x="235.8" y="293" width="10.9" height="15.0" fill="rgb(206,35,45)" rx="2" ry="2" />
<text  x="238.80" y="303.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_State_baseV2 (16,666,666 samples, 0.31%)</title><rect x="1149.9" y="597" width="3.7" height="15.0" fill="rgb(209,21,31)" rx="2" ry="2" />
<text  x="1152.94" y="607.5" ></text>
</g>
<g >
<title>evict (16,666,666 samples, 0.31%)</title><rect x="1044.3" y="405" width="3.7" height="15.0" fill="rgb(220,11,32)" rx="2" ry="2" />
<text  x="1047.32" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_node_allocator (16,666,666 samples, 0.31%)</title><rect x="203.0" y="245" width="3.7" height="15.0" fill="rgb(237,62,14)" rx="2" ry="2" />
<text  x="206.02" y="255.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::__basic_future (33,333,332 samples, 0.62%)</title><rect x="956.9" y="373" width="7.3" height="15.0" fill="rgb(212,53,8)" rx="2" ry="2" />
<text  x="959.91" y="383.5" ></text>
</g>
<g >
<title>_IO_new_do_write (16,666,666 samples, 0.31%)</title><rect x="334.1" y="293" width="3.7" height="15.0" fill="rgb(232,133,42)" rx="2" ry="2" />
<text  x="337.14" y="303.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::RoundUp&lt;4&gt; (16,666,666 samples, 0.31%)</title><rect x="807.6" y="341" width="3.6" height="15.0" fill="rgb(251,121,24)" rx="2" ry="2" />
<text  x="810.59" y="351.5" ></text>
</g>
<g >
<title>leveldb::WriteBatch::Iterate (1,249,999,950 samples, 23.15%)</title><rect x="487.1" y="373" width="273.1" height="15.0" fill="rgb(223,114,9)" rx="2" ry="2" />
<text  x="490.10" y="383.5" >leveldb::WriteBatch::Iterate</text>
</g>
<g >
<title>leveldb::TableBuilder::WriteBlock (283,333,322 samples, 5.25%)</title><rect x="246.7" y="309" width="61.9" height="15.0" fill="rgb(242,88,37)" rx="2" ry="2" />
<text  x="249.73" y="319.5" >leveld..</text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (149,999,994 samples, 2.78%)</title><rect x="337.8" y="357" width="32.8" height="15.0" fill="rgb(219,106,32)" rx="2" ry="2" />
<text  x="340.78" y="367.5" >le..</text>
</g>
<g >
<title>__find_specmb (16,666,666 samples, 0.31%)</title><rect x="432.5" y="357" width="3.6" height="15.0" fill="rgb(218,0,31)" rx="2" ry="2" />
<text  x="435.47" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (33,333,332 samples, 0.62%)</title><rect x="370.6" y="309" width="7.2" height="15.0" fill="rgb(228,154,11)" rx="2" ry="2" />
<text  x="373.56" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (33,333,332 samples, 0.62%)</title><rect x="126.5" y="197" width="7.3" height="15.0" fill="rgb(234,126,33)" rx="2" ry="2" />
<text  x="129.54" y="207.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (16,666,666 samples, 0.31%)</title><rect x="396.0" y="309" width="3.7" height="15.0" fill="rgb(212,88,24)" rx="2" ry="2" />
<text  x="399.05" y="319.5" ></text>
</g>
<g >
<title>__x64_sys_unlink (16,666,666 samples, 0.31%)</title><rect x="1044.3" y="453" width="3.7" height="15.0" fill="rgb(237,6,31)" rx="2" ry="2" />
<text  x="1047.32" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt;::allocate (66,666,664 samples, 1.23%)</title><rect x="206.7" y="229" width="14.5" height="15.0" fill="rgb(233,20,24)" rx="2" ry="2" />
<text  x="209.67" y="239.5" ></text>
</g>
<g >
<title>vfs_read (16,666,666 samples, 0.31%)</title><rect x="1048.0" y="341" width="3.6" height="15.0" fill="rgb(216,13,30)" rx="2" ry="2" />
<text  x="1050.96" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (83,333,330 samples, 1.54%)</title><rect x="377.8" y="293" width="18.2" height="15.0" fill="rgb(248,153,6)" rx="2" ry="2" />
<text  x="380.84" y="303.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_State_baseV2 (49,999,998 samples, 0.93%)</title><rect x="975.1" y="261" width="10.9" height="15.0" fill="rgb(230,115,2)" rx="2" ry="2" />
<text  x="978.12" y="271.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (16,666,666 samples, 0.31%)</title><rect x="1160.9" y="581" width="3.6" height="15.0" fill="rgb(254,204,8)" rx="2" ry="2" />
<text  x="1163.86" y="591.5" ></text>
</g>
<g >
<title>leveldb::Arena::AllocateFallback (16,666,666 samples, 0.31%)</title><rect x="738.4" y="277" width="3.6" height="15.0" fill="rgb(226,91,15)" rx="2" ry="2" />
<text  x="741.40" y="287.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteRawBlock (133,333,328 samples, 2.47%)</title><rect x="250.4" y="293" width="29.1" height="15.0" fill="rgb(218,11,18)" rx="2" ry="2" />
<text  x="253.37" y="303.5" >le..</text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (49,999,998 samples, 0.93%)</title><rect x="308.6" y="261" width="11.0" height="15.0" fill="rgb(220,79,19)" rx="2" ry="2" />
<text  x="311.64" y="271.5" ></text>
</g>
<g >
<title>leveldb::log::Writer::EmitPhysicalRecord (183,333,326 samples, 3.40%)</title><rect x="774.8" y="373" width="40.1" height="15.0" fill="rgb(236,60,14)" rx="2" ry="2" />
<text  x="777.81" y="383.5" >lev..</text>
</g>
<g >
<title>leveldb::WriteBatch::Put (66,666,664 samples, 1.23%)</title><rect x="1022.5" y="421" width="14.5" height="15.0" fill="rgb(244,205,16)" rx="2" ry="2" />
<text  x="1025.47" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (33,333,332 samples, 0.62%)</title><rect x="195.7" y="261" width="7.3" height="15.0" fill="rgb(243,118,40)" rx="2" ry="2" />
<text  x="198.74" y="271.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set (149,999,994 samples, 2.78%)</title><rect x="887.7" y="229" width="32.8" height="15.0" fill="rgb(210,141,14)" rx="2" ry="2" />
<text  x="890.72" y="239.5" >st..</text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (116,666,662 samples, 2.16%)</title><rect x="709.3" y="293" width="25.5" height="15.0" fill="rgb(207,36,26)" rx="2" ry="2" />
<text  x="712.26" y="303.5" >l..</text>
</g>
<g >
<title>__GI__IO_default_uflow (16,666,666 samples, 0.31%)</title><rect x="1048.0" y="453" width="3.6" height="15.0" fill="rgb(234,39,50)" rx="2" ry="2" />
<text  x="1050.96" y="463.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (16,666,666 samples, 0.31%)</title><rect x="1066.2" y="597" width="3.6" height="15.0" fill="rgb(246,125,49)" rx="2" ry="2" />
<text  x="1069.17" y="607.5" ></text>
</g>
<g >
<title>leveldb::port::Mutex::Unlock (16,666,666 samples, 0.31%)</title><rect x="818.5" y="389" width="3.7" height="15.0" fill="rgb(251,17,47)" rx="2" ry="2" />
<text  x="821.52" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (16,666,666 samples, 0.31%)</title><rect x="1048.0" y="405" width="3.6" height="15.0" fill="rgb(217,45,23)" rx="2" ry="2" />
<text  x="1050.96" y="415.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (83,333,330 samples, 1.54%)</title><rect x="647.3" y="213" width="18.3" height="15.0" fill="rgb(246,93,26)" rx="2" ry="2" />
<text  x="650.35" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (99,999,996 samples, 1.85%)</title><rect x="341.4" y="293" width="21.9" height="15.0" fill="rgb(207,89,13)" rx="2" ry="2" />
<text  x="344.42" y="303.5" >s..</text>
</g>
<g >
<title>std::__detail::_Select1st::operator (16,666,666 samples, 0.31%)</title><rect x="1146.3" y="597" width="3.6" height="15.0" fill="rgb(243,135,24)" rx="2" ry="2" />
<text  x="1149.30" y="607.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::New (16,666,666 samples, 0.31%)</title><rect x="738.4" y="165" width="3.6" height="15.0" fill="rgb(216,84,19)" rx="2" ry="2" />
<text  x="741.40" y="175.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (16,666,666 samples, 0.31%)</title><rect x="403.3" y="341" width="3.7" height="15.0" fill="rgb(211,21,20)" rx="2" ry="2" />
<text  x="406.33" y="351.5" ></text>
</g>
<g >
<title>leveldb::Status::OK (16,666,666 samples, 0.31%)</title><rect x="774.8" y="357" width="3.7" height="15.0" fill="rgb(246,138,17)" rx="2" ry="2" />
<text  x="777.81" y="367.5" ></text>
</g>
<g >
<title>ext4_filemap_fault (49,999,998 samples, 0.93%)</title><rect x="1120.8" y="485" width="10.9" height="15.0" fill="rgb(218,63,30)" rx="2" ry="2" />
<text  x="1123.80" y="495.5" ></text>
</g>
<g >
<title>__do_fault (49,999,998 samples, 0.93%)</title><rect x="1120.8" y="501" width="10.9" height="15.0" fill="rgb(242,81,4)" rx="2" ry="2" />
<text  x="1123.80" y="511.5" ></text>
</g>
<g >
<title>_IO_vsnprintf (133,333,328 samples, 2.47%)</title><rect x="410.6" y="389" width="29.2" height="15.0" fill="rgb(216,138,1)" rx="2" ry="2" />
<text  x="413.62" y="399.5" >_I..</text>
</g>
<g >
<title>_IO_new_file_write (16,666,666 samples, 0.31%)</title><rect x="334.1" y="261" width="3.7" height="15.0" fill="rgb(209,68,29)" rx="2" ry="2" />
<text  x="337.14" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__future_base::_State_baseV2&gt;::construct&lt;std::__future_base::_State_baseV2&gt; (49,999,998 samples, 0.93%)</title><rect x="975.1" y="277" width="10.9" height="15.0" fill="rgb(216,22,1)" rx="2" ry="2" />
<text  x="978.12" y="287.5" ></text>
</g>
<g >
<title>leveldb::port::CondVar::~CondVar (16,666,666 samples, 0.31%)</title><rect x="454.3" y="373" width="3.7" height="15.0" fill="rgb(211,55,29)" rx="2" ry="2" />
<text  x="457.32" y="383.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::RandomGenerator::RandomGenerator (16,666,666 samples, 0.31%)</title><rect x="439.8" y="421" width="3.6" height="15.0" fill="rgb(239,78,39)" rx="2" ry="2" />
<text  x="442.75" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (16,666,666 samples, 0.31%)</title><rect x="243.1" y="245" width="3.6" height="15.0" fill="rgb(248,216,37)" rx="2" ry="2" />
<text  x="246.09" y="255.5" ></text>
</g>
<g >
<title>filemap_fault (49,999,998 samples, 0.93%)</title><rect x="1120.8" y="469" width="10.9" height="15.0" fill="rgb(214,207,38)" rx="2" ry="2" />
<text  x="1123.80" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (16,666,666 samples, 0.31%)</title><rect x="1186.4" y="581" width="3.6" height="15.0" fill="rgb(244,189,21)" rx="2" ry="2" />
<text  x="1189.36" y="591.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (133,333,328 samples, 2.47%)</title><rect x="250.4" y="261" width="29.1" height="15.0" fill="rgb(230,101,35)" rx="2" ry="2" />
<text  x="253.37" y="271.5" >le..</text>
</g>
<g >
<title>_raw_spin_lock (16,666,666 samples, 0.31%)</title><rect x="115.6" y="165" width="3.7" height="15.0" fill="rgb(247,132,0)" rx="2" ry="2" />
<text  x="118.62" y="175.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (16,666,666 samples, 0.31%)</title><rect x="396.0" y="325" width="3.7" height="15.0" fill="rgb(254,145,27)" rx="2" ry="2" />
<text  x="399.05" y="335.5" ></text>
</g>
<g >
<title>leveldb::Status::operator= (83,333,330 samples, 1.54%)</title><rect x="461.6" y="389" width="18.2" height="15.0" fill="rgb(224,130,46)" rx="2" ry="2" />
<text  x="464.60" y="399.5" ></text>
</g>
<g >
<title>__do_page_cache_readahead (16,666,666 samples, 0.31%)</title><rect x="1135.4" y="421" width="3.6" height="15.0" fill="rgb(205,87,52)" rx="2" ry="2" />
<text  x="1138.37" y="431.5" ></text>
</g>
<g >
<title>do_syscall_64 (16,666,666 samples, 0.31%)</title><rect x="1048.0" y="389" width="3.6" height="15.0" fill="rgb(246,161,18)" rx="2" ry="2" />
<text  x="1050.96" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (199,999,992 samples, 3.70%)</title><rect x="152.0" y="261" width="43.7" height="15.0" fill="rgb(235,106,47)" rx="2" ry="2" />
<text  x="155.04" y="271.5" >std:..</text>
</g>
<g >
<title>__x64_sys_read (16,666,666 samples, 0.31%)</title><rect x="1048.0" y="373" width="3.6" height="15.0" fill="rgb(228,76,52)" rx="2" ry="2" />
<text  x="1050.96" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt; &gt;::construct&lt;std::__future_base::_State_baseV2&gt; (49,999,998 samples, 0.93%)</title><rect x="975.1" y="293" width="10.9" height="15.0" fill="rgb(220,83,54)" rx="2" ry="2" />
<text  x="978.12" y="303.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;unsigned long, char&gt; (33,333,332 samples, 0.62%)</title><rect x="323.2" y="213" width="7.3" height="15.0" fill="rgb(249,103,42)" rx="2" ry="2" />
<text  x="326.21" y="223.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;std::__future_base::_State_baseV2,  (16,666,666 samples, 0.31%)</title><rect x="960.6" y="341" width="3.6" height="15.0" fill="rgb(232,112,43)" rx="2" ry="2" />
<text  x="963.56" y="351.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Rep::~Rep (16,666,666 samples, 0.31%)</title><rect x="330.5" y="325" width="3.6" height="15.0" fill="rgb(246,30,4)" rx="2" ry="2" />
<text  x="333.49" y="335.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::Reset (16,666,666 samples, 0.31%)</title><rect x="246.7" y="293" width="3.7" height="15.0" fill="rgb(254,184,52)" rx="2" ry="2" />
<text  x="249.73" y="303.5" ></text>
</g>
<g >
<title>std::operator&amp; (16,666,666 samples, 0.31%)</title><rect x="1171.8" y="565" width="3.6" height="15.0" fill="rgb(234,204,44)" rx="2" ry="2" />
<text  x="1174.79" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (16,666,666 samples, 0.31%)</title><rect x="337.8" y="293" width="3.6" height="15.0" fill="rgb(211,9,4)" rx="2" ry="2" />
<text  x="340.78" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux (33,333,332 samples, 0.62%)</title><rect x="1015.2" y="405" width="7.3" height="15.0" fill="rgb(217,96,1)" rx="2" ry="2" />
<text  x="1018.19" y="415.5" ></text>
</g>
<g >
<title>operator new[] (49,999,998 samples, 0.93%)</title><rect x="308.6" y="309" width="11.0" height="15.0" fill="rgb(241,174,28)" rx="2" ry="2" />
<text  x="311.64" y="319.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; &gt;::_M_init_functor (16,666,666 samples, 0.31%)</title><rect x="920.5" y="357" width="3.6" height="15.0" fill="rgb(237,108,9)" rx="2" ry="2" />
<text  x="923.49" y="367.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (149,999,994 samples, 2.78%)</title><rect x="887.7" y="277" width="32.8" height="15.0" fill="rgb(248,10,45)" rx="2" ry="2" />
<text  x="890.72" y="287.5" >st..</text>
</g>
<g >
<title>futex_wake (166,666,660 samples, 3.09%)</title><rect x="851.3" y="309" width="36.4" height="15.0" fill="rgb(211,172,18)" rx="2" ry="2" />
<text  x="854.30" y="319.5" >fut..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (16,666,666 samples, 0.31%)</title><rect x="334.1" y="229" width="3.7" height="15.0" fill="rgb(245,93,24)" rx="2" ry="2" />
<text  x="337.14" y="239.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::begin (33,333,332 samples, 0.62%)</title><rect x="829.4" y="373" width="7.3" height="15.0" fill="rgb(240,23,12)" rx="2" ry="2" />
<text  x="832.44" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::emplace_back&lt;unsigned int&gt; (16,666,666 samples, 0.31%)</title><rect x="246.7" y="261" width="3.7" height="15.0" fill="rgb(217,42,11)" rx="2" ry="2" />
<text  x="249.73" y="271.5" ></text>
</g>
<g >
<title>__GI___clone (4,699,999,812 samples, 87.04%)</title><rect x="10.0" y="597" width="1027.0" height="15.0" fill="rgb(232,23,36)" rx="2" ry="2" />
<text  x="13.00" y="607.5" >__GI___clone</text>
</g>
<g >
<title>std::operator==&lt;char&gt; (16,666,666 samples, 0.31%)</title><rect x="392.4" y="229" width="3.6" height="15.0" fill="rgb(222,1,25)" rx="2" ry="2" />
<text  x="395.41" y="239.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (16,666,666 samples, 0.31%)</title><rect x="79.2" y="293" width="3.6" height="15.0" fill="rgb(232,62,4)" rx="2" ry="2" />
<text  x="82.20" y="303.5" ></text>
</g>
<g >
<title>do_page_fault (16,666,666 samples, 0.31%)</title><rect x="439.8" y="341" width="3.6" height="15.0" fill="rgb(211,118,36)" rx="2" ry="2" />
<text  x="442.75" y="351.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (16,666,666 samples, 0.31%)</title><rect x="35.5" y="309" width="3.6" height="15.0" fill="rgb(235,190,49)" rx="2" ry="2" />
<text  x="38.49" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (16,666,666 samples, 0.31%)</title><rect x="1142.7" y="597" width="3.6" height="15.0" fill="rgb(252,103,51)" rx="2" ry="2" />
<text  x="1145.65" y="607.5" ></text>
</g>
<g >
<title>generic_update_time (16,666,666 samples, 0.31%)</title><rect x="334.1" y="85" width="3.7" height="15.0" fill="rgb(217,0,32)" rx="2" ry="2" />
<text  x="337.14" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (16,666,666 samples, 0.31%)</title><rect x="363.3" y="309" width="3.6" height="15.0" fill="rgb(248,4,28)" rx="2" ry="2" />
<text  x="366.27" y="319.5" ></text>
</g>
<g >
<title>read_pages (16,666,666 samples, 0.31%)</title><rect x="1135.4" y="405" width="3.6" height="15.0" fill="rgb(252,40,13)" rx="2" ry="2" />
<text  x="1138.37" y="415.5" ></text>
</g>
<g >
<title>__handle_mm_fault (66,666,664 samples, 1.23%)</title><rect x="1117.2" y="517" width="14.5" height="15.0" fill="rgb(226,58,7)" rx="2" ry="2" />
<text  x="1120.16" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (33,333,332 samples, 0.62%)</title><rect x="170.2" y="213" width="7.3" height="15.0" fill="rgb(215,105,40)" rx="2" ry="2" />
<text  x="173.25" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (83,333,330 samples, 1.54%)</title><rect x="133.8" y="229" width="18.2" height="15.0" fill="rgb(237,193,50)" rx="2" ry="2" />
<text  x="136.83" y="239.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::key (33,333,332 samples, 0.62%)</title><rect x="399.7" y="357" width="7.3" height="15.0" fill="rgb(251,226,28)" rx="2" ry="2" />
<text  x="402.69" y="367.5" ></text>
</g>
<g >
<title>truncate_inode_pages_range (16,666,666 samples, 0.31%)</title><rect x="1044.3" y="357" width="3.7" height="15.0" fill="rgb(211,77,27)" rx="2" ry="2" />
<text  x="1047.32" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (16,666,666 samples, 0.31%)</title><rect x="916.9" y="197" width="3.6" height="15.0" fill="rgb(221,61,34)" rx="2" ry="2" />
<text  x="919.85" y="207.5" ></text>
</g>
<g >
<title>leveldb::port::Mutex::Lock (16,666,666 samples, 0.31%)</title><rect x="814.9" y="389" width="3.6" height="15.0" fill="rgb(250,125,49)" rx="2" ry="2" />
<text  x="817.88" y="399.5" ></text>
</g>
<g >
<title>handle_mm_fault (16,666,666 samples, 0.31%)</title><rect x="1135.4" y="533" width="3.6" height="15.0" fill="rgb(251,105,15)" rx="2" ry="2" />
<text  x="1138.37" y="543.5" ></text>
</g>
<g >
<title>leveldb::MemTable::KeyComparator::operator (666,666,640 samples, 12.35%)</title><rect x="563.6" y="277" width="145.7" height="15.0" fill="rgb(235,170,6)" rx="2" ry="2" />
<text  x="566.58" y="287.5" >leveldb::MemTable:..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl&lt;std::__future_base::_Result_base::_Deleter&gt; (16,666,666 samples, 0.31%)</title><rect x="898.6" y="117" width="3.7" height="15.0" fill="rgb(210,143,41)" rx="2" ry="2" />
<text  x="901.64" y="127.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (4,699,999,812 samples, 87.04%)</title><rect x="10.0" y="549" width="1027.0" height="15.0" fill="rgb(218,103,47)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>file_update_time (16,666,666 samples, 0.31%)</title><rect x="334.1" y="101" width="3.7" height="15.0" fill="rgb(207,99,20)" rx="2" ry="2" />
<text  x="337.14" y="111.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (16,666,666 samples, 0.31%)</title><rect x="1168.1" y="597" width="3.7" height="15.0" fill="rgb(243,228,24)" rx="2" ry="2" />
<text  x="1171.15" y="607.5" ></text>
</g>
<g >
<title>_raw_spin_lock (16,666,666 samples, 0.31%)</title><rect x="312.3" y="165" width="3.6" height="15.0" fill="rgb(224,148,29)" rx="2" ry="2" />
<text  x="315.28" y="175.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;char*, unsigned long, char&gt; (33,333,332 samples, 0.62%)</title><rect x="323.2" y="277" width="7.3" height="15.0" fill="rgb(227,102,20)" rx="2" ry="2" />
<text  x="326.21" y="287.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::promise (166,666,660 samples, 3.09%)</title><rect x="964.2" y="405" width="36.4" height="15.0" fill="rgb(225,54,4)" rx="2" ry="2" />
<text  x="967.20" y="415.5" >std..</text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add (16,666,666 samples, 0.31%)</title><rect x="1037.0" y="581" width="3.7" height="15.0" fill="rgb(221,8,51)" rx="2" ry="2" />
<text  x="1040.04" y="591.5" ></text>
</g>
<g >
<title>page_fault (66,666,664 samples, 1.23%)</title><rect x="1117.2" y="581" width="14.5" height="15.0" fill="rgb(232,126,54)" rx="2" ry="2" />
<text  x="1120.16" y="591.5" ></text>
</g>
<g >
<title>__vfs_read (16,666,666 samples, 0.31%)</title><rect x="1048.0" y="325" width="3.6" height="15.0" fill="rgb(243,125,37)" rx="2" ry="2" />
<text  x="1050.96" y="335.5" ></text>
</g>
<g >
<title>try_to_release_page (16,666,666 samples, 0.31%)</title><rect x="1044.3" y="277" width="3.7" height="15.0" fill="rgb(226,18,51)" rx="2" ry="2" />
<text  x="1047.32" y="287.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (149,999,994 samples, 2.78%)</title><rect x="887.7" y="245" width="32.8" height="15.0" fill="rgb(231,152,46)" rx="2" ry="2" />
<text  x="890.72" y="255.5" >st..</text>
</g>
<g >
<title>_start (33,333,332 samples, 0.62%)</title><rect x="1044.3" y="597" width="7.3" height="15.0" fill="rgb(254,141,6)" rx="2" ry="2" />
<text  x="1047.32" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::front (66,666,664 samples, 1.23%)</title><rect x="822.2" y="389" width="14.5" height="15.0" fill="rgb(206,198,36)" rx="2" ry="2" />
<text  x="825.16" y="399.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (16,666,666 samples, 0.31%)</title><rect x="916.9" y="165" width="3.6" height="15.0" fill="rgb(244,106,27)" rx="2" ry="2" />
<text  x="919.85" y="175.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (16,666,666 samples, 0.31%)</title><rect x="1058.9" y="597" width="3.6" height="15.0" fill="rgb(223,7,24)" rx="2" ry="2" />
<text  x="1061.89" y="607.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Rep::Rep (33,333,332 samples, 0.62%)</title><rect x="323.2" y="325" width="7.3" height="15.0" fill="rgb(214,102,2)" rx="2" ry="2" />
<text  x="326.21" y="335.5" ></text>
</g>
<g >
<title>jbd2_journal_try_to_free_buffers (16,666,666 samples, 0.31%)</title><rect x="1044.3" y="245" width="3.7" height="15.0" fill="rgb(249,220,5)" rx="2" ry="2" />
<text  x="1047.32" y="255.5" ></text>
</g>
<g >
<title>page_fault (16,666,666 samples, 0.31%)</title><rect x="166.6" y="165" width="3.6" height="15.0" fill="rgb(252,171,10)" rx="2" ry="2" />
<text  x="169.60" y="175.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::key (66,666,664 samples, 1.23%)</title><rect x="10.0" y="341" width="14.6" height="15.0" fill="rgb(242,146,18)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (16,666,666 samples, 0.31%)</title><rect x="997.0" y="357" width="3.6" height="15.0" fill="rgb(242,184,10)" rx="2" ry="2" />
<text  x="999.98" y="367.5" ></text>
</g>
<g >
<title>handle_mm_fault (16,666,666 samples, 0.31%)</title><rect x="166.6" y="117" width="3.6" height="15.0" fill="rgb(251,56,31)" rx="2" ry="2" />
<text  x="169.60" y="127.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (16,666,666 samples, 0.31%)</title><rect x="334.1" y="53" width="3.7" height="15.0" fill="rgb(232,125,44)" rx="2" ry="2" />
<text  x="337.14" y="63.5" ></text>
</g>
<g >
<title>ext4_readpages (16,666,666 samples, 0.31%)</title><rect x="1135.4" y="389" width="3.6" height="15.0" fill="rgb(235,24,4)" rx="2" ry="2" />
<text  x="1138.37" y="399.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (16,666,666 samples, 0.31%)</title><rect x="935.1" y="293" width="3.6" height="15.0" fill="rgb(248,208,43)" rx="2" ry="2" />
<text  x="938.06" y="303.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::~TableBuilder (16,666,666 samples, 0.31%)</title><rect x="330.5" y="341" width="3.6" height="15.0" fill="rgb(233,17,9)" rx="2" ry="2" />
<text  x="333.49" y="351.5" ></text>
</g>
<g >
<title>ext4_releasepage (16,666,666 samples, 0.31%)</title><rect x="1044.3" y="261" width="3.7" height="15.0" fill="rgb(205,41,10)" rx="2" ry="2" />
<text  x="1047.32" y="271.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (33,333,332 samples, 0.62%)</title><rect x="228.5" y="293" width="7.3" height="15.0" fill="rgb(208,207,51)" rx="2" ry="2" />
<text  x="231.52" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_allocate_buckets (16,666,666 samples, 0.31%)</title><rect x="166.6" y="197" width="3.6" height="15.0" fill="rgb(227,194,33)" rx="2" ry="2" />
<text  x="169.60" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (266,666,656 samples, 4.94%)</title><rect x="93.8" y="261" width="58.2" height="15.0" fill="rgb(247,12,35)" rx="2" ry="2" />
<text  x="96.77" y="271.5" >std::_..</text>
</g>
<g >
<title>read_pages (33,333,332 samples, 0.62%)</title><rect x="1124.4" y="405" width="7.3" height="15.0" fill="rgb(253,197,54)" rx="2" ry="2" />
<text  x="1127.44" y="415.5" ></text>
</g>
<g >
<title>__GI__IO_default_xsputn (16,666,666 samples, 0.31%)</title><rect x="417.9" y="357" width="3.6" height="15.0" fill="rgb(231,69,24)" rx="2" ry="2" />
<text  x="420.90" y="367.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::WriteWrapper (2,199,999,912 samples, 40.74%)</title><rect x="447.0" y="405" width="480.8" height="15.0" fill="rgb(232,167,46)" rx="2" ry="2" />
<text  x="450.04" y="415.5" >leveldb::DBImpl::WriteWrapper</text>
</g>
<g >
<title>std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt; (16,666,666 samples, 0.31%)</title><rect x="221.2" y="181" width="3.7" height="15.0" fill="rgb(252,41,17)" rx="2" ry="2" />
<text  x="224.23" y="191.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (16,666,666 samples, 0.31%)</title><rect x="217.6" y="197" width="3.6" height="15.0" fill="rgb(244,100,43)" rx="2" ry="2" />
<text  x="220.59" y="207.5" ></text>
</g>
<g >
<title>__x64_sys_futex (16,666,666 samples, 0.31%)</title><rect x="858.6" y="277" width="3.6" height="15.0" fill="rgb(205,97,9)" rx="2" ry="2" />
<text  x="861.58" y="287.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__future_base::_State_baseV2&gt;::allocator (16,666,666 samples, 0.31%)</title><rect x="993.3" y="309" width="3.7" height="15.0" fill="rgb(248,168,12)" rx="2" ry="2" />
<text  x="996.33" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (16,666,666 samples, 0.31%)</title><rect x="1026.1" y="373" width="3.7" height="15.0" fill="rgb(209,31,9)" rx="2" ry="2" />
<text  x="1029.11" y="383.5" ></text>
</g>
<g >
<title>futex_wake (33,333,332 samples, 0.62%)</title><rect x="876.8" y="229" width="7.3" height="15.0" fill="rgb(235,160,16)" rx="2" ry="2" />
<text  x="879.79" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (266,666,656 samples, 4.94%)</title><rect x="93.8" y="245" width="58.2" height="15.0" fill="rgb(242,172,12)" rx="2" ry="2" />
<text  x="96.77" y="255.5" >std::_..</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (33,333,332 samples, 0.62%)</title><rect x="235.8" y="181" width="7.3" height="15.0" fill="rgb(211,58,2)" rx="2" ry="2" />
<text  x="238.80" y="191.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::~__basic_future (16,666,666 samples, 0.31%)</title><rect x="1139.0" y="597" width="3.7" height="15.0" fill="rgb(225,81,44)" rx="2" ry="2" />
<text  x="1142.01" y="607.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (449,999,982 samples, 8.33%)</title><rect x="610.9" y="261" width="98.4" height="15.0" fill="rgb(252,83,13)" rx="2" ry="2" />
<text  x="613.93" y="271.5" >leveldb::In..</text>
</g>
<g >
<title>_IO_vsnprintf (16,666,666 samples, 0.31%)</title><rect x="1051.6" y="565" width="3.6" height="15.0" fill="rgb(218,26,47)" rx="2" ry="2" />
<text  x="1054.60" y="575.5" ></text>
</g>
<g >
<title>__libc_start_main (33,333,332 samples, 0.62%)</title><rect x="1044.3" y="581" width="7.3" height="15.0" fill="rgb(223,199,36)" rx="2" ry="2" />
<text  x="1047.32" y="591.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::swap (16,666,666 samples, 0.31%)</title><rect x="909.6" y="197" width="3.6" height="15.0" fill="rgb(211,166,13)" rx="2" ry="2" />
<text  x="912.57" y="207.5" ></text>
</g>
<g >
<title>__pthread_once_slow (16,666,666 samples, 0.31%)</title><rect x="1040.7" y="581" width="3.6" height="15.0" fill="rgb(243,214,17)" rx="2" ry="2" />
<text  x="1043.68" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::release (16,666,666 samples, 0.31%)</title><rect x="905.9" y="165" width="3.7" height="15.0" fill="rgb(229,28,29)" rx="2" ry="2" />
<text  x="908.93" y="175.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (16,666,666 samples, 0.31%)</title><rect x="738.4" y="213" width="3.6" height="15.0" fill="rgb(206,224,32)" rx="2" ry="2" />
<text  x="741.40" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::get (16,666,666 samples, 0.31%)</title><rect x="935.1" y="341" width="3.6" height="15.0" fill="rgb(217,99,51)" rx="2" ry="2" />
<text  x="938.06" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (33,333,332 samples, 0.62%)</title><rect x="235.8" y="229" width="7.3" height="15.0" fill="rgb(251,51,19)" rx="2" ry="2" />
<text  x="238.80" y="239.5" ></text>
</g>
<g >
<title>leveldb::ParsedInternalKey::ParsedInternalKey (16,666,666 samples, 0.31%)</title><rect x="82.8" y="325" width="3.7" height="15.0" fill="rgb(243,71,24)" rx="2" ry="2" />
<text  x="85.84" y="335.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::__setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; (16,666,666 samples, 0.31%)</title><rect x="1153.6" y="597" width="3.6" height="15.0" fill="rgb(241,26,50)" rx="2" ry="2" />
<text  x="1156.58" y="607.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (16,666,666 samples, 0.31%)</title><rect x="50.1" y="293" width="3.6" height="15.0" fill="rgb(218,119,34)" rx="2" ry="2" />
<text  x="53.06" y="303.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::InsertInto (1,283,333,282 samples, 23.77%)</title><rect x="483.5" y="389" width="280.4" height="15.0" fill="rgb(207,52,20)" rx="2" ry="2" />
<text  x="486.46" y="399.5" >leveldb::WriteBatchInternal::InsertInto</text>
</g>
<g >
<title>_raw_spin_lock (16,666,666 samples, 0.31%)</title><rect x="166.6" y="101" width="3.6" height="15.0" fill="rgb(238,5,54)" rx="2" ry="2" />
<text  x="169.60" y="111.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (33,333,332 samples, 0.62%)</title><rect x="800.3" y="325" width="7.3" height="15.0" fill="rgb(227,112,30)" rx="2" ry="2" />
<text  x="803.31" y="335.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (16,666,666 samples, 0.31%)</title><rect x="1066.2" y="581" width="3.6" height="15.0" fill="rgb(251,175,18)" rx="2" ry="2" />
<text  x="1069.17" y="591.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::KeyBuffer::Set (16,666,666 samples, 0.31%)</title><rect x="1051.6" y="597" width="3.6" height="15.0" fill="rgb(241,190,37)" rx="2" ry="2" />
<text  x="1054.60" y="607.5" ></text>
</g>
<g >
<title>ext4_readpages (33,333,332 samples, 0.62%)</title><rect x="1124.4" y="389" width="7.3" height="15.0" fill="rgb(210,181,15)" rx="2" ry="2" />
<text  x="1127.44" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get (16,666,666 samples, 0.31%)</title><rect x="1186.4" y="597" width="3.6" height="15.0" fill="rgb(229,20,37)" rx="2" ry="2" />
<text  x="1189.36" y="607.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::_M_head (16,666,666 samples, 0.31%)</title><rect x="997.0" y="309" width="3.6" height="15.0" fill="rgb(224,174,33)" rx="2" ry="2" />
<text  x="999.98" y="319.5" ></text>
</g>
<g >
<title>_IO_new_file_underflow (16,666,666 samples, 0.31%)</title><rect x="1048.0" y="437" width="3.6" height="15.0" fill="rgb(212,115,9)" rx="2" ry="2" />
<text  x="1050.96" y="447.5" ></text>
</g>
<g >
<title>_itoa_word (16,666,666 samples, 0.31%)</title><rect x="436.1" y="357" width="3.7" height="15.0" fill="rgb(247,196,13)" rx="2" ry="2" />
<text  x="439.11" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (16,666,666 samples, 0.31%)</title><rect x="366.9" y="309" width="3.7" height="15.0" fill="rgb(205,121,5)" rx="2" ry="2" />
<text  x="369.91" y="319.5" ></text>
</g>
<g >
<title>__generic_file_write_iter (16,666,666 samples, 0.31%)</title><rect x="334.1" y="117" width="3.7" height="15.0" fill="rgb(211,51,18)" rx="2" ry="2" />
<text  x="337.14" y="127.5" ></text>
</g>
<g >
<title>__GI___libc_write (16,666,666 samples, 0.31%)</title><rect x="334.1" y="245" width="3.7" height="15.0" fill="rgb(228,188,38)" rx="2" ry="2" />
<text  x="337.14" y="255.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (4,699,999,812 samples, 87.04%)</title><rect x="10.0" y="517" width="1027.0" height="15.0" fill="rgb(239,16,28)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (66,666,664 samples, 1.23%)</title><rect x="381.5" y="261" width="14.5" height="15.0" fill="rgb(218,113,54)" rx="2" ry="2" />
<text  x="384.48" y="271.5" ></text>
</g>
<g >
<title>leveldb::PutVarint32 (16,666,666 samples, 0.31%)</title><rect x="39.1" y="309" width="3.7" height="15.0" fill="rgb(236,73,46)" rx="2" ry="2" />
<text  x="42.14" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (16,666,666 samples, 0.31%)</title><rect x="334.1" y="213" width="3.7" height="15.0" fill="rgb(228,52,7)" rx="2" ry="2" />
<text  x="337.14" y="223.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (16,666,666 samples, 0.31%)</title><rect x="1062.5" y="581" width="3.7" height="15.0" fill="rgb(242,178,32)" rx="2" ry="2" />
<text  x="1065.53" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (16,666,666 samples, 0.31%)</title><rect x="337.8" y="309" width="3.6" height="15.0" fill="rgb(208,198,45)" rx="2" ry="2" />
<text  x="340.78" y="319.5" ></text>
</g>
<g >
<title>__handle_mm_fault (16,666,666 samples, 0.31%)</title><rect x="1135.4" y="517" width="3.6" height="15.0" fill="rgb(222,168,19)" rx="2" ry="2" />
<text  x="1138.37" y="527.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (16,666,666 samples, 0.31%)</title><rect x="301.4" y="229" width="3.6" height="15.0" fill="rgb(221,136,9)" rx="2" ry="2" />
<text  x="304.36" y="239.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (16,666,666 samples, 0.31%)</title><rect x="887.7" y="101" width="3.7" height="15.0" fill="rgb(223,210,37)" rx="2" ry="2" />
<text  x="890.72" y="111.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;&gt; (133,333,328 samples, 2.47%)</title><rect x="967.8" y="373" width="29.2" height="15.0" fill="rgb(233,20,25)" rx="2" ry="2" />
<text  x="970.84" y="383.5" >st..</text>
</g>
<g >
<title>seq_printf (16,666,666 samples, 0.31%)</title><rect x="1048.0" y="261" width="3.6" height="15.0" fill="rgb(217,134,3)" rx="2" ry="2" />
<text  x="1050.96" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (16,666,666 samples, 0.31%)</title><rect x="155.7" y="245" width="3.6" height="15.0" fill="rgb(240,205,3)" rx="2" ry="2" />
<text  x="158.68" y="255.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (16,666,666 samples, 0.31%)</title><rect x="1069.8" y="581" width="3.7" height="15.0" fill="rgb(246,176,52)" rx="2" ry="2" />
<text  x="1072.81" y="591.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (16,666,666 samples, 0.31%)</title><rect x="1175.4" y="597" width="3.7" height="15.0" fill="rgb(226,65,33)" rx="2" ry="2" />
<text  x="1178.43" y="607.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (4,699,999,812 samples, 87.04%)</title><rect x="10.0" y="533" width="1027.0" height="15.0" fill="rgb(238,127,0)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::RemoveFile (16,666,666 samples, 0.31%)</title><rect x="1044.3" y="517" width="3.7" height="15.0" fill="rgb(231,134,5)" rx="2" ry="2" />
<text  x="1047.32" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get (16,666,666 samples, 0.31%)</title><rect x="905.9" y="149" width="3.7" height="15.0" fill="rgb(216,130,11)" rx="2" ry="2" />
<text  x="908.93" y="159.5" ></text>
</g>
<g >
<title>leveldb::PutVarint32 (16,666,666 samples, 0.31%)</title><rect x="1026.1" y="389" width="3.7" height="15.0" fill="rgb(213,45,27)" rx="2" ry="2" />
<text  x="1029.11" y="399.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::_M_head (16,666,666 samples, 0.31%)</title><rect x="1157.2" y="581" width="3.7" height="15.0" fill="rgb(205,116,19)" rx="2" ry="2" />
<text  x="1160.22" y="591.5" ></text>
</g>
<g >
<title>__do_page_fault (33,333,332 samples, 0.62%)</title><rect x="323.2" y="133" width="7.3" height="15.0" fill="rgb(212,67,30)" rx="2" ry="2" />
<text  x="326.21" y="143.5" ></text>
</g>
<g >
<title>std::future&lt;leveldb::Status&gt;::future (33,333,332 samples, 0.62%)</title><rect x="956.9" y="389" width="7.3" height="15.0" fill="rgb(249,9,21)" rx="2" ry="2" />
<text  x="959.91" y="399.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;std::__future_base::_State_baseV2,  (33,333,332 samples, 0.62%)</title><rect x="956.9" y="357" width="7.3" height="15.0" fill="rgb(240,104,18)" rx="2" ry="2" />
<text  x="959.91" y="367.5" ></text>
</g>
<g >
<title>ext4_invalidatepage (16,666,666 samples, 0.31%)</title><rect x="1044.3" y="309" width="3.7" height="15.0" fill="rgb(244,1,10)" rx="2" ry="2" />
<text  x="1047.32" y="319.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Node (16,666,666 samples, 0.31%)</title><rect x="742.0" y="293" width="3.7" height="15.0" fill="rgb(230,161,46)" rx="2" ry="2" />
<text  x="745.04" y="303.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;char*, unsigned long&gt; (33,333,332 samples, 0.62%)</title><rect x="323.2" y="261" width="7.3" height="15.0" fill="rgb(251,86,45)" rx="2" ry="2" />
<text  x="326.21" y="271.5" ></text>
</g>
<g >
<title>start_thread (4,699,999,812 samples, 87.04%)</title><rect x="10.0" y="581" width="1027.0" height="15.0" fill="rgb(238,202,26)" rx="2" ry="2" />
<text  x="13.00" y="591.5" >start_thread</text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (33,333,332 samples, 0.62%)</title><rect x="753.0" y="357" width="7.2" height="15.0" fill="rgb(246,100,50)" rx="2" ry="2" />
<text  x="755.96" y="367.5" ></text>
</g>
<g >
<title>ksys_write (16,666,666 samples, 0.31%)</title><rect x="334.1" y="181" width="3.7" height="15.0" fill="rgb(224,37,29)" rx="2" ry="2" />
<text  x="337.14" y="191.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;std::__future_base::_State_baseV2,  (16,666,666 samples, 0.31%)</title><rect x="938.7" y="373" width="3.6" height="15.0" fill="rgb(250,45,50)" rx="2" ry="2" />
<text  x="941.70" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (83,333,330 samples, 1.54%)</title><rect x="133.8" y="213" width="18.2" height="15.0" fill="rgb(219,155,52)" rx="2" ry="2" />
<text  x="136.83" y="223.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (16,666,666 samples, 0.31%)</title><rect x="403.3" y="325" width="3.7" height="15.0" fill="rgb(209,139,48)" rx="2" ry="2" />
<text  x="406.33" y="335.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (16,666,666 samples, 0.31%)</title><rect x="1164.5" y="581" width="3.6" height="15.0" fill="rgb(211,45,52)" rx="2" ry="2" />
<text  x="1167.51" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (16,666,666 samples, 0.31%)</title><rect x="243.1" y="261" width="3.6" height="15.0" fill="rgb(242,20,32)" rx="2" ry="2" />
<text  x="246.09" y="271.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::set_value (416,666,650 samples, 7.72%)</title><rect x="836.7" y="389" width="91.1" height="15.0" fill="rgb(227,31,50)" rx="2" ry="2" />
<text  x="839.73" y="399.5" >std::promi..</text>
</g>
<g >
<title>seq_read (16,666,666 samples, 0.31%)</title><rect x="1048.0" y="293" width="3.6" height="15.0" fill="rgb(216,64,6)" rx="2" ry="2" />
<text  x="1050.96" y="303.5" ></text>
</g>
<g >
<title>leveldb::WriteBatch::Clear (33,333,332 samples, 0.62%)</title><rect x="1015.2" y="421" width="7.3" height="15.0" fill="rgb(209,20,25)" rx="2" ry="2" />
<text  x="1018.19" y="431.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadNodeEntryPoint (1,816,666,594 samples, 33.64%)</title><rect x="10.0" y="469" width="397.0" height="15.0" fill="rgb(254,186,13)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >leveldb::(anonymous namespace)::PosixEnv::BackgroundTh..</text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (16,666,666 samples, 0.31%)</title><rect x="887.7" y="117" width="3.7" height="15.0" fill="rgb(244,201,28)" rx="2" ry="2" />
<text  x="890.72" y="127.5" ></text>
</g>
<g >
<title>operator new[] (16,666,666 samples, 0.31%)</title><rect x="989.7" y="261" width="3.6" height="15.0" fill="rgb(220,95,8)" rx="2" ry="2" />
<text  x="992.69" y="271.5" ></text>
</g>
<g >
<title>snappy::internal::WorkingMemory::GetHashTable (16,666,666 samples, 0.31%)</title><rect x="305.0" y="245" width="3.6" height="15.0" fill="rgb(229,98,4)" rx="2" ry="2" />
<text  x="308.00" y="255.5" ></text>
</g>
<g >
<title>ondemand_readahead (16,666,666 samples, 0.31%)</title><rect x="1135.4" y="437" width="3.6" height="15.0" fill="rgb(221,226,23)" rx="2" ry="2" />
<text  x="1138.37" y="447.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (33,333,332 samples, 0.62%)</title><rect x="272.2" y="229" width="7.3" height="15.0" fill="rgb(227,81,41)" rx="2" ry="2" />
<text  x="275.22" y="239.5" ></text>
</g>
<g >
<title>do_page_fault (33,333,332 samples, 0.62%)</title><rect x="112.0" y="213" width="7.3" height="15.0" fill="rgb(224,68,13)" rx="2" ry="2" />
<text  x="114.98" y="223.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (16,666,666 samples, 0.31%)</title><rect x="935.1" y="325" width="3.6" height="15.0" fill="rgb(215,206,50)" rx="2" ry="2" />
<text  x="938.06" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add (16,666,666 samples, 0.31%)</title><rect x="949.6" y="293" width="3.7" height="15.0" fill="rgb(210,51,19)" rx="2" ry="2" />
<text  x="952.63" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (16,666,666 samples, 0.31%)</title><rect x="173.9" y="197" width="3.6" height="15.0" fill="rgb(211,212,6)" rx="2" ry="2" />
<text  x="176.89" y="207.5" ></text>
</g>
<g >
<title>_IO_fgets (16,666,666 samples, 0.31%)</title><rect x="1048.0" y="501" width="3.6" height="15.0" fill="rgb(219,80,27)" rx="2" ry="2" />
<text  x="1050.96" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (16,666,666 samples, 0.31%)</title><rect x="192.1" y="245" width="3.6" height="15.0" fill="rgb(222,167,0)" rx="2" ry="2" />
<text  x="195.10" y="255.5" ></text>
</g>
<g >
<title>page_cache_async_readahead (16,666,666 samples, 0.31%)</title><rect x="1135.4" y="453" width="3.6" height="15.0" fill="rgb(215,169,30)" rx="2" ry="2" />
<text  x="1138.37" y="463.5" ></text>
</g>
<g >
<title>operator new[] (16,666,666 samples, 0.31%)</title><rect x="738.4" y="245" width="3.6" height="15.0" fill="rgb(207,13,52)" rx="2" ry="2" />
<text  x="741.40" y="255.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (199,999,992 samples, 3.70%)</title><rect x="665.6" y="245" width="43.7" height="15.0" fill="rgb(218,44,50)" rx="2" ry="2" />
<text  x="668.56" y="255.5" >leve..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (16,666,666 samples, 0.31%)</title><rect x="170.2" y="197" width="3.7" height="15.0" fill="rgb(221,16,53)" rx="2" ry="2" />
<text  x="173.25" y="207.5" ></text>
</g>
<g >
<title>pmem_memcpy (16,666,666 samples, 0.31%)</title><rect x="811.2" y="357" width="3.7" height="15.0" fill="rgb(235,93,5)" rx="2" ry="2" />
<text  x="814.23" y="367.5" ></text>
</g>
<g >
<title>leveldb::PutLengthPrefixedSlice (49,999,998 samples, 0.93%)</title><rect x="1026.1" y="405" width="10.9" height="15.0" fill="rgb(226,107,17)" rx="2" ry="2" />
<text  x="1029.11" y="415.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_deleter (16,666,666 samples, 0.31%)</title><rect x="1164.5" y="597" width="3.6" height="15.0" fill="rgb(206,46,40)" rx="2" ry="2" />
<text  x="1167.51" y="607.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (16,666,666 samples, 0.31%)</title><rect x="1120.8" y="373" width="3.6" height="15.0" fill="rgb(238,212,44)" rx="2" ry="2" />
<text  x="1123.80" y="383.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::key (16,666,666 samples, 0.31%)</title><rect x="24.6" y="325" width="3.6" height="15.0" fill="rgb(250,166,19)" rx="2" ry="2" />
<text  x="27.57" y="335.5" ></text>
</g>
<g >
<title>leveldb::Arena::AllocateNewBlock (16,666,666 samples, 0.31%)</title><rect x="738.4" y="261" width="3.6" height="15.0" fill="rgb(231,146,9)" rx="2" ry="2" />
<text  x="741.40" y="271.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Value (133,333,328 samples, 2.47%)</title><rect x="250.4" y="277" width="29.1" height="15.0" fill="rgb(251,74,45)" rx="2" ry="2" />
<text  x="253.37" y="287.5" >le..</text>
</g>
<g >
<title>tc_deletearray_nothrow (16,666,666 samples, 0.31%)</title><rect x="330.5" y="309" width="3.6" height="15.0" fill="rgb(244,78,51)" rx="2" ry="2" />
<text  x="333.49" y="319.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (16,666,666 samples, 0.31%)</title><rect x="1062.5" y="597" width="3.7" height="15.0" fill="rgb(224,216,17)" rx="2" ry="2" />
<text  x="1065.53" y="607.5" ></text>
</g>
<g >
<title>__GI___snprintf (16,666,666 samples, 0.31%)</title><rect x="1051.6" y="581" width="3.6" height="15.0" fill="rgb(232,222,15)" rx="2" ry="2" />
<text  x="1054.60" y="591.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (16,666,666 samples, 0.31%)</title><rect x="363.3" y="277" width="3.6" height="15.0" fill="rgb(254,156,7)" rx="2" ry="2" />
<text  x="366.27" y="287.5" ></text>
</g>
<g >
<title>__do_page_fault (66,666,664 samples, 1.23%)</title><rect x="1117.2" y="549" width="14.5" height="15.0" fill="rgb(212,208,18)" rx="2" ry="2" />
<text  x="1120.16" y="559.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (66,666,664 samples, 1.23%)</title><rect x="942.3" y="373" width="14.6" height="15.0" fill="rgb(233,229,19)" rx="2" ry="2" />
<text  x="945.35" y="383.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (16,666,666 samples, 0.31%)</title><rect x="334.1" y="69" width="3.7" height="15.0" fill="rgb(251,54,35)" rx="2" ry="2" />
<text  x="337.14" y="79.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::TableBuilder (33,333,332 samples, 0.62%)</title><rect x="323.2" y="341" width="7.3" height="15.0" fill="rgb(248,160,12)" rx="2" ry="2" />
<text  x="326.21" y="351.5" ></text>
</g>
<g >
<title>leveldb::Random::OneIn (16,666,666 samples, 0.31%)</title><rect x="745.7" y="293" width="3.6" height="15.0" fill="rgb(253,45,52)" rx="2" ry="2" />
<text  x="748.68" y="303.5" ></text>
</g>
<g >
<title>_raw_spin_lock (16,666,666 samples, 0.31%)</title><rect x="439.8" y="293" width="3.6" height="15.0" fill="rgb(223,27,0)" rx="2" ry="2" />
<text  x="442.75" y="303.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (66,666,664 samples, 1.23%)</title><rect x="971.5" y="309" width="14.5" height="15.0" fill="rgb(228,71,10)" rx="2" ry="2" />
<text  x="974.48" y="319.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (16,666,666 samples, 0.31%)</title><rect x="82.8" y="309" width="3.7" height="15.0" fill="rgb(225,46,21)" rx="2" ry="2" />
<text  x="85.84" y="319.5" ></text>
</g>
<g >
<title>leveldb::port::Snappy_Compress (133,333,328 samples, 2.47%)</title><rect x="279.5" y="293" width="29.1" height="15.0" fill="rgb(251,79,32)" rx="2" ry="2" />
<text  x="282.51" y="303.5" >le..</text>
</g>
<g >
<title>__x64_sys_write (16,666,666 samples, 0.31%)</title><rect x="334.1" y="197" width="3.7" height="15.0" fill="rgb(226,19,48)" rx="2" ry="2" />
<text  x="337.14" y="207.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::empty (16,666,666 samples, 0.31%)</title><rect x="1055.2" y="581" width="3.7" height="15.0" fill="rgb(252,74,46)" rx="2" ry="2" />
<text  x="1058.25" y="591.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (1,133,333,288 samples, 20.99%)</title><rect x="501.7" y="325" width="247.6" height="15.0" fill="rgb(248,218,8)" rx="2" ry="2" />
<text  x="504.67" y="335.5" >leveldb::SkipList&lt;char const*, l..</text>
</g>
<g >
<title>leveldb::Slice::compare (16,666,666 samples, 0.31%)</title><rect x="71.9" y="293" width="3.7" height="15.0" fill="rgb(233,153,32)" rx="2" ry="2" />
<text  x="74.91" y="303.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (33,333,332 samples, 0.62%)</title><rect x="388.8" y="245" width="7.2" height="15.0" fill="rgb(237,76,22)" rx="2" ry="2" />
<text  x="391.77" y="255.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_deleter (16,666,666 samples, 0.31%)</title><rect x="1160.9" y="597" width="3.6" height="15.0" fill="rgb(217,130,5)" rx="2" ry="2" />
<text  x="1163.86" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (149,999,994 samples, 2.78%)</title><rect x="337.8" y="325" width="32.8" height="15.0" fill="rgb(244,10,2)" rx="2" ry="2" />
<text  x="340.78" y="335.5" >st..</text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr (16,666,666 samples, 0.31%)</title><rect x="891.4" y="165" width="3.6" height="15.0" fill="rgb(209,128,17)" rx="2" ry="2" />
<text  x="894.36" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (16,666,666 samples, 0.31%)</title><rect x="1142.7" y="581" width="3.6" height="15.0" fill="rgb(239,20,39)" rx="2" ry="2" />
<text  x="1145.65" y="591.5" ></text>
</g>
<g >
<title>leveldb::BuildTable (1,483,333,274 samples, 27.47%)</title><rect x="10.0" y="357" width="324.1" height="15.0" fill="rgb(238,138,38)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >leveldb::BuildTable</text>
</g>
<g >
<title>__page_cache_alloc (16,666,666 samples, 0.31%)</title><rect x="1120.8" y="405" width="3.6" height="15.0" fill="rgb(235,197,2)" rx="2" ry="2" />
<text  x="1123.80" y="415.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (16,666,666 samples, 0.31%)</title><rect x="1182.7" y="581" width="3.7" height="15.0" fill="rgb(228,144,2)" rx="2" ry="2" />
<text  x="1185.72" y="591.5" ></text>
</g>
<g >
<title>leveldb::Status::Status (16,666,666 samples, 0.31%)</title><rect x="774.8" y="341" width="3.7" height="15.0" fill="rgb(235,166,31)" rx="2" ry="2" />
<text  x="777.81" y="351.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::MakeRoomForWrite (16,666,666 samples, 0.31%)</title><rect x="1055.2" y="597" width="3.7" height="15.0" fill="rgb(244,207,45)" rx="2" ry="2" />
<text  x="1058.25" y="607.5" ></text>
</g>
<g >
<title>std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (33,333,332 samples, 0.62%)</title><rect x="986.0" y="309" width="7.3" height="15.0" fill="rgb(246,110,27)" rx="2" ry="2" />
<text  x="989.05" y="319.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (149,999,994 samples, 2.78%)</title><rect x="778.5" y="357" width="32.7" height="15.0" fill="rgb(253,95,50)" rx="2" ry="2" />
<text  x="781.46" y="367.5" >le..</text>
</g>
<g >
<title>leveldb::WriteBatchInternal::Sequence (16,666,666 samples, 0.31%)</title><rect x="760.2" y="373" width="3.7" height="15.0" fill="rgb(246,126,40)" rx="2" ry="2" />
<text  x="763.25" y="383.5" ></text>
</g>
<g >
<title>std::__addressof&lt;leveldb::Status const&gt; (16,666,666 samples, 0.31%)</title><rect x="1153.6" y="581" width="3.6" height="15.0" fill="rgb(234,214,39)" rx="2" ry="2" />
<text  x="1156.58" y="591.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::KeyBuffer::Set (149,999,994 samples, 2.78%)</title><rect x="407.0" y="421" width="32.8" height="15.0" fill="rgb(237,214,8)" rx="2" ry="2" />
<text  x="409.98" y="431.5" >le..</text>
</g>
<g >
<title>__do_page_fault (16,666,666 samples, 0.31%)</title><rect x="439.8" y="325" width="3.6" height="15.0" fill="rgb(239,157,20)" rx="2" ry="2" />
<text  x="442.75" y="335.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (16,666,666 samples, 0.31%)</title><rect x="1171.8" y="597" width="3.6" height="15.0" fill="rgb(212,55,49)" rx="2" ry="2" />
<text  x="1174.79" y="607.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::SearchFreeAndLargeLists (16,666,666 samples, 0.31%)</title><rect x="738.4" y="149" width="3.6" height="15.0" fill="rgb(205,109,50)" rx="2" ry="2" />
<text  x="741.40" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (66,666,664 samples, 1.23%)</title><rect x="119.3" y="229" width="14.5" height="15.0" fill="rgb(216,171,24)" rx="2" ry="2" />
<text  x="122.26" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (33,333,332 samples, 0.62%)</title><rect x="235.8" y="245" width="7.3" height="15.0" fill="rgb(205,92,31)" rx="2" ry="2" />
<text  x="238.80" y="255.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (83,333,330 samples, 1.54%)</title><rect x="64.6" y="325" width="18.2" height="15.0" fill="rgb(218,158,38)" rx="2" ry="2" />
<text  x="67.63" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (16,666,666 samples, 0.31%)</title><rect x="166.6" y="213" width="3.6" height="15.0" fill="rgb(243,199,8)" rx="2" ry="2" />
<text  x="169.60" y="223.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::Write (2,616,666,562 samples, 48.46%)</title><rect x="443.4" y="421" width="571.8" height="15.0" fill="rgb(205,47,9)" rx="2" ry="2" />
<text  x="446.40" y="431.5" >leveldb::DBImpl::Write</text>
</g>
<g >
<title>__memcmp_avx2_movbe (16,666,666 samples, 0.31%)</title><rect x="71.9" y="277" width="3.7" height="15.0" fill="rgb(237,167,17)" rx="2" ry="2" />
<text  x="74.91" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (33,333,332 samples, 0.62%)</title><rect x="370.6" y="277" width="7.2" height="15.0" fill="rgb(217,5,39)" rx="2" ry="2" />
<text  x="373.56" y="287.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (33,333,332 samples, 0.62%)</title><rect x="272.2" y="245" width="7.3" height="15.0" fill="rgb(247,74,0)" rx="2" ry="2" />
<text  x="275.22" y="255.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (16,666,666 samples, 0.31%)</title><rect x="363.3" y="261" width="3.6" height="15.0" fill="rgb(246,35,7)" rx="2" ry="2" />
<text  x="366.27" y="271.5" ></text>
</g>
<g >
<title>alloc_pages_current (16,666,666 samples, 0.31%)</title><rect x="1120.8" y="389" width="3.6" height="15.0" fill="rgb(236,191,31)" rx="2" ry="2" />
<text  x="1123.80" y="399.5" ></text>
</g>
<g >
<title>page_fault (33,333,332 samples, 0.62%)</title><rect x="323.2" y="165" width="7.3" height="15.0" fill="rgb(234,135,10)" rx="2" ry="2" />
<text  x="326.21" y="175.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl&lt;std::__future_base::_Result_base*&amp;, std::__future_base::_Result_base::_Deleter, void&gt; (16,666,666 samples, 0.31%)</title><rect x="898.6" y="133" width="3.7" height="15.0" fill="rgb(249,5,21)" rx="2" ry="2" />
<text  x="901.64" y="143.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (16,666,666 samples, 0.31%)</title><rect x="949.6" y="325" width="3.7" height="15.0" fill="rgb(230,24,14)" rx="2" ry="2" />
<text  x="952.63" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (33,333,332 samples, 0.62%)</title><rect x="235.8" y="165" width="7.3" height="15.0" fill="rgb(211,63,31)" rx="2" ry="2" />
<text  x="238.80" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (33,333,332 samples, 0.62%)</title><rect x="370.6" y="293" width="7.2" height="15.0" fill="rgb(253,7,34)" rx="2" ry="2" />
<text  x="373.56" y="303.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed64 (16,666,666 samples, 0.31%)</title><rect x="760.2" y="357" width="3.7" height="15.0" fill="rgb(224,157,15)" rx="2" ry="2" />
<text  x="763.25" y="367.5" ></text>
</g>
<g >
<title>truncate_cleanup_page (16,666,666 samples, 0.31%)</title><rect x="1044.3" y="341" width="3.7" height="15.0" fill="rgb(227,79,50)" rx="2" ry="2" />
<text  x="1047.32" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (33,333,332 samples, 0.62%)</title><rect x="235.8" y="197" width="7.3" height="15.0" fill="rgb(205,172,6)" rx="2" ry="2" />
<text  x="238.80" y="207.5" ></text>
</g>
<g >
<title>__unlink (16,666,666 samples, 0.31%)</title><rect x="1044.3" y="501" width="3.7" height="15.0" fill="rgb(229,15,8)" rx="2" ry="2" />
<text  x="1047.32" y="511.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::Benchmark (16,666,666 samples, 0.31%)</title><rect x="1044.3" y="549" width="3.7" height="15.0" fill="rgb(230,23,46)" rx="2" ry="2" />
<text  x="1047.32" y="559.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (149,999,994 samples, 2.78%)</title><rect x="887.7" y="309" width="32.8" height="15.0" fill="rgb(243,7,45)" rx="2" ry="2" />
<text  x="890.72" y="319.5" >st..</text>
</g>
<g >
<title>__GI__IO_getline (16,666,666 samples, 0.31%)</title><rect x="1048.0" y="485" width="3.6" height="15.0" fill="rgb(252,207,34)" rx="2" ry="2" />
<text  x="1050.96" y="495.5" ></text>
</g>
<g >
<title>__GI__IO_padn (49,999,998 samples, 0.93%)</title><rect x="421.5" y="357" width="11.0" height="15.0" fill="rgb(254,150,48)" rx="2" ry="2" />
<text  x="424.54" y="367.5" ></text>
</g>
<g >
<title>__ext4_journal_stop (16,666,666 samples, 0.31%)</title><rect x="334.1" y="37" width="3.7" height="15.0" fill="rgb(210,35,19)" rx="2" ry="2" />
<text  x="337.14" y="47.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (33,333,332 samples, 0.62%)</title><rect x="57.3" y="309" width="7.3" height="15.0" fill="rgb(230,124,30)" rx="2" ry="2" />
<text  x="60.35" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (66,666,664 samples, 1.23%)</title><rect x="381.5" y="277" width="14.5" height="15.0" fill="rgb(211,36,49)" rx="2" ry="2" />
<text  x="384.48" y="287.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (99,999,996 samples, 1.85%)</title><rect x="887.7" y="213" width="21.9" height="15.0" fill="rgb(243,163,8)" rx="2" ry="2" />
<text  x="890.72" y="223.5" >s..</text>
</g>
<g >
<title>ext4_mpage_readpages (16,666,666 samples, 0.31%)</title><rect x="1135.4" y="373" width="3.6" height="15.0" fill="rgb(253,177,7)" rx="2" ry="2" />
<text  x="1138.37" y="383.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (16,666,666 samples, 0.31%)</title><rect x="1157.2" y="597" width="3.7" height="15.0" fill="rgb(248,134,44)" rx="2" ry="2" />
<text  x="1160.22" y="607.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BGWork (1,816,666,594 samples, 33.64%)</title><rect x="10.0" y="437" width="397.0" height="15.0" fill="rgb(233,75,17)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >leveldb::DBImpl::BGWork</text>
</g>
<g >
<title>std::_Deque_iterator&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt;::operator* (16,666,666 samples, 0.31%)</title><rect x="825.8" y="373" width="3.6" height="15.0" fill="rgb(228,209,37)" rx="2" ry="2" />
<text  x="828.80" y="383.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32 (33,333,332 samples, 0.62%)</title><rect x="753.0" y="341" width="7.2" height="15.0" fill="rgb(211,27,35)" rx="2" ry="2" />
<text  x="755.96" y="351.5" ></text>
</g>
<g >
<title>__gthread_once (16,666,666 samples, 0.31%)</title><rect x="1040.7" y="597" width="3.6" height="15.0" fill="rgb(212,197,12)" rx="2" ry="2" />
<text  x="1043.68" y="607.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (33,333,332 samples, 0.62%)</title><rect x="946.0" y="341" width="7.3" height="15.0" fill="rgb(240,180,32)" rx="2" ry="2" />
<text  x="948.99" y="351.5" ></text>
</g>
<g >
<title>do_page_fault (66,666,664 samples, 1.23%)</title><rect x="1117.2" y="565" width="14.5" height="15.0" fill="rgb(230,185,28)" rx="2" ry="2" />
<text  x="1120.16" y="575.5" ></text>
</g>
<g >
<title>do_unlinkat (16,666,666 samples, 0.31%)</title><rect x="1044.3" y="437" width="3.7" height="15.0" fill="rgb(246,186,12)" rx="2" ry="2" />
<text  x="1047.32" y="447.5" ></text>
</g>
<g >
<title>_IO_vfprintf_internal (133,333,328 samples, 2.47%)</title><rect x="410.6" y="373" width="29.2" height="15.0" fill="rgb(207,131,35)" rx="2" ry="2" />
<text  x="413.62" y="383.5" >_I..</text>
</g>
<g >
<title>__vfs_write (16,666,666 samples, 0.31%)</title><rect x="334.1" y="149" width="3.7" height="15.0" fill="rgb(234,16,6)" rx="2" ry="2" />
<text  x="337.14" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (16,666,666 samples, 0.31%)</title><rect x="1037.0" y="597" width="3.7" height="15.0" fill="rgb(205,151,14)" rx="2" ry="2" />
<text  x="1040.04" y="607.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (799,999,968 samples, 14.81%)</title><rect x="534.4" y="293" width="174.9" height="15.0" fill="rgb(235,137,53)" rx="2" ry="2" />
<text  x="537.44" y="303.5" >leveldb::SkipList&lt;char..</text>
</g>
<g >
<title>__GI___libc_read (16,666,666 samples, 0.31%)</title><rect x="1048.0" y="421" width="3.6" height="15.0" fill="rgb(227,208,16)" rx="2" ry="2" />
<text  x="1050.96" y="431.5" ></text>
</g>
<g >
<title>__do_page_cache_readahead (49,999,998 samples, 0.93%)</title><rect x="1120.8" y="421" width="10.9" height="15.0" fill="rgb(238,4,18)" rx="2" ry="2" />
<text  x="1123.80" y="431.5" ></text>
</g>
<g >
<title>leveldb::VersionSet::SetLastSequence (16,666,666 samples, 0.31%)</title><rect x="479.8" y="389" width="3.7" height="15.0" fill="rgb(252,111,9)" rx="2" ry="2" />
<text  x="482.81" y="399.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (133,333,328 samples, 2.47%)</title><rect x="967.8" y="341" width="29.2" height="15.0" fill="rgb(236,9,17)" rx="2" ry="2" />
<text  x="970.84" y="351.5" >st..</text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::push_back (16,666,666 samples, 0.31%)</title><rect x="246.7" y="277" width="3.7" height="15.0" fill="rgb(250,138,50)" rx="2" ry="2" />
<text  x="249.73" y="287.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (633,333,308 samples, 11.73%)</title><rect x="90.1" y="309" width="138.4" height="15.0" fill="rgb(209,5,34)" rx="2" ry="2" />
<text  x="93.12" y="319.5" >leveldb::MemHashT..</text>
</g>
<g >
<title>iput (16,666,666 samples, 0.31%)</title><rect x="1044.3" y="421" width="3.7" height="15.0" fill="rgb(225,223,50)" rx="2" ry="2" />
<text  x="1047.32" y="431.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (149,999,994 samples, 2.78%)</title><rect x="887.7" y="293" width="32.8" height="15.0" fill="rgb(243,81,21)" rx="2" ry="2" />
<text  x="890.72" y="303.5" >st..</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl (16,666,666 samples, 0.31%)</title><rect x="997.0" y="373" width="3.6" height="15.0" fill="rgb(207,157,54)" rx="2" ry="2" />
<text  x="999.98" y="383.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;::tuple (16,666,666 samples, 0.31%)</title><rect x="221.2" y="213" width="3.7" height="15.0" fill="rgb(229,96,14)" rx="2" ry="2" />
<text  x="224.23" y="223.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt;::operator (33,333,332 samples, 0.62%)</title><rect x="887.7" y="181" width="7.3" height="15.0" fill="rgb(208,142,17)" rx="2" ry="2" />
<text  x="890.72" y="191.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::Run (16,666,666 samples, 0.31%)</title><rect x="1048.0" y="549" width="3.6" height="15.0" fill="rgb(207,119,35)" rx="2" ry="2" />
<text  x="1050.96" y="559.5" ></text>
</g>
<g >
<title>memmove_nodrain_avx512f_clwb (16,666,666 samples, 0.31%)</title><rect x="811.2" y="341" width="3.7" height="15.0" fill="rgb(205,190,12)" rx="2" ry="2" />
<text  x="814.23" y="351.5" ></text>
</g>
<g >
<title>leveldb::log::Writer::AddRecord (199,999,992 samples, 3.70%)</title><rect x="771.2" y="389" width="43.7" height="15.0" fill="rgb(239,190,40)" rx="2" ry="2" />
<text  x="774.17" y="399.5" >leve..</text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get (16,666,666 samples, 0.31%)</title><rect x="887.7" y="149" width="3.7" height="15.0" fill="rgb(215,147,47)" rx="2" ry="2" />
<text  x="890.72" y="159.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (16,666,666 samples, 0.31%)</title><rect x="749.3" y="325" width="3.7" height="15.0" fill="rgb(212,109,1)" rx="2" ry="2" />
<text  x="752.32" y="335.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Flush (1,066,666,624 samples, 19.75%)</title><rect x="86.5" y="325" width="233.1" height="15.0" fill="rgb(240,76,38)" rx="2" ry="2" />
<text  x="89.48" y="335.5" >leveldb::TableBuilder::Flush</text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::shared_ptr&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt;&gt; (133,333,328 samples, 2.47%)</title><rect x="967.8" y="357" width="29.2" height="15.0" fill="rgb(252,154,39)" rx="2" ry="2" />
<text  x="970.84" y="367.5" >st..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (133,333,328 samples, 2.47%)</title><rect x="858.6" y="293" width="29.1" height="15.0" fill="rgb(218,128,43)" rx="2" ry="2" />
<text  x="861.58" y="303.5" >en..</text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (33,333,332 samples, 0.62%)</title><rect x="68.3" y="309" width="7.3" height="15.0" fill="rgb(218,27,51)" rx="2" ry="2" />
<text  x="71.27" y="319.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__future_base::_State_baseV2&gt;::allocator (16,666,666 samples, 0.31%)</title><rect x="971.5" y="293" width="3.6" height="15.0" fill="rgb(242,78,17)" rx="2" ry="2" />
<text  x="974.48" y="303.5" ></text>
</g>
<g >
<title>__do_page_fault (33,333,332 samples, 0.62%)</title><rect x="112.0" y="197" width="7.3" height="15.0" fill="rgb(224,152,20)" rx="2" ry="2" />
<text  x="114.98" y="207.5" ></text>
</g>
<g >
<title>__GI__IO_getline_info (16,666,666 samples, 0.31%)</title><rect x="1048.0" y="469" width="3.6" height="15.0" fill="rgb(215,103,38)" rx="2" ry="2" />
<text  x="1050.96" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (16,666,666 samples, 0.31%)</title><rect x="337.8" y="277" width="3.6" height="15.0" fill="rgb(249,27,26)" rx="2" ry="2" />
<text  x="340.78" y="287.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::tuple&lt;std::__future_base::_Result_base*&amp;, std::__future_base::_Result_base::_Deleter, true&gt; (16,666,666 samples, 0.31%)</title><rect x="898.6" y="149" width="3.7" height="15.0" fill="rgb(252,95,19)" rx="2" ry="2" />
<text  x="901.64" y="159.5" ></text>
</g>
<g >
<title>page_fault (33,333,332 samples, 0.62%)</title><rect x="308.6" y="229" width="7.3" height="15.0" fill="rgb(206,223,0)" rx="2" ry="2" />
<text  x="311.64" y="239.5" ></text>
</g>
<g >
<title>get_futex_key (16,666,666 samples, 0.31%)</title><rect x="880.4" y="213" width="3.7" height="15.0" fill="rgb(246,209,30)" rx="2" ry="2" />
<text  x="883.43" y="223.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__future_base::_Result_base::_Deleter&gt; (16,666,666 samples, 0.31%)</title><rect x="902.3" y="165" width="3.6" height="15.0" fill="rgb(234,82,52)" rx="2" ry="2" />
<text  x="905.28" y="175.5" ></text>
</g>
<g >
<title>all (5,399,999,784 samples, 100%)</title><rect x="10.0" y="629" width="1180.0" height="15.0" fill="rgb(232,17,10)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (4,699,999,812 samples, 87.04%)</title><rect x="10.0" y="485" width="1027.0" height="15.0" fill="rgb(242,128,23)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >std::__invoke_impl&lt;void, void </text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (16,666,666 samples, 0.31%)</title><rect x="935.1" y="309" width="3.6" height="15.0" fill="rgb(220,120,9)" rx="2" ry="2" />
<text  x="938.06" y="319.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::PrintEnvironment (16,666,666 samples, 0.31%)</title><rect x="1048.0" y="517" width="3.6" height="15.0" fill="rgb(235,9,51)" rx="2" ry="2" />
<text  x="1050.96" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::swap (16,666,666 samples, 0.31%)</title><rect x="909.6" y="213" width="3.6" height="15.0" fill="rgb(245,138,9)" rx="2" ry="2" />
<text  x="912.57" y="223.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (16,666,666 samples, 0.31%)</title><rect x="42.8" y="309" width="3.6" height="15.0" fill="rgb(221,92,0)" rx="2" ry="2" />
<text  x="45.78" y="319.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (16,666,666 samples, 0.31%)</title><rect x="1011.5" y="341" width="3.7" height="15.0" fill="rgb(237,9,36)" rx="2" ry="2" />
<text  x="1014.54" y="351.5" ></text>
</g>
<g >
<title>leveldb::PosixLogger::Logv (16,666,666 samples, 0.31%)</title><rect x="334.1" y="341" width="3.7" height="15.0" fill="rgb(245,173,40)" rx="2" ry="2" />
<text  x="337.14" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (83,333,330 samples, 1.54%)</title><rect x="377.8" y="309" width="18.2" height="15.0" fill="rgb(244,89,44)" rx="2" ry="2" />
<text  x="380.84" y="319.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (16,666,666 samples, 0.31%)</title><rect x="997.0" y="341" width="3.6" height="15.0" fill="rgb(234,111,15)" rx="2" ry="2" />
<text  x="999.98" y="351.5" ></text>
</g>
<g >
<title>__do_page_fault (16,666,666 samples, 0.31%)</title><rect x="166.6" y="133" width="3.6" height="15.0" fill="rgb(242,182,22)" rx="2" ry="2" />
<text  x="169.60" y="143.5" ></text>
</g>
<g >
<title>do_syscall_64 (16,666,666 samples, 0.31%)</title><rect x="1044.3" y="469" width="3.7" height="15.0" fill="rgb(232,175,18)" rx="2" ry="2" />
<text  x="1047.32" y="479.5" ></text>
</g>
<g >
<title>leveldb::DestroyDB (16,666,666 samples, 0.31%)</title><rect x="1044.3" y="533" width="3.7" height="15.0" fill="rgb(252,0,49)" rx="2" ry="2" />
<text  x="1047.32" y="543.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (116,666,662 samples, 2.16%)</title><rect x="370.6" y="357" width="25.4" height="15.0" fill="rgb(232,32,34)" rx="2" ry="2" />
<text  x="373.56" y="367.5" >l..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (116,666,662 samples, 2.16%)</title><rect x="203.0" y="261" width="25.5" height="15.0" fill="rgb(217,27,50)" rx="2" ry="2" />
<text  x="206.02" y="271.5" >s..</text>
</g>
<g >
<title>__memset_avx2_erms (33,333,332 samples, 0.62%)</title><rect x="323.2" y="181" width="7.3" height="15.0" fill="rgb(209,44,2)" rx="2" ry="2" />
<text  x="326.21" y="191.5" ></text>
</g>
<g >
<title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::__atomic_futex_unsigned (16,666,666 samples, 0.31%)</title><rect x="1149.9" y="581" width="3.7" height="15.0" fill="rgb(240,52,8)" rx="2" ry="2" />
<text  x="1152.94" y="591.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BackgroundCall (1,816,666,594 samples, 33.64%)</title><rect x="10.0" y="421" width="397.0" height="15.0" fill="rgb(238,16,14)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >leveldb::DBImpl::BackgroundCall</text>
</g>
<g >
<title>leveldb::TableBuilder::Add (1,349,999,946 samples, 25.00%)</title><rect x="28.2" y="341" width="295.0" height="15.0" fill="rgb(231,32,45)" rx="2" ry="2" />
<text  x="31.21" y="351.5" >leveldb::TableBuilder::Add</text>
</g>
<g >
<title>ext4_mpage_readpages (33,333,332 samples, 0.62%)</title><rect x="1124.4" y="373" width="7.3" height="15.0" fill="rgb(239,202,42)" rx="2" ry="2" />
<text  x="1127.44" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (16,666,666 samples, 0.31%)</title><rect x="989.7" y="277" width="3.6" height="15.0" fill="rgb(205,18,5)" rx="2" ry="2" />
<text  x="992.69" y="287.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::New (16,666,666 samples, 0.31%)</title><rect x="315.9" y="229" width="3.7" height="15.0" fill="rgb(245,56,29)" rx="2" ry="2" />
<text  x="318.93" y="239.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::Writer::~Writer (16,666,666 samples, 0.31%)</title><rect x="454.3" y="389" width="3.7" height="15.0" fill="rgb(235,190,17)" rx="2" ry="2" />
<text  x="457.32" y="399.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::_Reset::~_Reset (66,666,664 samples, 1.23%)</title><rect x="942.3" y="389" width="14.6" height="15.0" fill="rgb(226,32,18)" rx="2" ry="2" />
<text  x="945.35" y="399.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1,016,666,626 samples, 18.83%)</title><rect x="512.6" y="309" width="222.2" height="15.0" fill="rgb(218,149,23)" rx="2" ry="2" />
<text  x="515.59" y="319.5" >leveldb::SkipList&lt;char const*..</text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (33,333,332 samples, 0.62%)</title><rect x="913.2" y="213" width="7.3" height="15.0" fill="rgb(234,14,16)" rx="2" ry="2" />
<text  x="916.21" y="223.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::push_back (16,666,666 samples, 0.31%)</title><rect x="1179.1" y="597" width="3.6" height="15.0" fill="rgb(226,103,33)" rx="2" ry="2" />
<text  x="1182.07" y="607.5" ></text>
</g>
<g >
<title>leveldb::operator== (16,666,666 samples, 0.31%)</title><rect x="53.7" y="309" width="3.6" height="15.0" fill="rgb(231,204,41)" rx="2" ry="2" />
<text  x="56.70" y="319.5" ></text>
</g>
<g >
<title>leveldb::Status::Status (16,666,666 samples, 0.31%)</title><rect x="927.8" y="389" width="3.6" height="15.0" fill="rgb(243,219,22)" rx="2" ry="2" />
<text  x="930.78" y="399.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MemTableInserter::Put (1,199,999,952 samples, 22.22%)</title><rect x="490.7" y="357" width="262.3" height="15.0" fill="rgb(229,226,54)" rx="2" ry="2" />
<text  x="493.74" y="367.5" >leveldb::(anonymous namespace)::Mem..</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl&lt;std::__future_base::_Result_base::_Deleter&gt; (16,666,666 samples, 0.31%)</title><rect x="898.6" y="165" width="3.7" height="15.0" fill="rgb(248,1,24)" rx="2" ry="2" />
<text  x="901.64" y="175.5" ></text>
</g>
<g >
<title>_IO_new_file_sync (16,666,666 samples, 0.31%)</title><rect x="334.1" y="309" width="3.7" height="15.0" fill="rgb(221,56,52)" rx="2" ry="2" />
<text  x="337.14" y="319.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (49,999,998 samples, 0.93%)</title><rect x="1004.3" y="389" width="10.9" height="15.0" fill="rgb(211,134,50)" rx="2" ry="2" />
<text  x="1007.26" y="399.5" ></text>
</g>
<g >
<title>leveldb::Slice::operator[] (33,333,332 samples, 0.62%)</title><rect x="46.4" y="309" width="7.3" height="15.0" fill="rgb(228,125,10)" rx="2" ry="2" />
<text  x="49.42" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (16,666,666 samples, 0.31%)</title><rect x="199.4" y="245" width="3.6" height="15.0" fill="rgb(239,65,42)" rx="2" ry="2" />
<text  x="202.38" y="255.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_set_result (383,333,318 samples, 7.10%)</title><rect x="836.7" y="373" width="83.8" height="15.0" fill="rgb(233,52,50)" rx="2" ry="2" />
<text  x="839.73" y="383.5" >std::__fu..</text>
</g>
<g >
<title>page_cache_async_readahead (49,999,998 samples, 0.93%)</title><rect x="1120.8" y="453" width="10.9" height="15.0" fill="rgb(205,213,38)" rx="2" ry="2" />
<text  x="1123.80" y="463.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (16,666,666 samples, 0.31%)</title><rect x="217.6" y="181" width="3.6" height="15.0" fill="rgb(212,227,51)" rx="2" ry="2" />
<text  x="220.59" y="191.5" ></text>
</g>
<g >
<title>__do_fault (16,666,666 samples, 0.31%)</title><rect x="1135.4" y="501" width="3.6" height="15.0" fill="rgb(225,167,27)" rx="2" ry="2" />
<text  x="1138.37" y="511.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::DoWrite (2,883,333,218 samples, 53.40%)</title><rect x="407.0" y="437" width="630.0" height="15.0" fill="rgb(231,222,15)" rx="2" ry="2" />
<text  x="409.98" y="447.5" >leveldb::Benchmark::DoWrite</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (33,333,332 samples, 0.62%)</title><rect x="228.5" y="277" width="7.3" height="15.0" fill="rgb(224,211,15)" rx="2" ry="2" />
<text  x="231.52" y="287.5" ></text>
</g>
<g >
<title>flush_clwb_nolog (16,666,666 samples, 0.31%)</title><rect x="1113.5" y="581" width="3.7" height="15.0" fill="rgb(221,67,31)" rx="2" ry="2" />
<text  x="1116.52" y="591.5" ></text>
</g>
<g >
<title>ondemand_readahead (49,999,998 samples, 0.93%)</title><rect x="1120.8" y="437" width="10.9" height="15.0" fill="rgb(238,127,2)" rx="2" ry="2" />
<text  x="1123.80" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned int&gt; &gt;::construct&lt;unsigned int, unsigned int&gt; (16,666,666 samples, 0.31%)</title><rect x="246.7" y="245" width="3.7" height="15.0" fill="rgb(205,194,52)" rx="2" ry="2" />
<text  x="249.73" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::resize (33,333,332 samples, 0.62%)</title><rect x="323.2" y="309" width="7.3" height="15.0" fill="rgb(253,107,51)" rx="2" ry="2" />
<text  x="326.21" y="319.5" ></text>
</g>
<g >
<title>__GI__IO_fflush (16,666,666 samples, 0.31%)</title><rect x="334.1" y="325" width="3.7" height="15.0" fill="rgb(232,205,9)" rx="2" ry="2" />
<text  x="337.14" y="335.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (49,999,998 samples, 0.93%)</title><rect x="683.8" y="229" width="10.9" height="15.0" fill="rgb(239,85,6)" rx="2" ry="2" />
<text  x="686.77" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (33,333,332 samples, 0.62%)</title><rect x="235.8" y="261" width="7.3" height="15.0" fill="rgb(213,79,21)" rx="2" ry="2" />
<text  x="238.80" y="271.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (16,666,666 samples, 0.31%)</title><rect x="363.3" y="293" width="3.6" height="15.0" fill="rgb(238,179,10)" rx="2" ry="2" />
<text  x="366.27" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt;::_M_next (66,666,664 samples, 1.23%)</title><rect x="177.5" y="213" width="14.6" height="15.0" fill="rgb(224,186,36)" rx="2" ry="2" />
<text  x="180.53" y="223.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::Next (16,666,666 samples, 0.31%)</title><rect x="396.0" y="357" width="3.7" height="15.0" fill="rgb(239,200,24)" rx="2" ry="2" />
<text  x="399.05" y="367.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (149,999,994 samples, 2.78%)</title><rect x="337.8" y="341" width="32.8" height="15.0" fill="rgb(239,126,54)" rx="2" ry="2" />
<text  x="340.78" y="351.5" >st..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (33,333,332 samples, 0.62%)</title><rect x="221.2" y="245" width="7.3" height="15.0" fill="rgb(206,52,6)" rx="2" ry="2" />
<text  x="224.23" y="255.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::SetSequence (33,333,332 samples, 0.62%)</title><rect x="763.9" y="389" width="7.3" height="15.0" fill="rgb(236,103,19)" rx="2" ry="2" />
<text  x="766.89" y="399.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::~promise (66,666,664 samples, 1.23%)</title><rect x="1000.6" y="405" width="14.6" height="15.0" fill="rgb(232,102,33)" rx="2" ry="2" />
<text  x="1003.62" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (149,999,994 samples, 2.78%)</title><rect x="159.3" y="229" width="32.8" height="15.0" fill="rgb(254,156,40)" rx="2" ry="2" />
<text  x="162.32" y="239.5" >st..</text>
</g>
<g >
<title>std::__shared_count&lt; (33,333,332 samples, 0.62%)</title><rect x="1007.9" y="373" width="7.3" height="15.0" fill="rgb(211,80,37)" rx="2" ry="2" />
<text  x="1010.90" y="383.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadNodeMain (1,816,666,594 samples, 33.64%)</title><rect x="10.0" y="453" width="397.0" height="15.0" fill="rgb(241,13,24)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >leveldb::(anonymous namespace)::PosixEnv::BackgroundTh..</text>
</g>
<g >
<title>try_to_free_buffers (16,666,666 samples, 0.31%)</title><rect x="1044.3" y="229" width="3.7" height="15.0" fill="rgb(245,205,35)" rx="2" ry="2" />
<text  x="1047.32" y="239.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (116,666,662 samples, 2.16%)</title><rect x="370.6" y="341" width="25.4" height="15.0" fill="rgb(238,186,12)" rx="2" ry="2" />
<text  x="373.56" y="351.5" >s..</text>
</g>
<g >
<title>leveldb::DBImpl::BuildBatchGroup (33,333,332 samples, 0.62%)</title><rect x="447.0" y="389" width="7.3" height="15.0" fill="rgb(225,164,33)" rx="2" ry="2" />
<text  x="450.04" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt;::operator++ (16,666,666 samples, 0.31%)</title><rect x="450.7" y="373" width="3.6" height="15.0" fill="rgb(218,195,22)" rx="2" ry="2" />
<text  x="453.68" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (99,999,996 samples, 1.85%)</title><rect x="341.4" y="309" width="21.9" height="15.0" fill="rgb(244,208,24)" rx="2" ry="2" />
<text  x="344.42" y="319.5" >s..</text>
</g>
<g >
<title>__GI___snprintf (149,999,994 samples, 2.78%)</title><rect x="407.0" y="405" width="32.8" height="15.0" fill="rgb(209,31,41)" rx="2" ry="2" />
<text  x="409.98" y="415.5" >__..</text>
</g>
<g >
<title>proc_reg_read (16,666,666 samples, 0.31%)</title><rect x="1048.0" y="309" width="3.6" height="15.0" fill="rgb(254,175,20)" rx="2" ry="2" />
<text  x="1050.96" y="319.5" ></text>
</g>
<g >
<title>filemap_fault (16,666,666 samples, 0.31%)</title><rect x="1135.4" y="469" width="3.6" height="15.0" fill="rgb(250,66,23)" rx="2" ry="2" />
<text  x="1138.37" y="479.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (133,333,328 samples, 2.47%)</title><rect x="581.8" y="261" width="29.1" height="15.0" fill="rgb(209,80,13)" rx="2" ry="2" />
<text  x="584.79" y="271.5" >le..</text>
</g>
<g >
<title>leveldb::EncodeFixed64 (33,333,332 samples, 0.62%)</title><rect x="494.4" y="325" width="7.3" height="15.0" fill="rgb(241,38,43)" rx="2" ry="2" />
<text  x="497.38" y="335.5" ></text>
</g>
<g >
<title>do_page_fault (33,333,332 samples, 0.62%)</title><rect x="308.6" y="213" width="7.3" height="15.0" fill="rgb(251,180,15)" rx="2" ry="2" />
<text  x="311.64" y="223.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (16,666,666 samples, 0.31%)</title><rect x="887.7" y="133" width="3.7" height="15.0" fill="rgb(221,116,29)" rx="2" ry="2" />
<text  x="890.72" y="143.5" ></text>
</g>
<g >
<title>__gthread_once (16,666,666 samples, 0.31%)</title><rect x="1175.4" y="581" width="3.7" height="15.0" fill="rgb(223,186,24)" rx="2" ry="2" />
<text  x="1178.43" y="591.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, false&gt;::_M_head (16,666,666 samples, 0.31%)</title><rect x="997.0" y="293" width="3.6" height="15.0" fill="rgb(205,133,32)" rx="2" ry="2" />
<text  x="999.98" y="303.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::get_future (33,333,332 samples, 0.62%)</title><rect x="956.9" y="405" width="7.3" height="15.0" fill="rgb(254,140,17)" rx="2" ry="2" />
<text  x="959.91" y="415.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (16,666,666 samples, 0.31%)</title><rect x="1058.9" y="581" width="3.6" height="15.0" fill="rgb(215,15,40)" rx="2" ry="2" />
<text  x="1061.89" y="591.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; &gt;::_M_init_functor (16,666,666 samples, 0.31%)</title><rect x="920.5" y="341" width="3.6" height="15.0" fill="rgb(211,182,22)" rx="2" ry="2" />
<text  x="923.49" y="351.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::CompactMemTable (1,816,666,594 samples, 33.64%)</title><rect x="10.0" y="389" width="397.0" height="15.0" fill="rgb(253,135,27)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >leveldb::DBImpl::CompactMemTable</text>
</g>
<g >
<title>block_invalidatepage (16,666,666 samples, 0.31%)</title><rect x="1044.3" y="293" width="3.7" height="15.0" fill="rgb(237,163,8)" rx="2" ry="2" />
<text  x="1047.32" y="303.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (16,666,666 samples, 0.31%)</title><rect x="439.8" y="373" width="3.6" height="15.0" fill="rgb(240,75,17)" rx="2" ry="2" />
<text  x="442.75" y="383.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (66,666,664 samples, 1.23%)</title><rect x="942.3" y="357" width="14.6" height="15.0" fill="rgb(223,39,6)" rx="2" ry="2" />
<text  x="945.35" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (16,666,666 samples, 0.31%)</title><rect x="366.9" y="277" width="3.7" height="15.0" fill="rgb(222,220,15)" rx="2" ry="2" />
<text  x="369.91" y="287.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (49,999,998 samples, 0.93%)</title><rect x="308.6" y="277" width="11.0" height="15.0" fill="rgb(237,57,10)" rx="2" ry="2" />
<text  x="311.64" y="287.5" ></text>
</g>
<g >
<title>down_read_trylock (16,666,666 samples, 0.31%)</title><rect x="326.9" y="117" width="3.6" height="15.0" fill="rgb(249,23,28)" rx="2" ry="2" />
<text  x="329.85" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (16,666,666 samples, 0.31%)</title><rect x="949.6" y="309" width="3.7" height="15.0" fill="rgb(253,134,14)" rx="2" ry="2" />
<text  x="952.63" y="319.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (16,666,666 samples, 0.31%)</title><rect x="1171.8" y="581" width="3.6" height="15.0" fill="rgb(250,69,46)" rx="2" ry="2" />
<text  x="1174.79" y="591.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (49,999,998 samples, 0.93%)</title><rect x="13.6" y="309" width="11.0" height="15.0" fill="rgb(238,160,39)" rx="2" ry="2" />
<text  x="16.64" y="319.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (16,666,666 samples, 0.31%)</title><rect x="1073.5" y="597" width="3.6" height="15.0" fill="rgb(207,86,51)" rx="2" ry="2" />
<text  x="1076.46" y="607.5" ></text>
</g>
<g >
<title>hash_futex (16,666,666 samples, 0.31%)</title><rect x="884.1" y="229" width="3.6" height="15.0" fill="rgb(207,182,23)" rx="2" ry="2" />
<text  x="887.07" y="239.5" ></text>
</g>
<g >
<title>main (33,333,332 samples, 0.62%)</title><rect x="1044.3" y="565" width="7.3" height="15.0" fill="rgb(208,100,52)" rx="2" ry="2" />
<text  x="1047.32" y="575.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::Add (149,999,994 samples, 2.78%)</title><rect x="31.9" y="325" width="32.7" height="15.0" fill="rgb(250,100,8)" rx="2" ry="2" />
<text  x="34.85" y="335.5" >le..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (116,666,662 samples, 2.16%)</title><rect x="370.6" y="325" width="25.4" height="15.0" fill="rgb(238,99,30)" rx="2" ry="2" />
<text  x="373.56" y="335.5" >s..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (16,666,666 samples, 0.31%)</title><rect x="61.0" y="293" width="3.6" height="15.0" fill="rgb(238,200,35)" rx="2" ry="2" />
<text  x="63.99" y="303.5" ></text>
</g>
<g >
<title>snappy::Compress (133,333,328 samples, 2.47%)</title><rect x="279.5" y="261" width="29.1" height="15.0" fill="rgb(225,101,1)" rx="2" ry="2" />
<text  x="282.51" y="271.5" >sn..</text>
</g>
<g >
<title>std::__shared_count&lt; (133,333,328 samples, 2.47%)</title><rect x="967.8" y="325" width="29.2" height="15.0" fill="rgb(245,96,32)" rx="2" ry="2" />
<text  x="970.84" y="335.5" >st..</text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (616,666,642 samples, 11.42%)</title><rect x="93.8" y="293" width="134.7" height="15.0" fill="rgb(239,157,10)" rx="2" ry="2" />
<text  x="96.77" y="303.5" >std::unordered_ma..</text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_set_result (16,666,666 samples, 0.31%)</title><rect x="836.7" y="357" width="3.7" height="15.0" fill="rgb(245,203,14)" rx="2" ry="2" />
<text  x="839.73" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_addr (16,666,666 samples, 0.31%)</title><rect x="239.4" y="149" width="3.7" height="15.0" fill="rgb(240,53,40)" rx="2" ry="2" />
<text  x="242.44" y="159.5" ></text>
</g>
<g >
<title>std::mutex::unlock (16,666,666 samples, 0.31%)</title><rect x="818.5" y="373" width="3.7" height="15.0" fill="rgb(219,225,14)" rx="2" ry="2" />
<text  x="821.52" y="383.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (4,699,999,812 samples, 87.04%)</title><rect x="10.0" y="565" width="1027.0" height="15.0" fill="rgb(250,36,48)" rx="2" ry="2" />
<text  x="13.00" y="575.5" >[libstdc++.so.6.0.29]</text>
</g>
<g >
<title>__memset_avx2_erms (16,666,666 samples, 0.31%)</title><rect x="166.6" y="181" width="3.6" height="15.0" fill="rgb(226,165,53)" rx="2" ry="2" />
<text  x="169.60" y="191.5" ></text>
</g>
<g >
<title>__gthread_once (333,333,320 samples, 6.17%)</title><rect x="847.7" y="341" width="72.8" height="15.0" fill="rgb(252,190,20)" rx="2" ry="2" />
<text  x="850.65" y="351.5" >__gthrea..</text>
</g>
<g >
<title>std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; (16,666,666 samples, 0.31%)</title><rect x="1146.3" y="581" width="3.6" height="15.0" fill="rgb(227,5,3)" rx="2" ry="2" />
<text  x="1149.30" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;std::__future_base::_State_baseV2,  (16,666,666 samples, 0.31%)</title><rect x="938.7" y="357" width="3.6" height="15.0" fill="rgb(208,18,1)" rx="2" ry="2" />
<text  x="941.70" y="367.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (49,999,998 samples, 0.93%)</title><rect x="308.6" y="293" width="11.0" height="15.0" fill="rgb(231,38,46)" rx="2" ry="2" />
<text  x="311.64" y="303.5" ></text>
</g>
<g >
<title>std::make_shared&lt;std::__future_base::_State_baseV2&gt; (133,333,328 samples, 2.47%)</title><rect x="967.8" y="389" width="29.2" height="15.0" fill="rgb(230,156,15)" rx="2" ry="2" />
<text  x="970.84" y="399.5" >st..</text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (49,999,998 samples, 0.93%)</title><rect x="13.6" y="325" width="11.0" height="15.0" fill="rgb(227,190,30)" rx="2" ry="2" />
<text  x="16.64" y="335.5" ></text>
</g>
<g >
<title>memmove_mov_avx512f_clwb (249,999,990 samples, 4.63%)</title><rect x="1077.1" y="597" width="54.6" height="15.0" fill="rgb(239,11,10)" rx="2" ry="2" />
<text  x="1080.10" y="607.5" >memmo..</text>
</g>
<g >
<title>leveldb::Benchmark::ThreadBody (2,883,333,218 samples, 53.40%)</title><rect x="407.0" y="469" width="630.0" height="15.0" fill="rgb(245,169,14)" rx="2" ry="2" />
<text  x="409.98" y="479.5" >leveldb::Benchmark::ThreadBody</text>
</g>
<g >
<title>__GI__IO_default_xsputn (33,333,332 samples, 0.62%)</title><rect x="425.2" y="341" width="7.3" height="15.0" fill="rgb(217,116,45)" rx="2" ry="2" />
<text  x="428.19" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::operator (16,666,666 samples, 0.31%)</title><rect x="887.7" y="165" width="3.7" height="15.0" fill="rgb(210,13,12)" rx="2" ry="2" />
<text  x="890.72" y="175.5" ></text>
</g>
<g >
<title>leveldb::Status::ok (16,666,666 samples, 0.31%)</title><rect x="458.0" y="389" width="3.6" height="15.0" fill="rgb(248,220,54)" rx="2" ry="2" />
<text  x="460.96" y="399.5" ></text>
</g>
<g >
<title>leveldb::Arena::AllocateAligned (16,666,666 samples, 0.31%)</title><rect x="738.4" y="293" width="3.6" height="15.0" fill="rgb(241,226,41)" rx="2" ry="2" />
<text  x="741.40" y="303.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (16,666,666 samples, 0.31%)</title><rect x="75.6" y="293" width="3.6" height="15.0" fill="rgb(210,113,36)" rx="2" ry="2" />
<text  x="78.56" y="303.5" ></text>
</g>
<g >
<title>snappy::RawCompress (133,333,328 samples, 2.47%)</title><rect x="279.5" y="277" width="29.1" height="15.0" fill="rgb(232,149,7)" rx="2" ry="2" />
<text  x="282.51" y="287.5" >sn..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (16,666,666 samples, 0.31%)</title><rect x="39.1" y="293" width="3.7" height="15.0" fill="rgb(236,65,18)" rx="2" ry="2" />
<text  x="42.14" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (16,666,666 samples, 0.31%)</title><rect x="42.8" y="293" width="3.6" height="15.0" fill="rgb(223,199,19)" rx="2" ry="2" />
<text  x="45.78" y="303.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpans (16,666,666 samples, 0.31%)</title><rect x="217.6" y="165" width="3.6" height="15.0" fill="rgb(242,129,8)" rx="2" ry="2" />
<text  x="220.59" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (16,666,666 samples, 0.31%)</title><rect x="319.6" y="325" width="3.6" height="15.0" fill="rgb(209,4,1)" rx="2" ry="2" />
<text  x="322.57" y="335.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (16,666,666 samples, 0.31%)</title><rect x="199.4" y="213" width="3.6" height="15.0" fill="rgb(223,33,15)" rx="2" ry="2" />
<text  x="202.38" y="223.5" ></text>
</g>
<g >
<title>std::swap&lt;std::__future_base::_State_baseV2*&gt; (16,666,666 samples, 0.31%)</title><rect x="953.3" y="341" width="3.6" height="15.0" fill="rgb(229,215,11)" rx="2" ry="2" />
<text  x="956.27" y="351.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (16,666,666 samples, 0.31%)</title><rect x="334.1" y="133" width="3.7" height="15.0" fill="rgb(253,90,44)" rx="2" ry="2" />
<text  x="337.14" y="143.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (16,666,666 samples, 0.31%)</title><rect x="756.6" y="325" width="3.6" height="15.0" fill="rgb(244,37,52)" rx="2" ry="2" />
<text  x="759.60" y="335.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (33,333,332 samples, 0.62%)</title><rect x="75.6" y="309" width="7.2" height="15.0" fill="rgb(218,176,45)" rx="2" ry="2" />
<text  x="78.56" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (16,666,666 samples, 0.31%)</title><rect x="385.1" y="245" width="3.7" height="15.0" fill="rgb(248,35,33)" rx="2" ry="2" />
<text  x="388.12" y="255.5" ></text>
</g>
<g >
<title>db_bench (5,399,999,784 samples, 100.00%)</title><rect x="10.0" y="613" width="1180.0" height="15.0" fill="rgb(217,145,43)" rx="2" ry="2" />
<text  x="13.00" y="623.5" >db_bench</text>
</g>
<g >
<title>page_fault (16,666,666 samples, 0.31%)</title><rect x="1135.4" y="581" width="3.6" height="15.0" fill="rgb(217,181,31)" rx="2" ry="2" />
<text  x="1138.37" y="591.5" ></text>
</g>
<g >
<title>page_fault (16,666,666 samples, 0.31%)</title><rect x="439.8" y="357" width="3.6" height="15.0" fill="rgb(236,76,11)" rx="2" ry="2" />
<text  x="442.75" y="367.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (366,666,652 samples, 6.79%)</title><rect x="840.4" y="357" width="80.1" height="15.0" fill="rgb(246,51,41)" rx="2" ry="2" />
<text  x="843.37" y="367.5" >std::call..</text>
</g>
<g >
<title>std::__invoke&lt;void  (149,999,994 samples, 2.78%)</title><rect x="887.7" y="261" width="32.8" height="15.0" fill="rgb(250,112,18)" rx="2" ry="2" />
<text  x="890.72" y="271.5" >st..</text>
</g>
<g >
<title>__pthread_cond_destroy (16,666,666 samples, 0.31%)</title><rect x="454.3" y="357" width="3.7" height="15.0" fill="rgb(208,94,0)" rx="2" ry="2" />
<text  x="457.32" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (16,666,666 samples, 0.31%)</title><rect x="366.9" y="293" width="3.7" height="15.0" fill="rgb(226,146,45)" rx="2" ry="2" />
<text  x="369.91" y="303.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (16,666,666 samples, 0.31%)</title><rect x="1011.5" y="357" width="3.7" height="15.0" fill="rgb(218,134,43)" rx="2" ry="2" />
<text  x="1014.54" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result_base::_Deleter, void&gt; (16,666,666 samples, 0.31%)</title><rect x="997.0" y="389" width="3.6" height="15.0" fill="rgb(242,220,32)" rx="2" ry="2" />
<text  x="999.98" y="399.5" ></text>
</g>
<g >
<title>vfs_write (16,666,666 samples, 0.31%)</title><rect x="334.1" y="165" width="3.7" height="15.0" fill="rgb(251,197,4)" rx="2" ry="2" />
<text  x="337.14" y="175.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (66,666,664 samples, 1.23%)</title><rect x="694.7" y="229" width="14.6" height="15.0" fill="rgb(220,213,34)" rx="2" ry="2" />
<text  x="697.69" y="239.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (33,333,332 samples, 0.62%)</title><rect x="1015.2" y="389" width="7.3" height="15.0" fill="rgb(233,185,9)" rx="2" ry="2" />
<text  x="1018.19" y="399.5" ></text>
</g>
<g >
<title>memmove_movnt_avx512f_clwb (33,333,332 samples, 0.62%)</title><rect x="1131.7" y="597" width="7.3" height="15.0" fill="rgb(238,148,48)" rx="2" ry="2" />
<text  x="1134.73" y="607.5" ></text>
</g>
<g >
<title>operator new[] (66,666,664 samples, 1.23%)</title><rect x="206.7" y="213" width="14.5" height="15.0" fill="rgb(206,215,39)" rx="2" ry="2" />
<text  x="209.67" y="223.5" ></text>
</g>
<g >
<title>handle_mm_fault (16,666,666 samples, 0.31%)</title><rect x="115.6" y="181" width="3.7" height="15.0" fill="rgb(213,218,22)" rx="2" ry="2" />
<text  x="118.62" y="191.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (16,666,666 samples, 0.31%)</title><rect x="738.4" y="229" width="3.6" height="15.0" fill="rgb(218,35,26)" rx="2" ry="2" />
<text  x="741.40" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (16,666,666 samples, 0.31%)</title><rect x="243.1" y="229" width="3.6" height="15.0" fill="rgb(212,171,20)" rx="2" ry="2" />
<text  x="246.09" y="239.5" ></text>
</g>
<g >
<title>leveldb::Log (16,666,666 samples, 0.31%)</title><rect x="334.1" y="357" width="3.7" height="15.0" fill="rgb(217,47,29)" rx="2" ry="2" />
<text  x="337.14" y="367.5" ></text>
</g>
<g >
<title>handle_mm_fault (66,666,664 samples, 1.23%)</title><rect x="1117.2" y="533" width="14.5" height="15.0" fill="rgb(212,163,11)" rx="2" ry="2" />
<text  x="1120.16" y="543.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::NewNode (49,999,998 samples, 0.93%)</title><rect x="734.8" y="309" width="10.9" height="15.0" fill="rgb(254,42,26)" rx="2" ry="2" />
<text  x="737.75" y="319.5" ></text>
</g>
<g >
<title>std::swap&lt;char const*&gt; (66,666,664 samples, 1.23%)</title><rect x="465.2" y="373" width="14.6" height="15.0" fill="rgb(239,217,45)" rx="2" ry="2" />
<text  x="468.25" y="383.5" ></text>
</g>
<g >
<title>leveldb::Status::operator= (16,666,666 samples, 0.31%)</title><rect x="771.2" y="373" width="3.6" height="15.0" fill="rgb(246,57,10)" rx="2" ry="2" />
<text  x="774.17" y="383.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (16,666,666 samples, 0.31%)</title><rect x="738.4" y="197" width="3.6" height="15.0" fill="rgb(253,226,3)" rx="2" ry="2" />
<text  x="741.40" y="207.5" ></text>
</g>
<g >
<title>new_do_write (16,666,666 samples, 0.31%)</title><rect x="334.1" y="277" width="3.7" height="15.0" fill="rgb(224,103,29)" rx="2" ry="2" />
<text  x="337.14" y="287.5" ></text>
</g>
<g >
<title>__strchrnul_avx2 (16,666,666 samples, 0.31%)</title><rect x="432.5" y="341" width="3.6" height="15.0" fill="rgb(245,95,41)" rx="2" ry="2" />
<text  x="435.47" y="351.5" ></text>
</g>
<g >
<title>leveldb::EncodeFixed64 (16,666,666 samples, 0.31%)</title><rect x="767.5" y="373" width="3.7" height="15.0" fill="rgb(242,191,16)" rx="2" ry="2" />
<text  x="770.53" y="383.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (99,999,996 samples, 1.85%)</title><rect x="887.7" y="197" width="21.9" height="15.0" fill="rgb(227,36,17)" rx="2" ry="2" />
<text  x="890.72" y="207.5" >s..</text>
</g>
</g>
</svg>
