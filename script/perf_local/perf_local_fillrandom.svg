<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="822.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="805" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="805" > </text>
<g id="frames">
<g >
<title>pmem2_auto_flush (1,333,333 samples, 0.04%)</title><rect x="1124.1" y="661" width="0.5" height="15.0" fill="rgb(251,41,23)" rx="2" ry="2" />
<text  x="1127.09" y="671.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (1,333,333 samples, 0.04%)</title><rect x="1131.4" y="357" width="0.5" height="15.0" fill="rgb(231,109,43)" rx="2" ry="2" />
<text  x="1134.41" y="367.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (5,333,332 samples, 0.17%)</title><rect x="375.2" y="485" width="1.9" height="15.0" fill="rgb(207,77,9)" rx="2" ry="2" />
<text  x="378.18" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::operator* (2,666,666 samples, 0.08%)</title><rect x="1037.2" y="501" width="1.0" height="15.0" fill="rgb(249,29,11)" rx="2" ry="2" />
<text  x="1040.19" y="511.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="456.2" y="453" width="0.5" height="15.0" fill="rgb(236,99,4)" rx="2" ry="2" />
<text  x="459.22" y="463.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.04%)</title><rect x="456.2" y="405" width="0.5" height="15.0" fill="rgb(239,203,43)" rx="2" ry="2" />
<text  x="459.22" y="415.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (105,333,307 samples, 3.27%)</title><rect x="656.9" y="389" width="38.5" height="15.0" fill="rgb(246,125,35)" rx="2" ry="2" />
<text  x="659.88" y="399.5" >lev..</text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;leveldb::ParsedInternalKey*, std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt; &gt; (2,666,666 samples, 0.08%)</title><rect x="55.4" y="453" width="1.0" height="15.0" fill="rgb(240,117,48)" rx="2" ry="2" />
<text  x="58.40" y="463.5" ></text>
</g>
<g >
<title>free_buffer_head (1,333,333 samples, 0.04%)</title><rect x="438.6" y="213" width="0.5" height="15.0" fill="rgb(212,155,48)" rx="2" ry="2" />
<text  x="441.65" y="223.5" ></text>
</g>
<g >
<title>leveldb::operator== (3,999,999 samples, 0.12%)</title><rect x="40.3" y="453" width="1.4" height="15.0" fill="rgb(211,155,42)" rx="2" ry="2" />
<text  x="43.27" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (5,333,332 samples, 0.17%)</title><rect x="1088.9" y="421" width="2.0" height="15.0" fill="rgb(224,214,22)" rx="2" ry="2" />
<text  x="1091.94" y="431.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (17,333,329 samples, 0.54%)</title><rect x="727.2" y="373" width="6.3" height="15.0" fill="rgb(205,101,35)" rx="2" ry="2" />
<text  x="730.18" y="383.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1,333,333 samples, 0.04%)</title><rect x="306.3" y="229" width="0.5" height="15.0" fill="rgb(223,210,19)" rx="2" ry="2" />
<text  x="309.34" y="239.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (2,666,666 samples, 0.08%)</title><rect x="1179.3" y="741" width="0.9" height="15.0" fill="rgb(231,133,33)" rx="2" ry="2" />
<text  x="1182.26" y="751.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (43,999,989 samples, 1.37%)</title><rect x="939.5" y="485" width="16.2" height="15.0" fill="rgb(254,74,3)" rx="2" ry="2" />
<text  x="942.55" y="495.5" ></text>
</g>
<g >
<title>ext4_readpages (6,666,665 samples, 0.21%)</title><rect x="1166.6" y="533" width="2.4" height="15.0" fill="rgb(249,85,34)" rx="2" ry="2" />
<text  x="1169.57" y="543.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::~promise (3,999,999 samples, 0.12%)</title><rect x="1185.1" y="741" width="1.5" height="15.0" fill="rgb(211,99,12)" rx="2" ry="2" />
<text  x="1188.12" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (15,999,996 samples, 0.50%)</title><rect x="335.1" y="485" width="5.9" height="15.0" fill="rgb(233,31,8)" rx="2" ry="2" />
<text  x="338.15" y="495.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1,333,333 samples, 0.04%)</title><rect x="352.2" y="421" width="0.5" height="15.0" fill="rgb(217,37,0)" rx="2" ry="2" />
<text  x="355.23" y="431.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (2,666,666 samples, 0.08%)</title><rect x="234.6" y="469" width="1.0" height="15.0" fill="rgb(248,51,3)" rx="2" ry="2" />
<text  x="237.58" y="479.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (2,666,666 samples, 0.08%)</title><rect x="489.4" y="453" width="1.0" height="15.0" fill="rgb(217,166,28)" rx="2" ry="2" />
<text  x="492.42" y="463.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::WriteWrapper (1,535,999,616 samples, 47.66%)</title><rect x="468.4" y="549" width="562.4" height="15.0" fill="rgb(211,103,40)" rx="2" ry="2" />
<text  x="471.43" y="559.5" >leveldb::DBImpl::WriteWrapper</text>
</g>
<g >
<title>leveldb::PutVarint32 (5,333,332 samples, 0.17%)</title><rect x="360.0" y="485" width="2.0" height="15.0" fill="rgb(232,129,36)" rx="2" ry="2" />
<text  x="363.05" y="495.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Flush (1,333,333 samples, 0.04%)</title><rect x="1155.8" y="725" width="0.5" height="15.0" fill="rgb(248,110,37)" rx="2" ry="2" />
<text  x="1158.83" y="735.5" ></text>
</g>
<g >
<title>std::operator&amp; (1,333,333 samples, 0.04%)</title><rect x="481.1" y="469" width="0.5" height="15.0" fill="rgb(234,176,24)" rx="2" ry="2" />
<text  x="484.12" y="479.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (7,999,998 samples, 0.25%)</title><rect x="48.1" y="469" width="2.9" height="15.0" fill="rgb(224,137,33)" rx="2" ry="2" />
<text  x="51.08" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (5,333,332 samples, 0.17%)</title><rect x="350.8" y="453" width="1.9" height="15.0" fill="rgb(229,149,0)" rx="2" ry="2" />
<text  x="353.77" y="463.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Rep::~Rep (1,333,333 samples, 0.04%)</title><rect x="330.8" y="485" width="0.4" height="15.0" fill="rgb(246,197,1)" rx="2" ry="2" />
<text  x="333.75" y="495.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (1,333,333 samples, 0.04%)</title><rect x="1135.3" y="741" width="0.5" height="15.0" fill="rgb(221,184,13)" rx="2" ry="2" />
<text  x="1138.32" y="751.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::RemoveFile (9,333,331 samples, 0.29%)</title><rect x="1124.6" y="661" width="3.4" height="15.0" fill="rgb(248,163,8)" rx="2" ry="2" />
<text  x="1127.58" y="671.5" ></text>
</g>
<g >
<title>vsnprintf (1,333,333 samples, 0.04%)</title><rect x="1129.0" y="373" width="0.5" height="15.0" fill="rgb(210,170,9)" rx="2" ry="2" />
<text  x="1131.97" y="383.5" ></text>
</g>
<g >
<title>file_free_rcu (1,333,333 samples, 0.04%)</title><rect x="913.2" y="325" width="0.5" height="15.0" fill="rgb(244,82,7)" rx="2" ry="2" />
<text  x="916.19" y="335.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (11,999,997 samples, 0.37%)</title><rect x="206.7" y="453" width="4.4" height="15.0" fill="rgb(207,28,40)" rx="2" ry="2" />
<text  x="209.75" y="463.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.04%)</title><rect x="1000.6" y="245" width="0.5" height="15.0" fill="rgb(205,219,53)" rx="2" ry="2" />
<text  x="1003.58" y="255.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::Add (41,333,323 samples, 1.28%)</title><rect x="243.9" y="453" width="15.1" height="15.0" fill="rgb(208,157,14)" rx="2" ry="2" />
<text  x="246.85" y="463.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (5,333,332 samples, 0.17%)</title><rect x="156.5" y="357" width="1.9" height="15.0" fill="rgb(209,181,2)" rx="2" ry="2" />
<text  x="159.46" y="367.5" ></text>
</g>
<g >
<title>__d_lookup_rcu (1,333,333 samples, 0.04%)</title><rect x="1131.9" y="405" width="0.5" height="15.0" fill="rgb(235,51,50)" rx="2" ry="2" />
<text  x="1134.90" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::front (13,333,330 samples, 0.41%)</title><rect x="958.6" y="533" width="4.9" height="15.0" fill="rgb(242,155,21)" rx="2" ry="2" />
<text  x="961.59" y="543.5" ></text>
</g>
<g >
<title>_dl_catch_exception (1,333,333 samples, 0.04%)</title><rect x="1131.9" y="645" width="0.5" height="15.0" fill="rgb(233,179,32)" rx="2" ry="2" />
<text  x="1134.90" y="655.5" ></text>
</g>
<g >
<title>proc_reg_read (1,333,333 samples, 0.04%)</title><rect x="1129.0" y="453" width="0.5" height="15.0" fill="rgb(211,213,54)" rx="2" ry="2" />
<text  x="1131.97" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get_deleter (2,666,666 samples, 0.08%)</title><rect x="1013.8" y="309" width="0.9" height="15.0" fill="rgb(252,84,7)" rx="2" ry="2" />
<text  x="1016.76" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.04%)</title><rect x="144.3" y="261" width="0.4" height="15.0" fill="rgb(252,6,53)" rx="2" ry="2" />
<text  x="147.26" y="271.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="958.1" y="405" width="0.5" height="15.0" fill="rgb(249,196,44)" rx="2" ry="2" />
<text  x="961.10" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&amp;, leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem*&gt;::_Deque_iterator (1,333,333 samples, 0.04%)</title><rect x="1130.9" y="469" width="0.5" height="15.0" fill="rgb(223,11,10)" rx="2" ry="2" />
<text  x="1133.93" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (1,333,333 samples, 0.04%)</title><rect x="275.1" y="373" width="0.5" height="15.0" fill="rgb(248,159,1)" rx="2" ry="2" />
<text  x="278.10" y="383.5" ></text>
</g>
<g >
<title>std::atomic_flag::atomic_flag (2,666,666 samples, 0.08%)</title><rect x="1064.0" y="389" width="1.0" height="15.0" fill="rgb(246,190,25)" rx="2" ry="2" />
<text  x="1067.04" y="399.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (3,999,999 samples, 0.12%)</title><rect x="84.7" y="357" width="1.5" height="15.0" fill="rgb(210,204,9)" rx="2" ry="2" />
<text  x="87.70" y="367.5" ></text>
</g>
<g >
<title>__brelse (1,333,333 samples, 0.04%)</title><rect x="862.9" y="213" width="0.5" height="15.0" fill="rgb(217,227,53)" rx="2" ry="2" />
<text  x="865.90" y="223.5" ></text>
</g>
<g >
<title>fts_stat (1,333,333 samples, 0.04%)</title><rect x="1124.1" y="581" width="0.5" height="15.0" fill="rgb(227,227,29)" rx="2" ry="2" />
<text  x="1127.09" y="591.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (53,333,320 samples, 1.65%)</title><rect x="1080.2" y="501" width="19.5" height="15.0" fill="rgb(216,26,15)" rx="2" ry="2" />
<text  x="1083.15" y="511.5" ></text>
</g>
<g >
<title>__radix_tree_lookup (2,666,666 samples, 0.08%)</title><rect x="848.3" y="213" width="0.9" height="15.0" fill="rgb(236,143,39)" rx="2" ry="2" />
<text  x="851.25" y="223.5" ></text>
</g>
<g >
<title>do_filp_open (1,333,333 samples, 0.04%)</title><rect x="1131.9" y="485" width="0.5" height="15.0" fill="rgb(231,36,13)" rx="2" ry="2" />
<text  x="1134.90" y="495.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::Add (50,666,654 samples, 1.57%)</title><rect x="354.7" y="501" width="18.5" height="15.0" fill="rgb(236,129,43)" rx="2" ry="2" />
<text  x="357.68" y="511.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2,666,666 samples, 0.08%)</title><rect x="499.7" y="469" width="0.9" height="15.0" fill="rgb(232,162,37)" rx="2" ry="2" />
<text  x="502.67" y="479.5" ></text>
</g>
<g >
<title>ext4_invalidatepage (1,333,333 samples, 0.04%)</title><rect x="438.6" y="309" width="0.5" height="15.0" fill="rgb(236,74,19)" rx="2" ry="2" />
<text  x="441.65" y="319.5" ></text>
</g>
<g >
<title>rcu_cblist_dequeue (1,333,333 samples, 0.04%)</title><rect x="336.6" y="309" width="0.5" height="15.0" fill="rgb(214,190,21)" rx="2" ry="2" />
<text  x="339.61" y="319.5" ></text>
</g>
<g >
<title>madvise_free_page_range.isra.16 (1,333,333 samples, 0.04%)</title><rect x="330.8" y="213" width="0.4" height="15.0" fill="rgb(245,200,16)" rx="2" ry="2" />
<text  x="333.75" y="223.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1,333,333 samples, 0.04%)</title><rect x="183.3" y="485" width="0.5" height="15.0" fill="rgb(240,13,37)" rx="2" ry="2" />
<text  x="186.31" y="495.5" ></text>
</g>
<g >
<title>leveldb::ReadBlock (11,999,997 samples, 0.37%)</title><rect x="206.7" y="421" width="4.4" height="15.0" fill="rgb(205,43,25)" rx="2" ry="2" />
<text  x="209.75" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::size (2,666,666 samples, 0.08%)</title><rect x="373.7" y="485" width="1.0" height="15.0" fill="rgb(232,172,19)" rx="2" ry="2" />
<text  x="376.72" y="495.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::RemoveFile (1,333,333 samples, 0.04%)</title><rect x="438.6" y="517" width="0.5" height="15.0" fill="rgb(217,226,16)" rx="2" ry="2" />
<text  x="441.65" y="527.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (6,666,665 samples, 0.21%)</title><rect x="304.4" y="309" width="2.4" height="15.0" fill="rgb(207,48,19)" rx="2" ry="2" />
<text  x="307.39" y="319.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (1,333,333 samples, 0.04%)</title><rect x="218.0" y="373" width="0.5" height="15.0" fill="rgb(210,168,31)" rx="2" ry="2" />
<text  x="220.98" y="383.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::RandomHeight (7,999,998 samples, 0.25%)</title><rect x="753.1" y="453" width="2.9" height="15.0" fill="rgb(221,208,26)" rx="2" ry="2" />
<text  x="756.05" y="463.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (3,999,999 samples, 0.12%)</title><rect x="1015.7" y="277" width="1.5" height="15.0" fill="rgb(227,24,26)" rx="2" ry="2" />
<text  x="1018.71" y="287.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (6,666,665 samples, 0.21%)</title><rect x="48.1" y="453" width="2.4" height="15.0" fill="rgb(219,142,14)" rx="2" ry="2" />
<text  x="51.08" y="463.5" ></text>
</g>
<g >
<title>std::__addressof&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.04%)</title><rect x="1067.9" y="421" width="0.5" height="15.0" fill="rgb(206,33,11)" rx="2" ry="2" />
<text  x="1070.95" y="431.5" ></text>
</g>
<g >
<title>__GI_madvise (1,333,333 samples, 0.04%)</title><rect x="144.3" y="293" width="0.4" height="15.0" fill="rgb(227,156,38)" rx="2" ry="2" />
<text  x="147.26" y="303.5" ></text>
</g>
<g >
<title>tc_malloc (1,333,333 samples, 0.04%)</title><rect x="1123.6" y="677" width="0.5" height="15.0" fill="rgb(223,225,14)" rx="2" ry="2" />
<text  x="1126.60" y="687.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (353,333,245 samples, 10.96%)</title><rect x="784.8" y="501" width="129.4" height="15.0" fill="rgb(233,188,35)" rx="2" ry="2" />
<text  x="787.79" y="511.5" >leveldb::(anonym..</text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (1,333,333 samples, 0.04%)</title><rect x="393.2" y="405" width="0.5" height="15.0" fill="rgb(243,165,30)" rx="2" ry="2" />
<text  x="396.24" y="415.5" ></text>
</g>
<g >
<title>rw_verify_area (2,666,666 samples, 0.08%)</title><rect x="912.2" y="357" width="1.0" height="15.0" fill="rgb(246,44,41)" rx="2" ry="2" />
<text  x="915.21" y="367.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.04%)</title><rect x="10.0" y="293" width="0.5" height="15.0" fill="rgb(222,46,14)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>_IO_no_init (2,666,666 samples, 0.08%)</title><rect x="445.0" y="517" width="1.0" height="15.0" fill="rgb(232,174,34)" rx="2" ry="2" />
<text  x="447.99" y="527.5" ></text>
</g>
<g >
<title>leveldb::Status::Status (2,666,666 samples, 0.08%)</title><rect x="431.8" y="469" width="1.0" height="15.0" fill="rgb(244,107,15)" rx="2" ry="2" />
<text  x="434.81" y="479.5" ></text>
</g>
<g >
<title>snappy::internal::WorkingMemory::GetHashTable (1,333,333 samples, 0.04%)</title><rect x="301.9" y="373" width="0.5" height="15.0" fill="rgb(216,45,51)" rx="2" ry="2" />
<text  x="304.95" y="383.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::OpenCompactionOutputFile (5,333,332 samples, 0.17%)</title><rect x="331.2" y="517" width="2.0" height="15.0" fill="rgb(211,85,28)" rx="2" ry="2" />
<text  x="334.24" y="527.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (25,333,327 samples, 0.79%)</title><rect x="94.0" y="437" width="9.2" height="15.0" fill="rgb(249,217,17)" rx="2" ry="2" />
<text  x="96.97" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.04%)</title><rect x="1171.4" y="741" width="0.5" height="15.0" fill="rgb(219,74,23)" rx="2" ry="2" />
<text  x="1174.45" y="751.5" ></text>
</g>
<g >
<title>std::operator&amp; (1,333,333 samples, 0.04%)</title><rect x="528.5" y="405" width="0.5" height="15.0" fill="rgb(229,89,42)" rx="2" ry="2" />
<text  x="531.48" y="415.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed64 (2,666,666 samples, 0.08%)</title><rect x="52.5" y="453" width="1.0" height="15.0" fill="rgb(253,118,4)" rx="2" ry="2" />
<text  x="55.47" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.04%)</title><rect x="336.6" y="421" width="0.5" height="15.0" fill="rgb(206,130,9)" rx="2" ry="2" />
<text  x="339.61" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1,333,333 samples, 0.04%)</title><rect x="1123.6" y="693" width="0.5" height="15.0" fill="rgb(243,145,7)" rx="2" ry="2" />
<text  x="1126.60" y="703.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (13,333,330 samples, 0.41%)</title><rect x="319.5" y="485" width="4.9" height="15.0" fill="rgb(222,171,28)" rx="2" ry="2" />
<text  x="322.52" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (1,333,333 samples, 0.04%)</title><rect x="283.9" y="357" width="0.5" height="15.0" fill="rgb(250,24,38)" rx="2" ry="2" />
<text  x="286.88" y="367.5" ></text>
</g>
<g >
<title>iput (9,333,331 samples, 0.29%)</title><rect x="1124.6" y="565" width="3.4" height="15.0" fill="rgb(229,181,2)" rx="2" ry="2" />
<text  x="1127.58" y="575.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (1,333,333 samples, 0.04%)</title><rect x="302.9" y="373" width="0.5" height="15.0" fill="rgb(253,217,53)" rx="2" ry="2" />
<text  x="305.93" y="383.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (59,999,985 samples, 1.86%)</title><rect x="996.2" y="341" width="22.0" height="15.0" fill="rgb(226,117,14)" rx="2" ry="2" />
<text  x="999.18" y="351.5" >s..</text>
</g>
<g >
<title>leveldb::EncodeVarint32 (1,333,333 samples, 0.04%)</title><rect x="250.2" y="421" width="0.5" height="15.0" fill="rgb(222,225,50)" rx="2" ry="2" />
<text  x="253.20" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_default_append (23,999,994 samples, 0.74%)</title><rect x="135.5" y="437" width="8.8" height="15.0" fill="rgb(205,163,34)" rx="2" ry="2" />
<text  x="138.47" y="447.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Finish (1,333,333 samples, 0.04%)</title><rect x="330.3" y="501" width="0.5" height="15.0" fill="rgb(245,99,9)" rx="2" ry="2" />
<text  x="333.26" y="511.5" ></text>
</g>
<g >
<title>__GI__IO_getline_info (1,333,333 samples, 0.04%)</title><rect x="1129.0" y="613" width="0.5" height="15.0" fill="rgb(225,140,3)" rx="2" ry="2" />
<text  x="1131.97" y="623.5" ></text>
</g>
<g >
<title>main (19,999,995 samples, 0.62%)</title><rect x="1124.6" y="709" width="7.3" height="15.0" fill="rgb(238,5,15)" rx="2" ry="2" />
<text  x="1127.58" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create@plt (1,333,333 samples, 0.04%)</title><rect x="334.7" y="469" width="0.4" height="15.0" fill="rgb(221,218,47)" rx="2" ry="2" />
<text  x="337.66" y="479.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::NoBarrier_Next (2,666,666 samples, 0.08%)</title><rect x="746.2" y="453" width="1.0" height="15.0" fill="rgb(240,59,51)" rx="2" ry="2" />
<text  x="749.22" y="463.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="248.7" y="373" width="0.5" height="15.0" fill="rgb(235,184,7)" rx="2" ry="2" />
<text  x="251.73" y="383.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1,333,333 samples, 0.04%)</title><rect x="1079.7" y="501" width="0.5" height="15.0" fill="rgb(218,221,12)" rx="2" ry="2" />
<text  x="1082.66" y="511.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,333,333 samples, 0.04%)</title><rect x="340.5" y="453" width="0.5" height="15.0" fill="rgb(217,126,37)" rx="2" ry="2" />
<text  x="343.52" y="463.5" ></text>
</g>
<g >
<title>crc32c_pcl_intel_update (13,333,330 samples, 0.41%)</title><rect x="881.0" y="149" width="4.8" height="15.0" fill="rgb(215,84,49)" rx="2" ry="2" />
<text  x="883.96" y="159.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::GrowHeap (1,333,333 samples, 0.04%)</title><rect x="90.6" y="261" width="0.4" height="15.0" fill="rgb(247,37,21)" rx="2" ry="2" />
<text  x="93.55" y="271.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (1,333,333 samples, 0.04%)</title><rect x="390.3" y="341" width="0.5" height="15.0" fill="rgb(235,57,21)" rx="2" ry="2" />
<text  x="393.31" y="351.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (2,666,666 samples, 0.08%)</title><rect x="1144.1" y="741" width="1.0" height="15.0" fill="rgb(249,101,43)" rx="2" ry="2" />
<text  x="1147.11" y="751.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,333,333 samples, 0.04%)</title><rect x="349.3" y="405" width="0.5" height="15.0" fill="rgb(212,77,4)" rx="2" ry="2" />
<text  x="352.30" y="415.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::shared_ptr&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt;&gt; (47,999,988 samples, 1.49%)</title><rect x="1055.3" y="501" width="17.5" height="15.0" fill="rgb(249,174,48)" rx="2" ry="2" />
<text  x="1058.25" y="511.5" ></text>
</g>
<g >
<title>_cond_resched (1,333,333 samples, 0.04%)</title><rect x="143.8" y="277" width="0.5" height="15.0" fill="rgb(238,10,49)" rx="2" ry="2" />
<text  x="146.77" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (2,666,666 samples, 0.08%)</title><rect x="74.4" y="341" width="1.0" height="15.0" fill="rgb(229,62,22)" rx="2" ry="2" />
<text  x="77.44" y="351.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (95,999,976 samples, 2.98%)</title><rect x="920.5" y="501" width="35.2" height="15.0" fill="rgb(209,46,49)" rx="2" ry="2" />
<text  x="923.51" y="511.5" >le..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (11,999,997 samples, 0.37%)</title><rect x="41.7" y="453" width="4.4" height="15.0" fill="rgb(252,212,48)" rx="2" ry="2" />
<text  x="44.73" y="463.5" ></text>
</g>
<g >
<title>leveldb::MemTable::Unref (1,333,333 samples, 0.04%)</title><rect x="177.5" y="517" width="0.4" height="15.0" fill="rgb(247,72,39)" rx="2" ry="2" />
<text  x="180.46" y="527.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Rep::~Rep (1,333,333 samples, 0.04%)</title><rect x="144.3" y="469" width="0.4" height="15.0" fill="rgb(231,170,34)" rx="2" ry="2" />
<text  x="147.26" y="479.5" ></text>
</g>
<g >
<title>__handle_mm_fault (11,999,997 samples, 0.37%)</title><rect x="1166.1" y="661" width="4.4" height="15.0" fill="rgb(206,86,45)" rx="2" ry="2" />
<text  x="1169.08" y="671.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed64 (2,666,666 samples, 0.08%)</title><rect x="176.5" y="485" width="1.0" height="15.0" fill="rgb(205,62,21)" rx="2" ry="2" />
<text  x="179.48" y="495.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed64 (9,333,331 samples, 0.29%)</title><rect x="768.7" y="501" width="3.4" height="15.0" fill="rgb(227,112,5)" rx="2" ry="2" />
<text  x="771.68" y="511.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BackgroundCall (1,171,999,707 samples, 36.37%)</title><rect x="10.0" y="565" width="429.1" height="15.0" fill="rgb(244,9,20)" rx="2" ry="2" />
<text  x="13.00" y="575.5" >leveldb::DBImpl::BackgroundCall</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (1,333,333 samples, 0.04%)</title><rect x="1121.7" y="533" width="0.4" height="15.0" fill="rgb(241,98,54)" rx="2" ry="2" />
<text  x="1124.65" y="543.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::Benchmark (9,333,331 samples, 0.29%)</title><rect x="1124.6" y="693" width="3.4" height="15.0" fill="rgb(244,175,53)" rx="2" ry="2" />
<text  x="1127.58" y="703.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (3,999,999 samples, 0.12%)</title><rect x="247.8" y="405" width="1.4" height="15.0" fill="rgb(209,142,24)" rx="2" ry="2" />
<text  x="250.76" y="415.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (1,333,333 samples, 0.04%)</title><rect x="302.9" y="421" width="0.5" height="15.0" fill="rgb(236,34,29)" rx="2" ry="2" />
<text  x="305.93" y="431.5" ></text>
</g>
<g >
<title>block_write_end (15,999,996 samples, 0.50%)</title><rect x="895.1" y="261" width="5.9" height="15.0" fill="rgb(249,185,41)" rx="2" ry="2" />
<text  x="898.12" y="271.5" ></text>
</g>
<g >
<title>ext4_mpage_readpages (1,333,333 samples, 0.04%)</title><rect x="1166.1" y="549" width="0.5" height="15.0" fill="rgb(251,93,20)" rx="2" ry="2" />
<text  x="1169.08" y="559.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="591.9" y="389" width="0.5" height="15.0" fill="rgb(252,142,11)" rx="2" ry="2" />
<text  x="594.94" y="399.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (23,999,994 samples, 0.74%)</title><rect x="135.5" y="325" width="8.8" height="15.0" fill="rgb(244,111,52)" rx="2" ry="2" />
<text  x="138.47" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_addr (1,333,333 samples, 0.04%)</title><rect x="401.1" y="389" width="0.4" height="15.0" fill="rgb(241,42,27)" rx="2" ry="2" />
<text  x="404.06" y="399.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="1135.8" y="709" width="0.5" height="15.0" fill="rgb(227,187,45)" rx="2" ry="2" />
<text  x="1138.81" y="719.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;leveldb::Status&gt;::_M_destroy (5,333,332 samples, 0.17%)</title><rect x="1094.8" y="373" width="2.0" height="15.0" fill="rgb(242,61,8)" rx="2" ry="2" />
<text  x="1097.80" y="383.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (9,333,331 samples, 0.29%)</title><rect x="822.9" y="261" width="3.4" height="15.0" fill="rgb(248,208,24)" rx="2" ry="2" />
<text  x="825.87" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1,333,333 samples, 0.04%)</title><rect x="131.6" y="453" width="0.5" height="15.0" fill="rgb(215,170,9)" rx="2" ry="2" />
<text  x="134.56" y="463.5" ></text>
</g>
<g >
<title>current_time (3,999,999 samples, 0.12%)</title><rect x="821.4" y="293" width="1.5" height="15.0" fill="rgb(247,45,49)" rx="2" ry="2" />
<text  x="824.40" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add (2,666,666 samples, 0.08%)</title><rect x="1051.8" y="421" width="1.0" height="15.0" fill="rgb(247,192,42)" rx="2" ry="2" />
<text  x="1054.84" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (13,333,330 samples, 0.41%)</title><rect x="153.5" y="421" width="4.9" height="15.0" fill="rgb(239,137,48)" rx="2" ry="2" />
<text  x="156.53" y="431.5" ></text>
</g>
<g >
<title>__ext4_get_inode_loc (17,333,329 samples, 0.54%)</title><rect x="886.8" y="197" width="6.4" height="15.0" fill="rgb(215,33,7)" rx="2" ry="2" />
<text  x="889.82" y="207.5" ></text>
</g>
<g >
<title>crc32c_pcl_intel_update (1,333,333 samples, 0.04%)</title><rect x="825.3" y="181" width="0.5" height="15.0" fill="rgb(233,94,10)" rx="2" ry="2" />
<text  x="828.31" y="191.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (85,333,312 samples, 2.65%)</title><rect x="991.8" y="421" width="31.2" height="15.0" fill="rgb(215,64,10)" rx="2" ry="2" />
<text  x="994.79" y="431.5" >st..</text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.04%)</title><rect x="376.6" y="469" width="0.5" height="15.0" fill="rgb(243,67,19)" rx="2" ry="2" />
<text  x="379.64" y="479.5" ></text>
</g>
<g >
<title>show_cpuinfo (1,333,333 samples, 0.04%)</title><rect x="1129.0" y="421" width="0.5" height="15.0" fill="rgb(225,48,6)" rx="2" ry="2" />
<text  x="1131.97" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::front (3,999,999 samples, 0.12%)</title><rect x="477.7" y="517" width="1.5" height="15.0" fill="rgb(218,29,38)" rx="2" ry="2" />
<text  x="480.70" y="527.5" ></text>
</g>
<g >
<title>elf_machine_rela (2,666,666 samples, 0.08%)</title><rect x="1132.4" y="629" width="1.0" height="15.0" fill="rgb(248,166,8)" rx="2" ry="2" />
<text  x="1135.39" y="639.5" ></text>
</g>
<g >
<title>leveldb::Status::Status (1,333,333 samples, 0.04%)</title><rect x="1030.8" y="533" width="0.5" height="15.0" fill="rgb(215,164,27)" rx="2" ry="2" />
<text  x="1033.84" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_extract (1,333,333 samples, 0.04%)</title><rect x="167.2" y="405" width="0.5" height="15.0" fill="rgb(250,135,25)" rx="2" ry="2" />
<text  x="170.20" y="415.5" ></text>
</g>
<g >
<title>_IO_fgets (1,333,333 samples, 0.04%)</title><rect x="1129.0" y="645" width="0.5" height="15.0" fill="rgb(228,63,28)" rx="2" ry="2" />
<text  x="1131.97" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr (1,333,333 samples, 0.04%)</title><rect x="1187.6" y="741" width="0.4" height="15.0" fill="rgb(228,226,39)" rx="2" ry="2" />
<text  x="1190.56" y="751.5" ></text>
</g>
<g >
<title>seq_vprintf (1,333,333 samples, 0.04%)</title><rect x="1129.0" y="389" width="0.5" height="15.0" fill="rgb(232,92,37)" rx="2" ry="2" />
<text  x="1131.97" y="399.5" ></text>
</g>
<g >
<title>__put_page (1,333,333 samples, 0.04%)</title><rect x="94.0" y="277" width="0.5" height="15.0" fill="rgb(207,90,24)" rx="2" ry="2" />
<text  x="96.97" y="287.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (83,999,979 samples, 2.61%)</title><rect x="991.8" y="405" width="30.7" height="15.0" fill="rgb(235,91,53)" rx="2" ry="2" />
<text  x="994.79" y="415.5" >st..</text>
</g>
<g >
<title>leveldb::MutexLock::~MutexLock (7,999,998 samples, 0.25%)</title><rect x="487.5" y="533" width="2.9" height="15.0" fill="rgb(239,184,30)" rx="2" ry="2" />
<text  x="490.47" y="543.5" ></text>
</g>
<g >
<title>block_write_end (1,333,333 samples, 0.04%)</title><rect x="858.5" y="277" width="0.5" height="15.0" fill="rgb(215,53,18)" rx="2" ry="2" />
<text  x="861.51" y="287.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (3,037,332,574 samples, 94.25%)</title><rect x="10.0" y="645" width="1112.1" height="15.0" fill="rgb(215,225,30)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >std::__invoke&lt;void </text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,333,333 samples, 0.04%)</title><rect x="92.0" y="405" width="0.5" height="15.0" fill="rgb(244,170,34)" rx="2" ry="2" />
<text  x="95.02" y="415.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1,333,333 samples, 0.04%)</title><rect x="1150.9" y="725" width="0.5" height="15.0" fill="rgb(233,182,39)" rx="2" ry="2" />
<text  x="1153.94" y="735.5" ></text>
</g>
<g >
<title>leveldb::Status::~Status (1,333,333 samples, 0.04%)</title><rect x="920.0" y="501" width="0.5" height="15.0" fill="rgb(239,11,3)" rx="2" ry="2" />
<text  x="923.02" y="511.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (21,333,328 samples, 0.66%)</title><rect x="394.7" y="485" width="7.8" height="15.0" fill="rgb(251,203,16)" rx="2" ry="2" />
<text  x="397.71" y="495.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (27,999,993 samples, 0.87%)</title><rect x="343.0" y="501" width="10.2" height="15.0" fill="rgb(227,34,41)" rx="2" ry="2" />
<text  x="345.96" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get (5,333,332 samples, 0.17%)</title><rect x="999.1" y="293" width="2.0" height="15.0" fill="rgb(210,133,26)" rx="2" ry="2" />
<text  x="1002.11" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,333,333 samples, 0.04%)</title><rect x="396.2" y="405" width="0.5" height="15.0" fill="rgb(222,78,11)" rx="2" ry="2" />
<text  x="399.17" y="415.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.04%)</title><rect x="200.9" y="453" width="0.5" height="15.0" fill="rgb(248,190,43)" rx="2" ry="2" />
<text  x="203.89" y="463.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::SyncFd (1,333,333 samples, 0.04%)</title><rect x="1128.5" y="565" width="0.5" height="15.0" fill="rgb(252,43,49)" rx="2" ry="2" />
<text  x="1131.49" y="575.5" ></text>
</g>
<g >
<title>common_file_perm (1,333,333 samples, 0.04%)</title><rect x="912.7" y="325" width="0.5" height="15.0" fill="rgb(226,194,6)" rx="2" ry="2" />
<text  x="915.70" y="335.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2,666,666 samples, 0.08%)</title><rect x="101.8" y="357" width="1.0" height="15.0" fill="rgb(223,41,18)" rx="2" ry="2" />
<text  x="104.78" y="367.5" ></text>
</g>
<g >
<title>__once_proxy (5,333,332 samples, 0.17%)</title><rect x="974.2" y="453" width="2.0" height="15.0" fill="rgb(242,104,51)" rx="2" ry="2" />
<text  x="977.21" y="463.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.04%)</title><rect x="103.7" y="357" width="0.5" height="15.0" fill="rgb(212,219,49)" rx="2" ry="2" />
<text  x="106.74" y="367.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1,333,333 samples, 0.04%)</title><rect x="473.3" y="469" width="0.5" height="15.0" fill="rgb(235,1,30)" rx="2" ry="2" />
<text  x="476.31" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (30,666,659 samples, 0.95%)</title><rect x="307.3" y="453" width="11.2" height="15.0" fill="rgb(229,88,50)" rx="2" ry="2" />
<text  x="310.32" y="463.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.04%)</title><rect x="372.3" y="469" width="0.4" height="15.0" fill="rgb(244,152,24)" rx="2" ry="2" />
<text  x="375.25" y="479.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;unsigned long, char&gt; (6,666,665 samples, 0.21%)</title><rect x="304.4" y="341" width="2.4" height="15.0" fill="rgb(233,72,14)" rx="2" ry="2" />
<text  x="307.39" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (1,333,333 samples, 0.04%)</title><rect x="340.0" y="453" width="0.5" height="15.0" fill="rgb(220,198,8)" rx="2" ry="2" />
<text  x="343.03" y="463.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (5,333,332 samples, 0.17%)</title><rect x="196.0" y="437" width="2.0" height="15.0" fill="rgb(231,217,45)" rx="2" ry="2" />
<text  x="199.01" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (53,333,320 samples, 1.65%)</title><rect x="1080.2" y="485" width="19.5" height="15.0" fill="rgb(216,135,37)" rx="2" ry="2" />
<text  x="1083.15" y="495.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (57,333,319 samples, 1.78%)</title><rect x="263.9" y="437" width="21.0" height="15.0" fill="rgb(205,106,40)" rx="2" ry="2" />
<text  x="266.87" y="447.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::_M_head (1,333,333 samples, 0.04%)</title><rect x="1000.6" y="229" width="0.5" height="15.0" fill="rgb(252,34,32)" rx="2" ry="2" />
<text  x="1003.58" y="239.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (9,333,331 samples, 0.29%)</title><rect x="740.8" y="405" width="3.5" height="15.0" fill="rgb(216,42,14)" rx="2" ry="2" />
<text  x="743.85" y="415.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (3,999,999 samples, 0.12%)</title><rect x="1153.9" y="741" width="1.4" height="15.0" fill="rgb(245,109,18)" rx="2" ry="2" />
<text  x="1156.87" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (1,333,333 samples, 0.04%)</title><rect x="349.3" y="373" width="0.5" height="15.0" fill="rgb(252,181,46)" rx="2" ry="2" />
<text  x="352.30" y="383.5" ></text>
</g>
<g >
<title>security_cred_free (1,333,333 samples, 0.04%)</title><rect x="212.1" y="357" width="0.5" height="15.0" fill="rgb(251,43,11)" rx="2" ry="2" />
<text  x="215.12" y="367.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (15,999,996 samples, 0.50%)</title><rect x="514.3" y="421" width="5.9" height="15.0" fill="rgb(206,155,44)" rx="2" ry="2" />
<text  x="517.32" y="431.5" ></text>
</g>
<g >
<title>page_fault (13,333,330 samples, 0.41%)</title><rect x="1165.6" y="725" width="4.9" height="15.0" fill="rgb(227,130,52)" rx="2" ry="2" />
<text  x="1168.59" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (3,999,999 samples, 0.12%)</title><rect x="344.9" y="437" width="1.5" height="15.0" fill="rgb(234,36,40)" rx="2" ry="2" />
<text  x="347.91" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::begin (1,333,333 samples, 0.04%)</title><rect x="1180.7" y="741" width="0.5" height="15.0" fill="rgb(227,163,34)" rx="2" ry="2" />
<text  x="1183.72" y="751.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::Count (2,666,666 samples, 0.08%)</title><rect x="1121.2" y="549" width="0.9" height="15.0" fill="rgb(230,49,37)" rx="2" ry="2" />
<text  x="1124.16" y="559.5" ></text>
</g>
<g >
<title>std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;::queue&lt;std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt;, void&gt; (2,666,666 samples, 0.08%)</title><rect x="1130.9" y="533" width="1.0" height="15.0" fill="rgb(245,196,8)" rx="2" ry="2" />
<text  x="1133.93" y="543.5" ></text>
</g>
<g >
<title>fdatasync (1,333,333 samples, 0.04%)</title><rect x="1128.5" y="549" width="0.5" height="15.0" fill="rgb(252,19,22)" rx="2" ry="2" />
<text  x="1131.49" y="559.5" ></text>
</g>
<g >
<title>operator new[] (5,333,332 samples, 0.17%)</title><rect x="1052.8" y="533" width="2.0" height="15.0" fill="rgb(234,85,9)" rx="2" ry="2" />
<text  x="1055.81" y="543.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6,666,665 samples, 0.21%)</title><rect x="315.6" y="325" width="2.5" height="15.0" fill="rgb(221,20,1)" rx="2" ry="2" />
<text  x="318.62" y="335.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (6,666,665 samples, 0.21%)</title><rect x="315.6" y="357" width="2.5" height="15.0" fill="rgb(206,99,34)" rx="2" ry="2" />
<text  x="318.62" y="367.5" ></text>
</g>
<g >
<title>__generic_file_write_iter (249,333,271 samples, 7.74%)</title><rect x="817.0" y="325" width="91.3" height="15.0" fill="rgb(224,72,14)" rx="2" ry="2" />
<text  x="820.01" y="335.5" >__generic_..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate (1,333,333 samples, 0.04%)</title><rect x="144.3" y="389" width="0.4" height="15.0" fill="rgb(254,7,43)" rx="2" ry="2" />
<text  x="147.26" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::emplace_back&lt;leveldb::DBImpl::Writer*&gt; (6,666,665 samples, 0.21%)</title><rect x="964.9" y="517" width="2.5" height="15.0" fill="rgb(238,98,49)" rx="2" ry="2" />
<text  x="967.94" y="527.5" ></text>
</g>
<g >
<title>update_group_capacity (1,333,333 samples, 0.04%)</title><rect x="695.0" y="213" width="0.4" height="15.0" fill="rgb(206,122,40)" rx="2" ry="2" />
<text  x="697.96" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_eq (1,333,333 samples, 0.04%)</title><rect x="399.6" y="389" width="0.5" height="15.0" fill="rgb(235,201,16)" rx="2" ry="2" />
<text  x="402.59" y="399.5" ></text>
</g>
<g >
<title>leveldb::Block::Iter::value (1,333,333 samples, 0.04%)</title><rect x="230.7" y="453" width="0.5" height="15.0" fill="rgb(208,153,43)" rx="2" ry="2" />
<text  x="233.67" y="463.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="194.1" y="437" width="0.4" height="15.0" fill="rgb(254,53,11)" rx="2" ry="2" />
<text  x="197.05" y="447.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="94.0" y="341" width="0.5" height="15.0" fill="rgb(227,172,11)" rx="2" ry="2" />
<text  x="96.97" y="351.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::_M_deallocate (1,333,333 samples, 0.04%)</title><rect x="144.3" y="421" width="0.4" height="15.0" fill="rgb(217,227,34)" rx="2" ry="2" />
<text  x="147.26" y="431.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1,333,333 samples, 0.04%)</title><rect x="172.1" y="453" width="0.5" height="15.0" fill="rgb(249,165,41)" rx="2" ry="2" />
<text  x="175.09" y="463.5" ></text>
</g>
<g >
<title>std::move&lt;std::__future_base::_State_baseV2*&amp;&gt; (1,333,333 samples, 0.04%)</title><rect x="1044.0" y="469" width="0.5" height="15.0" fill="rgb(207,49,54)" rx="2" ry="2" />
<text  x="1047.03" y="479.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="103.7" y="405" width="0.5" height="15.0" fill="rgb(223,194,36)" rx="2" ry="2" />
<text  x="106.74" y="415.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;&gt; (49,333,321 samples, 1.53%)</title><rect x="1054.8" y="517" width="18.0" height="15.0" fill="rgb(245,51,31)" rx="2" ry="2" />
<text  x="1057.77" y="527.5" ></text>
</g>
<g >
<title>leveldb::Block::Iter::value (1,333,333 samples, 0.04%)</title><rect x="230.2" y="421" width="0.5" height="15.0" fill="rgb(243,151,35)" rx="2" ry="2" />
<text  x="233.18" y="431.5" ></text>
</g>
<g >
<title>do_writepages (1,333,333 samples, 0.04%)</title><rect x="1128.5" y="405" width="0.5" height="15.0" fill="rgb(214,5,29)" rx="2" ry="2" />
<text  x="1131.49" y="415.5" ></text>
</g>
<g >
<title>[libnuma.so.1.0.0] (1,333,333 samples, 0.04%)</title><rect x="1123.1" y="693" width="0.5" height="15.0" fill="rgb(233,119,46)" rx="2" ry="2" />
<text  x="1126.12" y="703.5" ></text>
</g>
<g >
<title>do_sys_open (1,333,333 samples, 0.04%)</title><rect x="1131.9" y="501" width="0.5" height="15.0" fill="rgb(244,165,34)" rx="2" ry="2" />
<text  x="1134.90" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (1,333,333 samples, 0.04%)</title><rect x="395.7" y="389" width="0.5" height="15.0" fill="rgb(248,76,13)" rx="2" ry="2" />
<text  x="398.68" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (1,333,333 samples, 0.04%)</title><rect x="395.7" y="405" width="0.5" height="15.0" fill="rgb(246,47,28)" rx="2" ry="2" />
<text  x="398.68" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (2,666,666 samples, 0.08%)</title><rect x="165.7" y="389" width="1.0" height="15.0" fill="rgb(231,37,46)" rx="2" ry="2" />
<text  x="168.74" y="399.5" ></text>
</g>
<g >
<title>page_fault (2,666,666 samples, 0.08%)</title><rect x="305.9" y="293" width="0.9" height="15.0" fill="rgb(210,37,38)" rx="2" ry="2" />
<text  x="308.85" y="303.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.04%)</title><rect x="378.6" y="501" width="0.5" height="15.0" fill="rgb(254,157,40)" rx="2" ry="2" />
<text  x="381.60" y="511.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (5,333,332 samples, 0.17%)</title><rect x="763.8" y="501" width="1.9" height="15.0" fill="rgb(208,115,43)" rx="2" ry="2" />
<text  x="766.79" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.04%)</title><rect x="102.8" y="405" width="0.4" height="15.0" fill="rgb(245,22,32)" rx="2" ry="2" />
<text  x="105.76" y="415.5" ></text>
</g>
<g >
<title>leveldb::BuildTable (1,333,333 samples, 0.04%)</title><rect x="1136.8" y="741" width="0.5" height="15.0" fill="rgb(217,24,27)" rx="2" ry="2" />
<text  x="1139.79" y="751.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BackgroundCompaction (1,171,999,707 samples, 36.37%)</title><rect x="10.0" y="549" width="429.1" height="15.0" fill="rgb(245,99,43)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >leveldb::DBImpl::BackgroundCompaction</text>
</g>
<g >
<title>run_rebalance_domains (1,333,333 samples, 0.04%)</title><rect x="958.1" y="389" width="0.5" height="15.0" fill="rgb(212,82,8)" rx="2" ry="2" />
<text  x="961.10" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (7,999,998 samples, 0.25%)</title><rect x="80.3" y="389" width="2.9" height="15.0" fill="rgb(232,205,17)" rx="2" ry="2" />
<text  x="83.30" y="399.5" ></text>
</g>
<g >
<title>std::operator&amp; (2,666,666 samples, 0.08%)</title><rect x="1179.3" y="709" width="0.9" height="15.0" fill="rgb(224,189,22)" rx="2" ry="2" />
<text  x="1182.26" y="719.5" ></text>
</g>
<g >
<title>std::swap&lt;std::__future_base::_Result_base*&gt; (1,333,333 samples, 0.04%)</title><rect x="1021.1" y="325" width="0.5" height="15.0" fill="rgb(206,226,8)" rx="2" ry="2" />
<text  x="1024.08" y="335.5" ></text>
</g>
<g >
<title>std::atomic&lt;unsigned int&gt;::atomic (3,999,999 samples, 0.12%)</title><rect x="1062.6" y="373" width="1.4" height="15.0" fill="rgb(209,128,41)" rx="2" ry="2" />
<text  x="1065.58" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,333,333 samples, 0.04%)</title><rect x="320.5" y="437" width="0.5" height="15.0" fill="rgb(232,87,10)" rx="2" ry="2" />
<text  x="323.50" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (2,666,666 samples, 0.08%)</title><rect x="1037.2" y="469" width="1.0" height="15.0" fill="rgb(248,204,19)" rx="2" ry="2" />
<text  x="1040.19" y="479.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (2,666,666 samples, 0.08%)</title><rect x="28.1" y="453" width="0.9" height="15.0" fill="rgb(225,66,2)" rx="2" ry="2" />
<text  x="31.06" y="463.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (5,333,332 samples, 0.17%)</title><rect x="1140.2" y="725" width="2.0" height="15.0" fill="rgb(226,51,53)" rx="2" ry="2" />
<text  x="1143.20" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_addr (1,333,333 samples, 0.04%)</title><rect x="338.6" y="357" width="0.5" height="15.0" fill="rgb(245,48,47)" rx="2" ry="2" />
<text  x="341.56" y="367.5" ></text>
</g>
<g >
<title>[libtcmalloc.so.4.3.0] (1,333,333 samples, 0.04%)</title><rect x="90.6" y="229" width="0.4" height="15.0" fill="rgb(213,47,9)" rx="2" ry="2" />
<text  x="93.55" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__future_base::_State_baseV2&gt;::new_allocator (1,333,333 samples, 0.04%)</title><rect x="1072.8" y="501" width="0.5" height="15.0" fill="rgb(222,101,46)" rx="2" ry="2" />
<text  x="1075.83" y="511.5" ></text>
</g>
<g >
<title>walk_component (1,333,333 samples, 0.04%)</title><rect x="1131.9" y="437" width="0.5" height="15.0" fill="rgb(211,69,44)" rx="2" ry="2" />
<text  x="1134.90" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (26,666,660 samples, 0.83%)</title><rect x="343.4" y="485" width="9.8" height="15.0" fill="rgb(217,228,1)" rx="2" ry="2" />
<text  x="346.45" y="495.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::MergeIntoFreeList (1,333,333 samples, 0.04%)</title><rect x="329.3" y="341" width="0.5" height="15.0" fill="rgb(225,72,50)" rx="2" ry="2" />
<text  x="332.29" y="351.5" ></text>
</g>
<g >
<title>leveldb::ParseInternalKey (6,666,665 samples, 0.21%)</title><rect x="260.0" y="453" width="2.4" height="15.0" fill="rgb(250,124,35)" rx="2" ry="2" />
<text  x="262.96" y="463.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.04%)</title><rect x="1176.8" y="741" width="0.5" height="15.0" fill="rgb(227,70,18)" rx="2" ry="2" />
<text  x="1179.82" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (3,999,999 samples, 0.12%)</title><rect x="385.4" y="405" width="1.5" height="15.0" fill="rgb(238,65,0)" rx="2" ry="2" />
<text  x="388.43" y="415.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::MayMergeSpans (1,333,333 samples, 0.04%)</title><rect x="329.3" y="325" width="0.5" height="15.0" fill="rgb(210,3,24)" rx="2" ry="2" />
<text  x="332.29" y="335.5" ></text>
</g>
<g >
<title>leveldb::Arena::AllocateAligned (2,666,666 samples, 0.08%)</title><rect x="744.8" y="437" width="0.9" height="15.0" fill="rgb(214,93,17)" rx="2" ry="2" />
<text  x="747.75" y="447.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::CompactMemTable (458,666,552 samples, 14.23%)</title><rect x="10.0" y="533" width="167.9" height="15.0" fill="rgb(248,14,16)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >leveldb::DBImpl::Comp..</text>
</g>
<g >
<title>ext4_da_write_end (143,999,964 samples, 4.47%)</title><rect x="849.2" y="293" width="52.8" height="15.0" fill="rgb(219,100,4)" rx="2" ry="2" />
<text  x="852.23" y="303.5" >ext4_..</text>
</g>
<g >
<title>leveldb::BlockHandle::DecodeFrom (1,333,333 samples, 0.04%)</title><rect x="144.7" y="421" width="0.5" height="15.0" fill="rgb(205,190,51)" rx="2" ry="2" />
<text  x="147.75" y="431.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Add (318,666,587 samples, 9.89%)</title><rect x="18.3" y="485" width="116.7" height="15.0" fill="rgb(244,167,14)" rx="2" ry="2" />
<text  x="21.30" y="495.5" >leveldb::Table..</text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (98,666,642 samples, 3.06%)</title><rect x="592.4" y="389" width="36.2" height="15.0" fill="rgb(253,214,48)" rx="2" ry="2" />
<text  x="595.43" y="399.5" >lev..</text>
</g>
<g >
<title>_dl_lookup_symbol_x (1,333,333 samples, 0.04%)</title><rect x="1132.9" y="613" width="0.5" height="15.0" fill="rgb(252,11,9)" rx="2" ry="2" />
<text  x="1135.88" y="623.5" ></text>
</g>
<g >
<title>leveldb::MemTable::ApproximateMemoryUsage (1,333,333 samples, 0.04%)</title><rect x="481.1" y="517" width="0.5" height="15.0" fill="rgb(215,154,48)" rx="2" ry="2" />
<text  x="484.12" y="527.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (1,333,333 samples, 0.04%)</title><rect x="1145.1" y="741" width="0.5" height="15.0" fill="rgb(245,125,10)" rx="2" ry="2" />
<text  x="1148.08" y="751.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;char*, unsigned long&gt; (23,999,994 samples, 0.74%)</title><rect x="135.5" y="389" width="8.8" height="15.0" fill="rgb(220,137,43)" rx="2" ry="2" />
<text  x="138.47" y="399.5" ></text>
</g>
<g >
<title>std::move&lt;std::__future_base::_Result_base*&amp;&gt; (1,333,333 samples, 0.04%)</title><rect x="1097.7" y="389" width="0.5" height="15.0" fill="rgb(242,163,8)" rx="2" ry="2" />
<text  x="1100.73" y="399.5" ></text>
</g>
<g >
<title>read_pages (6,666,665 samples, 0.21%)</title><rect x="1166.6" y="549" width="2.4" height="15.0" fill="rgb(238,199,54)" rx="2" ry="2" />
<text  x="1169.57" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (3,999,999 samples, 0.12%)</title><rect x="321.0" y="437" width="1.5" height="15.0" fill="rgb(240,14,45)" rx="2" ry="2" />
<text  x="323.99" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.04%)</title><rect x="348.3" y="405" width="0.5" height="15.0" fill="rgb(249,73,23)" rx="2" ry="2" />
<text  x="351.33" y="415.5" ></text>
</g>
<g >
<title>file_free_rcu (3,999,999 samples, 0.12%)</title><rect x="564.1" y="341" width="1.5" height="15.0" fill="rgb(233,57,9)" rx="2" ry="2" />
<text  x="567.12" y="351.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.04%)</title><rect x="1116.8" y="533" width="0.5" height="15.0" fill="rgb(247,95,36)" rx="2" ry="2" />
<text  x="1119.77" y="543.5" ></text>
</g>
<g >
<title>std::__exception_ptr::exception_ptr::exception_ptr (3,999,999 samples, 0.12%)</title><rect x="1031.3" y="517" width="1.5" height="15.0" fill="rgb(209,147,45)" rx="2" ry="2" />
<text  x="1034.33" y="527.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="409.4" y="405" width="0.4" height="15.0" fill="rgb(213,24,8)" rx="2" ry="2" />
<text  x="412.35" y="415.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1,333,333 samples, 0.04%)</title><rect x="399.1" y="357" width="0.5" height="15.0" fill="rgb(235,5,10)" rx="2" ry="2" />
<text  x="402.10" y="367.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.04%)</title><rect x="328.3" y="469" width="0.5" height="15.0" fill="rgb(220,118,39)" rx="2" ry="2" />
<text  x="331.31" y="479.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.04%)</title><rect x="519.7" y="389" width="0.5" height="15.0" fill="rgb(249,150,26)" rx="2" ry="2" />
<text  x="522.69" y="399.5" ></text>
</g>
<g >
<title>pagevec_lookup_entries (1,333,333 samples, 0.04%)</title><rect x="236.0" y="309" width="0.5" height="15.0" fill="rgb(210,50,4)" rx="2" ry="2" />
<text  x="239.04" y="319.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (5,333,332 samples, 0.17%)</title><rect x="1133.4" y="741" width="1.9" height="15.0" fill="rgb(206,159,33)" rx="2" ry="2" />
<text  x="1136.37" y="751.5" ></text>
</g>
<g >
<title>leveldb::Status::~Status (2,666,666 samples, 0.08%)</title><rect x="133.0" y="453" width="1.0" height="15.0" fill="rgb(220,5,26)" rx="2" ry="2" />
<text  x="136.03" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1,333,333 samples, 0.04%)</title><rect x="1143.6" y="725" width="0.5" height="15.0" fill="rgb(212,62,41)" rx="2" ry="2" />
<text  x="1146.62" y="735.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (7,999,998 samples, 0.25%)</title><rect x="233.1" y="485" width="2.9" height="15.0" fill="rgb(209,114,7)" rx="2" ry="2" />
<text  x="236.11" y="495.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::key (1,333,333 samples, 0.04%)</title><rect x="1135.8" y="725" width="0.5" height="15.0" fill="rgb(209,136,4)" rx="2" ry="2" />
<text  x="1138.81" y="735.5" ></text>
</g>
<g >
<title>irq_exit (2,666,666 samples, 0.08%)</title><rect x="499.7" y="437" width="0.9" height="15.0" fill="rgb(215,49,18)" rx="2" ry="2" />
<text  x="502.67" y="447.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (1,333,333 samples, 0.04%)</title><rect x="395.2" y="389" width="0.5" height="15.0" fill="rgb(230,143,33)" rx="2" ry="2" />
<text  x="398.20" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2,666,666 samples, 0.08%)</title><rect x="27.1" y="437" width="1.0" height="15.0" fill="rgb(209,220,52)" rx="2" ry="2" />
<text  x="30.09" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (3,999,999 samples, 0.12%)</title><rect x="1015.7" y="293" width="1.5" height="15.0" fill="rgb(253,54,11)" rx="2" ry="2" />
<text  x="1018.71" y="303.5" ></text>
</g>
<g >
<title>futex_wake (2,666,666 samples, 0.08%)</title><rect x="987.4" y="373" width="1.0" height="15.0" fill="rgb(251,13,30)" rx="2" ry="2" />
<text  x="990.39" y="383.5" ></text>
</g>
<g >
<title>clear_page_dirty_for_io (1,333,333 samples, 0.04%)</title><rect x="1128.5" y="341" width="0.5" height="15.0" fill="rgb(222,131,36)" rx="2" ry="2" />
<text  x="1131.49" y="351.5" ></text>
</g>
<g >
<title>path_openat (1,333,333 samples, 0.04%)</title><rect x="1131.9" y="469" width="0.5" height="15.0" fill="rgb(248,86,17)" rx="2" ry="2" />
<text  x="1134.90" y="479.5" ></text>
</g>
<g >
<title>leveldb::Arena::MemoryUsage (1,333,333 samples, 0.04%)</title><rect x="481.1" y="485" width="0.5" height="15.0" fill="rgb(205,185,49)" rx="2" ry="2" />
<text  x="484.12" y="495.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="26.6" y="389" width="0.5" height="15.0" fill="rgb(209,89,7)" rx="2" ry="2" />
<text  x="29.60" y="399.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Add (166,666,625 samples, 5.17%)</title><rect x="243.4" y="469" width="61.0" height="15.0" fill="rgb(236,115,32)" rx="2" ry="2" />
<text  x="246.36" y="479.5" >leveld..</text>
</g>
<g >
<title>leveldb::Slice::operator[] (15,999,996 samples, 0.50%)</title><rect x="362.5" y="485" width="5.8" height="15.0" fill="rgb(249,144,0)" rx="2" ry="2" />
<text  x="365.49" y="495.5" ></text>
</g>
<g >
<title>try_charge (1,333,333 samples, 0.04%)</title><rect x="332.7" y="245" width="0.5" height="15.0" fill="rgb(218,39,48)" rx="2" ry="2" />
<text  x="335.71" y="255.5" ></text>
</g>
<g >
<title>__x64_sys_rename (1,333,333 samples, 0.04%)</title><rect x="1128.0" y="565" width="0.5" height="15.0" fill="rgb(228,182,25)" rx="2" ry="2" />
<text  x="1131.00" y="575.5" ></text>
</g>
<g >
<title>operator new (1,333,333 samples, 0.04%)</title><rect x="1028.4" y="469" width="0.5" height="15.0" fill="rgb(247,192,1)" rx="2" ry="2" />
<text  x="1031.40" y="479.5" ></text>
</g>
<g >
<title>kmem_cache_free (1,333,333 samples, 0.04%)</title><rect x="913.2" y="309" width="0.5" height="15.0" fill="rgb(245,105,28)" rx="2" ry="2" />
<text  x="916.19" y="319.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::New (1,333,333 samples, 0.04%)</title><rect x="1131.4" y="325" width="0.5" height="15.0" fill="rgb(225,31,24)" rx="2" ry="2" />
<text  x="1134.41" y="335.5" ></text>
</g>
<g >
<title>std::swap&lt;char const*&gt; (7,999,998 samples, 0.25%)</title><rect x="917.1" y="485" width="2.9" height="15.0" fill="rgb(248,218,17)" rx="2" ry="2" />
<text  x="920.09" y="495.5" ></text>
</g>
<g >
<title>leveldb::port::Mutex::Unlock (3,999,999 samples, 0.12%)</title><rect x="957.1" y="533" width="1.5" height="15.0" fill="rgb(249,37,17)" rx="2" ry="2" />
<text  x="960.12" y="543.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MemTableInserter::MemTableInserter (1,333,333 samples, 0.04%)</title><rect x="495.3" y="517" width="0.5" height="15.0" fill="rgb(212,161,35)" rx="2" ry="2" />
<text  x="498.28" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (2,666,666 samples, 0.08%)</title><rect x="1173.9" y="741" width="1.0" height="15.0" fill="rgb(242,57,28)" rx="2" ry="2" />
<text  x="1176.89" y="751.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadNodeEntryPoint (1,171,999,707 samples, 36.37%)</title><rect x="10.0" y="613" width="429.1" height="15.0" fill="rgb(237,39,8)" rx="2" ry="2" />
<text  x="13.00" y="623.5" >leveldb::(anonymous namespace)::PosixEnv::BackgroundThread..</text>
</g>
<g >
<title>tlb_remove_table_rcu (1,333,333 samples, 0.04%)</title><rect x="94.0" y="309" width="0.5" height="15.0" fill="rgb(238,98,45)" rx="2" ry="2" />
<text  x="96.97" y="319.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (3,999,999 samples, 0.12%)</title><rect x="282.4" y="293" width="1.5" height="15.0" fill="rgb(218,55,39)" rx="2" ry="2" />
<text  x="285.42" y="303.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (1,333,333 samples, 0.04%)</title><rect x="323.4" y="405" width="0.5" height="15.0" fill="rgb(211,113,43)" rx="2" ry="2" />
<text  x="326.43" y="415.5" ></text>
</g>
<g >
<title>operator new[] (6,666,665 samples, 0.21%)</title><rect x="129.1" y="453" width="2.5" height="15.0" fill="rgb(248,10,39)" rx="2" ry="2" />
<text  x="132.12" y="463.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (6,666,665 samples, 0.21%)</title><rect x="246.8" y="437" width="2.4" height="15.0" fill="rgb(206,211,3)" rx="2" ry="2" />
<text  x="249.78" y="447.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="218.0" y="325" width="0.5" height="15.0" fill="rgb(229,126,23)" rx="2" ry="2" />
<text  x="220.98" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (7,999,998 samples, 0.25%)</title><rect x="77.4" y="389" width="2.9" height="15.0" fill="rgb(243,131,17)" rx="2" ry="2" />
<text  x="80.37" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (2,666,666 samples, 0.08%)</title><rect x="321.5" y="389" width="1.0" height="15.0" fill="rgb(249,2,50)" rx="2" ry="2" />
<text  x="324.48" y="399.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteRawBlock (29,333,326 samples, 0.91%)</title><rect x="105.2" y="437" width="10.7" height="15.0" fill="rgb(236,72,54)" rx="2" ry="2" />
<text  x="108.20" y="447.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::~_State_baseV2 (21,333,328 samples, 0.66%)</title><rect x="1091.9" y="421" width="7.8" height="15.0" fill="rgb(234,24,22)" rx="2" ry="2" />
<text  x="1094.87" y="431.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1,333,333 samples, 0.04%)</title><rect x="1144.1" y="725" width="0.5" height="15.0" fill="rgb(229,168,27)" rx="2" ry="2" />
<text  x="1147.11" y="735.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::TableBuilder (23,999,994 samples, 0.74%)</title><rect x="135.5" y="485" width="8.8" height="15.0" fill="rgb(237,23,30)" rx="2" ry="2" />
<text  x="138.47" y="495.5" ></text>
</g>
<g >
<title>std::mutex::unlock (2,666,666 samples, 0.08%)</title><rect x="957.6" y="517" width="1.0" height="15.0" fill="rgb(217,124,27)" rx="2" ry="2" />
<text  x="960.61" y="527.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (1,333,333 samples, 0.04%)</title><rect x="504.6" y="277" width="0.4" height="15.0" fill="rgb(249,13,39)" rx="2" ry="2" />
<text  x="507.56" y="287.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MergingIterator::Valid (1,333,333 samples, 0.04%)</title><rect x="204.3" y="501" width="0.5" height="15.0" fill="rgb(226,48,49)" rx="2" ry="2" />
<text  x="207.31" y="511.5" ></text>
</g>
<g >
<title>mpage_map_and_submit_buffers (1,333,333 samples, 0.04%)</title><rect x="1128.5" y="373" width="0.5" height="15.0" fill="rgb(243,107,45)" rx="2" ry="2" />
<text  x="1131.49" y="383.5" ></text>
</g>
<g >
<title>__ext4_journal_stop (17,333,329 samples, 0.54%)</title><rect x="852.2" y="277" width="6.3" height="15.0" fill="rgb(207,213,40)" rx="2" ry="2" />
<text  x="855.16" y="287.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="248.7" y="389" width="0.5" height="15.0" fill="rgb(219,116,41)" rx="2" ry="2" />
<text  x="251.73" y="399.5" ></text>
</g>
<g >
<title>util_unmap (1,333,333 samples, 0.04%)</title><rect x="330.3" y="469" width="0.5" height="15.0" fill="rgb(223,66,5)" rx="2" ry="2" />
<text  x="333.26" y="479.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="1135.8" y="677" width="0.5" height="15.0" fill="rgb(234,98,33)" rx="2" ry="2" />
<text  x="1138.81" y="687.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.04%)</title><rect x="25.1" y="421" width="0.5" height="15.0" fill="rgb(215,19,15)" rx="2" ry="2" />
<text  x="28.13" y="431.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::InitModule (1,333,333 samples, 0.04%)</title><rect x="1123.6" y="661" width="0.5" height="15.0" fill="rgb(246,205,43)" rx="2" ry="2" />
<text  x="1126.60" y="671.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt; &gt;::destroy&lt;std::__future_base::_State_baseV2&gt; (23,999,994 samples, 0.74%)</title><rect x="1090.9" y="453" width="8.8" height="15.0" fill="rgb(226,61,54)" rx="2" ry="2" />
<text  x="1093.89" y="463.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (22,666,661 samples, 0.70%)</title><rect x="736.0" y="421" width="8.3" height="15.0" fill="rgb(224,129,1)" rx="2" ry="2" />
<text  x="738.97" y="431.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (1,333,333 samples, 0.04%)</title><rect x="319.5" y="469" width="0.5" height="15.0" fill="rgb(207,22,49)" rx="2" ry="2" />
<text  x="322.52" y="479.5" ></text>
</g>
<g >
<title>[libtcmalloc.so.4.3.0] (1,333,333 samples, 0.04%)</title><rect x="1131.4" y="277" width="0.5" height="15.0" fill="rgb(243,75,50)" rx="2" ry="2" />
<text  x="1134.41" y="287.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.04%)</title><rect x="466.0" y="453" width="0.5" height="15.0" fill="rgb(216,206,48)" rx="2" ry="2" />
<text  x="468.99" y="463.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (1,333,333 samples, 0.04%)</title><rect x="306.8" y="469" width="0.5" height="15.0" fill="rgb(216,3,1)" rx="2" ry="2" />
<text  x="309.83" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (5,333,332 samples, 0.17%)</title><rect x="397.6" y="389" width="2.0" height="15.0" fill="rgb(251,149,2)" rx="2" ry="2" />
<text  x="400.64" y="399.5" ></text>
</g>
<g >
<title>put_cred_rcu (1,333,333 samples, 0.04%)</title><rect x="212.1" y="373" width="0.5" height="15.0" fill="rgb(236,189,47)" rx="2" ry="2" />
<text  x="215.12" y="383.5" ></text>
</g>
<g >
<title>apparmor_cred_free (1,333,333 samples, 0.04%)</title><rect x="194.1" y="357" width="0.4" height="15.0" fill="rgb(234,133,5)" rx="2" ry="2" />
<text  x="197.05" y="367.5" ></text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.04%)</title><rect x="395.2" y="437" width="0.5" height="15.0" fill="rgb(244,180,24)" rx="2" ry="2" />
<text  x="398.20" y="447.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (10,666,664 samples, 0.33%)</title><rect x="42.2" y="437" width="3.9" height="15.0" fill="rgb(225,187,10)" rx="2" ry="2" />
<text  x="45.22" y="447.5" ></text>
</g>
<g >
<title>leveldb::VersionSet::LogAndApply (2,666,666 samples, 0.08%)</title><rect x="1128.0" y="645" width="1.0" height="15.0" fill="rgb(231,23,35)" rx="2" ry="2" />
<text  x="1131.00" y="655.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (3,999,999 samples, 0.12%)</title><rect x="564.1" y="405" width="1.5" height="15.0" fill="rgb(220,106,45)" rx="2" ry="2" />
<text  x="567.12" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (15,999,996 samples, 0.50%)</title><rect x="69.6" y="373" width="5.8" height="15.0" fill="rgb(227,197,32)" rx="2" ry="2" />
<text  x="72.56" y="383.5" ></text>
</g>
<g >
<title>prefetch_freepointer (1,333,333 samples, 0.04%)</title><rect x="834.6" y="245" width="0.5" height="15.0" fill="rgb(248,211,4)" rx="2" ry="2" />
<text  x="837.58" y="255.5" ></text>
</g>
<g >
<title>leveldb::Status::~Status (1,333,333 samples, 0.04%)</title><rect x="493.3" y="533" width="0.5" height="15.0" fill="rgb(252,42,19)" rx="2" ry="2" />
<text  x="496.33" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (18,666,662 samples, 0.58%)</title><rect x="77.4" y="405" width="6.8" height="15.0" fill="rgb(247,63,0)" rx="2" ry="2" />
<text  x="80.37" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2,666,666 samples, 0.08%)</title><rect x="1115.3" y="517" width="1.0" height="15.0" fill="rgb(245,100,11)" rx="2" ry="2" />
<text  x="1118.30" y="527.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (14,666,663 samples, 0.46%)</title><rect x="1039.1" y="501" width="5.4" height="15.0" fill="rgb(218,220,17)" rx="2" ry="2" />
<text  x="1042.14" y="511.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="995.7" y="341" width="0.5" height="15.0" fill="rgb(208,134,23)" rx="2" ry="2" />
<text  x="998.69" y="351.5" ></text>
</g>
<g >
<title>find_busiest_group (1,333,333 samples, 0.04%)</title><rect x="797.5" y="309" width="0.5" height="15.0" fill="rgb(233,39,25)" rx="2" ry="2" />
<text  x="800.48" y="319.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::InsertRange (2,666,666 samples, 0.08%)</title><rect x="328.8" y="405" width="1.0" height="15.0" fill="rgb(208,116,13)" rx="2" ry="2" />
<text  x="331.80" y="415.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator@plt (1,333,333 samples, 0.04%)</title><rect x="381.5" y="453" width="0.5" height="15.0" fill="rgb(217,16,28)" rx="2" ry="2" />
<text  x="384.53" y="463.5" ></text>
</g>
<g >
<title>std::move&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt;&amp;&gt; (1,333,333 samples, 0.04%)</title><rect x="1181.2" y="725" width="0.5" height="15.0" fill="rgb(252,114,10)" rx="2" ry="2" />
<text  x="1184.21" y="735.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::begin (6,666,665 samples, 0.21%)</title><rect x="961.0" y="517" width="2.5" height="15.0" fill="rgb(205,149,2)" rx="2" ry="2" />
<text  x="964.03" y="527.5" ></text>
</g>
<g >
<title>[libunwind.so.8.0.1] (1,333,333 samples, 0.04%)</title><rect x="1131.4" y="229" width="0.5" height="15.0" fill="rgb(225,60,34)" rx="2" ry="2" />
<text  x="1134.41" y="239.5" ></text>
</g>
<g >
<title>jbd2_journal_stop (1,333,333 samples, 0.04%)</title><rect x="861.9" y="213" width="0.5" height="15.0" fill="rgb(231,129,5)" rx="2" ry="2" />
<text  x="864.92" y="223.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::Add (1,333,333 samples, 0.04%)</title><rect x="1136.3" y="741" width="0.5" height="15.0" fill="rgb(234,178,30)" rx="2" ry="2" />
<text  x="1139.30" y="751.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Valid (1,333,333 samples, 0.04%)</title><rect x="227.7" y="485" width="0.5" height="15.0" fill="rgb(225,209,7)" rx="2" ry="2" />
<text  x="230.74" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::_S_relocate (2,666,666 samples, 0.08%)</title><rect x="437.7" y="485" width="0.9" height="15.0" fill="rgb(225,157,44)" rx="2" ry="2" />
<text  x="440.67" y="495.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (2,666,666 samples, 0.08%)</title><rect x="326.4" y="453" width="0.9" height="15.0" fill="rgb(238,153,54)" rx="2" ry="2" />
<text  x="329.36" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (2,666,666 samples, 0.08%)</title><rect x="340.0" y="469" width="1.0" height="15.0" fill="rgb(223,31,22)" rx="2" ry="2" />
<text  x="343.03" y="479.5" ></text>
</g>
<g >
<title>leveldb::test::RandomString (11,999,997 samples, 0.37%)</title><rect x="461.1" y="533" width="4.4" height="15.0" fill="rgb(244,168,31)" rx="2" ry="2" />
<text  x="464.10" y="543.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed64 (1,333,333 samples, 0.04%)</title><rect x="378.1" y="485" width="0.5" height="15.0" fill="rgb(230,36,51)" rx="2" ry="2" />
<text  x="381.11" y="495.5" ></text>
</g>
<g >
<title>mpage_submit_page (1,333,333 samples, 0.04%)</title><rect x="1128.5" y="357" width="0.5" height="15.0" fill="rgb(232,30,50)" rx="2" ry="2" />
<text  x="1131.49" y="367.5" ></text>
</g>
<g >
<title>std::operator&amp; (1,333,333 samples, 0.04%)</title><rect x="1180.2" y="709" width="0.5" height="15.0" fill="rgb(235,134,0)" rx="2" ry="2" />
<text  x="1183.24" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (5,333,332 samples, 0.17%)</title><rect x="165.3" y="405" width="1.9" height="15.0" fill="rgb(249,16,20)" rx="2" ry="2" />
<text  x="168.25" y="415.5" ></text>
</g>
<g >
<title>truncate_inode_pages_final (1,333,333 samples, 0.04%)</title><rect x="438.6" y="373" width="0.5" height="15.0" fill="rgb(217,227,34)" rx="2" ry="2" />
<text  x="441.65" y="383.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (37,333,324 samples, 1.16%)</title><rect x="942.0" y="469" width="13.7" height="15.0" fill="rgb(237,82,53)" rx="2" ry="2" />
<text  x="944.99" y="479.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Valid (1,333,333 samples, 0.04%)</title><rect x="203.8" y="469" width="0.5" height="15.0" fill="rgb(216,27,8)" rx="2" ry="2" />
<text  x="206.82" y="479.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::Writer::~Writer (2,666,666 samples, 0.08%)</title><rect x="485.5" y="533" width="1.0" height="15.0" fill="rgb(217,71,28)" rx="2" ry="2" />
<text  x="488.52" y="543.5" ></text>
</g>
<g >
<title>_dl_relocate_object (2,666,666 samples, 0.08%)</title><rect x="1132.4" y="661" width="1.0" height="15.0" fill="rgb(247,99,24)" rx="2" ry="2" />
<text  x="1135.39" y="671.5" ></text>
</g>
<g >
<title>vfs_read (1,333,333 samples, 0.04%)</title><rect x="1129.0" y="485" width="0.5" height="15.0" fill="rgb(224,54,45)" rx="2" ry="2" />
<text  x="1131.97" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (3,037,332,574 samples, 94.25%)</title><rect x="10.0" y="629" width="1112.1" height="15.0" fill="rgb(208,25,9)" rx="2" ry="2" />
<text  x="13.00" y="639.5" >std::__invoke_impl&lt;void, void </text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Select1st, true&gt;::_S_cget (1,333,333 samples, 0.04%)</title><rect x="76.9" y="341" width="0.5" height="15.0" fill="rgb(246,156,7)" rx="2" ry="2" />
<text  x="79.88" y="351.5" ></text>
</g>
<g >
<title>leveldb::Status::~Status (2,666,666 samples, 0.08%)</title><rect x="777.0" y="517" width="1.0" height="15.0" fill="rgb(232,108,36)" rx="2" ry="2" />
<text  x="779.98" y="527.5" ></text>
</g>
<g >
<title>queue_work_on (1,333,333 samples, 0.04%)</title><rect x="1135.8" y="597" width="0.5" height="15.0" fill="rgb(232,176,40)" rx="2" ry="2" />
<text  x="1138.81" y="607.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Rep::Rep (6,666,665 samples, 0.21%)</title><rect x="304.4" y="453" width="2.4" height="15.0" fill="rgb(221,18,34)" rx="2" ry="2" />
<text  x="307.39" y="463.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (5,333,332 samples, 0.17%)</title><rect x="1133.4" y="725" width="1.9" height="15.0" fill="rgb(242,198,2)" rx="2" ry="2" />
<text  x="1136.37" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (3,999,999 samples, 0.12%)</title><rect x="263.9" y="389" width="1.4" height="15.0" fill="rgb(250,214,23)" rx="2" ry="2" />
<text  x="266.87" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (7,999,998 samples, 0.25%)</title><rect x="255.6" y="437" width="2.9" height="15.0" fill="rgb(209,13,28)" rx="2" ry="2" />
<text  x="258.57" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (37,333,324 samples, 1.16%)</title><rect x="63.7" y="405" width="13.7" height="15.0" fill="rgb(252,170,36)" rx="2" ry="2" />
<text  x="66.70" y="415.5" ></text>
</g>
<g >
<title>leveldb::Random::Next (2,666,666 samples, 0.08%)</title><rect x="755.0" y="421" width="1.0" height="15.0" fill="rgb(235,177,52)" rx="2" ry="2" />
<text  x="758.01" y="431.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="913.2" y="357" width="0.5" height="15.0" fill="rgb(220,173,44)" rx="2" ry="2" />
<text  x="916.19" y="367.5" ></text>
</g>
<g >
<title>__GI__IO_default_xsputn (2,666,666 samples, 0.08%)</title><rect x="455.7" y="485" width="1.0" height="15.0" fill="rgb(215,105,30)" rx="2" ry="2" />
<text  x="458.73" y="495.5" ></text>
</g>
<g >
<title>load_balance (1,333,333 samples, 0.04%)</title><rect x="958.1" y="357" width="0.5" height="15.0" fill="rgb(246,214,40)" rx="2" ry="2" />
<text  x="961.10" y="367.5" ></text>
</g>
<g >
<title>leveldb::operator== (2,666,666 samples, 0.08%)</title><rect x="254.6" y="437" width="1.0" height="15.0" fill="rgb(235,37,45)" rx="2" ry="2" />
<text  x="257.59" y="447.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock (1,333,333 samples, 0.04%)</title><rect x="956.6" y="485" width="0.5" height="15.0" fill="rgb(244,188,52)" rx="2" ry="2" />
<text  x="959.64" y="495.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="913.2" y="373" width="0.5" height="15.0" fill="rgb(214,182,41)" rx="2" ry="2" />
<text  x="916.19" y="383.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::~TableBuilder (1,333,333 samples, 0.04%)</title><rect x="330.8" y="501" width="0.4" height="15.0" fill="rgb(244,79,6)" rx="2" ry="2" />
<text  x="333.75" y="511.5" ></text>
</g>
<g >
<title>run_timer_softirq (1,333,333 samples, 0.04%)</title><rect x="1135.8" y="645" width="0.5" height="15.0" fill="rgb(233,176,3)" rx="2" ry="2" />
<text  x="1138.81" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (7,999,998 samples, 0.25%)</title><rect x="349.8" y="469" width="2.9" height="15.0" fill="rgb(236,208,24)" rx="2" ry="2" />
<text  x="352.79" y="479.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.04%)</title><rect x="218.0" y="293" width="0.5" height="15.0" fill="rgb(214,226,49)" rx="2" ry="2" />
<text  x="220.98" y="303.5" ></text>
</g>
<g >
<title>block_invalidatepage (1,333,333 samples, 0.04%)</title><rect x="1127.0" y="437" width="0.5" height="15.0" fill="rgb(208,190,21)" rx="2" ry="2" />
<text  x="1130.02" y="447.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__future_base::_Result_base*, false&gt;::_Head_base&lt;std::__future_base::_Result_base*&amp;&gt; (1,333,333 samples, 0.04%)</title><rect x="1011.8" y="261" width="0.5" height="15.0" fill="rgb(250,19,3)" rx="2" ry="2" />
<text  x="1014.80" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (6,666,665 samples, 0.21%)</title><rect x="1088.5" y="437" width="2.4" height="15.0" fill="rgb(249,45,37)" rx="2" ry="2" />
<text  x="1091.45" y="447.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (6,666,665 samples, 0.21%)</title><rect x="1100.2" y="501" width="2.4" height="15.0" fill="rgb(223,131,22)" rx="2" ry="2" />
<text  x="1103.17" y="511.5" ></text>
</g>
<g >
<title>page_fault (2,666,666 samples, 0.08%)</title><rect x="332.2" y="325" width="1.0" height="15.0" fill="rgb(253,22,19)" rx="2" ry="2" />
<text  x="335.22" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (2,666,666 samples, 0.08%)</title><rect x="1173.9" y="725" width="1.0" height="15.0" fill="rgb(229,92,22)" rx="2" ry="2" />
<text  x="1176.89" y="735.5" ></text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.04%)</title><rect x="1131.4" y="405" width="0.5" height="15.0" fill="rgb(233,149,30)" rx="2" ry="2" />
<text  x="1134.41" y="415.5" ></text>
</g>
<g >
<title>futex_wake (33,333,325 samples, 1.03%)</title><rect x="978.1" y="453" width="12.2" height="15.0" fill="rgb(244,206,7)" rx="2" ry="2" />
<text  x="981.12" y="463.5" ></text>
</g>
<g >
<title>std::forward&lt;leveldb::DBImpl::Writer*&gt; (2,666,666 samples, 0.08%)</title><rect x="966.4" y="485" width="1.0" height="15.0" fill="rgb(216,156,37)" rx="2" ry="2" />
<text  x="969.40" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::__future_base::_State_baseV2&gt;::_M_ptr (2,666,666 samples, 0.08%)</title><rect x="1058.7" y="437" width="0.9" height="15.0" fill="rgb(224,58,22)" rx="2" ry="2" />
<text  x="1061.67" y="447.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt; (1,333,333 samples, 0.04%)</title><rect x="91.0" y="357" width="0.5" height="15.0" fill="rgb(211,1,48)" rx="2" ry="2" />
<text  x="94.04" y="367.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::Next (1,333,333 samples, 0.04%)</title><rect x="324.4" y="485" width="0.5" height="15.0" fill="rgb(241,58,15)" rx="2" ry="2" />
<text  x="327.41" y="495.5" ></text>
</g>
<g >
<title>__GI_madvise (1,333,333 samples, 0.04%)</title><rect x="330.8" y="309" width="0.4" height="15.0" fill="rgb(254,201,22)" rx="2" ry="2" />
<text  x="333.75" y="319.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Value (1,333,333 samples, 0.04%)</title><rect x="135.0" y="437" width="0.5" height="15.0" fill="rgb(221,161,31)" rx="2" ry="2" />
<text  x="137.98" y="447.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;leveldb::Status&gt;::_M_set (2,666,666 samples, 0.08%)</title><rect x="997.6" y="309" width="1.0" height="15.0" fill="rgb(232,213,6)" rx="2" ry="2" />
<text  x="1000.65" y="319.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.04%)</title><rect x="913.2" y="341" width="0.5" height="15.0" fill="rgb(247,33,54)" rx="2" ry="2" />
<text  x="916.19" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (15,999,996 samples, 0.50%)</title><rect x="69.6" y="357" width="5.8" height="15.0" fill="rgb(231,199,15)" rx="2" ry="2" />
<text  x="72.56" y="367.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="743.8" y="341" width="0.5" height="15.0" fill="rgb(211,225,28)" rx="2" ry="2" />
<text  x="746.78" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find (1,333,333 samples, 0.04%)</title><rect x="379.1" y="453" width="0.5" height="15.0" fill="rgb(230,162,51)" rx="2" ry="2" />
<text  x="382.09" y="463.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (6,666,665 samples, 0.21%)</title><rect x="156.0" y="389" width="2.4" height="15.0" fill="rgb(246,173,18)" rx="2" ry="2" />
<text  x="158.97" y="399.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;leveldb::Status&gt;::_M_value (1,333,333 samples, 0.04%)</title><rect x="1044.5" y="533" width="0.5" height="15.0" fill="rgb(232,140,53)" rx="2" ry="2" />
<text  x="1047.51" y="543.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Update (5,333,332 samples, 0.17%)</title><rect x="223.8" y="453" width="2.0" height="15.0" fill="rgb(245,24,20)" rx="2" ry="2" />
<text  x="226.84" y="463.5" ></text>
</g>
<g >
<title>crypto_shash_update (23,999,994 samples, 0.74%)</title><rect x="877.1" y="165" width="8.7" height="15.0" fill="rgb(246,181,34)" rx="2" ry="2" />
<text  x="880.06" y="175.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (2,666,666 samples, 0.08%)</title><rect x="342.0" y="501" width="1.0" height="15.0" fill="rgb(220,159,5)" rx="2" ry="2" />
<text  x="344.98" y="511.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;*, unsigned long&gt; (2,666,666 samples, 0.08%)</title><rect x="1130.9" y="581" width="1.0" height="15.0" fill="rgb(220,106,27)" rx="2" ry="2" />
<text  x="1133.93" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::push_back (7,999,998 samples, 0.25%)</title><rect x="964.4" y="533" width="3.0" height="15.0" fill="rgb(241,201,25)" rx="2" ry="2" />
<text  x="967.45" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1,333,333 samples, 0.04%)</title><rect x="1171.0" y="725" width="0.4" height="15.0" fill="rgb(248,49,0)" rx="2" ry="2" />
<text  x="1173.96" y="735.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (3,999,999 samples, 0.12%)</title><rect x="391.3" y="405" width="1.5" height="15.0" fill="rgb(253,123,24)" rx="2" ry="2" />
<text  x="394.29" y="415.5" ></text>
</g>
<g >
<title>truncate_inode_pages_range (2,666,666 samples, 0.08%)</title><rect x="10.0" y="341" width="1.0" height="15.0" fill="rgb(225,89,1)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="218.0" y="357" width="0.5" height="15.0" fill="rgb(233,163,37)" rx="2" ry="2" />
<text  x="220.98" y="367.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (1,333,333 samples, 0.04%)</title><rect x="1142.6" y="725" width="0.5" height="15.0" fill="rgb(238,163,42)" rx="2" ry="2" />
<text  x="1145.64" y="735.5" ></text>
</g>
<g >
<title>rebalance_domains (2,666,666 samples, 0.08%)</title><rect x="499.7" y="389" width="0.9" height="15.0" fill="rgb(223,6,51)" rx="2" ry="2" />
<text  x="502.67" y="399.5" ></text>
</g>
<g >
<title>operator new[] (3,999,999 samples, 0.12%)</title><rect x="285.3" y="389" width="1.5" height="15.0" fill="rgb(237,221,25)" rx="2" ry="2" />
<text  x="288.35" y="399.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::WriteWrapper (1,333,333 samples, 0.04%)</title><rect x="1138.2" y="741" width="0.5" height="15.0" fill="rgb(251,80,49)" rx="2" ry="2" />
<text  x="1141.25" y="751.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (1,333,333 samples, 0.04%)</title><rect x="286.3" y="373" width="0.5" height="15.0" fill="rgb(211,58,8)" rx="2" ry="2" />
<text  x="289.33" y="383.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="473.3" y="501" width="0.5" height="15.0" fill="rgb(249,175,13)" rx="2" ry="2" />
<text  x="476.31" y="511.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::_M_head (3,999,999 samples, 0.12%)</title><rect x="1015.7" y="245" width="1.5" height="15.0" fill="rgb(248,227,28)" rx="2" ry="2" />
<text  x="1018.71" y="255.5" ></text>
</g>
<g >
<title>std::__addressof&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.04%)</title><rect x="1088.0" y="437" width="0.5" height="15.0" fill="rgb(237,69,29)" rx="2" ry="2" />
<text  x="1090.96" y="447.5" ></text>
</g>
<g >
<title>crypto_shash_update (1,333,333 samples, 0.04%)</title><rect x="825.8" y="181" width="0.5" height="15.0" fill="rgb(227,18,29)" rx="2" ry="2" />
<text  x="828.80" y="191.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (3,999,999 samples, 0.12%)</title><rect x="914.2" y="501" width="1.4" height="15.0" fill="rgb(253,46,53)" rx="2" ry="2" />
<text  x="917.16" y="511.5" ></text>
</g>
<g >
<title>operator new[] (2,666,666 samples, 0.08%)</title><rect x="302.4" y="437" width="1.0" height="15.0" fill="rgb(247,93,23)" rx="2" ry="2" />
<text  x="305.44" y="447.5" ></text>
</g>
<g >
<title>evict (1,333,333 samples, 0.04%)</title><rect x="438.6" y="405" width="0.5" height="15.0" fill="rgb(238,32,13)" rx="2" ry="2" />
<text  x="441.65" y="415.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::SetNext (2,666,666 samples, 0.08%)</title><rect x="1152.9" y="741" width="1.0" height="15.0" fill="rgb(236,208,39)" rx="2" ry="2" />
<text  x="1155.90" y="751.5" ></text>
</g>
<g >
<title>leveldb::port::Mutex::Lock (1,333,333 samples, 0.04%)</title><rect x="1158.3" y="741" width="0.5" height="15.0" fill="rgb(237,218,51)" rx="2" ry="2" />
<text  x="1161.27" y="751.5" ></text>
</g>
<g >
<title>alloc_page_buffers (2,666,666 samples, 0.08%)</title><rect x="1169.5" y="549" width="1.0" height="15.0" fill="rgb(246,224,0)" rx="2" ry="2" />
<text  x="1172.50" y="559.5" ></text>
</g>
<g >
<title>ext4_evict_inode (9,333,331 samples, 0.29%)</title><rect x="1124.6" y="533" width="3.4" height="15.0" fill="rgb(244,104,33)" rx="2" ry="2" />
<text  x="1127.58" y="543.5" ></text>
</g>
<g >
<title>ext4_es_insert_extent (2,666,666 samples, 0.08%)</title><rect x="842.4" y="245" width="1.0" height="15.0" fill="rgb(208,113,52)" rx="2" ry="2" />
<text  x="845.40" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.04%)</title><rect x="315.1" y="373" width="0.5" height="15.0" fill="rgb(216,55,16)" rx="2" ry="2" />
<text  x="318.13" y="383.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::RemoveObsoleteFiles (1,333,333 samples, 0.04%)</title><rect x="438.6" y="533" width="0.5" height="15.0" fill="rgb(241,118,14)" rx="2" ry="2" />
<text  x="441.65" y="543.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (1,333,333 samples, 0.04%)</title><rect x="1184.6" y="725" width="0.5" height="15.0" fill="rgb(239,131,25)" rx="2" ry="2" />
<text  x="1187.63" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::__future_base::_State_baseV2&gt;::_M_ptr (1,333,333 samples, 0.04%)</title><rect x="1085.5" y="437" width="0.5" height="15.0" fill="rgb(216,168,12)" rx="2" ry="2" />
<text  x="1088.52" y="447.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (2,666,666 samples, 0.08%)</title><rect x="201.4" y="453" width="1.0" height="15.0" fill="rgb(225,64,44)" rx="2" ry="2" />
<text  x="204.38" y="463.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MemTableInserter::~MemTableInserter (1,333,333 samples, 0.04%)</title><rect x="1156.8" y="725" width="0.5" height="15.0" fill="rgb(210,115,50)" rx="2" ry="2" />
<text  x="1159.80" y="735.5" ></text>
</g>
<g >
<title>leveldb::MemTable::Add (710,666,489 samples, 22.05%)</title><rect x="496.7" y="485" width="260.3" height="15.0" fill="rgb(238,169,17)" rx="2" ry="2" />
<text  x="499.74" y="495.5" >leveldb::MemTable::Add</text>
</g>
<g >
<title>__filemap_fdatawrite_range (1,333,333 samples, 0.04%)</title><rect x="1128.5" y="421" width="0.5" height="15.0" fill="rgb(205,151,16)" rx="2" ry="2" />
<text  x="1131.49" y="431.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,333,333 samples, 0.04%)</title><rect x="90.1" y="213" width="0.5" height="15.0" fill="rgb(222,58,21)" rx="2" ry="2" />
<text  x="93.07" y="223.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (2,666,666 samples, 0.08%)</title><rect x="339.1" y="405" width="0.9" height="15.0" fill="rgb(243,149,37)" rx="2" ry="2" />
<text  x="342.05" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (26,666,660 samples, 0.83%)</title><rect x="148.7" y="453" width="9.7" height="15.0" fill="rgb(217,76,20)" rx="2" ry="2" />
<text  x="151.65" y="463.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::RoundUp&lt;4&gt; (1,333,333 samples, 0.04%)</title><rect x="417.2" y="421" width="0.5" height="15.0" fill="rgb(252,205,34)" rx="2" ry="2" />
<text  x="420.17" y="431.5" ></text>
</g>
<g >
<title>do_unlinkat (2,666,666 samples, 0.08%)</title><rect x="236.0" y="405" width="1.0" height="15.0" fill="rgb(249,129,0)" rx="2" ry="2" />
<text  x="239.04" y="415.5" ></text>
</g>
<g >
<title>get_futex_key_refs.isra.16 (1,333,333 samples, 0.04%)</title><rect x="987.9" y="357" width="0.5" height="15.0" fill="rgb(206,184,39)" rx="2" ry="2" />
<text  x="990.88" y="367.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (1,333,333 samples, 0.04%)</title><rect x="177.5" y="469" width="0.4" height="15.0" fill="rgb(205,144,16)" rx="2" ry="2" />
<text  x="180.46" y="479.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="797.5" y="405" width="0.5" height="15.0" fill="rgb(211,106,51)" rx="2" ry="2" />
<text  x="800.48" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.04%)</title><rect x="170.1" y="453" width="0.5" height="15.0" fill="rgb(241,20,18)" rx="2" ry="2" />
<text  x="173.13" y="463.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.04%)</title><rect x="995.7" y="277" width="0.5" height="15.0" fill="rgb(219,73,32)" rx="2" ry="2" />
<text  x="998.69" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,333,333 samples, 0.04%)</title><rect x="279.0" y="325" width="0.5" height="15.0" fill="rgb(236,216,52)" rx="2" ry="2" />
<text  x="282.00" y="335.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (82,666,646 samples, 2.57%)</title><rect x="992.3" y="389" width="30.2" height="15.0" fill="rgb(214,23,0)" rx="2" ry="2" />
<text  x="995.28" y="399.5" >st..</text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (10,666,664 samples, 0.33%)</title><rect x="1107.0" y="533" width="3.9" height="15.0" fill="rgb(216,103,29)" rx="2" ry="2" />
<text  x="1110.00" y="543.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (3,037,332,574 samples, 94.25%)</title><rect x="10.0" y="677" width="1112.1" height="15.0" fill="rgb(249,86,21)" rx="2" ry="2" />
<text  x="13.00" y="687.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>ext4_sync_file (1,333,333 samples, 0.04%)</title><rect x="1128.5" y="453" width="0.5" height="15.0" fill="rgb(216,66,48)" rx="2" ry="2" />
<text  x="1131.49" y="463.5" ></text>
</g>
<g >
<title>[libunwind.so.8.0.1] (1,333,333 samples, 0.04%)</title><rect x="90.6" y="197" width="0.4" height="15.0" fill="rgb(221,126,29)" rx="2" ry="2" />
<text  x="93.55" y="207.5" ></text>
</g>
<g >
<title>__gthread_active_p (1,333,333 samples, 0.04%)</title><rect x="487.0" y="469" width="0.5" height="15.0" fill="rgb(244,84,39)" rx="2" ry="2" />
<text  x="489.98" y="479.5" ></text>
</g>
<g >
<title>__do_softirq (2,666,666 samples, 0.08%)</title><rect x="499.7" y="421" width="0.9" height="15.0" fill="rgb(250,69,43)" rx="2" ry="2" />
<text  x="502.67" y="431.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;&gt; &gt; (1,333,333 samples, 0.04%)</title><rect x="283.9" y="341" width="0.5" height="15.0" fill="rgb(239,36,22)" rx="2" ry="2" />
<text  x="286.88" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (1,333,333 samples, 0.04%)</title><rect x="91.0" y="373" width="0.5" height="15.0" fill="rgb(210,225,29)" rx="2" ry="2" />
<text  x="94.04" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (10,666,664 samples, 0.33%)</title><rect x="97.4" y="373" width="3.9" height="15.0" fill="rgb(227,224,41)" rx="2" ry="2" />
<text  x="100.39" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::__future_base::_State_baseV2&gt;::_M_addr (2,666,666 samples, 0.08%)</title><rect x="1058.7" y="421" width="0.9" height="15.0" fill="rgb(232,229,25)" rx="2" ry="2" />
<text  x="1061.67" y="431.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::~TableBuilder (1,333,333 samples, 0.04%)</title><rect x="144.3" y="485" width="0.4" height="15.0" fill="rgb(207,3,34)" rx="2" ry="2" />
<text  x="147.26" y="495.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.04%)</title><rect x="115.9" y="325" width="0.5" height="15.0" fill="rgb(231,23,22)" rx="2" ry="2" />
<text  x="118.94" y="335.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (95,999,976 samples, 2.98%)</title><rect x="860.0" y="261" width="35.1" height="15.0" fill="rgb(241,183,37)" rx="2" ry="2" />
<text  x="862.97" y="271.5" >__..</text>
</g>
<g >
<title>std::operator==&lt;char&gt; (6,666,665 samples, 0.21%)</title><rect x="156.0" y="373" width="2.4" height="15.0" fill="rgb(220,120,40)" rx="2" ry="2" />
<text  x="158.97" y="383.5" ></text>
</g>
<g >
<title>do_page_fault (13,333,330 samples, 0.41%)</title><rect x="1165.6" y="709" width="4.9" height="15.0" fill="rgb(241,180,53)" rx="2" ry="2" />
<text  x="1168.59" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (9,333,331 samples, 0.29%)</title><rect x="396.7" y="437" width="3.4" height="15.0" fill="rgb(213,100,21)" rx="2" ry="2" />
<text  x="399.66" y="447.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (5,333,332 samples, 0.17%)</title><rect x="748.2" y="437" width="1.9" height="15.0" fill="rgb(216,92,34)" rx="2" ry="2" />
<text  x="751.17" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt;::_M_create_nodes (1,333,333 samples, 0.04%)</title><rect x="1131.4" y="469" width="0.5" height="15.0" fill="rgb(227,180,31)" rx="2" ry="2" />
<text  x="1134.41" y="479.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (86,666,645 samples, 2.69%)</title><rect x="991.3" y="437" width="31.7" height="15.0" fill="rgb(241,148,12)" rx="2" ry="2" />
<text  x="994.30" y="447.5" >st..</text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__future_base::_Result_base*, false&gt;::_M_head (1,333,333 samples, 0.04%)</title><rect x="1097.2" y="325" width="0.5" height="15.0" fill="rgb(222,34,17)" rx="2" ry="2" />
<text  x="1100.24" y="335.5" ></text>
</g>
<g >
<title>crc32c_pcl_intel_update (9,333,331 samples, 0.29%)</title><rect x="873.6" y="165" width="3.5" height="15.0" fill="rgb(234,198,17)" rx="2" ry="2" />
<text  x="876.64" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (7,999,998 samples, 0.25%)</title><rect x="1099.7" y="533" width="2.9" height="15.0" fill="rgb(251,104,28)" rx="2" ry="2" />
<text  x="1102.68" y="543.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="743.8" y="357" width="0.5" height="15.0" fill="rgb(248,115,26)" rx="2" ry="2" />
<text  x="746.78" y="367.5" ></text>
</g>
<g >
<title>__x64_sys_unlink (1,333,333 samples, 0.04%)</title><rect x="438.6" y="453" width="0.5" height="15.0" fill="rgb(207,43,5)" rx="2" ry="2" />
<text  x="441.65" y="463.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="194.1" y="453" width="0.4" height="15.0" fill="rgb(228,52,46)" rx="2" ry="2" />
<text  x="197.05" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt;::_M_allocate_node (1,333,333 samples, 0.04%)</title><rect x="1131.4" y="453" width="0.5" height="15.0" fill="rgb(242,229,10)" rx="2" ry="2" />
<text  x="1134.41" y="463.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (1,333,333 samples, 0.04%)</title><rect x="1178.3" y="741" width="0.5" height="15.0" fill="rgb(249,149,32)" rx="2" ry="2" />
<text  x="1181.28" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (5,333,332 samples, 0.17%)</title><rect x="61.8" y="389" width="1.9" height="15.0" fill="rgb(239,164,25)" rx="2" ry="2" />
<text  x="64.75" y="399.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::Run (7,999,998 samples, 0.25%)</title><rect x="1128.0" y="693" width="2.9" height="15.0" fill="rgb(242,148,32)" rx="2" ry="2" />
<text  x="1131.00" y="703.5" ></text>
</g>
<g >
<title>leveldb::Status::Status (1,333,333 samples, 0.04%)</title><rect x="481.6" y="517" width="0.5" height="15.0" fill="rgb(245,219,33)" rx="2" ry="2" />
<text  x="484.61" y="527.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned int&gt;::__atomic_base (2,666,666 samples, 0.08%)</title><rect x="1063.1" y="357" width="0.9" height="15.0" fill="rgb(222,104,20)" rx="2" ry="2" />
<text  x="1066.07" y="367.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (3,999,999 samples, 0.12%)</title><rect x="955.7" y="501" width="1.4" height="15.0" fill="rgb(231,44,2)" rx="2" ry="2" />
<text  x="958.66" y="511.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1,333,333 samples, 0.04%)</title><rect x="797.5" y="341" width="0.5" height="15.0" fill="rgb(217,177,8)" rx="2" ry="2" />
<text  x="800.48" y="351.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.04%)</title><rect x="286.3" y="293" width="0.5" height="15.0" fill="rgb(239,119,19)" rx="2" ry="2" />
<text  x="289.33" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (1,333,333 samples, 0.04%)</title><rect x="1172.9" y="725" width="0.5" height="15.0" fill="rgb(240,61,8)" rx="2" ry="2" />
<text  x="1175.91" y="735.5" ></text>
</g>
<g >
<title>leveldb::Random::Next (2,666,666 samples, 0.08%)</title><rect x="1103.6" y="549" width="1.0" height="15.0" fill="rgb(208,70,54)" rx="2" ry="2" />
<text  x="1106.59" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt;::_Deque_base (2,666,666 samples, 0.08%)</title><rect x="1130.9" y="501" width="1.0" height="15.0" fill="rgb(227,40,11)" rx="2" ry="2" />
<text  x="1133.93" y="511.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Next (3,999,999 samples, 0.12%)</title><rect x="171.1" y="485" width="1.5" height="15.0" fill="rgb(254,88,52)" rx="2" ry="2" />
<text  x="174.11" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1,333,333 samples, 0.04%)</title><rect x="318.1" y="437" width="0.4" height="15.0" fill="rgb(242,62,47)" rx="2" ry="2" />
<text  x="321.06" y="447.5" ></text>
</g>
<g >
<title>tcmalloc::SizeMap::Init (1,333,333 samples, 0.04%)</title><rect x="1123.6" y="629" width="0.5" height="15.0" fill="rgb(207,229,42)" rx="2" ry="2" />
<text  x="1126.60" y="639.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (1,333,333 samples, 0.04%)</title><rect x="169.2" y="421" width="0.4" height="15.0" fill="rgb(254,185,10)" rx="2" ry="2" />
<text  x="172.16" y="431.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Valid (1,333,333 samples, 0.04%)</title><rect x="12.9" y="453" width="0.5" height="15.0" fill="rgb(250,99,16)" rx="2" ry="2" />
<text  x="15.93" y="463.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::tuple&lt;std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter, true&gt; (2,666,666 samples, 0.08%)</title><rect x="1065.5" y="357" width="1.0" height="15.0" fill="rgb(220,51,41)" rx="2" ry="2" />
<text  x="1068.51" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_state (1,333,333 samples, 0.04%)</title><rect x="83.7" y="389" width="0.5" height="15.0" fill="rgb(251,27,28)" rx="2" ry="2" />
<text  x="86.72" y="399.5" ></text>
</g>
<g >
<title>ext4_page_mkwrite (3,999,999 samples, 0.12%)</title><rect x="1169.0" y="629" width="1.5" height="15.0" fill="rgb(211,172,36)" rx="2" ry="2" />
<text  x="1172.01" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1,333,333 samples, 0.04%)</title><rect x="372.3" y="485" width="0.4" height="15.0" fill="rgb(221,23,47)" rx="2" ry="2" />
<text  x="375.25" y="495.5" ></text>
</g>
<g >
<title>_cond_resched (1,333,333 samples, 0.04%)</title><rect x="892.2" y="165" width="0.5" height="15.0" fill="rgb(248,125,1)" rx="2" ry="2" />
<text  x="895.19" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (14,666,663 samples, 0.46%)</title><rect x="268.8" y="357" width="5.3" height="15.0" fill="rgb(231,73,26)" rx="2" ry="2" />
<text  x="271.75" y="367.5" ></text>
</g>
<g >
<title>alloc_pages_vma (2,666,666 samples, 0.08%)</title><rect x="282.9" y="181" width="1.0" height="15.0" fill="rgb(241,189,8)" rx="2" ry="2" />
<text  x="285.91" y="191.5" ></text>
</g>
<g >
<title>grab_cache_page_write_begin (13,333,330 samples, 0.41%)</title><rect x="844.3" y="277" width="4.9" height="15.0" fill="rgb(233,185,13)" rx="2" ry="2" />
<text  x="847.35" y="287.5" ></text>
</g>
<g >
<title>__x64_sys_write (302,666,591 samples, 9.39%)</title><rect x="802.4" y="405" width="110.8" height="15.0" fill="rgb(242,65,8)" rx="2" ry="2" />
<text  x="805.36" y="415.5" >__x64_sys_write</text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (14,666,663 samples, 0.46%)</title><rect x="206.3" y="469" width="5.3" height="15.0" fill="rgb(252,26,34)" rx="2" ry="2" />
<text  x="209.26" y="479.5" ></text>
</g>
<g >
<title>create_empty_buffers (1,333,333 samples, 0.04%)</title><rect x="841.4" y="261" width="0.5" height="15.0" fill="rgb(252,160,32)" rx="2" ry="2" />
<text  x="844.42" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (22,666,661 samples, 0.70%)</title><rect x="382.5" y="437" width="8.3" height="15.0" fill="rgb(222,117,39)" rx="2" ry="2" />
<text  x="385.50" y="447.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.04%)</title><rect x="90.1" y="261" width="0.5" height="15.0" fill="rgb(235,83,37)" rx="2" ry="2" />
<text  x="93.07" y="271.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="194.1" y="421" width="0.4" height="15.0" fill="rgb(240,44,53)" rx="2" ry="2" />
<text  x="197.05" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (2,666,666 samples, 0.08%)</title><rect x="169.2" y="437" width="0.9" height="15.0" fill="rgb(210,19,37)" rx="2" ry="2" />
<text  x="172.16" y="447.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.04%)</title><rect x="330.8" y="293" width="0.4" height="15.0" fill="rgb(217,61,31)" rx="2" ry="2" />
<text  x="333.75" y="303.5" ></text>
</g>
<g >
<title>run_timer_softirq (1,333,333 samples, 0.04%)</title><rect x="1130.9" y="389" width="0.5" height="15.0" fill="rgb(243,220,3)" rx="2" ry="2" />
<text  x="1133.93" y="399.5" ></text>
</g>
<g >
<title>arch_freq_prepare_all (3,999,999 samples, 0.12%)</title><rect x="1129.5" y="405" width="1.4" height="15.0" fill="rgb(245,145,41)" rx="2" ry="2" />
<text  x="1132.46" y="415.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.04%)</title><rect x="306.3" y="245" width="0.5" height="15.0" fill="rgb(221,152,43)" rx="2" ry="2" />
<text  x="309.34" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1,333,333 samples, 0.04%)</title><rect x="1171.0" y="741" width="0.4" height="15.0" fill="rgb(240,101,1)" rx="2" ry="2" />
<text  x="1173.96" y="751.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,333,333 samples, 0.04%)</title><rect x="503.6" y="277" width="0.5" height="15.0" fill="rgb(234,215,5)" rx="2" ry="2" />
<text  x="506.58" y="287.5" ></text>
</g>
<g >
<title>std::operator==&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt; (2,666,666 samples, 0.08%)</title><rect x="475.8" y="501" width="0.9" height="15.0" fill="rgb(220,193,29)" rx="2" ry="2" />
<text  x="478.75" y="511.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.04%)</title><rect x="336.6" y="325" width="0.5" height="15.0" fill="rgb(241,4,30)" rx="2" ry="2" />
<text  x="339.61" y="335.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.04%)</title><rect x="1177.3" y="725" width="0.5" height="15.0" fill="rgb(216,214,9)" rx="2" ry="2" />
<text  x="1180.31" y="735.5" ></text>
</g>
<g >
<title>jbd2_journal_try_to_free_buffers (1,333,333 samples, 0.04%)</title><rect x="438.6" y="245" width="0.5" height="15.0" fill="rgb(217,56,37)" rx="2" ry="2" />
<text  x="441.65" y="255.5" ></text>
</g>
<g >
<title>std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (9,333,331 samples, 0.29%)</title><rect x="1066.5" y="453" width="3.4" height="15.0" fill="rgb(206,175,40)" rx="2" ry="2" />
<text  x="1069.48" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get (3,999,999 samples, 0.12%)</title><rect x="1006.4" y="277" width="1.5" height="15.0" fill="rgb(220,205,35)" rx="2" ry="2" />
<text  x="1009.43" y="287.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::MergeIntoFreeList (1,333,333 samples, 0.04%)</title><rect x="330.8" y="357" width="0.4" height="15.0" fill="rgb(241,172,9)" rx="2" ry="2" />
<text  x="333.75" y="367.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.04%)</title><rect x="330.3" y="437" width="0.5" height="15.0" fill="rgb(206,217,4)" rx="2" ry="2" />
<text  x="333.26" y="447.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BuildBatchGroup (14,666,663 samples, 0.46%)</title><rect x="473.8" y="533" width="5.4" height="15.0" fill="rgb(246,62,40)" rx="2" ry="2" />
<text  x="476.80" y="543.5" ></text>
</g>
<g >
<title>rename (1,333,333 samples, 0.04%)</title><rect x="1128.0" y="597" width="0.5" height="15.0" fill="rgb(210,138,41)" rx="2" ry="2" />
<text  x="1131.00" y="607.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (3,999,999 samples, 0.12%)</title><rect x="101.3" y="389" width="1.5" height="15.0" fill="rgb(224,203,45)" rx="2" ry="2" />
<text  x="104.29" y="399.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::RandomGenerator::RandomGenerator (14,666,663 samples, 0.46%)</title><rect x="461.1" y="565" width="5.4" height="15.0" fill="rgb(247,113,20)" rx="2" ry="2" />
<text  x="464.10" y="575.5" ></text>
</g>
<g >
<title>swake_up (1,333,333 samples, 0.04%)</title><rect x="103.7" y="309" width="0.5" height="15.0" fill="rgb(249,201,12)" rx="2" ry="2" />
<text  x="106.74" y="319.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (30,666,659 samples, 0.95%)</title><rect x="979.1" y="437" width="11.2" height="15.0" fill="rgb(215,0,28)" rx="2" ry="2" />
<text  x="982.09" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__future_base::_State_baseV2&gt;::new_allocator (1,333,333 samples, 0.04%)</title><rect x="1071.9" y="437" width="0.4" height="15.0" fill="rgb(248,197,39)" rx="2" ry="2" />
<text  x="1074.85" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__future_base::_State_baseV2&gt;::destroy&lt;std::__future_base::_State_baseV2&gt; (23,999,994 samples, 0.74%)</title><rect x="1090.9" y="437" width="8.8" height="15.0" fill="rgb(240,95,12)" rx="2" ry="2" />
<text  x="1093.89" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.04%)</title><rect x="1086.5" y="437" width="0.5" height="15.0" fill="rgb(232,19,29)" rx="2" ry="2" />
<text  x="1089.50" y="447.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (1,333,333 samples, 0.04%)</title><rect x="286.3" y="341" width="0.5" height="15.0" fill="rgb(254,48,19)" rx="2" ry="2" />
<text  x="289.33" y="351.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::DoCompactionWork (1,333,333 samples, 0.04%)</title><rect x="1137.3" y="741" width="0.5" height="15.0" fill="rgb(207,126,19)" rx="2" ry="2" />
<text  x="1140.27" y="751.5" ></text>
</g>
<g >
<title>__put_page (1,333,333 samples, 0.04%)</title><rect x="409.4" y="309" width="0.4" height="15.0" fill="rgb(212,186,20)" rx="2" ry="2" />
<text  x="412.35" y="319.5" ></text>
</g>
<g >
<title>leveldb::operator== (9,333,331 samples, 0.29%)</title><rect x="368.8" y="485" width="3.5" height="15.0" fill="rgb(245,212,40)" rx="2" ry="2" />
<text  x="371.83" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_default_append (6,666,665 samples, 0.21%)</title><rect x="304.4" y="421" width="2.4" height="15.0" fill="rgb(254,142,25)" rx="2" ry="2" />
<text  x="307.39" y="431.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="212.1" y="405" width="0.5" height="15.0" fill="rgb(218,74,28)" rx="2" ry="2" />
<text  x="215.12" y="415.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (34,666,658 samples, 1.08%)</title><rect x="306.8" y="485" width="12.7" height="15.0" fill="rgb(253,126,32)" rx="2" ry="2" />
<text  x="309.83" y="495.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="797.5" y="373" width="0.5" height="15.0" fill="rgb(250,108,3)" rx="2" ry="2" />
<text  x="800.48" y="383.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="695.0" y="293" width="0.4" height="15.0" fill="rgb(224,219,21)" rx="2" ry="2" />
<text  x="697.96" y="303.5" ></text>
</g>
<g >
<title>security_cred_free (1,333,333 samples, 0.04%)</title><rect x="194.1" y="373" width="0.4" height="15.0" fill="rgb(234,43,49)" rx="2" ry="2" />
<text  x="197.05" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_S_cget (1,333,333 samples, 0.04%)</title><rect x="340.0" y="437" width="0.5" height="15.0" fill="rgb(205,128,42)" rx="2" ry="2" />
<text  x="343.03" y="447.5" ></text>
</g>
<g >
<title>leveldb::port::Mutex::Lock (3,999,999 samples, 0.12%)</title><rect x="955.7" y="533" width="1.4" height="15.0" fill="rgb(236,3,38)" rx="2" ry="2" />
<text  x="958.66" y="543.5" ></text>
</g>
<g >
<title>std::atomic_flag::_S_init (1,333,333 samples, 0.04%)</title><rect x="1064.5" y="373" width="0.5" height="15.0" fill="rgb(228,165,7)" rx="2" ry="2" />
<text  x="1067.53" y="383.5" ></text>
</g>
<g >
<title>leveldb::MemTable::KeyComparator::operator (5,333,332 samples, 0.17%)</title><rect x="1145.6" y="741" width="1.9" height="15.0" fill="rgb(210,88,37)" rx="2" ry="2" />
<text  x="1148.57" y="751.5" ></text>
</g>
<g >
<title>std::mutex::lock (1,333,333 samples, 0.04%)</title><rect x="1158.3" y="725" width="0.5" height="15.0" fill="rgb(219,31,47)" rx="2" ry="2" />
<text  x="1161.27" y="735.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::GetMaxHeight (1,333,333 samples, 0.04%)</title><rect x="528.5" y="437" width="0.5" height="15.0" fill="rgb(244,145,39)" rx="2" ry="2" />
<text  x="531.48" y="447.5" ></text>
</g>
<g >
<title>leveldb::ParseInternalKey (5,333,332 samples, 0.17%)</title><rect x="51.5" y="469" width="2.0" height="15.0" fill="rgb(205,171,12)" rx="2" ry="2" />
<text  x="54.50" y="479.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::NumEntries (1,333,333 samples, 0.04%)</title><rect x="434.7" y="517" width="0.5" height="15.0" fill="rgb(229,214,5)" rx="2" ry="2" />
<text  x="437.74" y="527.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (5,333,332 samples, 0.17%)</title><rect x="357.6" y="453" width="2.0" height="15.0" fill="rgb(227,211,52)" rx="2" ry="2" />
<text  x="360.60" y="463.5" ></text>
</g>
<g >
<title>do_unlinkat (9,333,331 samples, 0.29%)</title><rect x="1124.6" y="581" width="3.4" height="15.0" fill="rgb(250,144,2)" rx="2" ry="2" />
<text  x="1127.58" y="591.5" ></text>
</g>
<g >
<title>operator new (1,333,333 samples, 0.04%)</title><rect x="745.7" y="437" width="0.5" height="15.0" fill="rgb(208,182,49)" rx="2" ry="2" />
<text  x="748.73" y="447.5" ></text>
</g>
<g >
<title>read_pages (1,333,333 samples, 0.04%)</title><rect x="1166.1" y="581" width="0.5" height="15.0" fill="rgb(225,51,33)" rx="2" ry="2" />
<text  x="1169.08" y="591.5" ></text>
</g>
<g >
<title>rebalance_domains (1,333,333 samples, 0.04%)</title><rect x="958.1" y="373" width="0.5" height="15.0" fill="rgb(231,143,35)" rx="2" ry="2" />
<text  x="961.10" y="383.5" ></text>
</g>
<g >
<title>__wake_up (6,666,665 samples, 0.21%)</title><rect x="854.1" y="245" width="2.5" height="15.0" fill="rgb(236,199,42)" rx="2" ry="2" />
<text  x="857.11" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::~_Vector_base (1,333,333 samples, 0.04%)</title><rect x="144.3" y="437" width="0.4" height="15.0" fill="rgb(230,76,42)" rx="2" ry="2" />
<text  x="147.26" y="447.5" ></text>
</g>
<g >
<title>snappy::RawCompress (30,666,659 samples, 0.95%)</title><rect x="417.7" y="453" width="11.2" height="15.0" fill="rgb(231,14,47)" rx="2" ry="2" />
<text  x="420.65" y="463.5" ></text>
</g>
<g >
<title>do_fsync (1,333,333 samples, 0.04%)</title><rect x="1128.5" y="485" width="0.5" height="15.0" fill="rgb(228,103,16)" rx="2" ry="2" />
<text  x="1131.49" y="495.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.04%)</title><rect x="1128.5" y="533" width="0.5" height="15.0" fill="rgb(235,110,36)" rx="2" ry="2" />
<text  x="1131.49" y="543.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (41,333,323 samples, 1.28%)</title><rect x="379.6" y="485" width="15.1" height="15.0" fill="rgb(221,187,19)" rx="2" ry="2" />
<text  x="382.57" y="495.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (5,333,332 samples, 0.17%)</title><rect x="156.5" y="341" width="1.9" height="15.0" fill="rgb(239,114,14)" rx="2" ry="2" />
<text  x="159.46" y="351.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (1,333,333 samples, 0.04%)</title><rect x="1145.1" y="725" width="0.5" height="15.0" fill="rgb(228,15,14)" rx="2" ry="2" />
<text  x="1148.08" y="735.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char*&gt; &gt;::construct&lt;char*, char* const&amp;&gt; (1,333,333 samples, 0.04%)</title><rect x="504.1" y="405" width="0.5" height="15.0" fill="rgb(247,163,27)" rx="2" ry="2" />
<text  x="507.07" y="415.5" ></text>
</g>
<g >
<title>std::move&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt;&amp;&gt; (2,666,666 samples, 0.08%)</title><rect x="1028.9" y="485" width="1.0" height="15.0" fill="rgb(223,51,19)" rx="2" ry="2" />
<text  x="1031.89" y="495.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.04%)</title><rect x="81.3" y="309" width="0.5" height="15.0" fill="rgb(224,106,26)" rx="2" ry="2" />
<text  x="84.28" y="319.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (3,999,999 samples, 0.12%)</title><rect x="1015.7" y="261" width="1.5" height="15.0" fill="rgb(221,210,12)" rx="2" ry="2" />
<text  x="1018.71" y="271.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.04%)</title><rect x="733.5" y="405" width="0.5" height="15.0" fill="rgb(230,135,41)" rx="2" ry="2" />
<text  x="736.53" y="415.5" ></text>
</g>
<g >
<title>std::atomic&lt;bool&gt;::load (1,333,333 samples, 0.04%)</title><rect x="436.2" y="501" width="0.5" height="15.0" fill="rgb(207,203,49)" rx="2" ry="2" />
<text  x="439.21" y="511.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="695.0" y="341" width="0.4" height="15.0" fill="rgb(210,182,12)" rx="2" ry="2" />
<text  x="697.96" y="351.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, false&gt;::_Head_base&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*&amp;&gt; (1,333,333 samples, 0.04%)</title><rect x="1003.5" y="245" width="0.5" height="15.0" fill="rgb(214,138,20)" rx="2" ry="2" />
<text  x="1006.50" y="255.5" ></text>
</g>
<g >
<title>ext4_block_write_begin (10,666,664 samples, 0.33%)</title><rect x="840.0" y="277" width="3.9" height="15.0" fill="rgb(224,31,33)" rx="2" ry="2" />
<text  x="842.95" y="287.5" ></text>
</g>
<g >
<title>pmem_init (1,333,333 samples, 0.04%)</title><rect x="1124.1" y="677" width="0.5" height="15.0" fill="rgb(227,205,50)" rx="2" ry="2" />
<text  x="1127.09" y="687.5" ></text>
</g>
<g >
<title>do_syscall_64 (25,333,327 samples, 0.79%)</title><rect x="981.0" y="421" width="9.3" height="15.0" fill="rgb(241,142,38)" rx="2" ry="2" />
<text  x="984.05" y="431.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.04%)</title><rect x="74.0" y="341" width="0.4" height="15.0" fill="rgb(222,139,28)" rx="2" ry="2" />
<text  x="76.96" y="351.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="381.0" y="389" width="0.5" height="15.0" fill="rgb(230,66,22)" rx="2" ry="2" />
<text  x="384.04" y="399.5" ></text>
</g>
<g >
<title>__x64_sys_read (1,333,333 samples, 0.04%)</title><rect x="1129.0" y="517" width="0.5" height="15.0" fill="rgb(235,118,2)" rx="2" ry="2" />
<text  x="1131.97" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (1,333,333 samples, 0.04%)</title><rect x="170.1" y="421" width="0.5" height="15.0" fill="rgb(242,155,15)" rx="2" ry="2" />
<text  x="173.13" y="431.5" ></text>
</g>
<g >
<title>find_busiest_group (1,333,333 samples, 0.04%)</title><rect x="958.1" y="341" width="0.5" height="15.0" fill="rgb(205,39,46)" rx="2" ry="2" />
<text  x="961.10" y="351.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="212.1" y="453" width="0.5" height="15.0" fill="rgb(238,130,2)" rx="2" ry="2" />
<text  x="215.12" y="463.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="797.5" y="357" width="0.5" height="15.0" fill="rgb(242,146,33)" rx="2" ry="2" />
<text  x="800.48" y="367.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.04%)</title><rect x="1172.4" y="725" width="0.5" height="15.0" fill="rgb(205,31,22)" rx="2" ry="2" />
<text  x="1175.42" y="735.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::~__basic_future (2,666,666 samples, 0.08%)</title><rect x="1046.0" y="533" width="1.0" height="15.0" fill="rgb(238,154,5)" rx="2" ry="2" />
<text  x="1048.98" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (2,666,666 samples, 0.08%)</title><rect x="145.7" y="469" width="1.0" height="15.0" fill="rgb(236,91,29)" rx="2" ry="2" />
<text  x="148.72" y="479.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (1,333,333 samples, 0.04%)</title><rect x="232.6" y="469" width="0.5" height="15.0" fill="rgb(248,210,37)" rx="2" ry="2" />
<text  x="235.62" y="479.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1,333,333 samples, 0.04%)</title><rect x="301.9" y="357" width="0.5" height="15.0" fill="rgb(253,43,13)" rx="2" ry="2" />
<text  x="304.95" y="367.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="296.6" y="309" width="0.5" height="15.0" fill="rgb(234,138,1)" rx="2" ry="2" />
<text  x="299.58" y="319.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Next (1,333,333 samples, 0.04%)</title><rect x="324.4" y="469" width="0.5" height="15.0" fill="rgb(236,205,0)" rx="2" ry="2" />
<text  x="327.41" y="479.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (678,666,497 samples, 21.06%)</title><rect x="507.5" y="469" width="248.5" height="15.0" fill="rgb(237,116,43)" rx="2" ry="2" />
<text  x="510.48" y="479.5" >leveldb::SkipList&lt;char const*, le..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (3,999,999 samples, 0.12%)</title><rect x="287.3" y="389" width="1.5" height="15.0" fill="rgb(242,34,49)" rx="2" ry="2" />
<text  x="290.30" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (3,999,999 samples, 0.12%)</title><rect x="163.3" y="453" width="1.5" height="15.0" fill="rgb(224,184,24)" rx="2" ry="2" />
<text  x="166.30" y="463.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::DecommitSpan (1,333,333 samples, 0.04%)</title><rect x="330.8" y="341" width="0.4" height="15.0" fill="rgb(227,101,49)" rx="2" ry="2" />
<text  x="333.75" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1,333,333 samples, 0.04%)</title><rect x="361.5" y="469" width="0.5" height="15.0" fill="rgb(243,66,36)" rx="2" ry="2" />
<text  x="364.51" y="479.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::ok (1,333,333 samples, 0.04%)</title><rect x="128.6" y="453" width="0.5" height="15.0" fill="rgb(205,2,32)" rx="2" ry="2" />
<text  x="131.63" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (1,333,333 samples, 0.04%)</title><rect x="290.2" y="373" width="0.5" height="15.0" fill="rgb(233,10,11)" rx="2" ry="2" />
<text  x="293.23" y="383.5" ></text>
</g>
<g >
<title>try_to_release_page (1,333,333 samples, 0.04%)</title><rect x="438.6" y="277" width="0.5" height="15.0" fill="rgb(216,7,41)" rx="2" ry="2" />
<text  x="441.65" y="287.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="695.0" y="325" width="0.4" height="15.0" fill="rgb(218,29,51)" rx="2" ry="2" />
<text  x="697.96" y="335.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (1,333,333 samples, 0.04%)</title><rect x="259.5" y="453" width="0.5" height="15.0" fill="rgb(208,220,25)" rx="2" ry="2" />
<text  x="262.47" y="463.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::Next (2,666,666 samples, 0.08%)</title><rect x="12.4" y="485" width="1.0" height="15.0" fill="rgb(242,189,37)" rx="2" ry="2" />
<text  x="15.44" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch (5,333,332 samples, 0.17%)</title><rect x="1050.9" y="437" width="1.9" height="15.0" fill="rgb(230,13,49)" rx="2" ry="2" />
<text  x="1053.86" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (57,333,319 samples, 1.78%)</title><rect x="263.9" y="405" width="21.0" height="15.0" fill="rgb(215,191,18)" rx="2" ry="2" />
<text  x="266.87" y="415.5" ></text>
</g>
<g >
<title>_IO_new_file_underflow (1,333,333 samples, 0.04%)</title><rect x="1129.0" y="581" width="0.5" height="15.0" fill="rgb(226,155,24)" rx="2" ry="2" />
<text  x="1131.97" y="591.5" ></text>
</g>
<g >
<title>start_this_handle (13,333,330 samples, 0.41%)</title><rect x="835.1" y="245" width="4.9" height="15.0" fill="rgb(208,69,45)" rx="2" ry="2" />
<text  x="838.07" y="255.5" ></text>
</g>
<g >
<title>try_to_free_buffers (1,333,333 samples, 0.04%)</title><rect x="438.6" y="229" width="0.5" height="15.0" fill="rgb(254,171,32)" rx="2" ry="2" />
<text  x="441.65" y="239.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt;::operator (29,333,326 samples, 0.91%)</title><rect x="997.2" y="325" width="10.7" height="15.0" fill="rgb(210,139,35)" rx="2" ry="2" />
<text  x="1000.16" y="335.5" ></text>
</g>
<g >
<title>memset_erms (2,666,666 samples, 0.08%)</title><rect x="833.6" y="245" width="1.0" height="15.0" fill="rgb(248,172,34)" rx="2" ry="2" />
<text  x="836.61" y="255.5" ></text>
</g>
<g >
<title>operator new[] (9,333,331 samples, 0.29%)</title><rect x="87.6" y="357" width="3.4" height="15.0" fill="rgb(248,166,15)" rx="2" ry="2" />
<text  x="90.63" y="367.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (5,333,332 samples, 0.17%)</title><rect x="84.2" y="389" width="2.0" height="15.0" fill="rgb(244,24,52)" rx="2" ry="2" />
<text  x="87.21" y="399.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (261,333,268 samples, 8.11%)</title><rect x="815.1" y="341" width="95.6" height="15.0" fill="rgb(211,48,17)" rx="2" ry="2" />
<text  x="818.06" y="351.5" >ext4_file_w..</text>
</g>
<g >
<title>madvise_free_page_range.isra.16 (1,333,333 samples, 0.04%)</title><rect x="144.3" y="197" width="0.4" height="15.0" fill="rgb(238,229,48)" rx="2" ry="2" />
<text  x="147.26" y="207.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::CurrentSizeEstimate (3,999,999 samples, 0.12%)</title><rect x="46.6" y="469" width="1.5" height="15.0" fill="rgb(235,43,41)" rx="2" ry="2" />
<text  x="49.62" y="479.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1,333,333 samples, 0.04%)</title><rect x="1059.6" y="437" width="0.5" height="15.0" fill="rgb(247,94,47)" rx="2" ry="2" />
<text  x="1062.65" y="447.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (18,666,662 samples, 0.58%)</title><rect x="628.6" y="389" width="6.8" height="15.0" fill="rgb(221,159,39)" rx="2" ry="2" />
<text  x="631.56" y="399.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Value (27,999,993 samples, 0.87%)</title><rect x="105.7" y="421" width="10.2" height="15.0" fill="rgb(238,84,11)" rx="2" ry="2" />
<text  x="108.69" y="431.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (3,999,999 samples, 0.12%)</title><rect x="1019.6" y="325" width="1.5" height="15.0" fill="rgb(221,104,52)" rx="2" ry="2" />
<text  x="1022.62" y="335.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (3,999,999 samples, 0.12%)</title><rect x="333.7" y="501" width="1.4" height="15.0" fill="rgb(236,185,10)" rx="2" ry="2" />
<text  x="336.68" y="511.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.04%)</title><rect x="90.1" y="245" width="0.5" height="15.0" fill="rgb(208,129,18)" rx="2" ry="2" />
<text  x="93.07" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (1,333,333 samples, 0.04%)</title><rect x="86.2" y="373" width="0.4" height="15.0" fill="rgb(209,3,21)" rx="2" ry="2" />
<text  x="89.16" y="383.5" ></text>
</g>
<g >
<title>__pthread_once_slow (137,333,299 samples, 4.26%)</title><rect x="972.7" y="469" width="50.3" height="15.0" fill="rgb(247,157,4)" rx="2" ry="2" />
<text  x="975.75" y="479.5" >__pth..</text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="995.7" y="309" width="0.5" height="15.0" fill="rgb(249,92,19)" rx="2" ry="2" />
<text  x="998.69" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::resize (23,999,994 samples, 0.74%)</title><rect x="135.5" y="453" width="8.8" height="15.0" fill="rgb(251,28,4)" rx="2" ry="2" />
<text  x="138.47" y="463.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (2,666,666 samples, 0.08%)</title><rect x="289.3" y="373" width="0.9" height="15.0" fill="rgb(242,211,16)" rx="2" ry="2" />
<text  x="292.26" y="383.5" ></text>
</g>
<g >
<title>__do_page_fault (2,666,666 samples, 0.08%)</title><rect x="332.2" y="293" width="1.0" height="15.0" fill="rgb(245,229,19)" rx="2" ry="2" />
<text  x="335.22" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.04%)</title><rect x="320.5" y="421" width="0.5" height="15.0" fill="rgb(218,123,45)" rx="2" ry="2" />
<text  x="323.50" y="431.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::promise (67,999,983 samples, 2.11%)</title><rect x="1052.8" y="549" width="24.9" height="15.0" fill="rgb(238,109,29)" rx="2" ry="2" />
<text  x="1055.81" y="559.5" >s..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (14,666,663 samples, 0.46%)</title><rect x="275.6" y="373" width="5.4" height="15.0" fill="rgb(229,201,20)" rx="2" ry="2" />
<text  x="278.59" y="383.5" ></text>
</g>
<g >
<title>unmap_page_range (1,333,333 samples, 0.04%)</title><rect x="330.3" y="309" width="0.5" height="15.0" fill="rgb(223,42,43)" rx="2" ry="2" />
<text  x="333.26" y="319.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="218.0" y="309" width="0.5" height="15.0" fill="rgb(236,58,31)" rx="2" ry="2" />
<text  x="220.98" y="319.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1,333,333 samples, 0.04%)</title><rect x="1079.7" y="517" width="0.5" height="15.0" fill="rgb(252,99,34)" rx="2" ry="2" />
<text  x="1082.66" y="527.5" ></text>
</g>
<g >
<title>do_lookup_x (1,333,333 samples, 0.04%)</title><rect x="1132.9" y="597" width="0.5" height="15.0" fill="rgb(233,37,31)" rx="2" ry="2" />
<text  x="1135.88" y="607.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="26.6" y="405" width="0.5" height="15.0" fill="rgb(209,222,14)" rx="2" ry="2" />
<text  x="29.60" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (2,666,666 samples, 0.08%)</title><rect x="395.7" y="437" width="1.0" height="15.0" fill="rgb(208,37,49)" rx="2" ry="2" />
<text  x="398.68" y="447.5" ></text>
</g>
<g >
<title>[libunwind.so.8.0.1] (1,333,333 samples, 0.04%)</title><rect x="1131.4" y="197" width="0.5" height="15.0" fill="rgb(236,13,36)" rx="2" ry="2" />
<text  x="1134.41" y="207.5" ></text>
</g>
<g >
<title>find_busiest_group (1,333,333 samples, 0.04%)</title><rect x="1094.3" y="261" width="0.5" height="15.0" fill="rgb(232,87,29)" rx="2" ry="2" />
<text  x="1097.31" y="271.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.04%)</title><rect x="1129.0" y="549" width="0.5" height="15.0" fill="rgb(205,130,39)" rx="2" ry="2" />
<text  x="1131.97" y="559.5" ></text>
</g>
<g >
<title>ext4_inode_csum.isra.59 (3,999,999 samples, 0.12%)</title><rect x="824.8" y="197" width="1.5" height="15.0" fill="rgb(234,129,7)" rx="2" ry="2" />
<text  x="827.82" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (1,333,333 samples, 0.04%)</title><rect x="283.9" y="373" width="0.5" height="15.0" fill="rgb(219,182,25)" rx="2" ry="2" />
<text  x="286.88" y="383.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,333,333 samples, 0.04%)</title><rect x="74.0" y="277" width="0.4" height="15.0" fill="rgb(220,166,1)" rx="2" ry="2" />
<text  x="76.96" y="287.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (5,333,332 samples, 0.17%)</title><rect x="284.9" y="421" width="1.9" height="15.0" fill="rgb(213,199,9)" rx="2" ry="2" />
<text  x="287.86" y="431.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__future_base::_Result_base*, false&gt;::_M_head (1,333,333 samples, 0.04%)</title><rect x="1037.7" y="405" width="0.5" height="15.0" fill="rgb(216,207,13)" rx="2" ry="2" />
<text  x="1040.68" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::empty (1,333,333 samples, 0.04%)</title><rect x="232.1" y="485" width="0.5" height="15.0" fill="rgb(219,42,0)" rx="2" ry="2" />
<text  x="235.13" y="495.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (7,999,998 samples, 0.25%)</title><rect x="501.1" y="357" width="3.0" height="15.0" fill="rgb(254,21,22)" rx="2" ry="2" />
<text  x="504.14" y="367.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (2,666,666 samples, 0.08%)</title><rect x="499.7" y="453" width="0.9" height="15.0" fill="rgb(253,100,36)" rx="2" ry="2" />
<text  x="502.67" y="463.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.08%)</title><rect x="1037.2" y="453" width="1.0" height="15.0" fill="rgb(254,179,36)" rx="2" ry="2" />
<text  x="1040.19" y="463.5" ></text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.04%)</title><rect x="319.5" y="437" width="0.5" height="15.0" fill="rgb(216,55,1)" rx="2" ry="2" />
<text  x="322.52" y="447.5" ></text>
</g>
<g >
<title>leveldb::port::Mutex::Lock (2,666,666 samples, 0.08%)</title><rect x="486.5" y="517" width="1.0" height="15.0" fill="rgb(228,126,39)" rx="2" ry="2" />
<text  x="489.49" y="527.5" ></text>
</g>
<g >
<title>unmap_vmas (1,333,333 samples, 0.04%)</title><rect x="330.3" y="341" width="0.5" height="15.0" fill="rgb(226,10,5)" rx="2" ry="2" />
<text  x="333.26" y="351.5" ></text>
</g>
<g >
<title>std::future&lt;leveldb::Status&gt;::~future (1,333,333 samples, 0.04%)</title><rect x="1137.8" y="725" width="0.4" height="15.0" fill="rgb(229,151,2)" rx="2" ry="2" />
<text  x="1140.76" y="735.5" ></text>
</g>
<g >
<title>_itoa_word (3,999,999 samples, 0.12%)</title><rect x="457.2" y="501" width="1.5" height="15.0" fill="rgb(244,15,26)" rx="2" ry="2" />
<text  x="460.20" y="511.5" ></text>
</g>
<g >
<title>leveldb::EncodeVarint32 (2,666,666 samples, 0.08%)</title><rect x="506.5" y="469" width="1.0" height="15.0" fill="rgb(243,139,9)" rx="2" ry="2" />
<text  x="509.51" y="479.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::InsertInto (1,333,333 samples, 0.04%)</title><rect x="1156.8" y="741" width="0.5" height="15.0" fill="rgb(214,49,40)" rx="2" ry="2" />
<text  x="1159.80" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (11,999,997 samples, 0.37%)</title><rect x="96.9" y="389" width="4.4" height="15.0" fill="rgb(234,87,53)" rx="2" ry="2" />
<text  x="99.90" y="399.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,333,333 samples, 0.04%)</title><rect x="284.4" y="389" width="0.5" height="15.0" fill="rgb(205,62,52)" rx="2" ry="2" />
<text  x="287.37" y="399.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.04%)</title><rect x="460.6" y="549" width="0.5" height="15.0" fill="rgb(209,50,53)" rx="2" ry="2" />
<text  x="463.62" y="559.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::key (1,333,333 samples, 0.04%)</title><rect x="1135.8" y="741" width="0.5" height="15.0" fill="rgb(248,36,6)" rx="2" ry="2" />
<text  x="1138.81" y="751.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="591.9" y="341" width="0.5" height="15.0" fill="rgb(219,116,34)" rx="2" ry="2" />
<text  x="594.94" y="351.5" ></text>
</g>
<g >
<title>__x64_sys_newlstat (1,333,333 samples, 0.04%)</title><rect x="1124.1" y="517" width="0.5" height="15.0" fill="rgb(244,139,20)" rx="2" ry="2" />
<text  x="1127.09" y="527.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed64 (2,666,666 samples, 0.08%)</title><rect x="260.5" y="437" width="0.9" height="15.0" fill="rgb(216,179,18)" rx="2" ry="2" />
<text  x="263.45" y="447.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::__future_base::_Result_base::_Deleter, true&gt;::_Head_base&lt;std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.04%)</title><rect x="1012.8" y="245" width="0.5" height="15.0" fill="rgb(238,56,9)" rx="2" ry="2" />
<text  x="1015.78" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (21,333,328 samples, 0.66%)</title><rect x="383.0" y="421" width="7.8" height="15.0" fill="rgb(240,219,12)" rx="2" ry="2" />
<text  x="385.99" y="431.5" ></text>
</g>
<g >
<title>crc32c_pcl_intel_update (1,333,333 samples, 0.04%)</title><rect x="825.8" y="165" width="0.5" height="15.0" fill="rgb(228,20,49)" rx="2" ry="2" />
<text  x="828.80" y="175.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (90,666,644 samples, 2.81%)</title><rect x="59.3" y="437" width="33.2" height="15.0" fill="rgb(212,65,53)" rx="2" ry="2" />
<text  x="62.31" y="447.5" >st..</text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (1,333,333 samples, 0.04%)</title><rect x="1150.5" y="741" width="0.4" height="15.0" fill="rgb(223,170,29)" rx="2" ry="2" />
<text  x="1153.46" y="751.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (5,333,332 samples, 0.17%)</title><rect x="129.6" y="405" width="2.0" height="15.0" fill="rgb(241,165,50)" rx="2" ry="2" />
<text  x="132.61" y="415.5" ></text>
</g>
<g >
<title>leveldb::Status::Status (1,333,333 samples, 0.04%)</title><rect x="428.9" y="453" width="0.5" height="15.0" fill="rgb(228,139,51)" rx="2" ry="2" />
<text  x="431.88" y="463.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (2,666,666 samples, 0.08%)</title><rect x="318.5" y="469" width="1.0" height="15.0" fill="rgb(227,151,7)" rx="2" ry="2" />
<text  x="321.55" y="479.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (2,666,666 samples, 0.08%)</title><rect x="1079.2" y="533" width="1.0" height="15.0" fill="rgb(231,101,6)" rx="2" ry="2" />
<text  x="1082.18" y="543.5" ></text>
</g>
<g >
<title>snappy::RawUncompress (11,999,997 samples, 0.37%)</title><rect x="206.7" y="373" width="4.4" height="15.0" fill="rgb(252,158,6)" rx="2" ry="2" />
<text  x="209.75" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1,333,333 samples, 0.04%)</title><rect x="132.5" y="453" width="0.5" height="15.0" fill="rgb(251,203,26)" rx="2" ry="2" />
<text  x="135.54" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (3,999,999 samples, 0.12%)</title><rect x="1041.1" y="453" width="1.5" height="15.0" fill="rgb(219,73,37)" rx="2" ry="2" />
<text  x="1044.10" y="463.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (1,333,333 samples, 0.04%)</title><rect x="762.3" y="469" width="0.5" height="15.0" fill="rgb(248,43,37)" rx="2" ry="2" />
<text  x="765.33" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (5,333,332 samples, 0.17%)</title><rect x="1007.9" y="325" width="2.0" height="15.0" fill="rgb(236,14,51)" rx="2" ry="2" />
<text  x="1010.90" y="335.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.04%)</title><rect x="733.5" y="421" width="0.5" height="15.0" fill="rgb(242,139,13)" rx="2" ry="2" />
<text  x="736.53" y="431.5" ></text>
</g>
<g >
<title>free_unref_page_list (1,333,333 samples, 0.04%)</title><rect x="1125.1" y="453" width="0.5" height="15.0" fill="rgb(229,68,48)" rx="2" ry="2" />
<text  x="1128.07" y="463.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt; (1,333,333 samples, 0.04%)</title><rect x="1184.1" y="725" width="0.5" height="15.0" fill="rgb(209,81,13)" rx="2" ry="2" />
<text  x="1187.14" y="735.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (58,666,652 samples, 1.82%)</title><rect x="674.0" y="357" width="21.4" height="15.0" fill="rgb(233,103,36)" rx="2" ry="2" />
<text  x="676.96" y="367.5" >_..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (3,037,332,574 samples, 94.25%)</title><rect x="10.0" y="661" width="1112.1" height="15.0" fill="rgb(210,43,10)" rx="2" ry="2" />
<text  x="13.00" y="671.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>leveldb::ExtractUserKey (9,333,331 samples, 0.29%)</title><rect x="1138.7" y="741" width="3.5" height="15.0" fill="rgb(234,1,40)" rx="2" ry="2" />
<text  x="1141.74" y="751.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::destroy&lt;leveldb::DBImpl::Writer*&gt; (1,333,333 samples, 0.04%)</title><rect x="964.0" y="501" width="0.4" height="15.0" fill="rgb(214,58,21)" rx="2" ry="2" />
<text  x="966.96" y="511.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_r10 (1,333,333 samples, 0.04%)</title><rect x="818.5" y="309" width="0.5" height="15.0" fill="rgb(246,133,10)" rx="2" ry="2" />
<text  x="821.47" y="319.5" ></text>
</g>
<g >
<title>find_busiest_group (1,333,333 samples, 0.04%)</title><rect x="500.2" y="357" width="0.4" height="15.0" fill="rgb(215,52,6)" rx="2" ry="2" />
<text  x="503.16" y="367.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Add (221,333,278 samples, 6.87%)</title><rect x="353.7" y="517" width="81.0" height="15.0" fill="rgb(206,143,31)" rx="2" ry="2" />
<text  x="356.70" y="527.5" >leveldb::..</text>
</g>
<g >
<title>std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; (1,333,333 samples, 0.04%)</title><rect x="322.0" y="357" width="0.5" height="15.0" fill="rgb(250,209,16)" rx="2" ry="2" />
<text  x="324.97" y="367.5" ></text>
</g>
<g >
<title>__find_get_block (3,999,999 samples, 0.12%)</title><rect x="890.7" y="165" width="1.5" height="15.0" fill="rgb(251,83,3)" rx="2" ry="2" />
<text  x="893.73" y="175.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.04%)</title><rect x="1037.7" y="437" width="0.5" height="15.0" fill="rgb(233,209,4)" rx="2" ry="2" />
<text  x="1040.68" y="447.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::TableBuilder (5,333,332 samples, 0.17%)</title><rect x="331.2" y="501" width="2.0" height="15.0" fill="rgb(240,57,1)" rx="2" ry="2" />
<text  x="334.24" y="511.5" ></text>
</g>
<g >
<title>leveldb::Footer::DecodeFrom (1,333,333 samples, 0.04%)</title><rect x="144.7" y="437" width="0.5" height="15.0" fill="rgb(224,175,3)" rx="2" ry="2" />
<text  x="147.75" y="447.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::key (9,333,331 samples, 0.29%)</title><rect x="237.5" y="469" width="3.4" height="15.0" fill="rgb(250,2,17)" rx="2" ry="2" />
<text  x="240.51" y="479.5" ></text>
</g>
<g >
<title>ext4_da_get_block_prep (5,333,332 samples, 0.17%)</title><rect x="841.9" y="261" width="2.0" height="15.0" fill="rgb(232,210,21)" rx="2" ry="2" />
<text  x="844.91" y="271.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::set_value (173,333,290 samples, 5.38%)</title><rect x="967.4" y="533" width="63.4" height="15.0" fill="rgb(212,68,8)" rx="2" ry="2" />
<text  x="970.38" y="543.5" >std::p..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::allocate (9,333,331 samples, 0.29%)</title><rect x="87.6" y="389" width="3.4" height="15.0" fill="rgb(224,65,48)" rx="2" ry="2" />
<text  x="90.63" y="399.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,666,666 samples, 0.08%)</title><rect x="236.0" y="437" width="1.0" height="15.0" fill="rgb(241,18,54)" rx="2" ry="2" />
<text  x="239.04" y="447.5" ></text>
</g>
<g >
<title>fs_read (1,333,333 samples, 0.04%)</title><rect x="1124.1" y="629" width="0.5" height="15.0" fill="rgb(236,173,39)" rx="2" ry="2" />
<text  x="1127.09" y="639.5" ></text>
</g>
<g >
<title>mem_cgroup_uncharge (1,333,333 samples, 0.04%)</title><rect x="409.4" y="293" width="0.4" height="15.0" fill="rgb(234,55,4)" rx="2" ry="2" />
<text  x="412.35" y="303.5" ></text>
</g>
<g >
<title>__es_insert_extent (1,333,333 samples, 0.04%)</title><rect x="843.4" y="197" width="0.5" height="15.0" fill="rgb(242,216,3)" rx="2" ry="2" />
<text  x="846.37" y="207.5" ></text>
</g>
<g >
<title>_IO_new_fopen (3,999,999 samples, 0.12%)</title><rect x="1129.5" y="645" width="1.4" height="15.0" fill="rgb(213,67,24)" rx="2" ry="2" />
<text  x="1132.46" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (5,333,332 samples, 0.17%)</title><rect x="390.8" y="437" width="2.0" height="15.0" fill="rgb(215,140,22)" rx="2" ry="2" />
<text  x="393.80" y="447.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (19,999,995 samples, 0.62%)</title><rect x="333.7" y="517" width="7.3" height="15.0" fill="rgb(231,155,38)" rx="2" ry="2" />
<text  x="336.68" y="527.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (2,666,666 samples, 0.08%)</title><rect x="627.6" y="357" width="1.0" height="15.0" fill="rgb(208,155,8)" rx="2" ry="2" />
<text  x="630.58" y="367.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="1094.3" y="341" width="0.5" height="15.0" fill="rgb(207,109,45)" rx="2" ry="2" />
<text  x="1097.31" y="351.5" ></text>
</g>
<g >
<title>std::_Sp_ebo_helper&lt;0, std::allocator&lt;std::__future_base::_State_baseV2&gt;, true&gt;::_Sp_ebo_helper (1,333,333 samples, 0.04%)</title><rect x="1060.6" y="421" width="0.5" height="15.0" fill="rgb(221,171,29)" rx="2" ry="2" />
<text  x="1063.62" y="431.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="26.6" y="373" width="0.5" height="15.0" fill="rgb(217,51,12)" rx="2" ry="2" />
<text  x="29.60" y="383.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1,333,333 samples, 0.04%)</title><rect x="349.3" y="389" width="0.5" height="15.0" fill="rgb(227,98,20)" rx="2" ry="2" />
<text  x="352.30" y="399.5" ></text>
</g>
<g >
<title>open_verify (1,333,333 samples, 0.04%)</title><rect x="1131.9" y="581" width="0.5" height="15.0" fill="rgb(215,13,28)" rx="2" ry="2" />
<text  x="1134.90" y="591.5" ></text>
</g>
<g >
<title>std::swap&lt;char const*&gt; (2,666,666 samples, 0.08%)</title><rect x="492.4" y="517" width="0.9" height="15.0" fill="rgb(214,91,41)" rx="2" ry="2" />
<text  x="495.35" y="527.5" ></text>
</g>
<g >
<title>page_remove_rmap (1,333,333 samples, 0.04%)</title><rect x="330.3" y="293" width="0.5" height="15.0" fill="rgb(214,180,45)" rx="2" ry="2" />
<text  x="333.26" y="303.5" ></text>
</g>
<g >
<title>leveldb::Status::~Status (1,333,333 samples, 0.04%)</title><rect x="1106.0" y="565" width="0.5" height="15.0" fill="rgb(219,15,36)" rx="2" ry="2" />
<text  x="1109.03" y="575.5" ></text>
</g>
<g >
<title>do_unlinkat (1,333,333 samples, 0.04%)</title><rect x="438.6" y="437" width="0.5" height="15.0" fill="rgb(237,85,15)" rx="2" ry="2" />
<text  x="441.65" y="447.5" ></text>
</g>
<g >
<title>proc_reg_open (3,999,999 samples, 0.12%)</title><rect x="1129.5" y="437" width="1.4" height="15.0" fill="rgb(246,33,2)" rx="2" ry="2" />
<text  x="1132.46" y="447.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (5,333,332 samples, 0.17%)</title><rect x="16.3" y="469" width="2.0" height="15.0" fill="rgb(216,165,44)" rx="2" ry="2" />
<text  x="19.35" y="479.5" ></text>
</g>
<g >
<title>ksys_read (1,333,333 samples, 0.04%)</title><rect x="1129.0" y="501" width="0.5" height="15.0" fill="rgb(205,109,28)" rx="2" ry="2" />
<text  x="1131.97" y="511.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (6,666,665 samples, 0.21%)</title><rect x="158.4" y="437" width="2.5" height="15.0" fill="rgb(232,37,21)" rx="2" ry="2" />
<text  x="161.42" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (15,999,996 samples, 0.50%)</title><rect x="395.7" y="453" width="5.8" height="15.0" fill="rgb(247,13,45)" rx="2" ry="2" />
<text  x="398.68" y="463.5" ></text>
</g>
<g >
<title>from_kprojid (1,333,333 samples, 0.04%)</title><rect x="885.8" y="197" width="0.5" height="15.0" fill="rgb(205,176,35)" rx="2" ry="2" />
<text  x="888.85" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (26,666,660 samples, 0.83%)</title><rect x="308.3" y="421" width="9.8" height="15.0" fill="rgb(242,10,4)" rx="2" ry="2" />
<text  x="311.30" y="431.5" ></text>
</g>
<g >
<title>snappy::UncheckedByteArraySink::Append (1,333,333 samples, 0.04%)</title><rect x="115.9" y="389" width="0.5" height="15.0" fill="rgb(222,21,12)" rx="2" ry="2" />
<text  x="118.94" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_eq (1,333,333 samples, 0.04%)</title><rect x="100.8" y="357" width="0.5" height="15.0" fill="rgb(247,80,27)" rx="2" ry="2" />
<text  x="103.81" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize@plt (1,333,333 samples, 0.04%)</title><rect x="219.0" y="389" width="0.4" height="15.0" fill="rgb(225,35,54)" rx="2" ry="2" />
<text  x="221.95" y="399.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (5,333,332 samples, 0.17%)</title><rect x="1050.9" y="469" width="1.9" height="15.0" fill="rgb(245,139,54)" rx="2" ry="2" />
<text  x="1053.86" y="479.5" ></text>
</g>
<g >
<title>release_pages (2,666,666 samples, 0.08%)</title><rect x="1125.1" y="469" width="0.9" height="15.0" fill="rgb(250,86,49)" rx="2" ry="2" />
<text  x="1128.07" y="479.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1,333,333 samples, 0.04%)</title><rect x="466.0" y="437" width="0.5" height="15.0" fill="rgb(211,134,25)" rx="2" ry="2" />
<text  x="468.99" y="447.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::Valid (1,333,333 samples, 0.04%)</title><rect x="226.8" y="453" width="0.5" height="15.0" fill="rgb(220,31,11)" rx="2" ry="2" />
<text  x="229.76" y="463.5" ></text>
</g>
<g >
<title>page_counter_try_charge (1,333,333 samples, 0.04%)</title><rect x="131.1" y="261" width="0.5" height="15.0" fill="rgb(207,42,14)" rx="2" ry="2" />
<text  x="134.08" y="271.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (2,666,666 samples, 0.08%)</title><rect x="90.1" y="293" width="0.9" height="15.0" fill="rgb(240,86,39)" rx="2" ry="2" />
<text  x="93.07" y="303.5" ></text>
</g>
<g >
<title>__getblk_gfp (9,333,331 samples, 0.29%)</title><rect x="889.3" y="181" width="3.4" height="15.0" fill="rgb(212,133,15)" rx="2" ry="2" />
<text  x="892.26" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (2,666,666 samples, 0.08%)</title><rect x="273.1" y="325" width="1.0" height="15.0" fill="rgb(232,212,9)" rx="2" ry="2" />
<text  x="276.14" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (1,333,333 samples, 0.04%)</title><rect x="288.3" y="325" width="0.5" height="15.0" fill="rgb(237,82,52)" rx="2" ry="2" />
<text  x="291.28" y="335.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="1135.8" y="693" width="0.5" height="15.0" fill="rgb(254,31,30)" rx="2" ry="2" />
<text  x="1138.81" y="703.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (2,666,666 samples, 0.08%)</title><rect x="99.8" y="309" width="1.0" height="15.0" fill="rgb(240,218,5)" rx="2" ry="2" />
<text  x="102.83" y="319.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (15,999,996 samples, 0.50%)</title><rect x="284.9" y="437" width="5.8" height="15.0" fill="rgb(236,221,52)" rx="2" ry="2" />
<text  x="287.86" y="447.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (1,333,333 samples, 0.04%)</title><rect x="395.2" y="405" width="0.5" height="15.0" fill="rgb(214,87,42)" rx="2" ry="2" />
<text  x="398.20" y="415.5" ></text>
</g>
<g >
<title>__libc_open64 (1,333,333 samples, 0.04%)</title><rect x="1131.9" y="565" width="0.5" height="15.0" fill="rgb(232,199,0)" rx="2" ry="2" />
<text  x="1134.90" y="575.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="336.6" y="357" width="0.5" height="15.0" fill="rgb(210,181,5)" rx="2" ry="2" />
<text  x="339.61" y="367.5" ></text>
</g>
<g >
<title>ext4_inode_csum_set (2,666,666 samples, 0.08%)</title><rect x="864.9" y="213" width="0.9" height="15.0" fill="rgb(214,74,50)" rx="2" ry="2" />
<text  x="867.85" y="223.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1,333,333 samples, 0.04%)</title><rect x="1171.4" y="725" width="0.5" height="15.0" fill="rgb(219,74,45)" rx="2" ry="2" />
<text  x="1174.45" y="735.5" ></text>
</g>
<g >
<title>ext4_mark_inode_dirty (5,333,332 samples, 0.17%)</title><rect x="824.3" y="245" width="2.0" height="15.0" fill="rgb(206,39,19)" rx="2" ry="2" />
<text  x="827.33" y="255.5" ></text>
</g>
<g >
<title>rebalance_domains (1,333,333 samples, 0.04%)</title><rect x="743.8" y="293" width="0.5" height="15.0" fill="rgb(236,7,24)" rx="2" ry="2" />
<text  x="746.78" y="303.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1,333,333 samples, 0.04%)</title><rect x="90.1" y="181" width="0.5" height="15.0" fill="rgb(238,27,17)" rx="2" ry="2" />
<text  x="93.07" y="191.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (1,333,333 samples, 0.04%)</title><rect x="131.1" y="293" width="0.5" height="15.0" fill="rgb(248,196,53)" rx="2" ry="2" />
<text  x="134.08" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (3,999,999 samples, 0.12%)</title><rect x="288.8" y="389" width="1.4" height="15.0" fill="rgb(214,211,35)" rx="2" ry="2" />
<text  x="291.77" y="399.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::WriteRandom (1,865,332,867 samples, 57.88%)</title><rect x="439.1" y="597" width="683.0" height="15.0" fill="rgb(216,178,17)" rx="2" ry="2" />
<text  x="442.14" y="607.5" >leveldb::Benchmark::WriteRandom</text>
</g>
<g >
<title>leveldb::TableBuilder::ok (2,666,666 samples, 0.08%)</title><rect x="133.0" y="469" width="1.0" height="15.0" fill="rgb(250,6,16)" rx="2" ry="2" />
<text  x="136.03" y="479.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (53,333,320 samples, 1.65%)</title><rect x="184.8" y="501" width="19.5" height="15.0" fill="rgb(226,31,0)" rx="2" ry="2" />
<text  x="187.78" y="511.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2,666,666 samples, 0.08%)</title><rect x="159.9" y="405" width="1.0" height="15.0" fill="rgb(223,13,52)" rx="2" ry="2" />
<text  x="162.88" y="415.5" ></text>
</g>
<g >
<title>call_init (3,999,999 samples, 0.12%)</title><rect x="1123.1" y="709" width="1.5" height="15.0" fill="rgb(214,51,18)" rx="2" ry="2" />
<text  x="1126.12" y="719.5" ></text>
</g>
<g >
<title>__gthread_active_p (1,333,333 samples, 0.04%)</title><rect x="972.3" y="469" width="0.4" height="15.0" fill="rgb(219,173,2)" rx="2" ry="2" />
<text  x="975.26" y="479.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="1130.9" y="421" width="0.5" height="15.0" fill="rgb(224,99,34)" rx="2" ry="2" />
<text  x="1133.93" y="431.5" ></text>
</g>
<g >
<title>leveldb::VersionSet::NumLevelFiles (3,999,999 samples, 0.12%)</title><rect x="482.1" y="517" width="1.5" height="15.0" fill="rgb(226,192,53)" rx="2" ry="2" />
<text  x="485.10" y="527.5" ></text>
</g>
<g >
<title>__gthread_active_p (1,333,333 samples, 0.04%)</title><rect x="1083.6" y="453" width="0.5" height="15.0" fill="rgb(249,196,51)" rx="2" ry="2" />
<text  x="1086.57" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::deallocate (1,333,333 samples, 0.04%)</title><rect x="144.3" y="405" width="0.4" height="15.0" fill="rgb(217,103,44)" rx="2" ry="2" />
<text  x="147.26" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (1,333,333 samples, 0.04%)</title><rect x="166.2" y="357" width="0.5" height="15.0" fill="rgb(209,127,11)" rx="2" ry="2" />
<text  x="169.23" y="367.5" ></text>
</g>
<g >
<title>run_timer_softirq (2,666,666 samples, 0.08%)</title><rect x="627.6" y="309" width="1.0" height="15.0" fill="rgb(236,140,28)" rx="2" ry="2" />
<text  x="630.58" y="319.5" ></text>
</g>
<g >
<title>irq_exit (3,999,999 samples, 0.12%)</title><rect x="564.1" y="389" width="1.5" height="15.0" fill="rgb(250,74,45)" rx="2" ry="2" />
<text  x="567.12" y="399.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="591.9" y="373" width="0.5" height="15.0" fill="rgb(233,74,48)" rx="2" ry="2" />
<text  x="594.94" y="383.5" ></text>
</g>
<g >
<title>__generic_file_write_iter (1,333,333 samples, 0.04%)</title><rect x="814.6" y="341" width="0.5" height="15.0" fill="rgb(229,214,1)" rx="2" ry="2" />
<text  x="817.57" y="351.5" ></text>
</g>
<g >
<title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::__atomic_futex_unsigned (3,999,999 samples, 0.12%)</title><rect x="1062.6" y="389" width="1.4" height="15.0" fill="rgb(209,189,23)" rx="2" ry="2" />
<text  x="1065.58" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;, std::allocator&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt; &gt; &gt;::_M_default_append (2,666,666 samples, 0.08%)</title><rect x="1130.9" y="613" width="1.0" height="15.0" fill="rgb(240,17,14)" rx="2" ry="2" />
<text  x="1133.93" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_Hash_node_value_base (1,333,333 samples, 0.04%)</title><rect x="1173.4" y="725" width="0.5" height="15.0" fill="rgb(212,157,4)" rx="2" ry="2" />
<text  x="1176.40" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1,333,333 samples, 0.04%)</title><rect x="395.2" y="453" width="0.5" height="15.0" fill="rgb(220,227,40)" rx="2" ry="2" />
<text  x="398.20" y="463.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl (10,666,664 samples, 0.33%)</title><rect x="1073.8" y="517" width="3.9" height="15.0" fill="rgb(241,176,14)" rx="2" ry="2" />
<text  x="1076.81" y="527.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (5,333,332 samples, 0.17%)</title><rect x="129.6" y="389" width="2.0" height="15.0" fill="rgb(230,90,44)" rx="2" ry="2" />
<text  x="132.61" y="399.5" ></text>
</g>
<g >
<title>std::swap&lt;std::__future_base::_State_baseV2*&gt; (5,333,332 samples, 0.17%)</title><rect x="1042.6" y="485" width="1.9" height="15.0" fill="rgb(243,168,40)" rx="2" ry="2" />
<text  x="1045.56" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (37,333,324 samples, 1.16%)</title><rect x="63.7" y="389" width="13.7" height="15.0" fill="rgb(211,57,48)" rx="2" ry="2" />
<text  x="66.70" y="399.5" ></text>
</g>
<g >
<title>__walk_page_range (1,333,333 samples, 0.04%)</title><rect x="144.3" y="165" width="0.4" height="15.0" fill="rgb(233,5,35)" rx="2" ry="2" />
<text  x="147.26" y="175.5" ></text>
</g>
<g >
<title>update_group_capacity (1,333,333 samples, 0.04%)</title><rect x="500.2" y="341" width="0.4" height="15.0" fill="rgb(219,227,7)" rx="2" ry="2" />
<text  x="503.16" y="351.5" ></text>
</g>
<g >
<title>_start (23,999,994 samples, 0.74%)</title><rect x="1124.6" y="741" width="8.8" height="15.0" fill="rgb(220,137,2)" rx="2" ry="2" />
<text  x="1127.58" y="751.5" ></text>
</g>
<g >
<title>__walk_page_range (1,333,333 samples, 0.04%)</title><rect x="330.8" y="181" width="0.4" height="15.0" fill="rgb(216,124,9)" rx="2" ry="2" />
<text  x="333.75" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (3,999,999 samples, 0.12%)</title><rect x="322.5" y="437" width="1.4" height="15.0" fill="rgb(219,49,49)" rx="2" ry="2" />
<text  x="325.45" y="447.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (1,333,333 samples, 0.04%)</title><rect x="516.3" y="389" width="0.5" height="15.0" fill="rgb(245,171,33)" rx="2" ry="2" />
<text  x="519.27" y="399.5" ></text>
</g>
<g >
<title>_dl_start (3,999,999 samples, 0.12%)</title><rect x="1131.9" y="725" width="1.5" height="15.0" fill="rgb(236,120,15)" rx="2" ry="2" />
<text  x="1134.90" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (31,999,992 samples, 0.99%)</title><rect x="382.0" y="453" width="11.7" height="15.0" fill="rgb(241,21,12)" rx="2" ry="2" />
<text  x="385.01" y="463.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::value (5,333,332 samples, 0.17%)</title><rect x="229.2" y="501" width="2.0" height="15.0" fill="rgb(212,201,7)" rx="2" ry="2" />
<text  x="232.21" y="511.5" ></text>
</g>
<g >
<title>memset_erms (1,333,333 samples, 0.04%)</title><rect x="823.4" y="213" width="0.4" height="15.0" fill="rgb(243,8,43)" rx="2" ry="2" />
<text  x="826.36" y="223.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MemTableInserter::Put (711,999,822 samples, 22.09%)</title><rect x="496.3" y="501" width="260.7" height="15.0" fill="rgb(233,59,15)" rx="2" ry="2" />
<text  x="499.26" y="511.5" >leveldb::(anonymous namespace)::Me..</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.04%)</title><rect x="290.2" y="389" width="0.5" height="15.0" fill="rgb(226,133,20)" rx="2" ry="2" />
<text  x="293.23" y="399.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::key (9,333,331 samples, 0.29%)</title><rect x="172.6" y="501" width="3.4" height="15.0" fill="rgb(238,102,17)" rx="2" ry="2" />
<text  x="175.57" y="511.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::value (7,999,998 samples, 0.25%)</title><rect x="15.4" y="485" width="2.9" height="15.0" fill="rgb(232,171,4)" rx="2" ry="2" />
<text  x="18.37" y="495.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (5,333,332 samples, 0.17%)</title><rect x="751.1" y="437" width="2.0" height="15.0" fill="rgb(230,90,46)" rx="2" ry="2" />
<text  x="754.10" y="447.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.04%)</title><rect x="1020.6" y="309" width="0.5" height="15.0" fill="rgb(241,184,5)" rx="2" ry="2" />
<text  x="1023.59" y="319.5" ></text>
</g>
<g >
<title>page_counter_try_charge (1,333,333 samples, 0.04%)</title><rect x="847.8" y="181" width="0.5" height="15.0" fill="rgb(212,175,45)" rx="2" ry="2" />
<text  x="850.77" y="191.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="885.4" y="117" width="0.4" height="15.0" fill="rgb(230,229,28)" rx="2" ry="2" />
<text  x="888.36" y="127.5" ></text>
</g>
<g >
<title>start_this_handle (1,333,333 samples, 0.04%)</title><rect x="823.8" y="213" width="0.5" height="15.0" fill="rgb(206,173,35)" rx="2" ry="2" />
<text  x="826.84" y="223.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MergingIterator::Next (118,666,637 samples, 3.68%)</title><rect x="183.8" y="517" width="43.5" height="15.0" fill="rgb(245,116,48)" rx="2" ry="2" />
<text  x="186.80" y="527.5" >leve..</text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (1,333,333 samples, 0.04%)</title><rect x="11.0" y="501" width="0.5" height="15.0" fill="rgb(237,58,14)" rx="2" ry="2" />
<text  x="13.98" y="511.5" ></text>
</g>
<g >
<title>operator new (1,333,333 samples, 0.04%)</title><rect x="1056.7" y="453" width="0.5" height="15.0" fill="rgb(242,5,5)" rx="2" ry="2" />
<text  x="1059.72" y="463.5" ></text>
</g>
<g >
<title>__es_insert_extent (1,333,333 samples, 0.04%)</title><rect x="842.9" y="229" width="0.5" height="15.0" fill="rgb(219,217,33)" rx="2" ry="2" />
<text  x="845.88" y="239.5" ></text>
</g>
<g >
<title>__pagevec_release (1,333,333 samples, 0.04%)</title><rect x="10.0" y="325" width="0.5" height="15.0" fill="rgb(220,17,16)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>tcmalloc::Static::InitStaticVars (1,333,333 samples, 0.04%)</title><rect x="1123.6" y="645" width="0.5" height="15.0" fill="rgb(243,121,23)" rx="2" ry="2" />
<text  x="1126.60" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt;::_M_next (3,999,999 samples, 0.12%)</title><rect x="279.5" y="341" width="1.5" height="15.0" fill="rgb(217,115,1)" rx="2" ry="2" />
<text  x="282.49" y="351.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (1,333,333 samples, 0.04%)</title><rect x="1131.4" y="373" width="0.5" height="15.0" fill="rgb(205,116,52)" rx="2" ry="2" />
<text  x="1134.41" y="383.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.04%)</title><rect x="381.0" y="357" width="0.5" height="15.0" fill="rgb(243,89,0)" rx="2" ry="2" />
<text  x="384.04" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (1,333,333 samples, 0.04%)</title><rect x="398.1" y="357" width="0.5" height="15.0" fill="rgb(235,166,8)" rx="2" ry="2" />
<text  x="401.13" y="367.5" ></text>
</g>
<g >
<title>__f_unlock_pos (1,333,333 samples, 0.04%)</title><rect x="802.4" y="389" width="0.5" height="15.0" fill="rgb(252,160,32)" rx="2" ry="2" />
<text  x="805.36" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (3,999,999 samples, 0.12%)</title><rect x="999.6" y="277" width="1.5" height="15.0" fill="rgb(220,21,23)" rx="2" ry="2" />
<text  x="1002.60" y="287.5" ></text>
</g>
<g >
<title>radix_tree_lookup_slot (2,666,666 samples, 0.08%)</title><rect x="848.3" y="229" width="0.9" height="15.0" fill="rgb(242,205,22)" rx="2" ry="2" />
<text  x="851.25" y="239.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (2,666,666 samples, 0.08%)</title><rect x="369.3" y="469" width="1.0" height="15.0" fill="rgb(239,193,17)" rx="2" ry="2" />
<text  x="372.32" y="479.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (19,999,995 samples, 0.62%)</title><rect x="409.8" y="421" width="7.4" height="15.0" fill="rgb(216,84,17)" rx="2" ry="2" />
<text  x="412.84" y="431.5" ></text>
</g>
<g >
<title>kmem_cache_free (1,333,333 samples, 0.04%)</title><rect x="995.7" y="245" width="0.5" height="15.0" fill="rgb(246,22,32)" rx="2" ry="2" />
<text  x="998.69" y="255.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (1,333,333 samples, 0.04%)</title><rect x="170.6" y="485" width="0.5" height="15.0" fill="rgb(210,143,41)" rx="2" ry="2" />
<text  x="173.62" y="495.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::Writer::Writer (3,999,999 samples, 0.12%)</title><rect x="484.1" y="533" width="1.4" height="15.0" fill="rgb(239,186,53)" rx="2" ry="2" />
<text  x="487.05" y="543.5" ></text>
</g>
<g >
<title>std::swap&lt;char const*&gt; (2,666,666 samples, 0.08%)</title><rect x="776.0" y="501" width="1.0" height="15.0" fill="rgb(222,126,9)" rx="2" ry="2" />
<text  x="779.00" y="511.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::tuple&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter, true&gt; (2,666,666 samples, 0.08%)</title><rect x="1076.7" y="501" width="1.0" height="15.0" fill="rgb(249,95,21)" rx="2" ry="2" />
<text  x="1079.74" y="511.5" ></text>
</g>
<g >
<title>try_charge (1,333,333 samples, 0.04%)</title><rect x="847.8" y="197" width="0.5" height="15.0" fill="rgb(226,29,47)" rx="2" ry="2" />
<text  x="850.77" y="207.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (9,333,331 samples, 0.29%)</title><rect x="232.6" y="501" width="3.4" height="15.0" fill="rgb(252,142,53)" rx="2" ry="2" />
<text  x="235.62" y="511.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.04%)</title><rect x="261.4" y="437" width="0.5" height="15.0" fill="rgb(206,141,54)" rx="2" ry="2" />
<text  x="264.43" y="447.5" ></text>
</g>
<g >
<title>db_bench (3,222,665,861 samples, 100.00%)</title><rect x="10.0" y="757" width="1180.0" height="15.0" fill="rgb(254,184,21)" rx="2" ry="2" />
<text  x="13.00" y="767.5" >db_bench</text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="356.6" y="437" width="0.5" height="15.0" fill="rgb(242,183,29)" rx="2" ry="2" />
<text  x="359.63" y="447.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (1,333,333 samples, 0.04%)</title><rect x="1131.4" y="389" width="0.5" height="15.0" fill="rgb(244,95,42)" rx="2" ry="2" />
<text  x="1134.41" y="399.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (2,666,666 samples, 0.08%)</title><rect x="326.4" y="469" width="0.9" height="15.0" fill="rgb(220,97,14)" rx="2" ry="2" />
<text  x="329.36" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (5,333,332 samples, 0.17%)</title><rect x="1082.1" y="469" width="2.0" height="15.0" fill="rgb(216,66,45)" rx="2" ry="2" />
<text  x="1085.11" y="479.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (2,666,666 samples, 0.08%)</title><rect x="239.5" y="437" width="0.9" height="15.0" fill="rgb(231,216,29)" rx="2" ry="2" />
<text  x="242.46" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1,333,333 samples, 0.04%)</title><rect x="1110.9" y="549" width="0.5" height="15.0" fill="rgb(244,211,35)" rx="2" ry="2" />
<text  x="1113.91" y="559.5" ></text>
</g>
<g >
<title>do_munmap (1,333,333 samples, 0.04%)</title><rect x="330.3" y="373" width="0.5" height="15.0" fill="rgb(254,24,48)" rx="2" ry="2" />
<text  x="333.26" y="383.5" ></text>
</g>
<g >
<title>madvise_free_single_vma (1,333,333 samples, 0.04%)</title><rect x="144.3" y="213" width="0.4" height="15.0" fill="rgb(235,72,18)" rx="2" ry="2" />
<text  x="147.26" y="223.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (1,333,333 samples, 0.04%)</title><rect x="400.1" y="405" width="0.5" height="15.0" fill="rgb(209,48,21)" rx="2" ry="2" />
<text  x="403.08" y="415.5" ></text>
</g>
<g >
<title>_IO_vfprintf_internal (33,333,325 samples, 1.03%)</title><rect x="446.5" y="517" width="12.2" height="15.0" fill="rgb(216,102,7)" rx="2" ry="2" />
<text  x="449.46" y="527.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_S_check&lt;std::__future_base::_State_baseV2&gt; (2,666,666 samples, 0.08%)</title><rect x="1033.3" y="517" width="1.0" height="15.0" fill="rgb(242,12,13)" rx="2" ry="2" />
<text  x="1036.29" y="527.5" ></text>
</g>
<g >
<title>jbd2_write_access_granted.part.11 (2,666,666 samples, 0.08%)</title><rect x="893.7" y="165" width="0.9" height="15.0" fill="rgb(217,199,33)" rx="2" ry="2" />
<text  x="896.66" y="175.5" ></text>
</g>
<g >
<title>leveldb::Block::Iter::GetRestartPoint (2,666,666 samples, 0.08%)</title><rect x="217.5" y="389" width="1.0" height="15.0" fill="rgb(230,212,46)" rx="2" ry="2" />
<text  x="220.49" y="399.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="194.1" y="469" width="0.4" height="15.0" fill="rgb(222,135,23)" rx="2" ry="2" />
<text  x="197.05" y="479.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (3,999,999 samples, 0.12%)</title><rect x="488.9" y="485" width="1.5" height="15.0" fill="rgb(221,74,26)" rx="2" ry="2" />
<text  x="491.93" y="495.5" ></text>
</g>
<g >
<title>munmap (1,333,333 samples, 0.04%)</title><rect x="330.3" y="453" width="0.5" height="15.0" fill="rgb(224,84,10)" rx="2" ry="2" />
<text  x="333.26" y="463.5" ></text>
</g>
<g >
<title>ext4_readpages (1,333,333 samples, 0.04%)</title><rect x="1166.1" y="565" width="0.5" height="15.0" fill="rgb(223,164,14)" rx="2" ry="2" />
<text  x="1169.08" y="575.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="356.6" y="485" width="0.5" height="15.0" fill="rgb(244,219,11)" rx="2" ry="2" />
<text  x="359.63" y="495.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (9,333,331 samples, 0.29%)</title><rect x="194.5" y="469" width="3.5" height="15.0" fill="rgb(228,58,43)" rx="2" ry="2" />
<text  x="197.54" y="479.5" ></text>
</g>
<g >
<title>unmap_single_vma (1,333,333 samples, 0.04%)</title><rect x="330.3" y="325" width="0.5" height="15.0" fill="rgb(241,147,53)" rx="2" ry="2" />
<text  x="333.26" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate (1,333,333 samples, 0.04%)</title><rect x="330.8" y="405" width="0.4" height="15.0" fill="rgb(242,166,48)" rx="2" ry="2" />
<text  x="333.75" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (1,333,333 samples, 0.04%)</title><rect x="1172.9" y="741" width="0.5" height="15.0" fill="rgb(216,177,21)" rx="2" ry="2" />
<text  x="1175.91" y="751.5" ></text>
</g>
<g >
<title>file_update_time (18,666,662 samples, 0.58%)</title><rect x="820.4" y="309" width="6.9" height="15.0" fill="rgb(241,86,14)" rx="2" ry="2" />
<text  x="823.43" y="319.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,333,333 samples, 0.04%)</title><rect x="131.1" y="309" width="0.5" height="15.0" fill="rgb(210,96,38)" rx="2" ry="2" />
<text  x="134.08" y="319.5" ></text>
</g>
<g >
<title>__x64_sys_write (5,333,332 samples, 0.17%)</title><rect x="796.0" y="421" width="2.0" height="15.0" fill="rgb(247,108,22)" rx="2" ry="2" />
<text  x="799.02" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,333,333 samples, 0.04%)</title><rect x="1170.5" y="741" width="0.5" height="15.0" fill="rgb(232,161,4)" rx="2" ry="2" />
<text  x="1173.47" y="751.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::wait (10,666,664 samples, 0.33%)</title><rect x="1034.3" y="517" width="3.9" height="15.0" fill="rgb(248,150,35)" rx="2" ry="2" />
<text  x="1037.26" y="527.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MergingIterator::Valid (1,333,333 samples, 0.04%)</title><rect x="227.3" y="501" width="0.4" height="15.0" fill="rgb(245,160,11)" rx="2" ry="2" />
<text  x="230.25" y="511.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="94.0" y="389" width="0.5" height="15.0" fill="rgb(224,145,1)" rx="2" ry="2" />
<text  x="96.97" y="399.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (1,333,333 samples, 0.04%)</title><rect x="330.8" y="389" width="0.4" height="15.0" fill="rgb(250,6,39)" rx="2" ry="2" />
<text  x="333.75" y="399.5" ></text>
</g>
<g >
<title>__fopen_internal (3,999,999 samples, 0.12%)</title><rect x="1129.5" y="629" width="1.4" height="15.0" fill="rgb(253,61,24)" rx="2" ry="2" />
<text  x="1132.46" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.04%)</title><rect x="1175.4" y="725" width="0.4" height="15.0" fill="rgb(210,33,21)" rx="2" ry="2" />
<text  x="1178.35" y="735.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (5,333,332 samples, 0.17%)</title><rect x="173.5" y="469" width="2.0" height="15.0" fill="rgb(231,131,27)" rx="2" ry="2" />
<text  x="176.55" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (10,666,664 samples, 0.33%)</title><rect x="386.9" y="405" width="3.9" height="15.0" fill="rgb(223,180,0)" rx="2" ry="2" />
<text  x="389.90" y="415.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (3,999,999 samples, 0.12%)</title><rect x="1085.5" y="453" width="1.5" height="15.0" fill="rgb(217,116,48)" rx="2" ry="2" />
<text  x="1088.52" y="463.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1,333,333 samples, 0.04%)</title><rect x="516.3" y="373" width="0.5" height="15.0" fill="rgb(218,153,36)" rx="2" ry="2" />
<text  x="519.27" y="383.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::FindShortestSeparator (1,333,333 samples, 0.04%)</title><rect x="51.0" y="453" width="0.5" height="15.0" fill="rgb(253,47,54)" rx="2" ry="2" />
<text  x="54.01" y="463.5" ></text>
</g>
<g >
<title>__GI__IO_padn (3,999,999 samples, 0.12%)</title><rect x="455.2" y="501" width="1.5" height="15.0" fill="rgb(211,74,33)" rx="2" ry="2" />
<text  x="458.25" y="511.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.04%)</title><rect x="69.1" y="373" width="0.5" height="15.0" fill="rgb(224,104,46)" rx="2" ry="2" />
<text  x="72.07" y="383.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.04%)</title><rect x="334.2" y="389" width="0.5" height="15.0" fill="rgb(224,209,33)" rx="2" ry="2" />
<text  x="337.17" y="399.5" ></text>
</g>
<g >
<title>alloc_pages_vma (2,666,666 samples, 0.08%)</title><rect x="141.8" y="229" width="1.0" height="15.0" fill="rgb(245,63,51)" rx="2" ry="2" />
<text  x="144.82" y="239.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="103.7" y="373" width="0.5" height="15.0" fill="rgb(227,193,18)" rx="2" ry="2" />
<text  x="106.74" y="383.5" ></text>
</g>
<g >
<title>memcpy@plt (1,333,333 samples, 0.04%)</title><rect x="115.9" y="373" width="0.5" height="15.0" fill="rgb(244,153,41)" rx="2" ry="2" />
<text  x="118.94" y="383.5" ></text>
</g>
<g >
<title>leveldb::Slice::remove_prefix (1,333,333 samples, 0.04%)</title><rect x="762.8" y="485" width="0.5" height="15.0" fill="rgb(238,218,11)" rx="2" ry="2" />
<text  x="765.82" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create@plt (1,333,333 samples, 0.04%)</title><rect x="161.8" y="453" width="0.5" height="15.0" fill="rgb(250,206,42)" rx="2" ry="2" />
<text  x="164.83" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.04%)</title><rect x="97.4" y="341" width="0.5" height="15.0" fill="rgb(207,101,11)" rx="2" ry="2" />
<text  x="100.39" y="351.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2,666,666 samples, 0.08%)</title><rect x="627.6" y="373" width="1.0" height="15.0" fill="rgb(227,51,46)" rx="2" ry="2" />
<text  x="630.58" y="383.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="885.4" y="85" width="0.4" height="15.0" fill="rgb(206,65,26)" rx="2" ry="2" />
<text  x="888.36" y="95.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.04%)</title><rect x="1129.0" y="533" width="0.5" height="15.0" fill="rgb(229,193,31)" rx="2" ry="2" />
<text  x="1131.97" y="543.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteRawBlock (21,333,328 samples, 0.66%)</title><rect x="290.7" y="421" width="7.8" height="15.0" fill="rgb(219,94,44)" rx="2" ry="2" />
<text  x="293.72" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create@plt (1,333,333 samples, 0.04%)</title><rect x="342.0" y="469" width="0.5" height="15.0" fill="rgb(248,151,21)" rx="2" ry="2" />
<text  x="344.98" y="479.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (3,999,999 samples, 0.12%)</title><rect x="182.3" y="501" width="1.5" height="15.0" fill="rgb(246,207,20)" rx="2" ry="2" />
<text  x="185.34" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (1,333,333 samples, 0.04%)</title><rect x="1177.8" y="741" width="0.5" height="15.0" fill="rgb(225,220,49)" rx="2" ry="2" />
<text  x="1180.79" y="751.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (6,666,665 samples, 0.21%)</title><rect x="23.2" y="453" width="2.4" height="15.0" fill="rgb(242,124,28)" rx="2" ry="2" />
<text  x="26.18" y="463.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="94.0" y="357" width="0.5" height="15.0" fill="rgb(242,162,4)" rx="2" ry="2" />
<text  x="96.97" y="367.5" ></text>
</g>
<g >
<title>leveldb::Status::OK (1,333,333 samples, 0.04%)</title><rect x="913.7" y="453" width="0.5" height="15.0" fill="rgb(247,75,18)" rx="2" ry="2" />
<text  x="916.67" y="463.5" ></text>
</g>
<g >
<title>__add_to_page_cache_locked (2,666,666 samples, 0.08%)</title><rect x="847.3" y="229" width="1.0" height="15.0" fill="rgb(246,183,51)" rx="2" ry="2" />
<text  x="850.28" y="239.5" ></text>
</g>
<g >
<title>ext4_mark_inode_dirty (1,333,333 samples, 0.04%)</title><rect x="894.6" y="245" width="0.5" height="15.0" fill="rgb(207,134,50)" rx="2" ry="2" />
<text  x="897.63" y="255.5" ></text>
</g>
<g >
<title>std::operator&amp; (1,333,333 samples, 0.04%)</title><rect x="752.6" y="405" width="0.5" height="15.0" fill="rgb(205,167,0)" rx="2" ry="2" />
<text  x="755.57" y="415.5" ></text>
</g>
<g >
<title>do_unlinkat (2,666,666 samples, 0.08%)</title><rect x="10.0" y="421" width="1.0" height="15.0" fill="rgb(211,69,49)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (1,333,333 samples, 0.04%)</title><rect x="398.6" y="373" width="0.5" height="15.0" fill="rgb(226,202,8)" rx="2" ry="2" />
<text  x="401.61" y="383.5" ></text>
</g>
<g >
<title>leveldb::TableCache::FindTable (1,333,333 samples, 0.04%)</title><rect x="144.7" y="469" width="0.5" height="15.0" fill="rgb(252,147,54)" rx="2" ry="2" />
<text  x="147.75" y="479.5" ></text>
</g>
<g >
<title>futex_wake (1,333,333 samples, 0.04%)</title><rect x="989.3" y="389" width="0.5" height="15.0" fill="rgb(207,87,30)" rx="2" ry="2" />
<text  x="992.35" y="399.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (1,333,333 samples, 0.04%)</title><rect x="1181.2" y="741" width="0.5" height="15.0" fill="rgb(239,73,45)" rx="2" ry="2" />
<text  x="1184.21" y="751.5" ></text>
</g>
<g >
<title>snappy::internal::CompressFragment (31,999,992 samples, 0.99%)</title><rect x="116.4" y="389" width="11.7" height="15.0" fill="rgb(253,121,20)" rx="2" ry="2" />
<text  x="119.43" y="399.5" ></text>
</g>
<g >
<title>truncate_cleanup_page (1,333,333 samples, 0.04%)</title><rect x="236.5" y="309" width="0.5" height="15.0" fill="rgb(218,181,40)" rx="2" ry="2" />
<text  x="239.53" y="319.5" ></text>
</g>
<g >
<title>leveldb::Status::operator= (3,999,999 samples, 0.12%)</title><rect x="775.5" y="517" width="1.5" height="15.0" fill="rgb(224,22,8)" rx="2" ry="2" />
<text  x="778.51" y="527.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (1,333,333 samples, 0.04%)</title><rect x="172.1" y="469" width="0.5" height="15.0" fill="rgb(254,197,53)" rx="2" ry="2" />
<text  x="175.09" y="479.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (3,999,999 samples, 0.12%)</title><rect x="389.3" y="357" width="1.5" height="15.0" fill="rgb(233,200,39)" rx="2" ry="2" />
<text  x="392.34" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (25,333,327 samples, 0.79%)</title><rect x="265.8" y="373" width="9.3" height="15.0" fill="rgb(230,146,12)" rx="2" ry="2" />
<text  x="268.82" y="383.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="218.0" y="341" width="0.5" height="15.0" fill="rgb(235,138,14)" rx="2" ry="2" />
<text  x="220.98" y="351.5" ></text>
</g>
<g >
<title>__fget (3,999,999 samples, 0.12%)</title><rect x="804.3" y="341" width="1.5" height="15.0" fill="rgb(230,112,8)" rx="2" ry="2" />
<text  x="807.32" y="351.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (1,333,333 samples, 0.04%)</title><rect x="1150.9" y="741" width="0.5" height="15.0" fill="rgb(237,226,9)" rx="2" ry="2" />
<text  x="1153.94" y="751.5" ></text>
</g>
<g >
<title>__x64_sys_fdatasync (1,333,333 samples, 0.04%)</title><rect x="1128.5" y="501" width="0.5" height="15.0" fill="rgb(205,173,51)" rx="2" ry="2" />
<text  x="1131.49" y="511.5" ></text>
</g>
<g >
<title>load_balance (1,333,333 samples, 0.04%)</title><rect x="473.3" y="437" width="0.5" height="15.0" fill="rgb(235,229,41)" rx="2" ry="2" />
<text  x="476.31" y="447.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::~shared_ptr (2,666,666 samples, 0.08%)</title><rect x="1046.0" y="517" width="1.0" height="15.0" fill="rgb(229,71,51)" rx="2" ry="2" />
<text  x="1048.98" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add (1,333,333 samples, 0.04%)</title><rect x="1122.1" y="725" width="0.5" height="15.0" fill="rgb(248,148,16)" rx="2" ry="2" />
<text  x="1125.14" y="735.5" ></text>
</g>
<g >
<title>leveldb::DecodeEntry (2,666,666 samples, 0.08%)</title><rect x="221.9" y="421" width="1.0" height="15.0" fill="rgb(241,37,15)" rx="2" ry="2" />
<text  x="224.88" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt; &gt;::construct&lt;std::__future_base::_State_baseV2&gt; (14,666,663 samples, 0.46%)</title><rect x="1061.1" y="437" width="5.4" height="15.0" fill="rgb(237,35,3)" rx="2" ry="2" />
<text  x="1064.11" y="447.5" ></text>
</g>
<g >
<title>__handle_mm_fault (2,666,666 samples, 0.08%)</title><rect x="282.9" y="197" width="1.0" height="15.0" fill="rgb(254,130,48)" rx="2" ry="2" />
<text  x="285.91" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.04%)</title><rect x="1124.1" y="533" width="0.5" height="15.0" fill="rgb(252,46,19)" rx="2" ry="2" />
<text  x="1127.09" y="543.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (2,666,666 samples, 0.08%)</title><rect x="160.9" y="485" width="0.9" height="15.0" fill="rgb(218,59,50)" rx="2" ry="2" />
<text  x="163.86" y="495.5" ></text>
</g>
<g >
<title>page_cache_async_readahead (6,666,665 samples, 0.21%)</title><rect x="1166.6" y="597" width="2.4" height="15.0" fill="rgb(232,188,53)" rx="2" ry="2" />
<text  x="1169.57" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1,333,333 samples, 0.04%)</title><rect x="342.0" y="485" width="0.5" height="15.0" fill="rgb(237,45,41)" rx="2" ry="2" />
<text  x="344.98" y="495.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="473.3" y="517" width="0.5" height="15.0" fill="rgb(230,35,3)" rx="2" ry="2" />
<text  x="476.31" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;leveldb::ParsedInternalKey&gt;::construct&lt;leveldb::ParsedInternalKey, leveldb::ParsedInternalKey const&amp;&gt; (2,666,666 samples, 0.08%)</title><rect x="433.8" y="469" width="0.9" height="15.0" fill="rgb(250,39,11)" rx="2" ry="2" />
<text  x="436.76" y="479.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, false&gt;::_M_head (1,333,333 samples, 0.04%)</title><rect x="1102.1" y="453" width="0.5" height="15.0" fill="rgb(227,6,44)" rx="2" ry="2" />
<text  x="1105.12" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::__future_base::_State_baseV2&gt;::_M_addr (1,333,333 samples, 0.04%)</title><rect x="1085.5" y="421" width="0.5" height="15.0" fill="rgb(239,205,35)" rx="2" ry="2" />
<text  x="1088.52" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2,666,666 samples, 0.08%)</title><rect x="287.8" y="373" width="1.0" height="15.0" fill="rgb(224,41,3)" rx="2" ry="2" />
<text  x="290.79" y="383.5" ></text>
</g>
<g >
<title>ext4_es_insert_extent (1,333,333 samples, 0.04%)</title><rect x="843.4" y="213" width="0.5" height="15.0" fill="rgb(215,0,40)" rx="2" ry="2" />
<text  x="846.37" y="223.5" ></text>
</g>
<g >
<title>ondemand_readahead (6,666,665 samples, 0.21%)</title><rect x="1166.6" y="581" width="2.4" height="15.0" fill="rgb(218,125,20)" rx="2" ry="2" />
<text  x="1169.57" y="591.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::empty (1,333,333 samples, 0.04%)</title><rect x="374.7" y="501" width="0.5" height="15.0" fill="rgb(214,111,14)" rx="2" ry="2" />
<text  x="377.69" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.04%)</title><rect x="1128.5" y="517" width="0.5" height="15.0" fill="rgb(223,122,16)" rx="2" ry="2" />
<text  x="1131.49" y="527.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.08%)</title><rect x="1182.2" y="725" width="1.0" height="15.0" fill="rgb(219,117,49)" rx="2" ry="2" />
<text  x="1185.19" y="735.5" ></text>
</g>
<g >
<title>__do_page_cache_readahead (1,333,333 samples, 0.04%)</title><rect x="1166.1" y="597" width="0.5" height="15.0" fill="rgb(221,86,41)" rx="2" ry="2" />
<text  x="1169.08" y="607.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::__setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; (6,666,665 samples, 0.21%)</title><rect x="1023.0" y="517" width="2.5" height="15.0" fill="rgb(240,70,12)" rx="2" ry="2" />
<text  x="1026.03" y="527.5" ></text>
</g>
<g >
<title>leveldb::Status::ok (1,333,333 samples, 0.04%)</title><rect x="291.2" y="405" width="0.5" height="15.0" fill="rgb(224,131,22)" rx="2" ry="2" />
<text  x="294.21" y="415.5" ></text>
</g>
<g >
<title>rcu_cblist_dequeue (1,333,333 samples, 0.04%)</title><rect x="381.0" y="341" width="0.5" height="15.0" fill="rgb(238,51,8)" rx="2" ry="2" />
<text  x="384.04" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (2,666,666 samples, 0.08%)</title><rect x="389.3" y="341" width="1.0" height="15.0" fill="rgb(245,186,5)" rx="2" ry="2" />
<text  x="392.34" y="351.5" ></text>
</g>
<g >
<title>__unlink (2,666,666 samples, 0.08%)</title><rect x="10.0" y="485" width="1.0" height="15.0" fill="rgb(218,204,5)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>leveldb::ParseInternalKey (3,999,999 samples, 0.12%)</title><rect x="327.3" y="485" width="1.5" height="15.0" fill="rgb(246,178,16)" rx="2" ry="2" />
<text  x="330.34" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1,333,333 samples, 0.04%)</title><rect x="58.3" y="421" width="0.5" height="15.0" fill="rgb(249,218,6)" rx="2" ry="2" />
<text  x="61.33" y="431.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::FindShortestSeparator (1,333,333 samples, 0.04%)</title><rect x="51.0" y="469" width="0.5" height="15.0" fill="rgb(220,87,24)" rx="2" ry="2" />
<text  x="54.01" y="479.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MergingIterator::key (2,666,666 samples, 0.08%)</title><rect x="227.3" y="517" width="0.9" height="15.0" fill="rgb(218,45,7)" rx="2" ry="2" />
<text  x="230.25" y="527.5" ></text>
</g>
<g >
<title>seq_read (1,333,333 samples, 0.04%)</title><rect x="1129.0" y="437" width="0.5" height="15.0" fill="rgb(226,90,1)" rx="2" ry="2" />
<text  x="1131.97" y="447.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.04%)</title><rect x="409.4" y="357" width="0.4" height="15.0" fill="rgb(242,33,51)" rx="2" ry="2" />
<text  x="412.35" y="367.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Add (2,666,666 samples, 0.08%)</title><rect x="1155.3" y="741" width="1.0" height="15.0" fill="rgb(237,47,24)" rx="2" ry="2" />
<text  x="1158.34" y="751.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (3,999,999 samples, 0.12%)</title><rect x="1148.5" y="725" width="1.5" height="15.0" fill="rgb(240,5,14)" rx="2" ry="2" />
<text  x="1151.50" y="735.5" ></text>
</g>
<g >
<title>rcu_gp_kthread_wake (1,333,333 samples, 0.04%)</title><rect x="456.2" y="373" width="0.5" height="15.0" fill="rgb(234,75,9)" rx="2" ry="2" />
<text  x="459.22" y="383.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (158,666,627 samples, 4.92%)</title><rect x="577.3" y="405" width="58.1" height="15.0" fill="rgb(228,62,2)" rx="2" ry="2" />
<text  x="580.30" y="415.5" >leveld..</text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.08%)</title><rect x="1075.8" y="469" width="0.9" height="15.0" fill="rgb(251,217,8)" rx="2" ry="2" />
<text  x="1078.76" y="479.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::__future_base::_Result_base::_Deleter, true&gt;::_M_head (1,333,333 samples, 0.04%)</title><rect x="1099.2" y="309" width="0.5" height="15.0" fill="rgb(214,171,9)" rx="2" ry="2" />
<text  x="1102.19" y="319.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::InsertRange (1,333,333 samples, 0.04%)</title><rect x="177.5" y="421" width="0.4" height="15.0" fill="rgb(231,159,9)" rx="2" ry="2" />
<text  x="180.46" y="431.5" ></text>
</g>
<g >
<title>load_balance (1,333,333 samples, 0.04%)</title><rect x="1094.3" y="277" width="0.5" height="15.0" fill="rgb(213,62,36)" rx="2" ry="2" />
<text  x="1097.31" y="287.5" ></text>
</g>
<g >
<title>leveldb::Arena::Allocate (11,999,997 samples, 0.37%)</title><rect x="500.6" y="469" width="4.4" height="15.0" fill="rgb(244,7,8)" rx="2" ry="2" />
<text  x="503.65" y="479.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (9,333,331 samples, 0.29%)</title><rect x="822.9" y="277" width="3.4" height="15.0" fill="rgb(237,78,4)" rx="2" ry="2" />
<text  x="825.87" y="287.5" ></text>
</g>
<g >
<title>__do_sys_madvise (1,333,333 samples, 0.04%)</title><rect x="330.8" y="245" width="0.4" height="15.0" fill="rgb(242,202,44)" rx="2" ry="2" />
<text  x="333.75" y="255.5" ></text>
</g>
<g >
<title>TCMalloc_SystemRelease (1,333,333 samples, 0.04%)</title><rect x="144.3" y="309" width="0.4" height="15.0" fill="rgb(221,203,34)" rx="2" ry="2" />
<text  x="147.26" y="319.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::_M_head (1,333,333 samples, 0.04%)</title><rect x="1097.2" y="341" width="0.5" height="15.0" fill="rgb(247,37,18)" rx="2" ry="2" />
<text  x="1100.24" y="351.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.04%)</title><rect x="286.3" y="309" width="0.5" height="15.0" fill="rgb(250,161,35)" rx="2" ry="2" />
<text  x="289.33" y="319.5" ></text>
</g>
<g >
<title>vm_munmap (1,333,333 samples, 0.04%)</title><rect x="330.3" y="389" width="0.5" height="15.0" fill="rgb(244,10,40)" rx="2" ry="2" />
<text  x="333.26" y="399.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; (1,333,333 samples, 0.04%)</title><rect x="92.0" y="389" width="0.5" height="15.0" fill="rgb(210,168,9)" rx="2" ry="2" />
<text  x="95.02" y="399.5" ></text>
</g>
<g >
<title>add_transaction_credits (1,333,333 samples, 0.04%)</title><rect x="839.5" y="229" width="0.5" height="15.0" fill="rgb(245,108,33)" rx="2" ry="2" />
<text  x="842.47" y="239.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;char*, unsigned long, char&gt; (6,666,665 samples, 0.21%)</title><rect x="304.4" y="405" width="2.4" height="15.0" fill="rgb(237,85,18)" rx="2" ry="2" />
<text  x="307.39" y="415.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::RenameFile (1,333,333 samples, 0.04%)</title><rect x="1128.0" y="613" width="0.5" height="15.0" fill="rgb(211,74,47)" rx="2" ry="2" />
<text  x="1131.00" y="623.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="381.0" y="421" width="0.5" height="15.0" fill="rgb(224,64,50)" rx="2" ry="2" />
<text  x="384.04" y="431.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.04%)</title><rect x="353.2" y="517" width="0.5" height="15.0" fill="rgb(206,92,27)" rx="2" ry="2" />
<text  x="356.21" y="527.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (3,999,999 samples, 0.12%)</title><rect x="282.4" y="309" width="1.5" height="15.0" fill="rgb(220,203,30)" rx="2" ry="2" />
<text  x="285.42" y="319.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::GetMaxHeight (1,333,333 samples, 0.04%)</title><rect x="528.5" y="421" width="0.5" height="15.0" fill="rgb(213,47,36)" rx="2" ry="2" />
<text  x="531.48" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3,999,999 samples, 0.12%)</title><rect x="782.8" y="485" width="1.5" height="15.0" fill="rgb(230,104,26)" rx="2" ry="2" />
<text  x="785.83" y="495.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::AllocLarge (1,333,333 samples, 0.04%)</title><rect x="504.6" y="245" width="0.4" height="15.0" fill="rgb(206,34,18)" rx="2" ry="2" />
<text  x="507.56" y="255.5" ></text>
</g>
<g >
<title>ext4_mpage_readpages (6,666,665 samples, 0.21%)</title><rect x="1166.6" y="517" width="2.4" height="15.0" fill="rgb(220,159,36)" rx="2" ry="2" />
<text  x="1169.57" y="527.5" ></text>
</g>
<g >
<title>GetStackTrace (1,333,333 samples, 0.04%)</title><rect x="1131.4" y="293" width="0.5" height="15.0" fill="rgb(230,191,28)" rx="2" ry="2" />
<text  x="1134.41" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (3,999,999 samples, 0.12%)</title><rect x="1068.4" y="421" width="1.5" height="15.0" fill="rgb(252,33,47)" rx="2" ry="2" />
<text  x="1071.44" y="431.5" ></text>
</g>
<g >
<title>leveldb::log::Writer::AddRecord (497,333,209 samples, 15.43%)</title><rect x="773.6" y="533" width="182.1" height="15.0" fill="rgb(215,29,51)" rx="2" ry="2" />
<text  x="776.56" y="543.5" >leveldb::log::Writer::A..</text>
</g>
<g >
<title>leveldb::Block::Iter::Valid (1,333,333 samples, 0.04%)</title><rect x="223.3" y="437" width="0.5" height="15.0" fill="rgb(222,43,46)" rx="2" ry="2" />
<text  x="226.35" y="447.5" ></text>
</g>
<g >
<title>__ext4_journal_get_write_access (3,999,999 samples, 0.12%)</title><rect x="893.2" y="197" width="1.4" height="15.0" fill="rgb(214,35,34)" rx="2" ry="2" />
<text  x="896.17" y="207.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="94.0" y="373" width="0.5" height="15.0" fill="rgb(247,192,27)" rx="2" ry="2" />
<text  x="96.97" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::FileMetaData*, std::allocator&lt;leveldb::FileMetaData*&gt; &gt;::size (2,666,666 samples, 0.08%)</title><rect x="482.6" y="501" width="1.0" height="15.0" fill="rgb(226,48,23)" rx="2" ry="2" />
<text  x="485.59" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (3,999,999 samples, 0.12%)</title><rect x="101.3" y="405" width="1.5" height="15.0" fill="rgb(254,202,53)" rx="2" ry="2" />
<text  x="104.29" y="415.5" ></text>
</g>
<g >
<title>ext4_inode_csum_set (3,999,999 samples, 0.12%)</title><rect x="824.8" y="213" width="1.5" height="15.0" fill="rgb(245,143,2)" rx="2" ry="2" />
<text  x="827.82" y="223.5" ></text>
</g>
<g >
<title>iov_iter_fault_in_readable (1,333,333 samples, 0.04%)</title><rect x="906.8" y="293" width="0.5" height="15.0" fill="rgb(223,107,2)" rx="2" ry="2" />
<text  x="909.84" y="303.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (1,333,333 samples, 0.04%)</title><rect x="504.6" y="325" width="0.4" height="15.0" fill="rgb(208,217,12)" rx="2" ry="2" />
<text  x="507.56" y="335.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::~shared_ptr (53,333,320 samples, 1.65%)</title><rect x="1080.2" y="533" width="19.5" height="15.0" fill="rgb(250,164,4)" rx="2" ry="2" />
<text  x="1083.15" y="543.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (5,333,332 samples, 0.17%)</title><rect x="129.6" y="437" width="2.0" height="15.0" fill="rgb(220,68,23)" rx="2" ry="2" />
<text  x="132.61" y="447.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32 (3,999,999 samples, 0.12%)</title><rect x="761.4" y="485" width="1.4" height="15.0" fill="rgb(208,201,43)" rx="2" ry="2" />
<text  x="764.35" y="495.5" ></text>
</g>
<g >
<title>leveldb::Status::~Status (2,666,666 samples, 0.08%)</title><rect x="1094.8" y="325" width="1.0" height="15.0" fill="rgb(211,122,16)" rx="2" ry="2" />
<text  x="1097.80" y="335.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.04%)</title><rect x="50.5" y="437" width="0.5" height="15.0" fill="rgb(246,176,13)" rx="2" ry="2" />
<text  x="53.52" y="447.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="797.5" y="389" width="0.5" height="15.0" fill="rgb(228,212,39)" rx="2" ry="2" />
<text  x="800.48" y="399.5" ></text>
</g>
<g >
<title>unlock_page (1,333,333 samples, 0.04%)</title><rect x="907.3" y="293" width="0.5" height="15.0" fill="rgb(206,73,19)" rx="2" ry="2" />
<text  x="910.33" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (6,666,665 samples, 0.21%)</title><rect x="167.7" y="453" width="2.4" height="15.0" fill="rgb(243,39,13)" rx="2" ry="2" />
<text  x="170.69" y="463.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::MakeRoomForWrite (13,333,330 samples, 0.41%)</title><rect x="479.2" y="533" width="4.9" height="15.0" fill="rgb(224,150,30)" rx="2" ry="2" />
<text  x="482.17" y="543.5" ></text>
</g>
<g >
<title>std::_Construct&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;&gt; (2,666,666 samples, 0.08%)</title><rect x="1130.9" y="549" width="1.0" height="15.0" fill="rgb(230,59,43)" rx="2" ry="2" />
<text  x="1133.93" y="559.5" ></text>
</g>
<g >
<title>iput (1,333,333 samples, 0.04%)</title><rect x="438.6" y="421" width="0.5" height="15.0" fill="rgb(240,58,37)" rx="2" ry="2" />
<text  x="441.65" y="431.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (1,333,333 samples, 0.04%)</title><rect x="1131.4" y="341" width="0.5" height="15.0" fill="rgb(214,72,34)" rx="2" ry="2" />
<text  x="1134.41" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,666,666 samples, 0.08%)</title><rect x="10.0" y="453" width="1.0" height="15.0" fill="rgb(225,61,8)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>down_read (1,333,333 samples, 0.04%)</title><rect x="841.9" y="245" width="0.5" height="15.0" fill="rgb(241,57,10)" rx="2" ry="2" />
<text  x="844.91" y="255.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.04%)</title><rect x="763.3" y="485" width="0.5" height="15.0" fill="rgb(248,0,14)" rx="2" ry="2" />
<text  x="766.31" y="495.5" ></text>
</g>
<g >
<title>__GI___snprintf (39,999,990 samples, 1.24%)</title><rect x="444.0" y="549" width="14.7" height="15.0" fill="rgb(226,192,32)" rx="2" ry="2" />
<text  x="447.02" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (1,333,333 samples, 0.04%)</title><rect x="155.0" y="357" width="0.5" height="15.0" fill="rgb(228,96,6)" rx="2" ry="2" />
<text  x="158.00" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,333,333 samples, 0.04%)</title><rect x="264.8" y="357" width="0.5" height="15.0" fill="rgb(212,58,23)" rx="2" ry="2" />
<text  x="267.84" y="367.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::CompactionState::current_output (1,333,333 samples, 0.04%)</title><rect x="329.8" y="517" width="0.5" height="15.0" fill="rgb(218,199,17)" rx="2" ry="2" />
<text  x="332.78" y="527.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::Open (2,666,666 samples, 0.08%)</title><rect x="1128.0" y="677" width="1.0" height="15.0" fill="rgb(225,25,5)" rx="2" ry="2" />
<text  x="1131.00" y="687.5" ></text>
</g>
<g >
<title>__sb_end_write (1,333,333 samples, 0.04%)</title><rect x="809.7" y="373" width="0.5" height="15.0" fill="rgb(216,107,1)" rx="2" ry="2" />
<text  x="812.69" y="383.5" ></text>
</g>
<g >
<title>truncate_cleanup_page (5,333,332 samples, 0.17%)</title><rect x="1126.0" y="485" width="2.0" height="15.0" fill="rgb(226,199,28)" rx="2" ry="2" />
<text  x="1129.04" y="495.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="1130.9" y="453" width="0.5" height="15.0" fill="rgb(217,86,30)" rx="2" ry="2" />
<text  x="1133.93" y="463.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::key (1,333,333 samples, 0.04%)</title><rect x="175.5" y="485" width="0.5" height="15.0" fill="rgb(228,118,40)" rx="2" ry="2" />
<text  x="178.50" y="495.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="334.2" y="421" width="0.5" height="15.0" fill="rgb(211,168,41)" rx="2" ry="2" />
<text  x="337.17" y="431.5" ></text>
</g>
<g >
<title>rebalance_domains (1,333,333 samples, 0.04%)</title><rect x="473.3" y="453" width="0.5" height="15.0" fill="rgb(237,150,23)" rx="2" ry="2" />
<text  x="476.31" y="463.5" ></text>
</g>
<g >
<title>leveldb::Status::operator= (11,999,997 samples, 0.37%)</title><rect x="915.6" y="501" width="4.4" height="15.0" fill="rgb(238,128,38)" rx="2" ry="2" />
<text  x="918.63" y="511.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="356.6" y="453" width="0.5" height="15.0" fill="rgb(234,122,15)" rx="2" ry="2" />
<text  x="359.63" y="463.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::CurrentSizeEstimate (3,999,999 samples, 0.12%)</title><rect x="373.2" y="501" width="1.5" height="15.0" fill="rgb(216,146,16)" rx="2" ry="2" />
<text  x="376.23" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,666,666 samples, 0.08%)</title><rect x="236.0" y="453" width="1.0" height="15.0" fill="rgb(211,217,27)" rx="2" ry="2" />
<text  x="239.04" y="463.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt; &gt; (1,333,333 samples, 0.04%)</title><rect x="91.5" y="389" width="0.5" height="15.0" fill="rgb(254,204,36)" rx="2" ry="2" />
<text  x="94.53" y="399.5" ></text>
</g>
<g >
<title>std::mutex::lock (3,999,999 samples, 0.12%)</title><rect x="955.7" y="517" width="1.4" height="15.0" fill="rgb(213,60,19)" rx="2" ry="2" />
<text  x="958.66" y="527.5" ></text>
</g>
<g >
<title>mark_buffer_dirty (1,333,333 samples, 0.04%)</title><rect x="900.5" y="245" width="0.5" height="15.0" fill="rgb(253,119,49)" rx="2" ry="2" />
<text  x="903.49" y="255.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::WriteLevel0Table (250,666,604 samples, 7.78%)</title><rect x="237.0" y="501" width="91.8" height="15.0" fill="rgb(206,181,10)" rx="2" ry="2" />
<text  x="240.02" y="511.5" >leveldb::D..</text>
</g>
<g >
<title>___slab_alloc (1,333,333 samples, 0.04%)</title><rect x="1169.5" y="485" width="0.5" height="15.0" fill="rgb(206,83,35)" rx="2" ry="2" />
<text  x="1172.50" y="495.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (6,666,665 samples, 0.21%)</title><rect x="48.1" y="437" width="2.4" height="15.0" fill="rgb(237,16,3)" rx="2" ry="2" />
<text  x="51.08" y="447.5" ></text>
</g>
<g >
<title>ext4_evict_inode (2,666,666 samples, 0.08%)</title><rect x="10.0" y="373" width="1.0" height="15.0" fill="rgb(248,112,50)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,333,333 samples, 0.04%)</title><rect x="336.6" y="405" width="0.5" height="15.0" fill="rgb(245,144,45)" rx="2" ry="2" />
<text  x="339.61" y="415.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteBlock (31,999,992 samples, 0.99%)</title><rect x="290.7" y="437" width="11.7" height="15.0" fill="rgb(250,147,31)" rx="2" ry="2" />
<text  x="293.72" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::push_back (3,999,999 samples, 0.12%)</title><rect x="433.3" y="501" width="1.4" height="15.0" fill="rgb(227,199,54)" rx="2" ry="2" />
<text  x="436.28" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.04%)</title><rect x="330.3" y="421" width="0.5" height="15.0" fill="rgb(242,185,23)" rx="2" ry="2" />
<text  x="333.26" y="431.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl&lt;std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.08%)</title><rect x="1012.3" y="261" width="1.0" height="15.0" fill="rgb(234,149,2)" rx="2" ry="2" />
<text  x="1015.29" y="271.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="103.7" y="421" width="0.5" height="15.0" fill="rgb(248,166,26)" rx="2" ry="2" />
<text  x="106.74" y="431.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="743.8" y="325" width="0.5" height="15.0" fill="rgb(246,16,43)" rx="2" ry="2" />
<text  x="746.78" y="335.5" ></text>
</g>
<g >
<title>leveldb::EncodeVarint32 (1,333,333 samples, 0.04%)</title><rect x="26.6" y="437" width="0.5" height="15.0" fill="rgb(216,51,18)" rx="2" ry="2" />
<text  x="29.60" y="447.5" ></text>
</g>
<g >
<title>_IO_old_init (1,333,333 samples, 0.04%)</title><rect x="445.5" y="501" width="0.5" height="15.0" fill="rgb(248,159,16)" rx="2" ry="2" />
<text  x="448.48" y="511.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (1,333,333 samples, 0.04%)</title><rect x="1128.5" y="581" width="0.5" height="15.0" fill="rgb(246,38,47)" rx="2" ry="2" />
<text  x="1131.49" y="591.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;char*, unsigned long, char&gt; (23,999,994 samples, 0.74%)</title><rect x="135.5" y="421" width="8.8" height="15.0" fill="rgb(210,16,9)" rx="2" ry="2" />
<text  x="138.47" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (3,999,999 samples, 0.12%)</title><rect x="337.6" y="405" width="1.5" height="15.0" fill="rgb(251,16,36)" rx="2" ry="2" />
<text  x="340.59" y="415.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (3,999,999 samples, 0.12%)</title><rect x="1148.5" y="741" width="1.5" height="15.0" fill="rgb(205,113,25)" rx="2" ry="2" />
<text  x="1151.50" y="751.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::IsManifest (1,333,333 samples, 0.04%)</title><rect x="379.1" y="485" width="0.5" height="15.0" fill="rgb(207,53,5)" rx="2" ry="2" />
<text  x="382.09" y="495.5" ></text>
</g>
<g >
<title>__page_cache_release (1,333,333 samples, 0.04%)</title><rect x="94.0" y="261" width="0.5" height="15.0" fill="rgb(254,133,31)" rx="2" ry="2" />
<text  x="96.97" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (11,999,997 samples, 0.37%)</title><rect x="335.6" y="469" width="4.4" height="15.0" fill="rgb(228,154,24)" rx="2" ry="2" />
<text  x="338.64" y="479.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::key (1,333,333 samples, 0.04%)</title><rect x="224.8" y="437" width="0.5" height="15.0" fill="rgb(205,61,28)" rx="2" ry="2" />
<text  x="227.81" y="447.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.04%)</title><rect x="262.4" y="453" width="0.5" height="15.0" fill="rgb(216,32,22)" rx="2" ry="2" />
<text  x="265.40" y="463.5" ></text>
</g>
<g >
<title>__memchr_avx2 (1,333,333 samples, 0.04%)</title><rect x="379.1" y="437" width="0.5" height="15.0" fill="rgb(224,142,47)" rx="2" ry="2" />
<text  x="382.09" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::size (1,333,333 samples, 0.04%)</title><rect x="259.0" y="437" width="0.5" height="15.0" fill="rgb(245,41,26)" rx="2" ry="2" />
<text  x="261.99" y="447.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock (2,666,666 samples, 0.08%)</title><rect x="489.4" y="469" width="1.0" height="15.0" fill="rgb(227,206,11)" rx="2" ry="2" />
<text  x="492.42" y="479.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Next (1,333,333 samples, 0.04%)</title><rect x="211.1" y="453" width="0.5" height="15.0" fill="rgb(227,57,22)" rx="2" ry="2" />
<text  x="214.14" y="463.5" ></text>
</g>
<g >
<title>alloc_pages_current (2,666,666 samples, 0.08%)</title><rect x="846.3" y="229" width="1.0" height="15.0" fill="rgb(237,181,2)" rx="2" ry="2" />
<text  x="849.30" y="239.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (1,333,333 samples, 0.04%)</title><rect x="330.3" y="405" width="0.5" height="15.0" fill="rgb(234,55,33)" rx="2" ry="2" />
<text  x="333.26" y="415.5" ></text>
</g>
<g >
<title>std::__exception_ptr::exception_ptr::~exception_ptr (1,333,333 samples, 0.04%)</title><rect x="1032.8" y="517" width="0.5" height="15.0" fill="rgb(238,83,5)" rx="2" ry="2" />
<text  x="1035.80" y="527.5" ></text>
</g>
<g >
<title>__gthread_once (1,333,333 samples, 0.04%)</title><rect x="1122.6" y="741" width="0.5" height="15.0" fill="rgb(242,67,47)" rx="2" ry="2" />
<text  x="1125.63" y="751.5" ></text>
</g>
<g >
<title>ext4_releasepage (1,333,333 samples, 0.04%)</title><rect x="1127.0" y="405" width="0.5" height="15.0" fill="rgb(241,226,10)" rx="2" ry="2" />
<text  x="1130.02" y="415.5" ></text>
</g>
<g >
<title>swake_up (1,333,333 samples, 0.04%)</title><rect x="456.2" y="357" width="0.5" height="15.0" fill="rgb(208,91,52)" rx="2" ry="2" />
<text  x="459.22" y="367.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (1,333,333 samples, 0.04%)</title><rect x="504.6" y="293" width="0.4" height="15.0" fill="rgb(215,30,52)" rx="2" ry="2" />
<text  x="507.56" y="303.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.04%)</title><rect x="330.8" y="277" width="0.4" height="15.0" fill="rgb(229,173,11)" rx="2" ry="2" />
<text  x="333.75" y="287.5" ></text>
</g>
<g >
<title>numa_node_size64 (1,333,333 samples, 0.04%)</title><rect x="1123.1" y="677" width="0.5" height="15.0" fill="rgb(223,216,52)" rx="2" ry="2" />
<text  x="1126.12" y="687.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (38,666,657 samples, 1.20%)</title><rect x="146.7" y="485" width="14.2" height="15.0" fill="rgb(221,104,38)" rx="2" ry="2" />
<text  x="149.70" y="495.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Valid (3,999,999 samples, 0.12%)</title><rect x="202.4" y="485" width="1.4" height="15.0" fill="rgb(207,173,11)" rx="2" ry="2" />
<text  x="205.35" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::resize (5,333,332 samples, 0.17%)</title><rect x="331.2" y="469" width="2.0" height="15.0" fill="rgb(231,218,3)" rx="2" ry="2" />
<text  x="334.24" y="479.5" ></text>
</g>
<g >
<title>do_syscall_64 (3,999,999 samples, 0.12%)</title><rect x="1129.5" y="549" width="1.4" height="15.0" fill="rgb(221,61,54)" rx="2" ry="2" />
<text  x="1132.46" y="559.5" ></text>
</g>
<g >
<title>std::__fill_a&lt;char&gt; (6,666,665 samples, 0.21%)</title><rect x="304.4" y="325" width="2.4" height="15.0" fill="rgb(248,181,28)" rx="2" ry="2" />
<text  x="307.39" y="335.5" ></text>
</g>
<g >
<title>__GI__IO_getline (1,333,333 samples, 0.04%)</title><rect x="1129.0" y="629" width="0.5" height="15.0" fill="rgb(238,28,42)" rx="2" ry="2" />
<text  x="1131.97" y="639.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (1,333,333 samples, 0.04%)</title><rect x="910.7" y="357" width="0.5" height="15.0" fill="rgb(211,229,15)" rx="2" ry="2" />
<text  x="913.74" y="367.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.04%)</title><rect x="359.6" y="453" width="0.4" height="15.0" fill="rgb(233,229,43)" rx="2" ry="2" />
<text  x="362.56" y="463.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="456.2" y="437" width="0.5" height="15.0" fill="rgb(230,76,35)" rx="2" ry="2" />
<text  x="459.22" y="447.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::Valid (2,666,666 samples, 0.08%)</title><rect x="13.4" y="485" width="1.0" height="15.0" fill="rgb(231,0,33)" rx="2" ry="2" />
<text  x="16.42" y="495.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.04%)</title><rect x="69.1" y="357" width="0.5" height="15.0" fill="rgb(251,101,42)" rx="2" ry="2" />
<text  x="72.07" y="367.5" ></text>
</g>
<g >
<title>common_file_perm (1,333,333 samples, 0.04%)</title><rect x="912.2" y="309" width="0.5" height="15.0" fill="rgb(223,26,3)" rx="2" ry="2" />
<text  x="915.21" y="319.5" ></text>
</g>
<g >
<title>__do_sys_madvise (1,333,333 samples, 0.04%)</title><rect x="144.3" y="229" width="0.4" height="15.0" fill="rgb(216,226,9)" rx="2" ry="2" />
<text  x="147.26" y="239.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; (1,333,333 samples, 0.04%)</title><rect x="155.5" y="373" width="0.5" height="15.0" fill="rgb(252,148,53)" rx="2" ry="2" />
<text  x="158.49" y="383.5" ></text>
</g>
<g >
<title>ext4_mark_iloc_dirty (57,333,319 samples, 1.78%)</title><rect x="865.8" y="213" width="21.0" height="15.0" fill="rgb(254,100,23)" rx="2" ry="2" />
<text  x="868.83" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (6,666,665 samples, 0.21%)</title><rect x="158.4" y="453" width="2.5" height="15.0" fill="rgb(231,207,10)" rx="2" ry="2" />
<text  x="161.42" y="463.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (47,999,988 samples, 1.49%)</title><rect x="1055.3" y="469" width="17.5" height="15.0" fill="rgb(246,25,7)" rx="2" ry="2" />
<text  x="1058.25" y="479.5" ></text>
</g>
<g >
<title>leveldb::VersionSet::SetLastSequence (1,333,333 samples, 0.04%)</title><rect x="493.8" y="533" width="0.5" height="15.0" fill="rgb(218,227,43)" rx="2" ry="2" />
<text  x="496.81" y="543.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="296.6" y="357" width="0.5" height="15.0" fill="rgb(224,101,6)" rx="2" ry="2" />
<text  x="299.58" y="367.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3,999,999 samples, 0.12%)</title><rect x="215.0" y="325" width="1.5" height="15.0" fill="rgb(218,142,24)" rx="2" ry="2" />
<text  x="218.05" y="335.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;&amp;&gt; (1,333,333 samples, 0.04%)</title><rect x="348.8" y="389" width="0.5" height="15.0" fill="rgb(244,54,22)" rx="2" ry="2" />
<text  x="351.82" y="399.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (2,666,666 samples, 0.08%)</title><rect x="282.9" y="165" width="1.0" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="285.91" y="175.5" ></text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.04%)</title><rect x="146.2" y="453" width="0.5" height="15.0" fill="rgb(228,40,40)" rx="2" ry="2" />
<text  x="149.21" y="463.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::_M_head (1,333,333 samples, 0.04%)</title><rect x="1037.7" y="421" width="0.5" height="15.0" fill="rgb(222,55,6)" rx="2" ry="2" />
<text  x="1040.68" y="431.5" ></text>
</g>
<g >
<title>leveldb::Random::Uniform (9,333,331 samples, 0.29%)</title><rect x="461.6" y="517" width="3.4" height="15.0" fill="rgb(224,139,52)" rx="2" ry="2" />
<text  x="464.59" y="527.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Value (18,666,662 samples, 0.58%)</title><rect x="291.7" y="405" width="6.8" height="15.0" fill="rgb(221,162,2)" rx="2" ry="2" />
<text  x="294.70" y="415.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.04%)</title><rect x="1012.8" y="229" width="0.5" height="15.0" fill="rgb(215,169,26)" rx="2" ry="2" />
<text  x="1015.78" y="239.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::FlushBuffer (345,333,247 samples, 10.72%)</title><rect x="787.7" y="485" width="126.5" height="15.0" fill="rgb(216,3,20)" rx="2" ry="2" />
<text  x="790.72" y="495.5" >leveldb::(anony..</text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.04%)</title><rect x="466.0" y="501" width="0.5" height="15.0" fill="rgb(232,107,22)" rx="2" ry="2" />
<text  x="468.99" y="511.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2,666,666 samples, 0.08%)</title><rect x="855.6" y="229" width="1.0" height="15.0" fill="rgb(226,228,17)" rx="2" ry="2" />
<text  x="858.58" y="239.5" ></text>
</g>
<g >
<title>libpmem_init (1,333,333 samples, 0.04%)</title><rect x="1124.1" y="693" width="0.5" height="15.0" fill="rgb(243,191,17)" rx="2" ry="2" />
<text  x="1127.09" y="703.5" ></text>
</g>
<g >
<title>snappy::RawCompress (33,333,325 samples, 1.03%)</title><rect x="115.9" y="421" width="12.2" height="15.0" fill="rgb(231,2,45)" rx="2" ry="2" />
<text  x="118.94" y="431.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;::_Tuple_impl&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,333,333 samples, 0.04%)</title><rect x="92.0" y="373" width="0.5" height="15.0" fill="rgb(249,185,4)" rx="2" ry="2" />
<text  x="95.02" y="383.5" ></text>
</g>
<g >
<title>get_page_from_freelist (2,666,666 samples, 0.08%)</title><rect x="282.9" y="149" width="1.0" height="15.0" fill="rgb(233,108,37)" rx="2" ry="2" />
<text  x="285.91" y="159.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="1130.9" y="437" width="0.5" height="15.0" fill="rgb(211,130,39)" rx="2" ry="2" />
<text  x="1133.93" y="447.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::PrintEnvironment (5,333,332 samples, 0.17%)</title><rect x="1129.0" y="661" width="1.9" height="15.0" fill="rgb(236,105,12)" rx="2" ry="2" />
<text  x="1131.97" y="671.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="296.6" y="341" width="0.5" height="15.0" fill="rgb(222,67,45)" rx="2" ry="2" />
<text  x="299.58" y="351.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (31,999,992 samples, 0.99%)</title><rect x="190.6" y="485" width="11.8" height="15.0" fill="rgb(246,174,20)" rx="2" ry="2" />
<text  x="193.64" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (2,666,666 samples, 0.08%)</title><rect x="307.3" y="421" width="1.0" height="15.0" fill="rgb(237,42,15)" rx="2" ry="2" />
<text  x="310.32" y="431.5" ></text>
</g>
<g >
<title>leveldb::Slice::operator[] (29,333,326 samples, 0.91%)</title><rect x="29.5" y="453" width="10.8" height="15.0" fill="rgb(254,127,45)" rx="2" ry="2" />
<text  x="32.53" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (1,333,333 samples, 0.04%)</title><rect x="81.3" y="357" width="0.5" height="15.0" fill="rgb(237,67,21)" rx="2" ry="2" />
<text  x="84.28" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt;::_Hash_node (1,333,333 samples, 0.04%)</title><rect x="1173.4" y="741" width="0.5" height="15.0" fill="rgb(249,6,49)" rx="2" ry="2" />
<text  x="1176.40" y="751.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (7,999,998 samples, 0.25%)</title><rect x="213.6" y="421" width="2.9" height="15.0" fill="rgb(252,154,6)" rx="2" ry="2" />
<text  x="216.58" y="431.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (2,666,666 samples, 0.08%)</title><rect x="289.3" y="357" width="0.9" height="15.0" fill="rgb(219,112,50)" rx="2" ry="2" />
<text  x="292.26" y="367.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::key (1,333,333 samples, 0.04%)</title><rect x="227.7" y="501" width="0.5" height="15.0" fill="rgb(245,204,32)" rx="2" ry="2" />
<text  x="230.74" y="511.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::~promise (67,999,983 samples, 2.11%)</title><rect x="1077.7" y="549" width="24.9" height="15.0" fill="rgb(225,70,14)" rx="2" ry="2" />
<text  x="1080.71" y="559.5" >s..</text>
</g>
<g >
<title>std::mutex::unlock (3,999,999 samples, 0.12%)</title><rect x="488.9" y="501" width="1.5" height="15.0" fill="rgb(249,40,20)" rx="2" ry="2" />
<text  x="491.93" y="511.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (1,333,333 samples, 0.04%)</title><rect x="504.6" y="309" width="0.4" height="15.0" fill="rgb(249,53,32)" rx="2" ry="2" />
<text  x="507.56" y="319.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (1,333,333 samples, 0.04%)</title><rect x="330.8" y="261" width="0.4" height="15.0" fill="rgb(235,158,53)" rx="2" ry="2" />
<text  x="333.75" y="271.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.04%)</title><rect x="438.6" y="469" width="0.5" height="15.0" fill="rgb(234,86,21)" rx="2" ry="2" />
<text  x="441.65" y="479.5" ></text>
</g>
<g >
<title>operator new (1,333,333 samples, 0.04%)</title><rect x="434.3" y="453" width="0.4" height="15.0" fill="rgb(222,128,14)" rx="2" ry="2" />
<text  x="437.25" y="463.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::RemoveObsoleteFiles (3,999,999 samples, 0.12%)</title><rect x="10.0" y="517" width="1.5" height="15.0" fill="rgb(229,163,54)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>cpuinfo_open (3,999,999 samples, 0.12%)</title><rect x="1129.5" y="421" width="1.4" height="15.0" fill="rgb(236,1,9)" rx="2" ry="2" />
<text  x="1132.46" y="431.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.04%)</title><rect x="81.3" y="261" width="0.5" height="15.0" fill="rgb(211,99,32)" rx="2" ry="2" />
<text  x="84.28" y="271.5" ></text>
</g>
<g >
<title>ext4_evict_inode (2,666,666 samples, 0.08%)</title><rect x="236.0" y="357" width="1.0" height="15.0" fill="rgb(207,64,29)" rx="2" ry="2" />
<text  x="239.04" y="367.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (18,666,662 samples, 0.58%)</title><rect x="291.7" y="389" width="6.8" height="15.0" fill="rgb(234,4,47)" rx="2" ry="2" />
<text  x="294.70" y="399.5" ></text>
</g>
<g >
<title>vfs_getattr_nosec (1,333,333 samples, 0.04%)</title><rect x="1124.1" y="453" width="0.5" height="15.0" fill="rgb(225,83,54)" rx="2" ry="2" />
<text  x="1127.09" y="463.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (3,999,999 samples, 0.12%)</title><rect x="16.8" y="453" width="1.5" height="15.0" fill="rgb(229,97,44)" rx="2" ry="2" />
<text  x="19.83" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1,333,333 samples, 0.04%)</title><rect x="58.8" y="437" width="0.5" height="15.0" fill="rgb(219,56,28)" rx="2" ry="2" />
<text  x="61.82" y="447.5" ></text>
</g>
<g >
<title>[libunwind.so.8.0.1] (1,333,333 samples, 0.04%)</title><rect x="1131.4" y="245" width="0.5" height="15.0" fill="rgb(224,213,40)" rx="2" ry="2" />
<text  x="1134.41" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (11,999,997 samples, 0.37%)</title><rect x="335.6" y="453" width="4.4" height="15.0" fill="rgb(228,141,54)" rx="2" ry="2" />
<text  x="338.64" y="463.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (1,333,333 samples, 0.04%)</title><rect x="399.1" y="341" width="0.5" height="15.0" fill="rgb(218,209,52)" rx="2" ry="2" />
<text  x="402.10" y="351.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (3,999,999 samples, 0.12%)</title><rect x="391.3" y="421" width="1.5" height="15.0" fill="rgb(239,192,9)" rx="2" ry="2" />
<text  x="394.29" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::release (7,999,998 samples, 0.25%)</title><rect x="1005.0" y="293" width="2.9" height="15.0" fill="rgb(211,56,25)" rx="2" ry="2" />
<text  x="1007.97" y="303.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.04%)</title><rect x="460.1" y="549" width="0.5" height="15.0" fill="rgb(237,109,41)" rx="2" ry="2" />
<text  x="463.13" y="559.5" ></text>
</g>
<g >
<title>prefetch_freepointer (1,333,333 samples, 0.04%)</title><rect x="833.1" y="229" width="0.5" height="15.0" fill="rgb(251,210,48)" rx="2" ry="2" />
<text  x="836.12" y="239.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (1,333,333 samples, 0.04%)</title><rect x="91.0" y="389" width="0.5" height="15.0" fill="rgb(208,154,45)" rx="2" ry="2" />
<text  x="94.04" y="399.5" ></text>
</g>
<g >
<title>apparmor_cred_free (1,333,333 samples, 0.04%)</title><rect x="212.1" y="341" width="0.5" height="15.0" fill="rgb(206,87,37)" rx="2" ry="2" />
<text  x="215.12" y="351.5" ></text>
</g>
<g >
<title>ext4_evict_inode (1,333,333 samples, 0.04%)</title><rect x="438.6" y="389" width="0.5" height="15.0" fill="rgb(231,27,28)" rx="2" ry="2" />
<text  x="441.65" y="399.5" ></text>
</g>
<g >
<title>leveldb::Table::BlockReader (7,999,998 samples, 0.25%)</title><rect x="213.6" y="405" width="2.9" height="15.0" fill="rgb(219,99,43)" rx="2" ry="2" />
<text  x="216.58" y="415.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (2,666,666 samples, 0.08%)</title><rect x="101.8" y="373" width="1.0" height="15.0" fill="rgb(244,50,7)" rx="2" ry="2" />
<text  x="104.78" y="383.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Update (3,999,999 samples, 0.12%)</title><rect x="225.8" y="485" width="1.5" height="15.0" fill="rgb(240,168,9)" rx="2" ry="2" />
<text  x="228.79" y="495.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="885.4" y="101" width="0.4" height="15.0" fill="rgb(239,174,49)" rx="2" ry="2" />
<text  x="888.36" y="111.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Next (2,666,666 samples, 0.08%)</title><rect x="12.4" y="469" width="1.0" height="15.0" fill="rgb(226,33,6)" rx="2" ry="2" />
<text  x="15.44" y="479.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,666,666 samples, 0.08%)</title><rect x="10.0" y="469" width="1.0" height="15.0" fill="rgb(216,127,34)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (1,333,333 samples, 0.04%)</title><rect x="1021.6" y="357" width="0.5" height="15.0" fill="rgb(244,212,33)" rx="2" ry="2" />
<text  x="1024.57" y="367.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.04%)</title><rect x="438.6" y="485" width="0.5" height="15.0" fill="rgb(211,147,17)" rx="2" ry="2" />
<text  x="441.65" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (14,666,663 samples, 0.46%)</title><rect x="268.8" y="341" width="5.3" height="15.0" fill="rgb(213,52,15)" rx="2" ry="2" />
<text  x="271.75" y="351.5" ></text>
</g>
<g >
<title>timespec64_trunc (1,333,333 samples, 0.04%)</title><rect x="826.8" y="293" width="0.5" height="15.0" fill="rgb(224,7,38)" rx="2" ry="2" />
<text  x="829.77" y="303.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2,666,666 samples, 0.08%)</title><rect x="23.2" y="405" width="1.0" height="15.0" fill="rgb(225,23,15)" rx="2" ry="2" />
<text  x="26.18" y="415.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (1,333,333 samples, 0.04%)</title><rect x="1180.2" y="741" width="0.5" height="15.0" fill="rgb(208,64,9)" rx="2" ry="2" />
<text  x="1183.24" y="751.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (27,999,993 samples, 0.87%)</title><rect x="734.0" y="437" width="10.3" height="15.0" fill="rgb(206,75,51)" rx="2" ry="2" />
<text  x="737.01" y="447.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::NoBarrier_SetNext (7,999,998 samples, 0.25%)</title><rect x="747.2" y="453" width="2.9" height="15.0" fill="rgb(206,208,25)" rx="2" ry="2" />
<text  x="750.19" y="463.5" ></text>
</g>
<g >
<title>operator new[] (2,666,666 samples, 0.08%)</title><rect x="380.6" y="437" width="0.9" height="15.0" fill="rgb(240,151,25)" rx="2" ry="2" />
<text  x="383.55" y="447.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (6,666,665 samples, 0.21%)</title><rect x="181.4" y="517" width="2.4" height="15.0" fill="rgb(223,98,36)" rx="2" ry="2" />
<text  x="184.36" y="527.5" ></text>
</g>
<g >
<title>do_page_fault (2,666,666 samples, 0.08%)</title><rect x="332.2" y="309" width="1.0" height="15.0" fill="rgb(209,135,38)" rx="2" ry="2" />
<text  x="335.22" y="319.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (267,999,933 samples, 8.32%)</title><rect x="635.4" y="405" width="98.1" height="15.0" fill="rgb(216,86,31)" rx="2" ry="2" />
<text  x="638.40" y="415.5" >leveldb::In..</text>
</g>
<g >
<title>find_busiest_group (1,333,333 samples, 0.04%)</title><rect x="695.0" y="229" width="0.4" height="15.0" fill="rgb(213,92,36)" rx="2" ry="2" />
<text  x="697.96" y="239.5" ></text>
</g>
<g >
<title>__ext4_get_inode_loc (2,666,666 samples, 0.08%)</title><rect x="863.4" y="213" width="1.0" height="15.0" fill="rgb(206,22,1)" rx="2" ry="2" />
<text  x="866.39" y="223.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="296.6" y="325" width="0.5" height="15.0" fill="rgb(214,139,25)" rx="2" ry="2" />
<text  x="299.58" y="335.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (3,999,999 samples, 0.12%)</title><rect x="247.8" y="421" width="1.4" height="15.0" fill="rgb(214,206,49)" rx="2" ry="2" />
<text  x="250.76" y="431.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;char*, unsigned long&gt; (5,333,332 samples, 0.17%)</title><rect x="331.2" y="421" width="2.0" height="15.0" fill="rgb(208,84,20)" rx="2" ry="2" />
<text  x="334.24" y="431.5" ></text>
</g>
<g >
<title>__vfs_write (265,333,267 samples, 8.23%)</title><rect x="813.6" y="357" width="97.1" height="15.0" fill="rgb(208,21,0)" rx="2" ry="2" />
<text  x="816.59" y="367.5" >__vfs_write</text>
</g>
<g >
<title>std::forward&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*&amp;&gt; (2,666,666 samples, 0.08%)</title><rect x="1004.0" y="245" width="1.0" height="15.0" fill="rgb(227,139,8)" rx="2" ry="2" />
<text  x="1006.99" y="255.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="381.0" y="405" width="0.5" height="15.0" fill="rgb(211,65,54)" rx="2" ry="2" />
<text  x="384.04" y="415.5" ></text>
</g>
<g >
<title>mutex_unlock (3,999,999 samples, 0.12%)</title><rect x="810.2" y="373" width="1.4" height="15.0" fill="rgb(213,47,51)" rx="2" ry="2" />
<text  x="813.17" y="383.5" ></text>
</g>
<g >
<title>load_balance (1,333,333 samples, 0.04%)</title><rect x="743.8" y="277" width="0.5" height="15.0" fill="rgb(224,157,32)" rx="2" ry="2" />
<text  x="746.78" y="287.5" ></text>
</g>
<g >
<title>path_openat (3,999,999 samples, 0.12%)</title><rect x="1129.5" y="485" width="1.4" height="15.0" fill="rgb(230,187,11)" rx="2" ry="2" />
<text  x="1132.46" y="495.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.04%)</title><rect x="1131.9" y="533" width="0.5" height="15.0" fill="rgb(211,175,44)" rx="2" ry="2" />
<text  x="1134.90" y="543.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (2,666,666 samples, 0.08%)</title><rect x="1049.4" y="485" width="1.0" height="15.0" fill="rgb(211,16,6)" rx="2" ry="2" />
<text  x="1052.40" y="495.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="248.7" y="341" width="0.5" height="15.0" fill="rgb(224,67,20)" rx="2" ry="2" />
<text  x="251.73" y="351.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (143,999,964 samples, 4.47%)</title><rect x="970.3" y="501" width="52.7" height="15.0" fill="rgb(252,108,49)" rx="2" ry="2" />
<text  x="973.31" y="511.5" >std::..</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::swap (9,333,331 samples, 0.29%)</title><rect x="1018.2" y="341" width="3.4" height="15.0" fill="rgb(253,1,3)" rx="2" ry="2" />
<text  x="1021.15" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (3,999,999 samples, 0.12%)</title><rect x="163.3" y="437" width="1.5" height="15.0" fill="rgb(227,50,1)" rx="2" ry="2" />
<text  x="166.30" y="447.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::key (1,333,333 samples, 0.04%)</title><rect x="203.8" y="485" width="0.5" height="15.0" fill="rgb(226,201,40)" rx="2" ry="2" />
<text  x="206.82" y="495.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (2,666,666 samples, 0.08%)</title><rect x="1179.3" y="725" width="0.9" height="15.0" fill="rgb(221,39,22)" rx="2" ry="2" />
<text  x="1182.26" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (10,666,664 samples, 0.33%)</title><rect x="286.8" y="405" width="3.9" height="15.0" fill="rgb(223,132,31)" rx="2" ry="2" />
<text  x="289.81" y="415.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, false&gt;::_Head_base (1,333,333 samples, 0.04%)</title><rect x="1171.9" y="725" width="0.5" height="15.0" fill="rgb(218,81,22)" rx="2" ry="2" />
<text  x="1174.94" y="735.5" ></text>
</g>
<g >
<title>page_mapping (1,333,333 samples, 0.04%)</title><rect x="1128.5" y="325" width="0.5" height="15.0" fill="rgb(212,53,37)" rx="2" ry="2" />
<text  x="1131.49" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (2,666,666 samples, 0.08%)</title><rect x="168.2" y="437" width="1.0" height="15.0" fill="rgb(223,123,39)" rx="2" ry="2" />
<text  x="171.18" y="447.5" ></text>
</g>
<g >
<title>do_sys_open (3,999,999 samples, 0.12%)</title><rect x="1129.5" y="517" width="1.4" height="15.0" fill="rgb(213,107,10)" rx="2" ry="2" />
<text  x="1132.46" y="527.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.04%)</title><rect x="855.1" y="213" width="0.5" height="15.0" fill="rgb(210,171,54)" rx="2" ry="2" />
<text  x="858.09" y="223.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2,666,666 samples, 0.08%)</title><rect x="289.3" y="341" width="0.9" height="15.0" fill="rgb(215,49,36)" rx="2" ry="2" />
<text  x="292.26" y="351.5" ></text>
</g>
<g >
<title>leveldb::ReadBlock (6,666,665 samples, 0.21%)</title><rect x="214.1" y="389" width="2.4" height="15.0" fill="rgb(210,65,7)" rx="2" ry="2" />
<text  x="217.07" y="399.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (1,333,333 samples, 0.04%)</title><rect x="302.9" y="405" width="0.5" height="15.0" fill="rgb(239,115,31)" rx="2" ry="2" />
<text  x="305.93" y="415.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::__future_base::_Result_base::_Deleter&gt;::_M_head (1,333,333 samples, 0.04%)</title><rect x="1014.2" y="245" width="0.5" height="15.0" fill="rgb(229,126,16)" rx="2" ry="2" />
<text  x="1017.24" y="255.5" ></text>
</g>
<g >
<title>jbd2__journal_start (26,666,660 samples, 0.83%)</title><rect x="830.2" y="261" width="9.8" height="15.0" fill="rgb(232,103,4)" rx="2" ry="2" />
<text  x="833.19" y="271.5" ></text>
</g>
<g >
<title>do_page_fault (15,999,996 samples, 0.50%)</title><rect x="138.4" y="293" width="5.9" height="15.0" fill="rgb(234,85,4)" rx="2" ry="2" />
<text  x="141.40" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (6,666,665 samples, 0.21%)</title><rect x="94.5" y="373" width="2.4" height="15.0" fill="rgb(209,137,37)" rx="2" ry="2" />
<text  x="97.46" y="383.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.04%)</title><rect x="278.0" y="261" width="0.5" height="15.0" fill="rgb(254,173,43)" rx="2" ry="2" />
<text  x="281.03" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (2,666,666 samples, 0.08%)</title><rect x="1188.0" y="741" width="1.0" height="15.0" fill="rgb(205,146,13)" rx="2" ry="2" />
<text  x="1191.05" y="751.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpans (1,333,333 samples, 0.04%)</title><rect x="89.6" y="309" width="0.5" height="15.0" fill="rgb(247,172,51)" rx="2" ry="2" />
<text  x="92.58" y="319.5" ></text>
</g>
<g >
<title>leveldb::Status::Status (1,333,333 samples, 0.04%)</title><rect x="784.3" y="469" width="0.5" height="15.0" fill="rgb(228,222,16)" rx="2" ry="2" />
<text  x="787.30" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (2,666,666 samples, 0.08%)</title><rect x="1075.8" y="501" width="0.9" height="15.0" fill="rgb(228,120,10)" rx="2" ry="2" />
<text  x="1078.76" y="511.5" ></text>
</g>
<g >
<title>mutex_lock (7,999,998 samples, 0.25%)</title><rect x="805.8" y="357" width="2.9" height="15.0" fill="rgb(230,63,17)" rx="2" ry="2" />
<text  x="808.78" y="367.5" ></text>
</g>
<g >
<title>madvise_free_pte_range (1,333,333 samples, 0.04%)</title><rect x="144.3" y="149" width="0.4" height="15.0" fill="rgb(238,215,46)" rx="2" ry="2" />
<text  x="147.26" y="159.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (53,333,320 samples, 1.65%)</title><rect x="1080.2" y="517" width="19.5" height="15.0" fill="rgb(240,120,51)" rx="2" ry="2" />
<text  x="1083.15" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::push_back (1,333,333 samples, 0.04%)</title><rect x="46.1" y="453" width="0.5" height="15.0" fill="rgb(217,14,9)" rx="2" ry="2" />
<text  x="49.13" y="463.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.04%)</title><rect x="26.6" y="357" width="0.5" height="15.0" fill="rgb(249,187,5)" rx="2" ry="2" />
<text  x="29.60" y="367.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::value (1,333,333 samples, 0.04%)</title><rect x="230.2" y="437" width="0.5" height="15.0" fill="rgb(222,167,19)" rx="2" ry="2" />
<text  x="233.18" y="447.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1,333,333 samples, 0.04%)</title><rect x="516.3" y="405" width="0.5" height="15.0" fill="rgb(233,112,47)" rx="2" ry="2" />
<text  x="519.27" y="415.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::DoCompactionWork (711,999,822 samples, 22.09%)</title><rect x="177.9" y="533" width="260.7" height="15.0" fill="rgb(213,180,50)" rx="2" ry="2" />
<text  x="180.94" y="543.5" >leveldb::DBImpl::DoCompactionWork</text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (3,999,999 samples, 0.12%)</title><rect x="239.5" y="453" width="1.4" height="15.0" fill="rgb(206,171,10)" rx="2" ry="2" />
<text  x="242.46" y="463.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.04%)</title><rect x="259.5" y="421" width="0.5" height="15.0" fill="rgb(230,184,33)" rx="2" ry="2" />
<text  x="262.47" y="431.5" ></text>
</g>
<g >
<title>format_decode (1,333,333 samples, 0.04%)</title><rect x="1129.0" y="357" width="0.5" height="15.0" fill="rgb(213,130,54)" rx="2" ry="2" />
<text  x="1131.97" y="367.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (3,999,999 samples, 0.12%)</title><rect x="1101.1" y="485" width="1.5" height="15.0" fill="rgb(214,217,42)" rx="2" ry="2" />
<text  x="1104.15" y="495.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="409.4" y="421" width="0.4" height="15.0" fill="rgb(205,144,0)" rx="2" ry="2" />
<text  x="412.35" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5,333,332 samples, 0.17%)</title><rect x="209.2" y="357" width="1.9" height="15.0" fill="rgb(211,187,9)" rx="2" ry="2" />
<text  x="212.19" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (6,666,665 samples, 0.21%)</title><rect x="347.4" y="437" width="2.4" height="15.0" fill="rgb(206,146,19)" rx="2" ry="2" />
<text  x="350.35" y="447.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::CompactMemTable (255,999,936 samples, 7.94%)</title><rect x="236.0" y="517" width="93.8" height="15.0" fill="rgb(223,167,27)" rx="2" ry="2" />
<text  x="239.04" y="527.5" >leveldb::DB..</text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (2,666,666 samples, 0.08%)</title><rect x="1152.9" y="725" width="1.0" height="15.0" fill="rgb(230,165,12)" rx="2" ry="2" />
<text  x="1155.90" y="735.5" ></text>
</g>
<g >
<title>truncate_inode_pages_final (2,666,666 samples, 0.08%)</title><rect x="236.0" y="341" width="1.0" height="15.0" fill="rgb(252,69,9)" rx="2" ry="2" />
<text  x="239.04" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (15,999,996 samples, 0.50%)</title><rect x="275.1" y="389" width="5.9" height="15.0" fill="rgb(239,48,37)" rx="2" ry="2" />
<text  x="278.10" y="399.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.04%)</title><rect x="194.1" y="405" width="0.4" height="15.0" fill="rgb(228,146,49)" rx="2" ry="2" />
<text  x="197.05" y="415.5" ></text>
</g>
<g >
<title>hash_futex (2,666,666 samples, 0.08%)</title><rect x="988.4" y="373" width="0.9" height="15.0" fill="rgb(247,209,17)" rx="2" ry="2" />
<text  x="991.37" y="383.5" ></text>
</g>
<g >
<title>ext4_invalidatepage (2,666,666 samples, 0.08%)</title><rect x="1127.0" y="453" width="1.0" height="15.0" fill="rgb(235,128,34)" rx="2" ry="2" />
<text  x="1130.02" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux (1,333,333 samples, 0.04%)</title><rect x="128.1" y="421" width="0.5" height="15.0" fill="rgb(209,119,30)" rx="2" ry="2" />
<text  x="131.15" y="431.5" ></text>
</g>
<g >
<title>operator new[] (7,999,998 samples, 0.25%)</title><rect x="501.1" y="421" width="3.0" height="15.0" fill="rgb(246,50,12)" rx="2" ry="2" />
<text  x="504.14" y="431.5" ></text>
</g>
<g >
<title>leveldb::port::Snappy_Uncompress (6,666,665 samples, 0.21%)</title><rect x="214.1" y="373" width="2.4" height="15.0" fill="rgb(223,134,18)" rx="2" ry="2" />
<text  x="217.07" y="383.5" ></text>
</g>
<g >
<title>leveldb::PutVarint32 (2,666,666 samples, 0.08%)</title><rect x="1147.5" y="741" width="1.0" height="15.0" fill="rgb(218,33,16)" rx="2" ry="2" />
<text  x="1150.53" y="751.5" ></text>
</g>
<g >
<title>operator new[] (3,999,999 samples, 0.12%)</title><rect x="282.4" y="341" width="1.5" height="15.0" fill="rgb(244,146,29)" rx="2" ry="2" />
<text  x="285.42" y="351.5" ></text>
</g>
<g >
<title>__libc_open64 (3,999,999 samples, 0.12%)</title><rect x="1129.5" y="581" width="1.4" height="15.0" fill="rgb(205,126,34)" rx="2" ry="2" />
<text  x="1132.46" y="591.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (5,333,332 samples, 0.17%)</title><rect x="375.2" y="501" width="1.9" height="15.0" fill="rgb(250,188,54)" rx="2" ry="2" />
<text  x="378.18" y="511.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,333,333 samples, 0.04%)</title><rect x="323.4" y="421" width="0.5" height="15.0" fill="rgb(227,155,54)" rx="2" ry="2" />
<text  x="326.43" y="431.5" ></text>
</g>
<g >
<title>iov_iter_copy_from_user_atomic (10,666,664 samples, 0.33%)</title><rect x="902.9" y="293" width="3.9" height="15.0" fill="rgb(234,101,30)" rx="2" ry="2" />
<text  x="905.93" y="303.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Rep::Rep (23,999,994 samples, 0.74%)</title><rect x="135.5" y="469" width="8.8" height="15.0" fill="rgb(221,31,43)" rx="2" ry="2" />
<text  x="138.47" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (1,333,333 samples, 0.04%)</title><rect x="1175.4" y="741" width="0.4" height="15.0" fill="rgb(207,34,30)" rx="2" ry="2" />
<text  x="1178.35" y="751.5" ></text>
</g>
<g >
<title>ext4_ext_map_blocks (1,333,333 samples, 0.04%)</title><rect x="843.4" y="245" width="0.5" height="15.0" fill="rgb(229,0,11)" rx="2" ry="2" />
<text  x="846.37" y="255.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (1,333,333 samples, 0.04%)</title><rect x="135.0" y="405" width="0.5" height="15.0" fill="rgb(236,83,9)" rx="2" ry="2" />
<text  x="137.98" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (6,666,665 samples, 0.21%)</title><rect x="165.3" y="437" width="2.4" height="15.0" fill="rgb(248,129,12)" rx="2" ry="2" />
<text  x="168.25" y="447.5" ></text>
</g>
<g >
<title>std::atomic_flag::atomic_flag (1,333,333 samples, 0.04%)</title><rect x="1175.8" y="725" width="0.5" height="15.0" fill="rgb(227,40,30)" rx="2" ry="2" />
<text  x="1178.84" y="735.5" ></text>
</g>
<g >
<title>leveldb::port::Snappy_Compress (30,666,659 samples, 0.95%)</title><rect x="417.7" y="469" width="11.2" height="15.0" fill="rgb(230,73,33)" rx="2" ry="2" />
<text  x="420.65" y="479.5" ></text>
</g>
<g >
<title>page_fault (15,999,996 samples, 0.50%)</title><rect x="138.4" y="309" width="5.9" height="15.0" fill="rgb(207,69,53)" rx="2" ry="2" />
<text  x="141.40" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter, void&gt; (22,666,661 samples, 0.70%)</title><rect x="1009.9" y="325" width="8.3" height="15.0" fill="rgb(216,134,14)" rx="2" ry="2" />
<text  x="1012.85" y="335.5" ></text>
</g>
<g >
<title>ext4_nonda_switch (1,333,333 samples, 0.04%)</title><rect x="843.9" y="277" width="0.4" height="15.0" fill="rgb(205,16,16)" rx="2" ry="2" />
<text  x="846.86" y="287.5" ></text>
</g>
<g >
<title>std::future&lt;leveldb::Status&gt;::get (1,333,333 samples, 0.04%)</title><rect x="1181.7" y="741" width="0.5" height="15.0" fill="rgb(237,33,2)" rx="2" ry="2" />
<text  x="1184.70" y="751.5" ></text>
</g>
<g >
<title>snappy::internal::CompressFragment (9,333,331 samples, 0.29%)</title><rect x="298.5" y="373" width="3.4" height="15.0" fill="rgb(232,170,48)" rx="2" ry="2" />
<text  x="301.53" y="383.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="591.9" y="357" width="0.5" height="15.0" fill="rgb(205,111,28)" rx="2" ry="2" />
<text  x="594.94" y="367.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (15,999,996 samples, 0.50%)</title><rect x="395.7" y="469" width="5.8" height="15.0" fill="rgb(243,98,28)" rx="2" ry="2" />
<text  x="398.68" y="479.5" ></text>
</g>
<g >
<title>snappy::Compress (10,666,664 samples, 0.33%)</title><rect x="298.5" y="389" width="3.9" height="15.0" fill="rgb(232,7,8)" rx="2" ry="2" />
<text  x="301.53" y="399.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1,333,333 samples, 0.04%)</title><rect x="357.1" y="469" width="0.5" height="15.0" fill="rgb(247,216,27)" rx="2" ry="2" />
<text  x="360.12" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (1,333,333 samples, 0.04%)</title><rect x="1186.6" y="725" width="0.5" height="15.0" fill="rgb(220,25,9)" rx="2" ry="2" />
<text  x="1189.58" y="735.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1,333,333 samples, 0.04%)</title><rect x="1094.3" y="309" width="0.5" height="15.0" fill="rgb(213,135,48)" rx="2" ry="2" />
<text  x="1097.31" y="319.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="1094.3" y="325" width="0.5" height="15.0" fill="rgb(208,6,34)" rx="2" ry="2" />
<text  x="1097.31" y="335.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.08%)</title><rect x="1096.8" y="373" width="0.9" height="15.0" fill="rgb(215,136,16)" rx="2" ry="2" />
<text  x="1099.75" y="383.5" ></text>
</g>
<g >
<title>handle_mm_fault (2,666,666 samples, 0.08%)</title><rect x="282.9" y="213" width="1.0" height="15.0" fill="rgb(209,182,17)" rx="2" ry="2" />
<text  x="285.91" y="223.5" ></text>
</g>
<g >
<title>map_id_up (1,333,333 samples, 0.04%)</title><rect x="885.8" y="181" width="0.5" height="15.0" fill="rgb(248,29,50)" rx="2" ry="2" />
<text  x="888.85" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;, std::allocator&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt; &gt; &gt;::resize (2,666,666 samples, 0.08%)</title><rect x="1130.9" y="629" width="1.0" height="15.0" fill="rgb(225,109,17)" rx="2" ry="2" />
<text  x="1133.93" y="639.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (2,666,666 samples, 0.08%)</title><rect x="752.1" y="421" width="1.0" height="15.0" fill="rgb(236,99,32)" rx="2" ry="2" />
<text  x="755.08" y="431.5" ></text>
</g>
<g >
<title>fts_read (1,333,333 samples, 0.04%)</title><rect x="1124.1" y="613" width="0.5" height="15.0" fill="rgb(215,192,11)" rx="2" ry="2" />
<text  x="1127.09" y="623.5" ></text>
</g>
<g >
<title>__tls_get_addr (1,333,333 samples, 0.04%)</title><rect x="975.2" y="437" width="0.5" height="15.0" fill="rgb(239,56,31)" rx="2" ry="2" />
<text  x="978.19" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl (2,666,666 samples, 0.08%)</title><rect x="1065.5" y="373" width="1.0" height="15.0" fill="rgb(248,82,5)" rx="2" ry="2" />
<text  x="1068.51" y="383.5" ></text>
</g>
<g >
<title>block_invalidatepage (1,333,333 samples, 0.04%)</title><rect x="438.6" y="293" width="0.5" height="15.0" fill="rgb(222,59,25)" rx="2" ry="2" />
<text  x="441.65" y="303.5" ></text>
</g>
<g >
<title>__x64_sys_unlink (9,333,331 samples, 0.29%)</title><rect x="1124.6" y="597" width="3.4" height="15.0" fill="rgb(246,6,41)" rx="2" ry="2" />
<text  x="1127.58" y="607.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (2,666,666 samples, 0.08%)</title><rect x="103.2" y="437" width="1.0" height="15.0" fill="rgb(208,56,27)" rx="2" ry="2" />
<text  x="106.25" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_deleter (2,666,666 samples, 0.08%)</title><rect x="1018.6" y="325" width="1.0" height="15.0" fill="rgb(208,55,5)" rx="2" ry="2" />
<text  x="1021.64" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;leveldb::DBImpl::Writer*&gt;::construct&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&gt; (1,333,333 samples, 0.04%)</title><rect x="965.9" y="485" width="0.5" height="15.0" fill="rgb(249,138,53)" rx="2" ry="2" />
<text  x="968.91" y="495.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Flush (143,999,964 samples, 4.47%)</title><rect x="379.1" y="501" width="52.7" height="15.0" fill="rgb(219,129,25)" rx="2" ry="2" />
<text  x="382.09" y="511.5" >level..</text>
</g>
<g >
<title>rebalance_domains (1,333,333 samples, 0.04%)</title><rect x="797.5" y="325" width="0.5" height="15.0" fill="rgb(229,218,17)" rx="2" ry="2" />
<text  x="800.48" y="335.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::SetSequence (3,999,999 samples, 0.12%)</title><rect x="772.1" y="533" width="1.5" height="15.0" fill="rgb(209,204,29)" rx="2" ry="2" />
<text  x="775.09" y="543.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, 0ul&gt; (1,333,333 samples, 0.04%)</title><rect x="1184.1" y="741" width="0.5" height="15.0" fill="rgb(225,97,7)" rx="2" ry="2" />
<text  x="1187.14" y="751.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.04%)</title><rect x="368.3" y="485" width="0.5" height="15.0" fill="rgb(207,115,45)" rx="2" ry="2" />
<text  x="371.35" y="495.5" ></text>
</g>
<g >
<title>generic_write_checks (2,666,666 samples, 0.08%)</title><rect x="908.3" y="325" width="1.0" height="15.0" fill="rgb(209,25,23)" rx="2" ry="2" />
<text  x="911.30" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::construct&lt;leveldb::ParsedInternalKey, leveldb::ParsedInternalKey const&amp;&gt; (3,999,999 samples, 0.12%)</title><rect x="433.3" y="485" width="1.4" height="15.0" fill="rgb(235,63,43)" rx="2" ry="2" />
<text  x="436.28" y="495.5" ></text>
</g>
<g >
<title>__do_page_fault (14,666,663 samples, 0.46%)</title><rect x="138.4" y="277" width="5.4" height="15.0" fill="rgb(253,116,45)" rx="2" ry="2" />
<text  x="141.40" y="287.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::__future_base::_Result_base::_Deleter&gt;::_M_head (2,666,666 samples, 0.08%)</title><rect x="1098.7" y="325" width="1.0" height="15.0" fill="rgb(253,191,9)" rx="2" ry="2" />
<text  x="1101.71" y="335.5" ></text>
</g>
<g >
<title>leveldb::Slice::empty (1,333,333 samples, 0.04%)</title><rect x="765.7" y="501" width="0.5" height="15.0" fill="rgb(214,190,43)" rx="2" ry="2" />
<text  x="768.75" y="511.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::~_Vector_base (1,333,333 samples, 0.04%)</title><rect x="330.8" y="453" width="0.4" height="15.0" fill="rgb(247,165,25)" rx="2" ry="2" />
<text  x="333.75" y="463.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (15,999,996 samples, 0.50%)</title><rect x="335.1" y="501" width="5.9" height="15.0" fill="rgb(253,207,51)" rx="2" ry="2" />
<text  x="338.15" y="511.5" ></text>
</g>
<g >
<title>kmem_cache_free (1,333,333 samples, 0.04%)</title><rect x="334.2" y="357" width="0.5" height="15.0" fill="rgb(206,185,6)" rx="2" ry="2" />
<text  x="337.17" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (1,333,333 samples, 0.04%)</title><rect x="288.3" y="341" width="0.5" height="15.0" fill="rgb(235,98,45)" rx="2" ry="2" />
<text  x="291.28" y="351.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;char*, unsigned long&gt; (23,999,994 samples, 0.74%)</title><rect x="135.5" y="405" width="8.8" height="15.0" fill="rgb(230,192,34)" rx="2" ry="2" />
<text  x="138.47" y="415.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.04%)</title><rect x="1155.3" y="725" width="0.5" height="15.0" fill="rgb(225,131,15)" rx="2" ry="2" />
<text  x="1158.34" y="735.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::Stats::FinishedSingleOp (1,333,333 samples, 0.04%)</title><rect x="466.5" y="565" width="0.5" height="15.0" fill="rgb(219,128,25)" rx="2" ry="2" />
<text  x="469.47" y="575.5" ></text>
</g>
<g >
<title>free_page_and_swap_cache (1,333,333 samples, 0.04%)</title><rect x="94.0" y="293" width="0.5" height="15.0" fill="rgb(252,19,50)" rx="2" ry="2" />
<text  x="96.97" y="303.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::Valid (1,333,333 samples, 0.04%)</title><rect x="324.9" y="485" width="0.5" height="15.0" fill="rgb(249,125,11)" rx="2" ry="2" />
<text  x="327.89" y="495.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1,333,333 samples, 0.04%)</title><rect x="143.3" y="245" width="0.5" height="15.0" fill="rgb(253,57,29)" rx="2" ry="2" />
<text  x="146.28" y="255.5" ></text>
</g>
<g >
<title>__fget_light (3,999,999 samples, 0.12%)</title><rect x="804.3" y="357" width="1.5" height="15.0" fill="rgb(213,68,23)" rx="2" ry="2" />
<text  x="807.32" y="367.5" ></text>
</g>
<g >
<title>fsnotify (2,666,666 samples, 0.08%)</title><rect x="911.2" y="357" width="1.0" height="15.0" fill="rgb(252,80,54)" rx="2" ry="2" />
<text  x="914.23" y="367.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (1,333,333 samples, 0.04%)</title><rect x="286.3" y="325" width="0.5" height="15.0" fill="rgb(231,202,1)" rx="2" ry="2" />
<text  x="289.33" y="335.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1,333,333 samples, 0.04%)</title><rect x="1086.0" y="437" width="0.5" height="15.0" fill="rgb(226,68,36)" rx="2" ry="2" />
<text  x="1089.01" y="447.5" ></text>
</g>
<g >
<title>__GI__IO_default_xsputn (2,666,666 samples, 0.08%)</title><rect x="454.3" y="501" width="0.9" height="15.0" fill="rgb(232,43,1)" rx="2" ry="2" />
<text  x="457.27" y="511.5" ></text>
</g>
<g >
<title>do_filp_open (3,999,999 samples, 0.12%)</title><rect x="1129.5" y="501" width="1.4" height="15.0" fill="rgb(211,92,8)" rx="2" ry="2" />
<text  x="1132.46" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt;::_M_next (1,333,333 samples, 0.04%)</title><rect x="79.8" y="373" width="0.5" height="15.0" fill="rgb(206,198,39)" rx="2" ry="2" />
<text  x="82.81" y="383.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;unsigned long, char&gt; (23,999,994 samples, 0.74%)</title><rect x="135.5" y="357" width="8.8" height="15.0" fill="rgb(253,141,1)" rx="2" ry="2" />
<text  x="138.47" y="367.5" ></text>
</g>
<g >
<title>up_write (3,999,999 samples, 0.12%)</title><rect x="909.3" y="325" width="1.4" height="15.0" fill="rgb(252,217,16)" rx="2" ry="2" />
<text  x="912.28" y="335.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (559,999,860 samples, 17.38%)</title><rect x="529.0" y="437" width="205.0" height="15.0" fill="rgb(228,129,24)" rx="2" ry="2" />
<text  x="531.97" y="447.5" >leveldb::SkipList&lt;char con..</text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="1094.3" y="357" width="0.5" height="15.0" fill="rgb(216,35,2)" rx="2" ry="2" />
<text  x="1097.31" y="367.5" ></text>
</g>
<g >
<title>leveldb::Arena::AllocateNewBlock (10,666,664 samples, 0.33%)</title><rect x="501.1" y="437" width="3.9" height="15.0" fill="rgb(249,3,10)" rx="2" ry="2" />
<text  x="504.14" y="447.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl&lt;std::__future_base::_Result_base*&amp;, std::__future_base::_Result_base::_Deleter, void&gt; (5,333,332 samples, 0.17%)</title><rect x="1011.3" y="277" width="2.0" height="15.0" fill="rgb(214,88,33)" rx="2" ry="2" />
<text  x="1014.32" y="287.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (38,666,657 samples, 1.20%)</title><rect x="403.5" y="437" width="14.2" height="15.0" fill="rgb(207,121,34)" rx="2" ry="2" />
<text  x="406.50" y="447.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Valid (1,333,333 samples, 0.04%)</title><rect x="324.9" y="469" width="0.5" height="15.0" fill="rgb(208,127,1)" rx="2" ry="2" />
<text  x="327.89" y="479.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="456.2" y="421" width="0.5" height="15.0" fill="rgb(247,143,7)" rx="2" ry="2" />
<text  x="459.22" y="431.5" ></text>
</g>
<g >
<title>leveldb::InternalKey::DecodeFrom (1,333,333 samples, 0.04%)</title><rect x="1143.6" y="741" width="0.5" height="15.0" fill="rgb(237,44,32)" rx="2" ry="2" />
<text  x="1146.62" y="751.5" ></text>
</g>
<g >
<title>std::__fill_a&lt;char&gt; (23,999,994 samples, 0.74%)</title><rect x="135.5" y="341" width="8.8" height="15.0" fill="rgb(212,9,40)" rx="2" ry="2" />
<text  x="138.47" y="351.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (7,999,998 samples, 0.25%)</title><rect x="501.1" y="389" width="3.0" height="15.0" fill="rgb(253,56,0)" rx="2" ry="2" />
<text  x="504.14" y="399.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (1,333,333 samples, 0.04%)</title><rect x="395.2" y="421" width="0.5" height="15.0" fill="rgb(206,20,5)" rx="2" ry="2" />
<text  x="398.20" y="431.5" ></text>
</g>
<g >
<title>vfs_fsync_range (1,333,333 samples, 0.04%)</title><rect x="1128.5" y="469" width="0.5" height="15.0" fill="rgb(244,25,0)" rx="2" ry="2" />
<text  x="1131.49" y="479.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;unsigned long, char&gt; (5,333,332 samples, 0.17%)</title><rect x="331.2" y="373" width="2.0" height="15.0" fill="rgb(239,215,6)" rx="2" ry="2" />
<text  x="334.24" y="383.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;leveldb::ParsedInternalKey*, leveldb::ParsedInternalKey*, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt; (2,666,666 samples, 0.08%)</title><rect x="437.7" y="437" width="0.9" height="15.0" fill="rgb(211,217,6)" rx="2" ry="2" />
<text  x="440.67" y="447.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="334.2" y="437" width="0.5" height="15.0" fill="rgb(228,54,10)" rx="2" ry="2" />
<text  x="337.17" y="447.5" ></text>
</g>
<g >
<title>leveldb::Block::Iter::Next (10,666,664 samples, 0.33%)</title><rect x="219.9" y="453" width="3.9" height="15.0" fill="rgb(205,214,18)" rx="2" ry="2" />
<text  x="222.93" y="463.5" ></text>
</g>
<g >
<title>__pthread_once_slow (1,333,333 samples, 0.04%)</title><rect x="1122.6" y="725" width="0.5" height="15.0" fill="rgb(244,31,15)" rx="2" ry="2" />
<text  x="1125.63" y="735.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::Basename (1,333,333 samples, 0.04%)</title><rect x="403.0" y="437" width="0.5" height="15.0" fill="rgb(236,26,35)" rx="2" ry="2" />
<text  x="406.01" y="447.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__future_base::_State_baseV2&gt;::allocator (1,333,333 samples, 0.04%)</title><rect x="1071.9" y="453" width="0.4" height="15.0" fill="rgb(234,68,34)" rx="2" ry="2" />
<text  x="1074.85" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (2,666,666 samples, 0.08%)</title><rect x="392.8" y="437" width="0.9" height="15.0" fill="rgb(231,82,23)" rx="2" ry="2" />
<text  x="395.76" y="447.5" ></text>
</g>
<g >
<title>__do_page_fault (2,666,666 samples, 0.08%)</title><rect x="305.9" y="261" width="0.9" height="15.0" fill="rgb(217,219,46)" rx="2" ry="2" />
<text  x="308.85" y="271.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::New (1,333,333 samples, 0.04%)</title><rect x="90.6" y="277" width="0.4" height="15.0" fill="rgb(220,178,9)" rx="2" ry="2" />
<text  x="93.55" y="287.5" ></text>
</g>
<g >
<title>ktime_get_coarse_real_ts64 (2,666,666 samples, 0.08%)</title><rect x="821.9" y="277" width="1.0" height="15.0" fill="rgb(250,176,13)" rx="2" ry="2" />
<text  x="824.89" y="287.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (1,333,333 samples, 0.04%)</title><rect x="286.3" y="357" width="0.5" height="15.0" fill="rgb(235,128,20)" rx="2" ry="2" />
<text  x="289.33" y="367.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="212.1" y="421" width="0.5" height="15.0" fill="rgb(220,182,21)" rx="2" ry="2" />
<text  x="215.12" y="431.5" ></text>
</g>
<g >
<title>leveldb::BuildTable (365,333,242 samples, 11.34%)</title><rect x="11.5" y="501" width="133.7" height="15.0" fill="rgb(218,102,43)" rx="2" ry="2" />
<text  x="14.46" y="511.5" >leveldb::BuildTa..</text>
</g>
<g >
<title>evict (9,333,331 samples, 0.29%)</title><rect x="1124.6" y="549" width="3.4" height="15.0" fill="rgb(230,133,22)" rx="2" ry="2" />
<text  x="1127.58" y="559.5" ></text>
</g>
<g >
<title>leveldb::Slice::remove_prefix (1,333,333 samples, 0.04%)</title><rect x="1143.1" y="725" width="0.5" height="15.0" fill="rgb(236,30,6)" rx="2" ry="2" />
<text  x="1146.13" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;char*, std::allocator&lt;char*&gt; &gt;::push_back (2,666,666 samples, 0.08%)</title><rect x="504.1" y="421" width="0.9" height="15.0" fill="rgb(205,16,31)" rx="2" ry="2" />
<text  x="507.07" y="431.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::RemoveFile (2,666,666 samples, 0.08%)</title><rect x="236.0" y="485" width="1.0" height="15.0" fill="rgb(254,214,49)" rx="2" ry="2" />
<text  x="239.04" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1,333,333 samples, 0.04%)</title><rect x="432.8" y="501" width="0.5" height="15.0" fill="rgb(219,195,20)" rx="2" ry="2" />
<text  x="435.79" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1,333,333 samples, 0.04%)</title><rect x="431.3" y="485" width="0.5" height="15.0" fill="rgb(231,221,16)" rx="2" ry="2" />
<text  x="434.32" y="495.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (2,666,666 samples, 0.08%)</title><rect x="1157.3" y="725" width="1.0" height="15.0" fill="rgb(206,173,5)" rx="2" ry="2" />
<text  x="1160.29" y="735.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="958.1" y="421" width="0.5" height="15.0" fill="rgb(224,134,24)" rx="2" ry="2" />
<text  x="961.10" y="431.5" ></text>
</g>
<g >
<title>std::__to_address&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.04%)</title><rect x="1071.4" y="437" width="0.5" height="15.0" fill="rgb(247,118,8)" rx="2" ry="2" />
<text  x="1074.37" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (14,666,663 samples, 0.46%)</title><rect x="312.7" y="405" width="5.4" height="15.0" fill="rgb(237,20,25)" rx="2" ry="2" />
<text  x="315.69" y="415.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::_M_deallocate (1,333,333 samples, 0.04%)</title><rect x="330.8" y="437" width="0.4" height="15.0" fill="rgb(228,202,18)" rx="2" ry="2" />
<text  x="333.75" y="447.5" ></text>
</g>
<g >
<title>__pagevec_release (2,666,666 samples, 0.08%)</title><rect x="1125.1" y="485" width="0.9" height="15.0" fill="rgb(251,83,32)" rx="2" ry="2" />
<text  x="1128.07" y="495.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.04%)</title><rect x="362.0" y="485" width="0.5" height="15.0" fill="rgb(250,73,52)" rx="2" ry="2" />
<text  x="365.00" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (21,333,328 samples, 0.66%)</title><rect x="162.8" y="469" width="7.8" height="15.0" fill="rgb(208,95,28)" rx="2" ry="2" />
<text  x="165.81" y="479.5" ></text>
</g>
<g >
<title>walk_page_range (1,333,333 samples, 0.04%)</title><rect x="330.8" y="197" width="0.4" height="15.0" fill="rgb(239,186,29)" rx="2" ry="2" />
<text  x="333.75" y="207.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt;::_Deque_iterator (3,999,999 samples, 0.12%)</title><rect x="962.0" y="501" width="1.5" height="15.0" fill="rgb(245,94,42)" rx="2" ry="2" />
<text  x="965.01" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (1,333,333 samples, 0.04%)</title><rect x="155.5" y="389" width="0.5" height="15.0" fill="rgb(210,220,40)" rx="2" ry="2" />
<text  x="158.49" y="399.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (10,666,664 samples, 0.33%)</title><rect x="320.0" y="469" width="3.9" height="15.0" fill="rgb(220,18,51)" rx="2" ry="2" />
<text  x="323.01" y="479.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.04%)</title><rect x="278.0" y="293" width="0.5" height="15.0" fill="rgb(207,141,18)" rx="2" ry="2" />
<text  x="281.03" y="303.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (89,333,311 samples, 2.77%)</title><rect x="990.3" y="453" width="32.7" height="15.0" fill="rgb(226,167,52)" rx="2" ry="2" />
<text  x="993.32" y="463.5" >st..</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (1,333,333 samples, 0.04%)</title><rect x="87.1" y="389" width="0.5" height="15.0" fill="rgb(233,8,43)" rx="2" ry="2" />
<text  x="90.14" y="399.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::Delete (1,333,333 samples, 0.04%)</title><rect x="329.3" y="357" width="0.5" height="15.0" fill="rgb(210,207,31)" rx="2" ry="2" />
<text  x="332.29" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1,333,333 samples, 0.04%)</title><rect x="258.5" y="437" width="0.5" height="15.0" fill="rgb(205,169,0)" rx="2" ry="2" />
<text  x="261.50" y="447.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="248.7" y="357" width="0.5" height="15.0" fill="rgb(235,192,21)" rx="2" ry="2" />
<text  x="251.73" y="367.5" ></text>
</g>
<g >
<title>std::swap&lt;char const*&gt; (2,666,666 samples, 0.08%)</title><rect x="1105.1" y="549" width="0.9" height="15.0" fill="rgb(239,27,0)" rx="2" ry="2" />
<text  x="1108.05" y="559.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1,333,333 samples, 0.04%)</title><rect x="864.4" y="213" width="0.5" height="15.0" fill="rgb(217,0,40)" rx="2" ry="2" />
<text  x="867.36" y="223.5" ></text>
</g>
<g >
<title>leveldb::Block::Iter::Valid (1,333,333 samples, 0.04%)</title><rect x="225.3" y="437" width="0.5" height="15.0" fill="rgb(243,38,10)" rx="2" ry="2" />
<text  x="228.30" y="447.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (3,037,332,574 samples, 94.25%)</title><rect x="10.0" y="709" width="1112.1" height="15.0" fill="rgb(210,205,5)" rx="2" ry="2" />
<text  x="13.00" y="719.5" >[libstdc++.so.6.0.29]</text>
</g>
<g >
<title>do_dentry_open (3,999,999 samples, 0.12%)</title><rect x="1129.5" y="453" width="1.4" height="15.0" fill="rgb(230,162,37)" rx="2" ry="2" />
<text  x="1132.46" y="463.5" ></text>
</g>
<g >
<title>lookup_fast (1,333,333 samples, 0.04%)</title><rect x="1131.9" y="421" width="0.5" height="15.0" fill="rgb(208,192,26)" rx="2" ry="2" />
<text  x="1134.90" y="431.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.04%)</title><rect x="235.6" y="469" width="0.4" height="15.0" fill="rgb(209,130,41)" rx="2" ry="2" />
<text  x="238.55" y="479.5" ></text>
</g>
<g >
<title>madvise_free_single_vma (1,333,333 samples, 0.04%)</title><rect x="330.8" y="229" width="0.4" height="15.0" fill="rgb(224,74,22)" rx="2" ry="2" />
<text  x="333.75" y="239.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::ok (2,666,666 samples, 0.08%)</title><rect x="431.8" y="501" width="1.0" height="15.0" fill="rgb(249,25,34)" rx="2" ry="2" />
<text  x="434.81" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (5,333,332 samples, 0.17%)</title><rect x="1050.9" y="485" width="1.9" height="15.0" fill="rgb(233,161,49)" rx="2" ry="2" />
<text  x="1053.86" y="495.5" ></text>
</g>
<g >
<title>openaux (1,333,333 samples, 0.04%)</title><rect x="1131.9" y="629" width="0.5" height="15.0" fill="rgb(226,22,51)" rx="2" ry="2" />
<text  x="1134.90" y="639.5" ></text>
</g>
<g >
<title>snappy::Compress (33,333,325 samples, 1.03%)</title><rect x="115.9" y="405" width="12.2" height="15.0" fill="rgb(230,134,26)" rx="2" ry="2" />
<text  x="118.94" y="415.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.04%)</title><rect x="1020.6" y="293" width="0.5" height="15.0" fill="rgb(254,107,25)" rx="2" ry="2" />
<text  x="1023.59" y="303.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.04%)</title><rect x="591.9" y="325" width="0.5" height="15.0" fill="rgb(206,23,12)" rx="2" ry="2" />
<text  x="594.94" y="335.5" ></text>
</g>
<g >
<title>__page_cache_alloc (2,666,666 samples, 0.08%)</title><rect x="846.3" y="245" width="1.0" height="15.0" fill="rgb(242,207,6)" rx="2" ry="2" />
<text  x="849.30" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::get_deleter (3,999,999 samples, 0.12%)</title><rect x="1098.2" y="389" width="1.5" height="15.0" fill="rgb(210,216,52)" rx="2" ry="2" />
<text  x="1101.22" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (2,666,666 samples, 0.08%)</title><rect x="134.0" y="469" width="1.0" height="15.0" fill="rgb(207,155,25)" rx="2" ry="2" />
<text  x="137.00" y="479.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_set_result (147,999,963 samples, 4.59%)</title><rect x="968.8" y="517" width="54.2" height="15.0" fill="rgb(230,60,47)" rx="2" ry="2" />
<text  x="971.84" y="527.5" >std::..</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (2,666,666 samples, 0.08%)</title><rect x="1188.0" y="725" width="1.0" height="15.0" fill="rgb(236,88,50)" rx="2" ry="2" />
<text  x="1191.05" y="735.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (5,333,332 samples, 0.17%)</title><rect x="331.2" y="341" width="2.0" height="15.0" fill="rgb(242,178,35)" rx="2" ry="2" />
<text  x="334.24" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::construct&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&gt; (6,666,665 samples, 0.21%)</title><rect x="964.9" y="501" width="2.5" height="15.0" fill="rgb(246,144,47)" rx="2" ry="2" />
<text  x="967.94" y="511.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2,666,666 samples, 0.08%)</title><rect x="391.8" y="389" width="1.0" height="15.0" fill="rgb(234,77,6)" rx="2" ry="2" />
<text  x="394.78" y="399.5" ></text>
</g>
<g >
<title>leveldb::BuildTable (189,333,286 samples, 5.88%)</title><rect x="237.5" y="485" width="69.3" height="15.0" fill="rgb(210,0,18)" rx="2" ry="2" />
<text  x="240.51" y="495.5" >leveldb..</text>
</g>
<g >
<title>leveldb::DecodeFixed32 (1,333,333 samples, 0.04%)</title><rect x="221.4" y="405" width="0.5" height="15.0" fill="rgb(215,21,18)" rx="2" ry="2" />
<text  x="224.39" y="415.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::PosixEnv (2,666,666 samples, 0.08%)</title><rect x="1130.9" y="645" width="1.0" height="15.0" fill="rgb(216,228,24)" rx="2" ry="2" />
<text  x="1133.93" y="655.5" ></text>
</g>
<g >
<title>[libunwind.so.8.0.1] (1,333,333 samples, 0.04%)</title><rect x="1131.4" y="149" width="0.5" height="15.0" fill="rgb(234,170,34)" rx="2" ry="2" />
<text  x="1134.41" y="159.5" ></text>
</g>
<g >
<title>__fget_light (2,666,666 samples, 0.08%)</title><rect x="808.7" y="373" width="1.0" height="15.0" fill="rgb(234,92,31)" rx="2" ry="2" />
<text  x="811.71" y="383.5" ></text>
</g>
<g >
<title>GetStackTrace (1,333,333 samples, 0.04%)</title><rect x="90.6" y="245" width="0.4" height="15.0" fill="rgb(253,153,15)" rx="2" ry="2" />
<text  x="93.55" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Select1st, true&gt;::_S_cget (1,333,333 samples, 0.04%)</title><rect x="167.2" y="389" width="0.5" height="15.0" fill="rgb(242,122,46)" rx="2" ry="2" />
<text  x="170.20" y="399.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1,333,333 samples, 0.04%)</title><rect x="232.6" y="485" width="0.5" height="15.0" fill="rgb(219,148,38)" rx="2" ry="2" />
<text  x="235.62" y="495.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (5,333,332 samples, 0.17%)</title><rect x="1145.6" y="725" width="1.9" height="15.0" fill="rgb(208,160,34)" rx="2" ry="2" />
<text  x="1148.57" y="735.5" ></text>
</g>
<g >
<title>snappy::Compress (30,666,659 samples, 0.95%)</title><rect x="417.7" y="437" width="11.2" height="15.0" fill="rgb(215,62,26)" rx="2" ry="2" />
<text  x="420.65" y="447.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (3,037,332,574 samples, 94.25%)</title><rect x="10.0" y="693" width="1112.1" height="15.0" fill="rgb(205,2,15)" rx="2" ry="2" />
<text  x="13.00" y="703.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Equal (19,999,995 samples, 0.62%)</title><rect x="512.9" y="453" width="7.3" height="15.0" fill="rgb(225,114,9)" rx="2" ry="2" />
<text  x="515.85" y="463.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_S_check&lt;std::__future_base::_State_baseV2&gt; (2,666,666 samples, 0.08%)</title><rect x="1024.5" y="501" width="1.0" height="15.0" fill="rgb(228,8,4)" rx="2" ry="2" />
<text  x="1027.50" y="511.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;1ul, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.08%)</title><rect x="1098.7" y="341" width="1.0" height="15.0" fill="rgb(207,92,23)" rx="2" ry="2" />
<text  x="1101.71" y="351.5" ></text>
</g>
<g >
<title>ext4_mark_iloc_dirty (5,333,332 samples, 0.17%)</title><rect x="824.3" y="229" width="2.0" height="15.0" fill="rgb(211,133,27)" rx="2" ry="2" />
<text  x="827.33" y="239.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.04%)</title><rect x="278.0" y="277" width="0.5" height="15.0" fill="rgb(235,105,45)" rx="2" ry="2" />
<text  x="281.03" y="287.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1,333,333 samples, 0.04%)</title><rect x="695.0" y="277" width="0.4" height="15.0" fill="rgb(236,95,34)" rx="2" ry="2" />
<text  x="697.96" y="287.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5,333,332 samples, 0.17%)</title><rect x="256.1" y="421" width="1.9" height="15.0" fill="rgb(235,146,31)" rx="2" ry="2" />
<text  x="259.06" y="431.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (5,333,332 samples, 0.17%)</title><rect x="173.5" y="485" width="2.0" height="15.0" fill="rgb(243,148,43)" rx="2" ry="2" />
<text  x="176.55" y="495.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::DecommitSpan (1,333,333 samples, 0.04%)</title><rect x="144.3" y="325" width="0.4" height="15.0" fill="rgb(233,97,21)" rx="2" ry="2" />
<text  x="147.26" y="335.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (2,666,666 samples, 0.08%)</title><rect x="141.8" y="213" width="1.0" height="15.0" fill="rgb(209,177,16)" rx="2" ry="2" />
<text  x="144.82" y="223.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (1,333,333 samples, 0.04%)</title><rect x="901.0" y="261" width="0.5" height="15.0" fill="rgb(231,153,36)" rx="2" ry="2" />
<text  x="903.98" y="271.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (6,666,665 samples, 0.21%)</title><rect x="904.4" y="277" width="2.4" height="15.0" fill="rgb(230,226,8)" rx="2" ry="2" />
<text  x="907.40" y="287.5" ></text>
</g>
<g >
<title>leveldb::MemTable::~MemTable (1,333,333 samples, 0.04%)</title><rect x="177.5" y="501" width="0.4" height="15.0" fill="rgb(215,202,26)" rx="2" ry="2" />
<text  x="180.46" y="511.5" ></text>
</g>
<g >
<title>madvise_free_pte_range (1,333,333 samples, 0.04%)</title><rect x="330.8" y="165" width="0.4" height="15.0" fill="rgb(220,227,6)" rx="2" ry="2" />
<text  x="333.75" y="175.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (9,333,331 samples, 0.29%)</title><rect x="516.8" y="405" width="3.4" height="15.0" fill="rgb(240,77,28)" rx="2" ry="2" />
<text  x="519.76" y="415.5" ></text>
</g>
<g >
<title>leveldb::Options::Options (2,666,666 samples, 0.08%)</title><rect x="1130.9" y="693" width="1.0" height="15.0" fill="rgb(253,53,47)" rx="2" ry="2" />
<text  x="1133.93" y="703.5" ></text>
</g>
<g >
<title>kmem_cache_free (5,333,332 samples, 0.17%)</title><rect x="856.6" y="245" width="1.9" height="15.0" fill="rgb(235,200,41)" rx="2" ry="2" />
<text  x="859.55" y="255.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (5,333,332 samples, 0.17%)</title><rect x="158.9" y="421" width="2.0" height="15.0" fill="rgb(219,51,49)" rx="2" ry="2" />
<text  x="161.90" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (2,666,666 samples, 0.08%)</title><rect x="274.1" y="357" width="1.0" height="15.0" fill="rgb(235,148,50)" rx="2" ry="2" />
<text  x="277.12" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;leveldb::Status&gt;::_M_ptr (1,333,333 samples, 0.04%)</title><rect x="1044.5" y="517" width="0.5" height="15.0" fill="rgb(212,90,38)" rx="2" ry="2" />
<text  x="1047.51" y="527.5" ></text>
</g>
<g >
<title>__ext4_journal_start_sb (2,666,666 samples, 0.08%)</title><rect x="860.9" y="229" width="1.0" height="15.0" fill="rgb(208,219,45)" rx="2" ry="2" />
<text  x="863.95" y="239.5" ></text>
</g>
<g >
<title>find_get_entry (2,666,666 samples, 0.08%)</title><rect x="848.3" y="245" width="0.9" height="15.0" fill="rgb(229,126,39)" rx="2" ry="2" />
<text  x="851.25" y="255.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.04%)</title><rect x="115.9" y="357" width="0.5" height="15.0" fill="rgb(251,225,6)" rx="2" ry="2" />
<text  x="118.94" y="367.5" ></text>
</g>
<g >
<title>__do_page_cache_readahead (6,666,665 samples, 0.21%)</title><rect x="1166.6" y="565" width="2.4" height="15.0" fill="rgb(207,102,15)" rx="2" ry="2" />
<text  x="1169.57" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (6,666,665 samples, 0.21%)</title><rect x="337.6" y="421" width="2.4" height="15.0" fill="rgb(230,148,6)" rx="2" ry="2" />
<text  x="340.59" y="431.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::Next (3,999,999 samples, 0.12%)</title><rect x="171.1" y="501" width="1.5" height="15.0" fill="rgb(212,168,13)" rx="2" ry="2" />
<text  x="174.11" y="511.5" ></text>
</g>
<g >
<title>leveldb::Env::Default (2,666,666 samples, 0.08%)</title><rect x="1130.9" y="677" width="1.0" height="15.0" fill="rgb(217,203,8)" rx="2" ry="2" />
<text  x="1133.93" y="687.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.04%)</title><rect x="90.1" y="229" width="0.5" height="15.0" fill="rgb(234,174,44)" rx="2" ry="2" />
<text  x="93.07" y="239.5" ></text>
</g>
<g >
<title>vfs_open (3,999,999 samples, 0.12%)</title><rect x="1129.5" y="469" width="1.4" height="15.0" fill="rgb(244,46,32)" rx="2" ry="2" />
<text  x="1132.46" y="479.5" ></text>
</g>
<g >
<title>find_get_entries (1,333,333 samples, 0.04%)</title><rect x="236.0" y="293" width="0.5" height="15.0" fill="rgb(242,30,14)" rx="2" ry="2" />
<text  x="239.04" y="303.5" ></text>
</g>
<g >
<title>leveldb::port::Snappy_Compress (10,666,664 samples, 0.33%)</title><rect x="298.5" y="421" width="3.9" height="15.0" fill="rgb(212,147,25)" rx="2" ry="2" />
<text  x="301.53" y="431.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1,333,333 samples, 0.04%)</title><rect x="172.1" y="437" width="0.5" height="15.0" fill="rgb(220,97,25)" rx="2" ry="2" />
<text  x="175.09" y="447.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.04%)</title><rect x="1014.2" y="277" width="0.5" height="15.0" fill="rgb(226,109,11)" rx="2" ry="2" />
<text  x="1017.24" y="287.5" ></text>
</g>
<g >
<title>leveldb::InternalKey::Encode (1,333,333 samples, 0.04%)</title><rect x="232.1" y="501" width="0.5" height="15.0" fill="rgb(230,70,36)" rx="2" ry="2" />
<text  x="235.13" y="511.5" ></text>
</g>
<g >
<title>__unlink (2,666,666 samples, 0.08%)</title><rect x="236.0" y="469" width="1.0" height="15.0" fill="rgb(225,136,10)" rx="2" ry="2" />
<text  x="239.04" y="479.5" ></text>
</g>
<g >
<title>percpu_counter_add_batch (1,333,333 samples, 0.04%)</title><rect x="843.4" y="181" width="0.5" height="15.0" fill="rgb(228,45,32)" rx="2" ry="2" />
<text  x="846.37" y="191.5" ></text>
</g>
<g >
<title>__do_page_fault (3,999,999 samples, 0.12%)</title><rect x="130.1" y="341" width="1.5" height="15.0" fill="rgb(215,73,40)" rx="2" ry="2" />
<text  x="133.10" y="351.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteRawBlock (1,333,333 samples, 0.04%)</title><rect x="135.0" y="453" width="0.5" height="15.0" fill="rgb(224,145,30)" rx="2" ry="2" />
<text  x="137.98" y="463.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Flush (110,666,639 samples, 3.43%)</title><rect x="263.4" y="453" width="40.5" height="15.0" fill="rgb(246,66,14)" rx="2" ry="2" />
<text  x="266.38" y="463.5" >lev..</text>
</g>
<g >
<title>_dl_init (3,999,999 samples, 0.12%)</title><rect x="1123.1" y="725" width="1.5" height="15.0" fill="rgb(237,111,22)" rx="2" ry="2" />
<text  x="1126.12" y="735.5" ></text>
</g>
<g >
<title>memset_erms (1,333,333 samples, 0.04%)</title><rect x="1170.0" y="517" width="0.5" height="15.0" fill="rgb(243,67,26)" rx="2" ry="2" />
<text  x="1172.98" y="527.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::KeyBuffer::slice (5,333,332 samples, 0.17%)</title><rect x="458.7" y="565" width="1.9" height="15.0" fill="rgb(225,172,40)" rx="2" ry="2" />
<text  x="461.66" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (1,333,333 samples, 0.04%)</title><rect x="155.0" y="373" width="0.5" height="15.0" fill="rgb(221,46,38)" rx="2" ry="2" />
<text  x="158.00" y="383.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="378.6" y="453" width="0.5" height="15.0" fill="rgb(209,95,5)" rx="2" ry="2" />
<text  x="381.60" y="463.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1,333,333 samples, 0.04%)</title><rect x="743.8" y="309" width="0.5" height="15.0" fill="rgb(209,115,11)" rx="2" ry="2" />
<text  x="746.78" y="319.5" ></text>
</g>
<g >
<title>snappy::internal::CompressFragment (27,999,993 samples, 0.87%)</title><rect x="417.7" y="421" width="10.2" height="15.0" fill="rgb(232,43,48)" rx="2" ry="2" />
<text  x="420.65" y="431.5" ></text>
</g>
<g >
<title>filemap_fault (7,999,998 samples, 0.25%)</title><rect x="1166.1" y="613" width="2.9" height="15.0" fill="rgb(220,73,3)" rx="2" ry="2" />
<text  x="1169.08" y="623.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1,333,333 samples, 0.04%)</title><rect x="339.5" y="389" width="0.5" height="15.0" fill="rgb(221,227,9)" rx="2" ry="2" />
<text  x="342.54" y="399.5" ></text>
</g>
<g >
<title>free_page_and_swap_cache (1,333,333 samples, 0.04%)</title><rect x="409.4" y="325" width="0.4" height="15.0" fill="rgb(222,16,21)" rx="2" ry="2" />
<text  x="412.35" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (38,666,657 samples, 1.20%)</title><rect x="146.7" y="469" width="14.2" height="15.0" fill="rgb(229,117,0)" rx="2" ry="2" />
<text  x="149.70" y="479.5" ></text>
</g>
<g >
<title>leveldb::MemHashTableValue::MemHashTableValue (2,666,666 samples, 0.08%)</title><rect x="104.2" y="453" width="1.0" height="15.0" fill="rgb(208,166,13)" rx="2" ry="2" />
<text  x="107.22" y="463.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="473.3" y="533" width="0.5" height="15.0" fill="rgb(249,71,11)" rx="2" ry="2" />
<text  x="476.31" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_S_cget (2,666,666 samples, 0.08%)</title><rect x="322.5" y="405" width="0.9" height="15.0" fill="rgb(226,116,12)" rx="2" ry="2" />
<text  x="325.45" y="415.5" ></text>
</g>
<g >
<title>__x64_sys_openat (3,999,999 samples, 0.12%)</title><rect x="1129.5" y="533" width="1.4" height="15.0" fill="rgb(229,64,49)" rx="2" ry="2" />
<text  x="1132.46" y="543.5" ></text>
</g>
<g >
<title>do_futex (1,333,333 samples, 0.04%)</title><rect x="989.8" y="405" width="0.5" height="15.0" fill="rgb(210,96,20)" rx="2" ry="2" />
<text  x="992.83" y="415.5" ></text>
</g>
<g >
<title>irq_exit (2,666,666 samples, 0.08%)</title><rect x="627.6" y="341" width="1.0" height="15.0" fill="rgb(217,48,24)" rx="2" ry="2" />
<text  x="630.58" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__future_base::_State_baseV2&gt;::construct&lt;std::__future_base::_State_baseV2&gt; (13,333,330 samples, 0.41%)</title><rect x="1061.6" y="421" width="4.9" height="15.0" fill="rgb(249,119,46)" rx="2" ry="2" />
<text  x="1064.60" y="431.5" ></text>
</g>
<g >
<title>memmove_movnt_avx512f_clwb (31,999,992 samples, 0.99%)</title><rect x="1158.8" y="741" width="11.7" height="15.0" fill="rgb(248,135,34)" rx="2" ry="2" />
<text  x="1161.75" y="751.5" ></text>
</g>
<g >
<title>get_futex_key (1,333,333 samples, 0.04%)</title><rect x="987.4" y="357" width="0.5" height="15.0" fill="rgb(254,181,44)" rx="2" ry="2" />
<text  x="990.39" y="367.5" ></text>
</g>
<g >
<title>ext4_mark_inode_dirty (87,999,978 samples, 2.73%)</title><rect x="862.4" y="229" width="32.2" height="15.0" fill="rgb(209,222,24)" rx="2" ry="2" />
<text  x="865.41" y="239.5" >ex..</text>
</g>
<g >
<title>leveldb::TableBuilder::TableBuilder (6,666,665 samples, 0.21%)</title><rect x="304.4" y="469" width="2.4" height="15.0" fill="rgb(226,179,31)" rx="2" ry="2" />
<text  x="307.39" y="479.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (2,666,666 samples, 0.08%)</title><rect x="957.6" y="469" width="1.0" height="15.0" fill="rgb(219,88,3)" rx="2" ry="2" />
<text  x="960.61" y="479.5" ></text>
</g>
<g >
<title>try_charge (1,333,333 samples, 0.04%)</title><rect x="503.6" y="245" width="0.5" height="15.0" fill="rgb(230,166,19)" rx="2" ry="2" />
<text  x="506.58" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (2,666,666 samples, 0.08%)</title><rect x="400.6" y="437" width="0.9" height="15.0" fill="rgb(232,220,49)" rx="2" ry="2" />
<text  x="403.57" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_addr (1,333,333 samples, 0.04%)</title><rect x="166.2" y="341" width="0.5" height="15.0" fill="rgb(228,138,29)" rx="2" ry="2" />
<text  x="169.23" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,333,333 samples, 0.04%)</title><rect x="397.1" y="405" width="0.5" height="15.0" fill="rgb(222,157,28)" rx="2" ry="2" />
<text  x="400.15" y="415.5" ></text>
</g>
<g >
<title>run_timer_softirq (1,333,333 samples, 0.04%)</title><rect x="885.4" y="69" width="0.4" height="15.0" fill="rgb(222,204,2)" rx="2" ry="2" />
<text  x="888.36" y="79.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.04%)</title><rect x="278.0" y="245" width="0.5" height="15.0" fill="rgb(233,216,2)" rx="2" ry="2" />
<text  x="281.03" y="255.5" ></text>
</g>
<g >
<title>leveldb::EncodeVarint32 (2,666,666 samples, 0.08%)</title><rect x="1147.5" y="725" width="1.0" height="15.0" fill="rgb(206,24,0)" rx="2" ry="2" />
<text  x="1150.53" y="735.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (2,666,666 samples, 0.08%)</title><rect x="1006.9" y="261" width="1.0" height="15.0" fill="rgb(245,134,45)" rx="2" ry="2" />
<text  x="1009.92" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt;::allocate (9,333,331 samples, 0.29%)</title><rect x="87.6" y="373" width="3.4" height="15.0" fill="rgb(253,139,49)" rx="2" ry="2" />
<text  x="90.63" y="383.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.04%)</title><rect x="1178.8" y="725" width="0.5" height="15.0" fill="rgb(225,168,18)" rx="2" ry="2" />
<text  x="1181.77" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (2,666,666 samples, 0.08%)</title><rect x="274.1" y="341" width="1.0" height="15.0" fill="rgb(230,210,16)" rx="2" ry="2" />
<text  x="277.12" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::rfind (1,333,333 samples, 0.04%)</title><rect x="403.0" y="421" width="0.5" height="15.0" fill="rgb(216,184,5)" rx="2" ry="2" />
<text  x="406.01" y="431.5" ></text>
</g>
<g >
<title>_IO_vsnprintf (38,666,657 samples, 1.20%)</title><rect x="444.5" y="533" width="14.2" height="15.0" fill="rgb(217,120,37)" rx="2" ry="2" />
<text  x="447.51" y="543.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ReleaseToCentralCache (2,666,666 samples, 0.08%)</title><rect x="328.8" y="421" width="1.0" height="15.0" fill="rgb(240,222,24)" rx="2" ry="2" />
<text  x="331.80" y="431.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.04%)</title><rect x="81.3" y="293" width="0.5" height="15.0" fill="rgb(217,160,52)" rx="2" ry="2" />
<text  x="84.28" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2,666,666 samples, 0.08%)</title><rect x="465.5" y="549" width="1.0" height="15.0" fill="rgb(226,34,6)" rx="2" ry="2" />
<text  x="468.50" y="559.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*&amp;&gt; (1,333,333 samples, 0.04%)</title><rect x="1003.5" y="229" width="0.5" height="15.0" fill="rgb(225,54,25)" rx="2" ry="2" />
<text  x="1006.50" y="239.5" ></text>
</g>
<g >
<title>leveldb::Block::Iter::ParseNextKey (7,999,998 samples, 0.25%)</title><rect x="220.4" y="437" width="2.9" height="15.0" fill="rgb(212,158,17)" rx="2" ry="2" />
<text  x="223.42" y="447.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::MergeIntoFreeList (1,333,333 samples, 0.04%)</title><rect x="144.3" y="341" width="0.4" height="15.0" fill="rgb(234,20,23)" rx="2" ry="2" />
<text  x="147.26" y="351.5" ></text>
</g>
<g >
<title>jbd2_journal_get_write_access (3,999,999 samples, 0.12%)</title><rect x="893.2" y="181" width="1.4" height="15.0" fill="rgb(250,132,49)" rx="2" ry="2" />
<text  x="896.17" y="191.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ListTooLong (1,333,333 samples, 0.04%)</title><rect x="177.5" y="453" width="0.4" height="15.0" fill="rgb(225,170,24)" rx="2" ry="2" />
<text  x="180.46" y="463.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (321,333,253 samples, 9.97%)</title><rect x="796.0" y="437" width="117.7" height="15.0" fill="rgb(242,166,30)" rx="2" ry="2" />
<text  x="799.02" y="447.5" >entry_SYSCALL_..</text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="212.1" y="437" width="0.5" height="15.0" fill="rgb(219,83,12)" rx="2" ry="2" />
<text  x="215.12" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr (18,666,662 samples, 0.58%)</title><rect x="1001.1" y="309" width="6.8" height="15.0" fill="rgb(237,185,23)" rx="2" ry="2" />
<text  x="1004.06" y="319.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (3,999,999 samples, 0.12%)</title><rect x="297.1" y="357" width="1.4" height="15.0" fill="rgb(252,67,5)" rx="2" ry="2" />
<text  x="300.07" y="367.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (7,999,998 samples, 0.25%)</title><rect x="501.1" y="405" width="3.0" height="15.0" fill="rgb(233,95,10)" rx="2" ry="2" />
<text  x="504.14" y="415.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (2,666,666 samples, 0.08%)</title><rect x="1157.3" y="741" width="1.0" height="15.0" fill="rgb(242,189,41)" rx="2" ry="2" />
<text  x="1160.29" y="751.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (2,666,666 samples, 0.08%)</title><rect x="1060.1" y="437" width="1.0" height="15.0" fill="rgb(217,164,50)" rx="2" ry="2" />
<text  x="1063.14" y="447.5" ></text>
</g>
<g >
<title>wait_for_stable_page (1,333,333 samples, 0.04%)</title><rect x="907.8" y="293" width="0.5" height="15.0" fill="rgb(242,98,46)" rx="2" ry="2" />
<text  x="910.82" y="303.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.04%)</title><rect x="1013.3" y="277" width="0.5" height="15.0" fill="rgb(243,16,29)" rx="2" ry="2" />
<text  x="1016.27" y="287.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (1,333,333 samples, 0.04%)</title><rect x="142.8" y="229" width="0.5" height="15.0" fill="rgb(246,54,32)" rx="2" ry="2" />
<text  x="145.79" y="239.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadNodeMain (1,171,999,707 samples, 36.37%)</title><rect x="10.0" y="597" width="429.1" height="15.0" fill="rgb(213,91,1)" rx="2" ry="2" />
<text  x="13.00" y="607.5" >leveldb::(anonymous namespace)::PosixEnv::BackgroundThread..</text>
</g>
<g >
<title>std::atomic&lt;bool&gt;::load (2,666,666 samples, 0.08%)</title><rect x="435.7" y="517" width="1.0" height="15.0" fill="rgb(212,213,7)" rx="2" ry="2" />
<text  x="438.72" y="527.5" ></text>
</g>
<g >
<title>clear_page_erms (1,333,333 samples, 0.04%)</title><rect x="90.1" y="165" width="0.5" height="15.0" fill="rgb(241,186,47)" rx="2" ry="2" />
<text  x="93.07" y="175.5" ></text>
</g>
<g >
<title>leveldb::DoWriteStringToFile (1,333,333 samples, 0.04%)</title><rect x="1128.5" y="597" width="0.5" height="15.0" fill="rgb(249,177,45)" rx="2" ry="2" />
<text  x="1131.49" y="607.5" ></text>
</g>
<g >
<title>leveldb::WriteStringToFileSync (1,333,333 samples, 0.04%)</title><rect x="1128.5" y="613" width="0.5" height="15.0" fill="rgb(250,69,43)" rx="2" ry="2" />
<text  x="1131.49" y="623.5" ></text>
</g>
<g >
<title>leveldb::test::CompressibleString (11,999,997 samples, 0.37%)</title><rect x="461.1" y="549" width="4.4" height="15.0" fill="rgb(245,134,24)" rx="2" ry="2" />
<text  x="464.10" y="559.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::~allocator@plt (1,333,333 samples, 0.04%)</title><rect x="104.7" y="437" width="0.5" height="15.0" fill="rgb(247,103,47)" rx="2" ry="2" />
<text  x="107.71" y="447.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1,333,333 samples, 0.04%)</title><rect x="40.8" y="437" width="0.4" height="15.0" fill="rgb(231,169,42)" rx="2" ry="2" />
<text  x="43.76" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (7,999,998 samples, 0.25%)</title><rect x="337.1" y="437" width="2.9" height="15.0" fill="rgb(249,87,8)" rx="2" ry="2" />
<text  x="340.10" y="447.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::ok (1,333,333 samples, 0.04%)</title><rect x="428.9" y="485" width="0.5" height="15.0" fill="rgb(226,76,26)" rx="2" ry="2" />
<text  x="431.88" y="495.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1,333,333 samples, 0.04%)</title><rect x="840.9" y="261" width="0.5" height="15.0" fill="rgb(238,146,48)" rx="2" ry="2" />
<text  x="843.93" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::operator (5,333,332 samples, 0.17%)</title><rect x="999.1" y="309" width="2.0" height="15.0" fill="rgb(234,79,16)" rx="2" ry="2" />
<text  x="1002.11" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (3,999,999 samples, 0.12%)</title><rect x="263.9" y="373" width="1.4" height="15.0" fill="rgb(244,202,28)" rx="2" ry="2" />
<text  x="266.87" y="383.5" ></text>
</g>
<g >
<title>_pthread_cleanup_pop (3,999,999 samples, 0.12%)</title><rect x="976.2" y="453" width="1.4" height="15.0" fill="rgb(253,151,17)" rx="2" ry="2" />
<text  x="979.16" y="463.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (6,666,665 samples, 0.21%)</title><rect x="195.5" y="453" width="2.5" height="15.0" fill="rgb(234,134,19)" rx="2" ry="2" />
<text  x="198.52" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (1,333,333 samples, 0.04%)</title><rect x="322.0" y="373" width="0.5" height="15.0" fill="rgb(208,149,34)" rx="2" ry="2" />
<text  x="324.97" y="383.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Update (1,333,333 samples, 0.04%)</title><rect x="211.1" y="437" width="0.5" height="15.0" fill="rgb(244,185,8)" rx="2" ry="2" />
<text  x="214.14" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (1,333,333 samples, 0.04%)</title><rect x="1122.1" y="741" width="0.5" height="15.0" fill="rgb(209,203,49)" rx="2" ry="2" />
<text  x="1125.14" y="751.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (19,999,995 samples, 0.62%)</title><rect x="1092.4" y="405" width="7.3" height="15.0" fill="rgb(224,83,41)" rx="2" ry="2" />
<text  x="1095.36" y="415.5" ></text>
</g>
<g >
<title>page_fault (3,999,999 samples, 0.12%)</title><rect x="130.1" y="373" width="1.5" height="15.0" fill="rgb(230,142,45)" rx="2" ry="2" />
<text  x="133.10" y="383.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (3,999,999 samples, 0.12%)</title><rect x="145.2" y="485" width="1.5" height="15.0" fill="rgb(254,224,17)" rx="2" ry="2" />
<text  x="148.23" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::release (1,333,333 samples, 0.04%)</title><rect x="1187.6" y="725" width="0.4" height="15.0" fill="rgb(253,155,4)" rx="2" ry="2" />
<text  x="1190.56" y="735.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.04%)</title><rect x="303.4" y="421" width="0.5" height="15.0" fill="rgb(228,130,9)" rx="2" ry="2" />
<text  x="306.41" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.08%)</title><rect x="1000.1" y="261" width="1.0" height="15.0" fill="rgb(230,212,17)" rx="2" ry="2" />
<text  x="1003.09" y="271.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::get_future (15,999,996 samples, 0.50%)</title><rect x="1047.0" y="549" width="5.8" height="15.0" fill="rgb(218,75,42)" rx="2" ry="2" />
<text  x="1049.95" y="559.5" ></text>
</g>
<g >
<title>call_timer_fn (1,333,333 samples, 0.04%)</title><rect x="1135.8" y="629" width="0.5" height="15.0" fill="rgb(253,224,0)" rx="2" ry="2" />
<text  x="1138.81" y="639.5" ></text>
</g>
<g >
<title>truncate_inode_pages_range (1,333,333 samples, 0.04%)</title><rect x="438.6" y="357" width="0.5" height="15.0" fill="rgb(240,203,46)" rx="2" ry="2" />
<text  x="441.65" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.04%)</title><rect x="398.1" y="373" width="0.5" height="15.0" fill="rgb(221,163,40)" rx="2" ry="2" />
<text  x="401.13" y="383.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::wait (1,333,333 samples, 0.04%)</title><rect x="1036.7" y="501" width="0.5" height="15.0" fill="rgb(229,205,47)" rx="2" ry="2" />
<text  x="1039.70" y="511.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (5,333,332 samples, 0.17%)</title><rect x="370.3" y="469" width="2.0" height="15.0" fill="rgb(229,183,23)" rx="2" ry="2" />
<text  x="373.30" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (2,666,666 samples, 0.08%)</title><rect x="322.5" y="421" width="0.9" height="15.0" fill="rgb(247,137,46)" rx="2" ry="2" />
<text  x="325.45" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1,333,333 samples, 0.04%)</title><rect x="400.1" y="437" width="0.5" height="15.0" fill="rgb(225,83,26)" rx="2" ry="2" />
<text  x="403.08" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_eq (1,333,333 samples, 0.04%)</title><rect x="1174.9" y="725" width="0.5" height="15.0" fill="rgb(219,74,18)" rx="2" ry="2" />
<text  x="1177.87" y="735.5" ></text>
</g>
<g >
<title>leveldb::port::Snappy_Uncompress (11,999,997 samples, 0.37%)</title><rect x="206.7" y="405" width="4.4" height="15.0" fill="rgb(233,73,26)" rx="2" ry="2" />
<text  x="209.75" y="415.5" ></text>
</g>
<g >
<title>std::__future_base::_Result_base::_Deleter::operator (6,666,665 samples, 0.21%)</title><rect x="1094.3" y="389" width="2.5" height="15.0" fill="rgb(245,95,46)" rx="2" ry="2" />
<text  x="1097.31" y="399.5" ></text>
</g>
<g >
<title>leveldb::EncodeVarint32 (2,666,666 samples, 0.08%)</title><rect x="360.5" y="469" width="1.0" height="15.0" fill="rgb(217,140,14)" rx="2" ry="2" />
<text  x="363.53" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (3,999,999 samples, 0.12%)</title><rect x="333.7" y="485" width="1.4" height="15.0" fill="rgb(249,138,16)" rx="2" ry="2" />
<text  x="336.68" y="495.5" ></text>
</g>
<g >
<title>start_thread (3,037,332,574 samples, 94.25%)</title><rect x="10.0" y="725" width="1112.1" height="15.0" fill="rgb(223,118,15)" rx="2" ry="2" />
<text  x="13.00" y="735.5" >start_thread</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (1,333,333 samples, 0.04%)</title><rect x="362.0" y="469" width="0.5" height="15.0" fill="rgb(244,50,51)" rx="2" ry="2" />
<text  x="365.00" y="479.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::SetNext (1,333,333 samples, 0.04%)</title><rect x="1150.0" y="725" width="0.5" height="15.0" fill="rgb(209,130,5)" rx="2" ry="2" />
<text  x="1152.97" y="735.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;char*, unsigned long&gt; (5,333,332 samples, 0.17%)</title><rect x="331.2" y="405" width="2.0" height="15.0" fill="rgb(230,32,54)" rx="2" ry="2" />
<text  x="334.24" y="415.5" ></text>
</g>
<g >
<title>std::move&lt;char const*&amp;&gt; (3,999,999 samples, 0.12%)</title><rect x="918.6" y="469" width="1.4" height="15.0" fill="rgb(211,99,37)" rx="2" ry="2" />
<text  x="921.56" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (14,666,663 samples, 0.46%)</title><rect x="312.7" y="389" width="5.4" height="15.0" fill="rgb(238,119,51)" rx="2" ry="2" />
<text  x="315.69" y="399.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Rep::Rep (5,333,332 samples, 0.17%)</title><rect x="331.2" y="485" width="2.0" height="15.0" fill="rgb(247,18,25)" rx="2" ry="2" />
<text  x="334.24" y="495.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;1ul, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.08%)</title><rect x="1183.2" y="725" width="0.9" height="15.0" fill="rgb(234,225,38)" rx="2" ry="2" />
<text  x="1186.17" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add (2,666,666 samples, 0.08%)</title><rect x="1082.6" y="453" width="1.0" height="15.0" fill="rgb(218,113,53)" rx="2" ry="2" />
<text  x="1085.59" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (2,666,666 samples, 0.08%)</title><rect x="307.3" y="405" width="1.0" height="15.0" fill="rgb(235,172,30)" rx="2" ry="2" />
<text  x="310.32" y="415.5" ></text>
</g>
<g >
<title>new_slab (1,333,333 samples, 0.04%)</title><rect x="1169.5" y="469" width="0.5" height="15.0" fill="rgb(217,128,21)" rx="2" ry="2" />
<text  x="1172.50" y="479.5" ></text>
</g>
<g >
<title>run_rebalance_domains (2,666,666 samples, 0.08%)</title><rect x="499.7" y="405" width="0.9" height="15.0" fill="rgb(237,37,3)" rx="2" ry="2" />
<text  x="502.67" y="415.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::~shared_ptr (3,999,999 samples, 0.12%)</title><rect x="1185.1" y="725" width="1.5" height="15.0" fill="rgb(225,181,22)" rx="2" ry="2" />
<text  x="1188.12" y="735.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::_M_pop_front_aux (1,333,333 samples, 0.04%)</title><rect x="964.0" y="517" width="0.4" height="15.0" fill="rgb(246,152,1)" rx="2" ry="2" />
<text  x="966.96" y="527.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (1,333,333 samples, 0.04%)</title><rect x="323.9" y="469" width="0.5" height="15.0" fill="rgb(234,72,15)" rx="2" ry="2" />
<text  x="326.92" y="479.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.08%)</title><rect x="1098.7" y="357" width="1.0" height="15.0" fill="rgb(253,158,11)" rx="2" ry="2" />
<text  x="1101.71" y="367.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock (1,333,333 samples, 0.04%)</title><rect x="1131.4" y="133" width="0.5" height="15.0" fill="rgb(218,151,17)" rx="2" ry="2" />
<text  x="1134.41" y="143.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl&lt;std::__future_base::_Result_base::_Deleter&gt; (9,333,331 samples, 0.29%)</title><rect x="1010.3" y="309" width="3.5" height="15.0" fill="rgb(210,227,32)" rx="2" ry="2" />
<text  x="1013.34" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (6,666,665 samples, 0.21%)</title><rect x="165.3" y="421" width="2.4" height="15.0" fill="rgb(251,229,39)" rx="2" ry="2" />
<text  x="168.25" y="431.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::IsManifest (1,333,333 samples, 0.04%)</title><rect x="403.0" y="453" width="0.5" height="15.0" fill="rgb(254,179,10)" rx="2" ry="2" />
<text  x="406.01" y="463.5" ></text>
</g>
<g >
<title>truncate_inode_pages_range (9,333,331 samples, 0.29%)</title><rect x="1124.6" y="501" width="3.4" height="15.0" fill="rgb(230,202,48)" rx="2" ry="2" />
<text  x="1127.58" y="511.5" ></text>
</g>
<g >
<title>_cond_resched (2,666,666 samples, 0.08%)</title><rect x="807.7" y="341" width="1.0" height="15.0" fill="rgb(247,212,1)" rx="2" ry="2" />
<text  x="810.73" y="351.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,333,333 samples, 0.04%)</title><rect x="284.4" y="325" width="0.5" height="15.0" fill="rgb(222,220,52)" rx="2" ry="2" />
<text  x="287.37" y="335.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock (1,333,333 samples, 0.04%)</title><rect x="486.5" y="469" width="0.5" height="15.0" fill="rgb(207,183,42)" rx="2" ry="2" />
<text  x="489.49" y="479.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Next (37,333,324 samples, 1.16%)</title><rect x="212.1" y="469" width="13.7" height="15.0" fill="rgb(241,166,10)" rx="2" ry="2" />
<text  x="215.12" y="479.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1,333,333 samples, 0.04%)</title><rect x="854.6" y="213" width="0.5" height="15.0" fill="rgb(213,167,3)" rx="2" ry="2" />
<text  x="857.60" y="223.5" ></text>
</g>
<g >
<title>open_path (1,333,333 samples, 0.04%)</title><rect x="1131.9" y="597" width="0.5" height="15.0" fill="rgb(231,128,41)" rx="2" ry="2" />
<text  x="1134.90" y="607.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.04%)</title><rect x="286.3" y="277" width="0.5" height="15.0" fill="rgb(235,208,7)" rx="2" ry="2" />
<text  x="289.33" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_default_append (5,333,332 samples, 0.17%)</title><rect x="331.2" y="453" width="2.0" height="15.0" fill="rgb(247,23,22)" rx="2" ry="2" />
<text  x="334.24" y="463.5" ></text>
</g>
<g >
<title>page_fault (2,666,666 samples, 0.08%)</title><rect x="503.1" y="341" width="1.0" height="15.0" fill="rgb(244,184,10)" rx="2" ry="2" />
<text  x="506.09" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,333,333 samples, 0.04%)</title><rect x="79.3" y="341" width="0.5" height="15.0" fill="rgb(219,183,19)" rx="2" ry="2" />
<text  x="82.33" y="351.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (1,333,333 samples, 0.04%)</title><rect x="93.5" y="373" width="0.5" height="15.0" fill="rgb(205,52,18)" rx="2" ry="2" />
<text  x="96.48" y="383.5" ></text>
</g>
<g >
<title>uncharge_page (1,333,333 samples, 0.04%)</title><rect x="94.0" y="245" width="0.5" height="15.0" fill="rgb(220,13,28)" rx="2" ry="2" />
<text  x="96.97" y="255.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.04%)</title><rect x="1178.3" y="725" width="0.5" height="15.0" fill="rgb(234,136,30)" rx="2" ry="2" />
<text  x="1181.28" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.04%)</title><rect x="81.8" y="357" width="0.5" height="15.0" fill="rgb(245,190,21)" rx="2" ry="2" />
<text  x="84.77" y="367.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::Basename (1,333,333 samples, 0.04%)</title><rect x="379.1" y="469" width="0.5" height="15.0" fill="rgb(233,94,46)" rx="2" ry="2" />
<text  x="382.09" y="479.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (5,333,332 samples, 0.17%)</title><rect x="380.1" y="469" width="1.9" height="15.0" fill="rgb(213,54,48)" rx="2" ry="2" />
<text  x="383.06" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt;::allocate (1,333,333 samples, 0.04%)</title><rect x="1131.4" y="437" width="0.5" height="15.0" fill="rgb(237,187,46)" rx="2" ry="2" />
<text  x="1134.41" y="447.5" ></text>
</g>
<g >
<title>snappy::RawUncompress (11,999,997 samples, 0.37%)</title><rect x="206.7" y="389" width="4.4" height="15.0" fill="rgb(250,174,13)" rx="2" ry="2" />
<text  x="209.75" y="399.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2,666,666 samples, 0.08%)</title><rect x="465.5" y="517" width="1.0" height="15.0" fill="rgb(213,77,47)" rx="2" ry="2" />
<text  x="468.50" y="527.5" ></text>
</g>
<g >
<title>__ext4_journal_start_sb (30,666,659 samples, 0.95%)</title><rect x="828.7" y="277" width="11.3" height="15.0" fill="rgb(227,47,44)" rx="2" ry="2" />
<text  x="831.73" y="287.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::Finish (1,333,333 samples, 0.04%)</title><rect x="402.5" y="469" width="0.5" height="15.0" fill="rgb(207,15,15)" rx="2" ry="2" />
<text  x="405.52" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_extract (1,333,333 samples, 0.04%)</title><rect x="76.9" y="357" width="0.5" height="15.0" fill="rgb(227,67,45)" rx="2" ry="2" />
<text  x="79.88" y="367.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (91,999,977 samples, 2.85%)</title><rect x="860.9" y="245" width="33.7" height="15.0" fill="rgb(218,144,32)" rx="2" ry="2" />
<text  x="863.95" y="255.5" >ex..</text>
</g>
<g >
<title>leveldb::Slice::compare (2,666,666 samples, 0.08%)</title><rect x="246.8" y="405" width="1.0" height="15.0" fill="rgb(235,175,47)" rx="2" ry="2" />
<text  x="249.78" y="415.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;&amp;&gt; (1,333,333 samples, 0.04%)</title><rect x="98.4" y="325" width="0.5" height="15.0" fill="rgb(232,145,46)" rx="2" ry="2" />
<text  x="101.37" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1,333,333 samples, 0.04%)</title><rect x="161.8" y="469" width="0.5" height="15.0" fill="rgb(233,183,48)" rx="2" ry="2" />
<text  x="164.83" y="479.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (1,333,333 samples, 0.04%)</title><rect x="1150.0" y="741" width="0.5" height="15.0" fill="rgb(241,227,9)" rx="2" ry="2" />
<text  x="1152.97" y="751.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.04%)</title><rect x="296.6" y="293" width="0.5" height="15.0" fill="rgb(216,1,38)" rx="2" ry="2" />
<text  x="299.58" y="303.5" ></text>
</g>
<g >
<title>__libc_write (337,333,249 samples, 10.47%)</title><rect x="790.2" y="453" width="123.5" height="15.0" fill="rgb(229,27,38)" rx="2" ry="2" />
<text  x="793.16" y="463.5" >__libc_write</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (5,333,332 samples, 0.17%)</title><rect x="1050.9" y="453" width="1.9" height="15.0" fill="rgb(247,38,26)" rx="2" ry="2" />
<text  x="1053.86" y="463.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (1,333,333 samples, 0.04%)</title><rect x="135.0" y="421" width="0.5" height="15.0" fill="rgb(233,203,24)" rx="2" ry="2" />
<text  x="137.98" y="431.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; &gt;::_M_init_functor (6,666,665 samples, 0.21%)</title><rect x="1026.5" y="485" width="2.4" height="15.0" fill="rgb(238,15,48)" rx="2" ry="2" />
<text  x="1029.45" y="495.5" ></text>
</g>
<g >
<title>leveldb::InternalKey::DecodeFrom (1,333,333 samples, 0.04%)</title><rect x="333.2" y="517" width="0.5" height="15.0" fill="rgb(210,225,54)" rx="2" ry="2" />
<text  x="336.19" y="527.5" ></text>
</g>
<g >
<title>IO_validate_vtable (1,333,333 samples, 0.04%)</title><rect x="453.8" y="501" width="0.5" height="15.0" fill="rgb(249,62,37)" rx="2" ry="2" />
<text  x="456.78" y="511.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="913.2" y="389" width="0.5" height="15.0" fill="rgb(216,204,4)" rx="2" ry="2" />
<text  x="916.19" y="399.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::InsertInto (1,333,333 samples, 0.04%)</title><rect x="1138.2" y="725" width="0.5" height="15.0" fill="rgb(242,168,8)" rx="2" ry="2" />
<text  x="1141.25" y="735.5" ></text>
</g>
<g >
<title>try_charge (1,333,333 samples, 0.04%)</title><rect x="142.8" y="213" width="0.5" height="15.0" fill="rgb(222,187,52)" rx="2" ry="2" />
<text  x="145.79" y="223.5" ></text>
</g>
<g >
<title>put_cred_rcu (1,333,333 samples, 0.04%)</title><rect x="194.1" y="389" width="0.4" height="15.0" fill="rgb(218,87,31)" rx="2" ry="2" />
<text  x="197.05" y="399.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (98,666,642 samples, 3.06%)</title><rect x="56.4" y="453" width="36.1" height="15.0" fill="rgb(215,17,38)" rx="2" ry="2" />
<text  x="59.38" y="463.5" >lev..</text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (2,666,666 samples, 0.08%)</title><rect x="338.1" y="373" width="1.0" height="15.0" fill="rgb(249,13,8)" rx="2" ry="2" />
<text  x="341.08" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (2,666,666 samples, 0.08%)</title><rect x="465.5" y="533" width="1.0" height="15.0" fill="rgb(253,48,19)" rx="2" ry="2" />
<text  x="468.50" y="543.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.04%)</title><rect x="1128.0" y="581" width="0.5" height="15.0" fill="rgb(236,155,33)" rx="2" ry="2" />
<text  x="1131.00" y="591.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, false&gt;::_Head_base (1,333,333 samples, 0.04%)</title><rect x="1077.2" y="469" width="0.5" height="15.0" fill="rgb(239,60,36)" rx="2" ry="2" />
<text  x="1080.22" y="479.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,333,333 samples, 0.04%)</title><rect x="166.7" y="389" width="0.5" height="15.0" fill="rgb(248,23,15)" rx="2" ry="2" />
<text  x="169.71" y="399.5" ></text>
</g>
<g >
<title>_ULx86_64_step (1,333,333 samples, 0.04%)</title><rect x="90.6" y="213" width="0.4" height="15.0" fill="rgb(228,156,19)" rx="2" ry="2" />
<text  x="93.55" y="223.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::KeyBuffer::Set (39,999,990 samples, 1.24%)</title><rect x="444.0" y="565" width="14.7" height="15.0" fill="rgb(236,183,20)" rx="2" ry="2" />
<text  x="447.02" y="575.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MergingIterator::value (7,999,998 samples, 0.25%)</title><rect x="228.2" y="517" width="3.0" height="15.0" fill="rgb(205,52,11)" rx="2" ry="2" />
<text  x="231.23" y="527.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;leveldb::Status&gt;::_M_value (1,333,333 samples, 0.04%)</title><rect x="1181.7" y="725" width="0.5" height="15.0" fill="rgb(210,95,4)" rx="2" ry="2" />
<text  x="1184.70" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (1,333,333 samples, 0.04%)</title><rect x="278.0" y="341" width="0.5" height="15.0" fill="rgb(249,161,19)" rx="2" ry="2" />
<text  x="281.03" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (14,666,663 samples, 0.46%)</title><rect x="275.6" y="357" width="5.4" height="15.0" fill="rgb(214,226,26)" rx="2" ry="2" />
<text  x="278.59" y="367.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (5,333,332 samples, 0.17%)</title><rect x="129.6" y="421" width="2.0" height="15.0" fill="rgb(248,100,30)" rx="2" ry="2" />
<text  x="132.61" y="431.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.04%)</title><rect x="240.4" y="437" width="0.5" height="15.0" fill="rgb(216,106,53)" rx="2" ry="2" />
<text  x="243.43" y="447.5" ></text>
</g>
<g >
<title>__block_commit_write.isra.33 (1,333,333 samples, 0.04%)</title><rect x="1169.0" y="597" width="0.5" height="15.0" fill="rgb(225,32,36)" rx="2" ry="2" />
<text  x="1172.01" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (7,999,998 samples, 0.25%)</title><rect x="80.3" y="373" width="2.9" height="15.0" fill="rgb(206,159,1)" rx="2" ry="2" />
<text  x="83.30" y="383.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (3,999,999 samples, 0.12%)</title><rect x="1131.9" y="693" width="1.5" height="15.0" fill="rgb(243,69,36)" rx="2" ry="2" />
<text  x="1134.90" y="703.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2,666,666 samples, 0.08%)</title><rect x="246.8" y="421" width="1.0" height="15.0" fill="rgb(231,23,8)" rx="2" ry="2" />
<text  x="249.78" y="431.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl (2,666,666 samples, 0.08%)</title><rect x="1065.5" y="341" width="1.0" height="15.0" fill="rgb(225,115,4)" rx="2" ry="2" />
<text  x="1068.51" y="351.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl (1,333,333 samples, 0.04%)</title><rect x="1171.9" y="741" width="0.5" height="15.0" fill="rgb(242,165,4)" rx="2" ry="2" />
<text  x="1174.94" y="751.5" ></text>
</g>
<g >
<title>leveldb::MemTable::Unref (2,666,666 samples, 0.08%)</title><rect x="328.8" y="501" width="1.0" height="15.0" fill="rgb(231,117,32)" rx="2" ry="2" />
<text  x="331.80" y="511.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (47,999,988 samples, 1.49%)</title><rect x="1055.3" y="485" width="17.5" height="15.0" fill="rgb(207,214,2)" rx="2" ry="2" />
<text  x="1058.25" y="495.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::tuple&lt;std::__future_base::_Result_base*&amp;, std::__future_base::_Result_base::_Deleter, true&gt; (7,999,998 samples, 0.25%)</title><rect x="1010.8" y="293" width="3.0" height="15.0" fill="rgb(241,111,0)" rx="2" ry="2" />
<text  x="1013.83" y="303.5" ></text>
</g>
<g >
<title>truncate_inode_pages_range (2,666,666 samples, 0.08%)</title><rect x="236.0" y="325" width="1.0" height="15.0" fill="rgb(250,146,39)" rx="2" ry="2" />
<text  x="239.04" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,333,333 samples, 0.04%)</title><rect x="382.0" y="437" width="0.5" height="15.0" fill="rgb(235,129,40)" rx="2" ry="2" />
<text  x="385.01" y="447.5" ></text>
</g>
<g >
<title>leveldb::WriteBatch::Iterate (1,333,333 samples, 0.04%)</title><rect x="1156.3" y="741" width="0.5" height="15.0" fill="rgb(232,106,15)" rx="2" ry="2" />
<text  x="1159.31" y="751.5" ></text>
</g>
<g >
<title>leveldb::Slice::operator[] (10,666,664 samples, 0.33%)</title><rect x="250.7" y="437" width="3.9" height="15.0" fill="rgb(230,143,5)" rx="2" ry="2" />
<text  x="253.69" y="447.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="958.1" y="453" width="0.5" height="15.0" fill="rgb(233,127,52)" rx="2" ry="2" />
<text  x="961.10" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result_base::_Deleter, void&gt; (1,333,333 samples, 0.04%)</title><rect x="1176.3" y="725" width="0.5" height="15.0" fill="rgb(221,214,24)" rx="2" ry="2" />
<text  x="1179.33" y="735.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1,333,333 samples, 0.04%)</title><rect x="278.0" y="309" width="0.5" height="15.0" fill="rgb(221,103,27)" rx="2" ry="2" />
<text  x="281.03" y="319.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.04%)</title><rect x="466.0" y="485" width="0.5" height="15.0" fill="rgb(229,226,21)" rx="2" ry="2" />
<text  x="468.99" y="495.5" ></text>
</g>
<g >
<title>do_page_fault (2,666,666 samples, 0.08%)</title><rect x="282.9" y="245" width="1.0" height="15.0" fill="rgb(216,97,14)" rx="2" ry="2" />
<text  x="285.91" y="255.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (2,666,666 samples, 0.08%)</title><rect x="846.3" y="213" width="1.0" height="15.0" fill="rgb(239,78,53)" rx="2" ry="2" />
<text  x="849.30" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt;@plt (1,333,333 samples, 0.04%)</title><rect x="342.5" y="485" width="0.5" height="15.0" fill="rgb(249,101,46)" rx="2" ry="2" />
<text  x="345.47" y="495.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::value (1,333,333 samples, 0.04%)</title><rect x="230.2" y="453" width="0.5" height="15.0" fill="rgb(215,88,41)" rx="2" ry="2" />
<text  x="233.18" y="463.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.04%)</title><rect x="81.3" y="277" width="0.5" height="15.0" fill="rgb(232,145,19)" rx="2" ry="2" />
<text  x="84.28" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (2,666,666 samples, 0.08%)</title><rect x="78.8" y="373" width="1.0" height="15.0" fill="rgb(226,117,50)" rx="2" ry="2" />
<text  x="81.84" y="383.5" ></text>
</g>
<g >
<title>leveldb::Table::Open (1,333,333 samples, 0.04%)</title><rect x="144.7" y="453" width="0.5" height="15.0" fill="rgb(244,75,4)" rx="2" ry="2" />
<text  x="147.75" y="463.5" ></text>
</g>
<g >
<title>unmap_region (1,333,333 samples, 0.04%)</title><rect x="330.3" y="357" width="0.5" height="15.0" fill="rgb(254,158,41)" rx="2" ry="2" />
<text  x="333.26" y="367.5" ></text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.04%)</title><rect x="1069.4" y="405" width="0.5" height="15.0" fill="rgb(238,48,54)" rx="2" ry="2" />
<text  x="1072.41" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (26,666,660 samples, 0.83%)</title><rect x="308.3" y="437" width="9.8" height="15.0" fill="rgb(224,60,23)" rx="2" ry="2" />
<text  x="311.30" y="447.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.04%)</title><rect x="1097.2" y="357" width="0.5" height="15.0" fill="rgb(251,65,51)" rx="2" ry="2" />
<text  x="1100.24" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (1,333,333 samples, 0.04%)</title><rect x="170.1" y="437" width="0.5" height="15.0" fill="rgb(251,192,14)" rx="2" ry="2" />
<text  x="173.13" y="447.5" ></text>
</g>
<g >
<title>kmem_cache_free (1,333,333 samples, 0.04%)</title><rect x="565.1" y="325" width="0.5" height="15.0" fill="rgb(254,203,15)" rx="2" ry="2" />
<text  x="568.09" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (3,999,999 samples, 0.12%)</title><rect x="321.0" y="405" width="1.5" height="15.0" fill="rgb(239,80,1)" rx="2" ry="2" />
<text  x="323.99" y="415.5" ></text>
</g>
<g >
<title>create_empty_buffers (2,666,666 samples, 0.08%)</title><rect x="1169.5" y="565" width="1.0" height="15.0" fill="rgb(214,207,4)" rx="2" ry="2" />
<text  x="1172.50" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux (11,999,997 samples, 0.37%)</title><rect x="1106.5" y="549" width="4.4" height="15.0" fill="rgb(236,56,14)" rx="2" ry="2" />
<text  x="1109.52" y="559.5" ></text>
</g>
<g >
<title>mark_buffer_dirty (1,333,333 samples, 0.04%)</title><rect x="900.0" y="229" width="0.5" height="15.0" fill="rgb(253,217,51)" rx="2" ry="2" />
<text  x="903.00" y="239.5" ></text>
</g>
<g >
<title>ext4_journal_check_start (1,333,333 samples, 0.04%)</title><rect x="829.7" y="261" width="0.5" height="15.0" fill="rgb(231,182,42)" rx="2" ry="2" />
<text  x="832.70" y="271.5" ></text>
</g>
<g >
<title>__vfs_read (1,333,333 samples, 0.04%)</title><rect x="1129.0" y="469" width="0.5" height="15.0" fill="rgb(245,12,47)" rx="2" ry="2" />
<text  x="1131.97" y="479.5" ></text>
</g>
<g >
<title>_dl_start_user (3,999,999 samples, 0.12%)</title><rect x="1123.1" y="741" width="1.5" height="15.0" fill="rgb(226,208,19)" rx="2" ry="2" />
<text  x="1126.12" y="751.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::key (1,333,333 samples, 0.04%)</title><rect x="224.8" y="421" width="0.5" height="15.0" fill="rgb(254,93,47)" rx="2" ry="2" />
<text  x="227.81" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1,333,333 samples, 0.04%)</title><rect x="333.2" y="501" width="0.5" height="15.0" fill="rgb(231,7,22)" rx="2" ry="2" />
<text  x="336.19" y="511.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.04%)</title><rect x="29.0" y="453" width="0.5" height="15.0" fill="rgb(222,82,14)" rx="2" ry="2" />
<text  x="32.04" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (1,333,333 samples, 0.04%)</title><rect x="315.1" y="357" width="0.5" height="15.0" fill="rgb(240,142,21)" rx="2" ry="2" />
<text  x="318.13" y="367.5" ></text>
</g>
<g >
<title>find_busiest_group (1,333,333 samples, 0.04%)</title><rect x="743.8" y="261" width="0.5" height="15.0" fill="rgb(232,20,30)" rx="2" ry="2" />
<text  x="746.78" y="271.5" ></text>
</g>
<g >
<title>__tls_get_addr@plt (1,333,333 samples, 0.04%)</title><rect x="975.7" y="437" width="0.5" height="15.0" fill="rgb(226,54,25)" rx="2" ry="2" />
<text  x="978.68" y="447.5" ></text>
</g>
<g >
<title>leveldb::Block::Iter::ParseNextKey (7,999,998 samples, 0.25%)</title><rect x="216.5" y="405" width="2.9" height="15.0" fill="rgb(253,31,9)" rx="2" ry="2" />
<text  x="219.51" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,333,333 samples, 0.04%)</title><rect x="320.5" y="405" width="0.5" height="15.0" fill="rgb(252,92,26)" rx="2" ry="2" />
<text  x="323.50" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (7,999,998 samples, 0.25%)</title><rect x="164.8" y="453" width="2.9" height="15.0" fill="rgb(221,135,36)" rx="2" ry="2" />
<text  x="167.76" y="463.5" ></text>
</g>
<g >
<title>__do_page_fault (2,666,666 samples, 0.08%)</title><rect x="282.9" y="229" width="1.0" height="15.0" fill="rgb(240,113,8)" rx="2" ry="2" />
<text  x="285.91" y="239.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__future_base::_State_baseV2*&gt; (1,333,333 samples, 0.04%)</title><rect x="1022.5" y="405" width="0.5" height="15.0" fill="rgb(236,3,9)" rx="2" ry="2" />
<text  x="1025.54" y="415.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (2,666,666 samples, 0.08%)</title><rect x="486.5" y="485" width="1.0" height="15.0" fill="rgb(219,53,42)" rx="2" ry="2" />
<text  x="489.49" y="495.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.04%)</title><rect x="1156.3" y="725" width="0.5" height="15.0" fill="rgb(214,21,51)" rx="2" ry="2" />
<text  x="1159.31" y="735.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__future_base::_State_baseV2&gt;::allocator (1,333,333 samples, 0.04%)</title><rect x="1060.6" y="405" width="0.5" height="15.0" fill="rgb(208,93,38)" rx="2" ry="2" />
<text  x="1063.62" y="415.5" ></text>
</g>
<g >
<title>leveldb::SetCurrentFile (2,666,666 samples, 0.08%)</title><rect x="1128.0" y="629" width="1.0" height="15.0" fill="rgb(210,194,32)" rx="2" ry="2" />
<text  x="1131.00" y="639.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (57,333,319 samples, 1.78%)</title><rect x="263.9" y="421" width="21.0" height="15.0" fill="rgb(228,30,45)" rx="2" ry="2" />
<text  x="266.87" y="431.5" ></text>
</g>
<g >
<title>std::future&lt;leveldb::Status&gt;::get (39,999,990 samples, 1.24%)</title><rect x="1030.8" y="549" width="14.7" height="15.0" fill="rgb(215,195,24)" rx="2" ry="2" />
<text  x="1033.84" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3,999,999 samples, 0.12%)</title><rect x="321.0" y="421" width="1.5" height="15.0" fill="rgb(235,27,19)" rx="2" ry="2" />
<text  x="323.99" y="431.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="378.6" y="437" width="0.5" height="15.0" fill="rgb(243,107,24)" rx="2" ry="2" />
<text  x="381.60" y="447.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.04%)</title><rect x="1124.1" y="549" width="0.5" height="15.0" fill="rgb(253,32,43)" rx="2" ry="2" />
<text  x="1127.09" y="559.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::value (6,666,665 samples, 0.21%)</title><rect x="240.9" y="469" width="2.5" height="15.0" fill="rgb(248,93,44)" rx="2" ry="2" />
<text  x="243.92" y="479.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;1ul, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.04%)</title><rect x="1014.2" y="261" width="0.5" height="15.0" fill="rgb(232,148,15)" rx="2" ry="2" />
<text  x="1017.24" y="271.5" ></text>
</g>
<g >
<title>leveldb::Block::Iter::Next (7,999,998 samples, 0.25%)</title><rect x="216.5" y="421" width="2.9" height="15.0" fill="rgb(224,221,24)" rx="2" ry="2" />
<text  x="219.51" y="431.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="409.4" y="373" width="0.4" height="15.0" fill="rgb(242,154,10)" rx="2" ry="2" />
<text  x="412.35" y="383.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::Add (73,333,315 samples, 2.28%)</title><rect x="19.8" y="469" width="26.8" height="15.0" fill="rgb(205,185,40)" rx="2" ry="2" />
<text  x="22.76" y="479.5" >l..</text>
</g>
<g >
<title>leveldb::port::Mutex::Unlock (5,333,332 samples, 0.17%)</title><rect x="488.4" y="517" width="2.0" height="15.0" fill="rgb(252,196,29)" rx="2" ry="2" />
<text  x="491.44" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (6,666,665 samples, 0.21%)</title><rect x="397.6" y="405" width="2.5" height="15.0" fill="rgb(248,79,33)" rx="2" ry="2" />
<text  x="400.64" y="415.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (19,999,995 samples, 0.62%)</title><rect x="212.6" y="453" width="7.3" height="15.0" fill="rgb(215,57,6)" rx="2" ry="2" />
<text  x="215.61" y="463.5" ></text>
</g>
<g >
<title>__x64_sys_futex (5,333,332 samples, 0.17%)</title><rect x="979.1" y="421" width="1.9" height="15.0" fill="rgb(253,135,34)" rx="2" ry="2" />
<text  x="982.09" y="431.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (7,999,998 samples, 0.25%)</title><rect x="213.6" y="437" width="2.9" height="15.0" fill="rgb(210,9,42)" rx="2" ry="2" />
<text  x="216.58" y="447.5" ></text>
</g>
<g >
<title>__handle_mm_fault (3,999,999 samples, 0.12%)</title><rect x="141.8" y="245" width="1.5" height="15.0" fill="rgb(213,218,0)" rx="2" ry="2" />
<text  x="144.82" y="255.5" ></text>
</g>
<g >
<title>__ext4_journal_start_sb (3,999,999 samples, 0.12%)</title><rect x="822.9" y="245" width="1.4" height="15.0" fill="rgb(253,22,36)" rx="2" ry="2" />
<text  x="825.87" y="255.5" ></text>
</g>
<g >
<title>[libunwind.so.8.0.1] (1,333,333 samples, 0.04%)</title><rect x="1131.4" y="213" width="0.5" height="15.0" fill="rgb(215,118,19)" rx="2" ry="2" />
<text  x="1134.41" y="223.5" ></text>
</g>
<g >
<title>leveldb::EncodeFixed64 (3,999,999 samples, 0.12%)</title><rect x="772.1" y="517" width="1.5" height="15.0" fill="rgb(216,94,31)" rx="2" ry="2" />
<text  x="775.09" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (26,666,660 samples, 0.83%)</title><rect x="148.7" y="437" width="9.7" height="15.0" fill="rgb(250,95,9)" rx="2" ry="2" />
<text  x="151.65" y="447.5" ></text>
</g>
<g >
<title>__do_sys_newlstat (1,333,333 samples, 0.04%)</title><rect x="1124.1" y="501" width="0.5" height="15.0" fill="rgb(246,70,38)" rx="2" ry="2" />
<text  x="1127.09" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (3,999,999 samples, 0.12%)</title><rect x="147.2" y="437" width="1.5" height="15.0" fill="rgb(249,229,15)" rx="2" ry="2" />
<text  x="150.19" y="447.5" ></text>
</g>
<g >
<title>_raw_read_lock (1,333,333 samples, 0.04%)</title><rect x="822.9" y="213" width="0.5" height="15.0" fill="rgb(242,116,19)" rx="2" ry="2" />
<text  x="825.87" y="223.5" ></text>
</g>
<g >
<title>ext4_da_invalidatepage (5,333,332 samples, 0.17%)</title><rect x="1126.0" y="469" width="2.0" height="15.0" fill="rgb(223,40,32)" rx="2" ry="2" />
<text  x="1129.04" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (5,333,332 samples, 0.17%)</title><rect x="61.8" y="405" width="1.9" height="15.0" fill="rgb(243,3,40)" rx="2" ry="2" />
<text  x="64.75" y="415.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="336.6" y="389" width="0.5" height="15.0" fill="rgb(231,147,33)" rx="2" ry="2" />
<text  x="339.61" y="399.5" ></text>
</g>
<g >
<title>__GI__IO_file_open (3,999,999 samples, 0.12%)</title><rect x="1129.5" y="597" width="1.4" height="15.0" fill="rgb(219,21,16)" rx="2" ry="2" />
<text  x="1132.46" y="607.5" ></text>
</g>
<g >
<title>__ext4_journal_stop (1,333,333 samples, 0.04%)</title><rect x="860.5" y="245" width="0.4" height="15.0" fill="rgb(226,5,21)" rx="2" ry="2" />
<text  x="863.46" y="255.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::NewNode (3,999,999 samples, 0.12%)</title><rect x="744.8" y="453" width="1.4" height="15.0" fill="rgb(237,137,8)" rx="2" ry="2" />
<text  x="747.75" y="463.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::Sequence (10,666,664 samples, 0.33%)</title><rect x="768.2" y="517" width="3.9" height="15.0" fill="rgb(244,168,40)" rx="2" ry="2" />
<text  x="771.19" y="527.5" ></text>
</g>
<g >
<title>leveldb::Arena::AllocateFallback (10,666,664 samples, 0.33%)</title><rect x="501.1" y="453" width="3.9" height="15.0" fill="rgb(254,131,39)" rx="2" ry="2" />
<text  x="504.14" y="463.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::SetNext (7,999,998 samples, 0.25%)</title><rect x="750.1" y="453" width="3.0" height="15.0" fill="rgb(240,112,20)" rx="2" ry="2" />
<text  x="753.12" y="463.5" ></text>
</g>
<g >
<title>__sb_start_write (2,666,666 samples, 0.08%)</title><rect x="812.6" y="357" width="1.0" height="15.0" fill="rgb(221,129,6)" rx="2" ry="2" />
<text  x="815.61" y="367.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (7,999,998 samples, 0.25%)</title><rect x="1039.6" y="485" width="3.0" height="15.0" fill="rgb(211,178,14)" rx="2" ry="2" />
<text  x="1042.63" y="495.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::Write (1,735,999,566 samples, 53.87%)</title><rect x="467.0" y="565" width="635.6" height="15.0" fill="rgb(211,52,53)" rx="2" ry="2" />
<text  x="469.96" y="575.5" >leveldb::DBImpl::Write</text>
</g>
<g >
<title>find_get_entries (1,333,333 samples, 0.04%)</title><rect x="10.5" y="309" width="0.5" height="15.0" fill="rgb(224,206,27)" rx="2" ry="2" />
<text  x="13.49" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (3,999,999 samples, 0.12%)</title><rect x="337.6" y="389" width="1.5" height="15.0" fill="rgb(225,124,24)" rx="2" ry="2" />
<text  x="340.59" y="399.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.04%)</title><rect x="503.6" y="293" width="0.5" height="15.0" fill="rgb(249,165,19)" rx="2" ry="2" />
<text  x="506.58" y="303.5" ></text>
</g>
<g >
<title>_dl_map_object_deps (1,333,333 samples, 0.04%)</title><rect x="1131.9" y="661" width="0.5" height="15.0" fill="rgb(241,202,23)" rx="2" ry="2" />
<text  x="1134.90" y="671.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="378.6" y="469" width="0.5" height="15.0" fill="rgb(221,188,48)" rx="2" ry="2" />
<text  x="381.60" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (2,666,666 samples, 0.08%)</title><rect x="163.8" y="421" width="1.0" height="15.0" fill="rgb(249,205,50)" rx="2" ry="2" />
<text  x="166.79" y="431.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="26.6" y="421" width="0.5" height="15.0" fill="rgb(243,161,26)" rx="2" ry="2" />
<text  x="29.60" y="431.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Next (61,333,318 samples, 1.90%)</title><rect x="204.8" y="501" width="22.5" height="15.0" fill="rgb(206,209,11)" rx="2" ry="2" />
<text  x="207.80" y="511.5" >l..</text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::resize (6,666,665 samples, 0.21%)</title><rect x="304.4" y="437" width="2.4" height="15.0" fill="rgb(215,79,34)" rx="2" ry="2" />
<text  x="307.39" y="447.5" ></text>
</g>
<g >
<title>truncate_inode_pages_final (2,666,666 samples, 0.08%)</title><rect x="10.0" y="357" width="1.0" height="15.0" fill="rgb(248,85,1)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>std::forward&lt;std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (1,333,333 samples, 0.04%)</title><rect x="1022.1" y="373" width="0.4" height="15.0" fill="rgb(234,147,46)" rx="2" ry="2" />
<text  x="1025.06" y="383.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; &gt;::_M_init_functor (9,333,331 samples, 0.29%)</title><rect x="1026.5" y="501" width="3.4" height="15.0" fill="rgb(254,148,29)" rx="2" ry="2" />
<text  x="1029.45" y="511.5" ></text>
</g>
<g >
<title>leveldb::Random::Next (3,999,999 samples, 0.12%)</title><rect x="463.5" y="501" width="1.5" height="15.0" fill="rgb(238,125,23)" rx="2" ry="2" />
<text  x="466.55" y="511.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (58,666,652 samples, 1.82%)</title><rect x="827.7" y="293" width="21.5" height="15.0" fill="rgb(244,148,28)" rx="2" ry="2" />
<text  x="830.75" y="303.5" >e..</text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::set_value (1,333,333 samples, 0.04%)</title><rect x="1184.6" y="741" width="0.5" height="15.0" fill="rgb(233,59,25)" rx="2" ry="2" />
<text  x="1187.63" y="751.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,333,333 samples, 0.04%)</title><rect x="115.9" y="293" width="0.5" height="15.0" fill="rgb(236,57,52)" rx="2" ry="2" />
<text  x="118.94" y="303.5" ></text>
</g>
<g >
<title>cpumask_next_and (1,333,333 samples, 0.04%)</title><rect x="473.3" y="421" width="0.5" height="15.0" fill="rgb(234,10,18)" rx="2" ry="2" />
<text  x="476.31" y="431.5" ></text>
</g>
<g >
<title>std::future&lt;leveldb::Status&gt;::future (15,999,996 samples, 0.50%)</title><rect x="1047.0" y="533" width="5.8" height="15.0" fill="rgb(232,229,46)" rx="2" ry="2" />
<text  x="1049.95" y="543.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.04%)</title><rect x="144.3" y="277" width="0.4" height="15.0" fill="rgb(222,224,19)" rx="2" ry="2" />
<text  x="147.26" y="287.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock (2,666,666 samples, 0.08%)</title><rect x="957.6" y="485" width="1.0" height="15.0" fill="rgb(242,163,18)" rx="2" ry="2" />
<text  x="960.61" y="495.5" ></text>
</g>
<g >
<title>_IO_str_init_static_internal (1,333,333 samples, 0.04%)</title><rect x="446.0" y="517" width="0.5" height="15.0" fill="rgb(218,147,33)" rx="2" ry="2" />
<text  x="448.97" y="527.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (21,333,328 samples, 0.66%)</title><rect x="162.8" y="485" width="7.8" height="15.0" fill="rgb(210,83,52)" rx="2" ry="2" />
<text  x="165.81" y="495.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::Count (5,333,332 samples, 0.17%)</title><rect x="766.2" y="501" width="2.0" height="15.0" fill="rgb(239,113,47)" rx="2" ry="2" />
<text  x="769.24" y="511.5" ></text>
</g>
<g >
<title>leveldb::Compaction::ShouldStopBefore (13,333,330 samples, 0.41%)</title><rect x="231.2" y="517" width="4.8" height="15.0" fill="rgb(208,83,7)" rx="2" ry="2" />
<text  x="234.16" y="527.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::CurrentSizeEstimate (1,333,333 samples, 0.04%)</title><rect x="259.0" y="453" width="0.5" height="15.0" fill="rgb(238,112,3)" rx="2" ry="2" />
<text  x="261.99" y="463.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.04%)</title><rect x="74.0" y="309" width="0.4" height="15.0" fill="rgb(234,189,41)" rx="2" ry="2" />
<text  x="76.96" y="319.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::Write (1,333,333 samples, 0.04%)</title><rect x="1137.8" y="741" width="0.4" height="15.0" fill="rgb(245,138,7)" rx="2" ry="2" />
<text  x="1140.76" y="751.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::_Reset::~_Reset (17,333,329 samples, 0.54%)</title><rect x="1038.2" y="533" width="6.3" height="15.0" fill="rgb(226,81,2)" rx="2" ry="2" />
<text  x="1041.17" y="543.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (3,999,999 samples, 0.12%)</title><rect x="389.3" y="373" width="1.5" height="15.0" fill="rgb(209,117,3)" rx="2" ry="2" />
<text  x="392.34" y="383.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*&amp;, std::__future_base::_Result_base::_Deleter, void&gt; (1,333,333 samples, 0.04%)</title><rect x="1172.4" y="741" width="0.5" height="15.0" fill="rgb(245,133,14)" rx="2" ry="2" />
<text  x="1175.42" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (10,666,664 samples, 0.33%)</title><rect x="320.0" y="453" width="3.9" height="15.0" fill="rgb(210,221,25)" rx="2" ry="2" />
<text  x="323.01" y="463.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1,333,333 samples, 0.04%)</title><rect x="128.1" y="405" width="0.5" height="15.0" fill="rgb(224,4,0)" rx="2" ry="2" />
<text  x="131.15" y="415.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Update (1,333,333 samples, 0.04%)</title><rect x="219.4" y="421" width="0.5" height="15.0" fill="rgb(253,34,13)" rx="2" ry="2" />
<text  x="222.44" y="431.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.04%)</title><rect x="356.6" y="421" width="0.5" height="15.0" fill="rgb(209,206,24)" rx="2" ry="2" />
<text  x="359.63" y="431.5" ></text>
</g>
<g >
<title>free_unref_page_prepare.part.68 (1,333,333 samples, 0.04%)</title><rect x="1125.6" y="453" width="0.4" height="15.0" fill="rgb(220,138,53)" rx="2" ry="2" />
<text  x="1128.56" y="463.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (7,999,998 samples, 0.25%)</title><rect x="1099.7" y="517" width="2.9" height="15.0" fill="rgb(244,96,29)" rx="2" ry="2" />
<text  x="1102.68" y="527.5" ></text>
</g>
<g >
<title>generic_perform_write (221,333,278 samples, 6.87%)</title><rect x="827.3" y="309" width="81.0" height="15.0" fill="rgb(217,182,21)" rx="2" ry="2" />
<text  x="830.26" y="319.5" >generic_p..</text>
</g>
<g >
<title>leveldb::EncodeFixed64 (3,999,999 samples, 0.12%)</title><rect x="505.0" y="469" width="1.5" height="15.0" fill="rgb(238,100,1)" rx="2" ry="2" />
<text  x="508.04" y="479.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (2,666,666 samples, 0.08%)</title><rect x="1095.8" y="341" width="1.0" height="15.0" fill="rgb(234,156,25)" rx="2" ry="2" />
<text  x="1098.78" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::get (2,666,666 samples, 0.08%)</title><rect x="1037.2" y="485" width="1.0" height="15.0" fill="rgb(205,212,45)" rx="2" ry="2" />
<text  x="1040.19" y="495.5" ></text>
</g>
<g >
<title>do_page_mkwrite (3,999,999 samples, 0.12%)</title><rect x="1169.0" y="645" width="1.5" height="15.0" fill="rgb(245,100,26)" rx="2" ry="2" />
<text  x="1172.01" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::size (1,333,333 samples, 0.04%)</title><rect x="47.6" y="453" width="0.5" height="15.0" fill="rgb(253,39,5)" rx="2" ry="2" />
<text  x="50.59" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.04%)</title><rect x="397.1" y="389" width="0.5" height="15.0" fill="rgb(238,76,28)" rx="2" ry="2" />
<text  x="400.15" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt;::deque (2,666,666 samples, 0.08%)</title><rect x="1130.9" y="517" width="1.0" height="15.0" fill="rgb(246,41,11)" rx="2" ry="2" />
<text  x="1133.93" y="527.5" ></text>
</g>
<g >
<title>__fdget_pos (14,666,663 samples, 0.46%)</title><rect x="803.3" y="373" width="5.4" height="15.0" fill="rgb(206,24,3)" rx="2" ry="2" />
<text  x="806.34" y="383.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.04%)</title><rect x="69.1" y="341" width="0.5" height="15.0" fill="rgb(213,18,54)" rx="2" ry="2" />
<text  x="72.07" y="351.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (10,666,664 samples, 0.33%)</title><rect x="1087.0" y="453" width="3.9" height="15.0" fill="rgb(210,158,8)" rx="2" ry="2" />
<text  x="1089.99" y="463.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::value (5,333,332 samples, 0.17%)</title><rect x="229.2" y="469" width="2.0" height="15.0" fill="rgb(230,162,54)" rx="2" ry="2" />
<text  x="232.21" y="479.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (3,999,999 samples, 0.12%)</title><rect x="766.7" y="485" width="1.5" height="15.0" fill="rgb(205,68,53)" rx="2" ry="2" />
<text  x="769.72" y="495.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (611,999,847 samples, 18.99%)</title><rect x="520.2" y="453" width="224.1" height="15.0" fill="rgb(216,201,53)" rx="2" ry="2" />
<text  x="523.18" y="463.5" >leveldb::SkipList&lt;char const*..</text>
</g>
<g >
<title>tcmalloc::PageHeap::Delete (1,333,333 samples, 0.04%)</title><rect x="330.8" y="373" width="0.4" height="15.0" fill="rgb(228,125,22)" rx="2" ry="2" />
<text  x="333.75" y="383.5" ></text>
</g>
<g >
<title>__GI__IO_setb (1,333,333 samples, 0.04%)</title><rect x="446.0" y="501" width="0.5" height="15.0" fill="rgb(243,199,35)" rx="2" ry="2" />
<text  x="448.97" y="511.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::value (5,333,332 samples, 0.17%)</title><rect x="229.2" y="485" width="2.0" height="15.0" fill="rgb(249,18,46)" rx="2" ry="2" />
<text  x="232.21" y="495.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (31,999,992 samples, 0.99%)</title><rect x="382.0" y="469" width="11.7" height="15.0" fill="rgb(207,212,38)" rx="2" ry="2" />
<text  x="385.01" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.04%)</title><rect x="1170.5" y="725" width="0.5" height="15.0" fill="rgb(225,92,6)" rx="2" ry="2" />
<text  x="1173.47" y="735.5" ></text>
</g>
<g >
<title>leveldb::log::Writer::EmitPhysicalRecord (485,333,212 samples, 15.06%)</title><rect x="778.0" y="517" width="177.7" height="15.0" fill="rgb(211,184,8)" rx="2" ry="2" />
<text  x="780.95" y="527.5" >leveldb::log::Writer::E..</text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (3,999,999 samples, 0.12%)</title><rect x="282.4" y="277" width="1.5" height="15.0" fill="rgb(217,70,0)" rx="2" ry="2" />
<text  x="285.42" y="287.5" ></text>
</g>
<g >
<title>__GI___lxstat (1,333,333 samples, 0.04%)</title><rect x="1124.1" y="565" width="0.5" height="15.0" fill="rgb(244,23,24)" rx="2" ry="2" />
<text  x="1127.09" y="575.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (3,999,999 samples, 0.12%)</title><rect x="1041.1" y="469" width="1.5" height="15.0" fill="rgb(238,54,47)" rx="2" ry="2" />
<text  x="1044.10" y="479.5" ></text>
</g>
<g >
<title>leveldb::WriteBatch::Iterate (742,666,481 samples, 23.05%)</title><rect x="496.3" y="517" width="271.9" height="15.0" fill="rgb(244,201,52)" rx="2" ry="2" />
<text  x="499.26" y="527.5" >leveldb::WriteBatch::Iterate</text>
</g>
<g >
<title>std::allocator&lt;std::__future_base::_State_baseV2&gt;::~allocator (1,333,333 samples, 0.04%)</title><rect x="1072.3" y="453" width="0.5" height="15.0" fill="rgb(213,156,34)" rx="2" ry="2" />
<text  x="1075.34" y="463.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5,333,332 samples, 0.17%)</title><rect x="497.7" y="469" width="2.0" height="15.0" fill="rgb(211,23,9)" rx="2" ry="2" />
<text  x="500.72" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_S_cget (2,666,666 samples, 0.08%)</title><rect x="168.2" y="421" width="1.0" height="15.0" fill="rgb(221,154,53)" rx="2" ry="2" />
<text  x="171.18" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (2,666,666 samples, 0.08%)</title><rect x="97.9" y="341" width="1.0" height="15.0" fill="rgb(213,159,44)" rx="2" ry="2" />
<text  x="100.88" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::pop_front (2,666,666 samples, 0.08%)</title><rect x="963.5" y="533" width="0.9" height="15.0" fill="rgb(247,189,35)" rx="2" ry="2" />
<text  x="966.47" y="543.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::GrowHeap (1,333,333 samples, 0.04%)</title><rect x="1131.4" y="309" width="0.5" height="15.0" fill="rgb(210,166,28)" rx="2" ry="2" />
<text  x="1134.41" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::allocate (3,999,999 samples, 0.12%)</title><rect x="282.4" y="373" width="1.5" height="15.0" fill="rgb(253,229,32)" rx="2" ry="2" />
<text  x="285.42" y="383.5" ></text>
</g>
<g >
<title>std::operator&amp; (6,666,665 samples, 0.21%)</title><rect x="741.8" y="389" width="2.5" height="15.0" fill="rgb(253,76,26)" rx="2" ry="2" />
<text  x="744.82" y="399.5" ></text>
</g>
<g >
<title>snappy::RawUncompress (6,666,665 samples, 0.21%)</title><rect x="214.1" y="341" width="2.4" height="15.0" fill="rgb(244,6,44)" rx="2" ry="2" />
<text  x="217.07" y="351.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::RemoveFile (2,666,666 samples, 0.08%)</title><rect x="10.0" y="501" width="1.0" height="15.0" fill="rgb(225,142,2)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>__unlink (1,333,333 samples, 0.04%)</title><rect x="438.6" y="501" width="0.5" height="15.0" fill="rgb(224,56,9)" rx="2" ry="2" />
<text  x="441.65" y="511.5" ></text>
</g>
<g >
<title>__find_specmb (1,333,333 samples, 0.04%)</title><rect x="456.7" y="501" width="0.5" height="15.0" fill="rgb(227,79,7)" rx="2" ry="2" />
<text  x="459.71" y="511.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,333,333 samples, 0.04%)</title><rect x="332.7" y="261" width="0.5" height="15.0" fill="rgb(227,160,46)" rx="2" ry="2" />
<text  x="335.71" y="271.5" ></text>
</g>
<g >
<title>smp_call_function_single (3,999,999 samples, 0.12%)</title><rect x="1129.5" y="373" width="1.4" height="15.0" fill="rgb(234,87,47)" rx="2" ry="2" />
<text  x="1132.46" y="383.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::New (1,333,333 samples, 0.04%)</title><rect x="504.6" y="261" width="0.4" height="15.0" fill="rgb(241,216,25)" rx="2" ry="2" />
<text  x="507.56" y="271.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="885.4" y="133" width="0.4" height="15.0" fill="rgb(228,5,9)" rx="2" ry="2" />
<text  x="888.36" y="143.5" ></text>
</g>
<g >
<title>__GI__IO_default_uflow (1,333,333 samples, 0.04%)</title><rect x="1129.0" y="597" width="0.5" height="15.0" fill="rgb(240,148,0)" rx="2" ry="2" />
<text  x="1131.97" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt;::allocate (3,999,999 samples, 0.12%)</title><rect x="282.4" y="357" width="1.5" height="15.0" fill="rgb(234,4,24)" rx="2" ry="2" />
<text  x="285.42" y="367.5" ></text>
</g>
<g >
<title>block_page_mkwrite (3,999,999 samples, 0.12%)</title><rect x="1169.0" y="613" width="1.5" height="15.0" fill="rgb(209,117,36)" rx="2" ry="2" />
<text  x="1172.01" y="623.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (1,333,333 samples, 0.04%)</title><rect x="1144.6" y="725" width="0.5" height="15.0" fill="rgb(210,12,46)" rx="2" ry="2" />
<text  x="1147.60" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (2,666,666 samples, 0.08%)</title><rect x="349.8" y="453" width="1.0" height="15.0" fill="rgb(217,164,39)" rx="2" ry="2" />
<text  x="352.79" y="463.5" ></text>
</g>
<g >
<title>__strstr_sse2_unaligned (1,333,333 samples, 0.04%)</title><rect x="1123.1" y="661" width="0.5" height="15.0" fill="rgb(251,19,47)" rx="2" ry="2" />
<text  x="1126.12" y="671.5" ></text>
</g>
<g >
<title>file_free_rcu (1,333,333 samples, 0.04%)</title><rect x="591.9" y="309" width="0.5" height="15.0" fill="rgb(234,222,13)" rx="2" ry="2" />
<text  x="594.94" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1,333,333 samples, 0.04%)</title><rect x="306.8" y="453" width="0.5" height="15.0" fill="rgb(226,110,49)" rx="2" ry="2" />
<text  x="309.83" y="463.5" ></text>
</g>
<g >
<title>std::future&lt;leveldb::Status&gt;::~future (3,999,999 samples, 0.12%)</title><rect x="1045.5" y="549" width="1.5" height="15.0" fill="rgb(223,38,49)" rx="2" ry="2" />
<text  x="1048.49" y="559.5" ></text>
</g>
<g >
<title>leveldb::DB::Open (2,666,666 samples, 0.08%)</title><rect x="1128.0" y="661" width="1.0" height="15.0" fill="rgb(227,0,13)" rx="2" ry="2" />
<text  x="1131.00" y="671.5" ></text>
</g>
<g >
<title>ext4_filemap_fault (7,999,998 samples, 0.25%)</title><rect x="1166.1" y="629" width="2.9" height="15.0" fill="rgb(211,111,22)" rx="2" ry="2" />
<text  x="1169.08" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, false, true&gt;::_Node_iterator (1,333,333 samples, 0.04%)</title><rect x="83.2" y="389" width="0.5" height="15.0" fill="rgb(232,132,30)" rx="2" ry="2" />
<text  x="86.23" y="399.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::key (1,333,333 samples, 0.04%)</title><rect x="226.8" y="469" width="0.5" height="15.0" fill="rgb(213,174,12)" rx="2" ry="2" />
<text  x="229.76" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_deleter (2,666,666 samples, 0.08%)</title><rect x="1098.7" y="373" width="1.0" height="15.0" fill="rgb(223,71,14)" rx="2" ry="2" />
<text  x="1101.71" y="383.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__future_base::_State_baseV2&gt;::~allocator (1,333,333 samples, 0.04%)</title><rect x="1073.3" y="517" width="0.5" height="15.0" fill="rgb(236,153,54)" rx="2" ry="2" />
<text  x="1076.32" y="527.5" ></text>
</g>
<g >
<title>check_domain_in_region (1,333,333 samples, 0.04%)</title><rect x="1124.1" y="645" width="0.5" height="15.0" fill="rgb(224,119,47)" rx="2" ry="2" />
<text  x="1127.09" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (42,666,656 samples, 1.32%)</title><rect x="1084.1" y="469" width="15.6" height="15.0" fill="rgb(215,19,11)" rx="2" ry="2" />
<text  x="1087.06" y="479.5" ></text>
</g>
<g >
<title>put_cred_rcu (1,333,333 samples, 0.04%)</title><rect x="248.7" y="309" width="0.5" height="15.0" fill="rgb(245,105,3)" rx="2" ry="2" />
<text  x="251.73" y="319.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (3,999,999 samples, 0.12%)</title><rect x="1142.2" y="741" width="1.4" height="15.0" fill="rgb(251,179,46)" rx="2" ry="2" />
<text  x="1145.16" y="751.5" ></text>
</g>
<g >
<title>leveldb::Status::operator= (7,999,998 samples, 0.25%)</title><rect x="490.4" y="533" width="2.9" height="15.0" fill="rgb(240,214,54)" rx="2" ry="2" />
<text  x="493.40" y="543.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::_M_head (2,666,666 samples, 0.08%)</title><rect x="1101.6" y="469" width="1.0" height="15.0" fill="rgb(231,85,14)" rx="2" ry="2" />
<text  x="1104.63" y="479.5" ></text>
</g>
<g >
<title>snappy::internal::WorkingMemory::GetHashTable (2,666,666 samples, 0.08%)</title><rect x="427.9" y="421" width="1.0" height="15.0" fill="rgb(210,202,54)" rx="2" ry="2" />
<text  x="430.91" y="431.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (5,333,332 samples, 0.17%)</title><rect x="98.9" y="341" width="1.9" height="15.0" fill="rgb(249,99,2)" rx="2" ry="2" />
<text  x="101.85" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (1,333,333 samples, 0.04%)</title><rect x="401.1" y="405" width="0.4" height="15.0" fill="rgb(234,145,51)" rx="2" ry="2" />
<text  x="404.06" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_addr (1,333,333 samples, 0.04%)</title><rect x="87.1" y="357" width="0.5" height="15.0" fill="rgb(233,76,8)" rx="2" ry="2" />
<text  x="90.14" y="367.5" ></text>
</g>
<g >
<title>kernfs_iop_getattr (1,333,333 samples, 0.04%)</title><rect x="1124.1" y="437" width="0.5" height="15.0" fill="rgb(229,192,44)" rx="2" ry="2" />
<text  x="1127.09" y="447.5" ></text>
</g>
<g >
<title>[libunwind.so.8.0.1] (1,333,333 samples, 0.04%)</title><rect x="90.6" y="181" width="0.4" height="15.0" fill="rgb(209,163,11)" rx="2" ry="2" />
<text  x="93.55" y="191.5" ></text>
</g>
<g >
<title>__pthread_disable_asynccancel (1,333,333 samples, 0.04%)</title><rect x="794.6" y="437" width="0.4" height="15.0" fill="rgb(245,17,6)" rx="2" ry="2" />
<text  x="797.55" y="447.5" ></text>
</g>
<g >
<title>__libc_start_main (19,999,995 samples, 0.62%)</title><rect x="1124.6" y="725" width="7.3" height="15.0" fill="rgb(230,14,28)" rx="2" ry="2" />
<text  x="1127.58" y="735.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (2,666,666 samples, 0.08%)</title><rect x="328.8" y="453" width="1.0" height="15.0" fill="rgb(225,219,21)" rx="2" ry="2" />
<text  x="331.80" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt;::_M_next (2,666,666 samples, 0.08%)</title><rect x="82.3" y="357" width="0.9" height="15.0" fill="rgb(241,62,1)" rx="2" ry="2" />
<text  x="85.25" y="367.5" ></text>
</g>
<g >
<title>put_cred_rcu (1,333,333 samples, 0.04%)</title><rect x="378.6" y="421" width="0.5" height="15.0" fill="rgb(230,45,36)" rx="2" ry="2" />
<text  x="381.60" y="431.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="995.7" y="293" width="0.5" height="15.0" fill="rgb(219,212,27)" rx="2" ry="2" />
<text  x="998.69" y="303.5" ></text>
</g>
<g >
<title>rebalance_domains (1,333,333 samples, 0.04%)</title><rect x="695.0" y="261" width="0.4" height="15.0" fill="rgb(233,65,12)" rx="2" ry="2" />
<text  x="697.96" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (3,999,999 samples, 0.12%)</title><rect x="380.1" y="453" width="1.4" height="15.0" fill="rgb(247,219,14)" rx="2" ry="2" />
<text  x="383.06" y="463.5" ></text>
</g>
<g >
<title>release_pages (1,333,333 samples, 0.04%)</title><rect x="10.0" y="309" width="0.5" height="15.0" fill="rgb(216,88,19)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1,333,333 samples, 0.04%)</title><rect x="218.5" y="389" width="0.5" height="15.0" fill="rgb(226,92,32)" rx="2" ry="2" />
<text  x="221.47" y="399.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (7,999,998 samples, 0.25%)</title><rect x="1118.2" y="517" width="3.0" height="15.0" fill="rgb(221,144,31)" rx="2" ry="2" />
<text  x="1121.23" y="527.5" ></text>
</g>
<g >
<title>leveldb::MemTable::~MemTable (2,666,666 samples, 0.08%)</title><rect x="328.8" y="485" width="1.0" height="15.0" fill="rgb(241,116,43)" rx="2" ry="2" />
<text  x="331.80" y="495.5" ></text>
</g>
<g >
<title>leveldb::ParseInternalKey (3,999,999 samples, 0.12%)</title><rect x="377.1" y="501" width="1.5" height="15.0" fill="rgb(229,167,16)" rx="2" ry="2" />
<text  x="380.13" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (9,333,331 samples, 0.29%)</title><rect x="346.4" y="469" width="3.4" height="15.0" fill="rgb(211,200,14)" rx="2" ry="2" />
<text  x="349.38" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1,333,333 samples, 0.04%)</title><rect x="319.5" y="453" width="0.5" height="15.0" fill="rgb(234,63,50)" rx="2" ry="2" />
<text  x="322.52" y="463.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (14,666,663 samples, 0.46%)</title><rect x="110.6" y="389" width="5.3" height="15.0" fill="rgb(250,5,43)" rx="2" ry="2" />
<text  x="113.57" y="399.5" ></text>
</g>
<g >
<title>__block_write_begin_int (2,666,666 samples, 0.08%)</title><rect x="1169.5" y="597" width="1.0" height="15.0" fill="rgb(249,208,11)" rx="2" ry="2" />
<text  x="1172.50" y="607.5" ></text>
</g>
<g >
<title>vfs_getattr (1,333,333 samples, 0.04%)</title><rect x="1124.1" y="469" width="0.5" height="15.0" fill="rgb(209,120,40)" rx="2" ry="2" />
<text  x="1127.09" y="479.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1,333,333 samples, 0.04%)</title><rect x="169.2" y="405" width="0.4" height="15.0" fill="rgb(221,72,5)" rx="2" ry="2" />
<text  x="172.16" y="415.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (5,333,332 samples, 0.17%)</title><rect x="831.7" y="245" width="1.9" height="15.0" fill="rgb(253,226,23)" rx="2" ry="2" />
<text  x="834.65" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (1,333,333 samples, 0.04%)</title><rect x="86.2" y="389" width="0.4" height="15.0" fill="rgb(221,73,21)" rx="2" ry="2" />
<text  x="89.16" y="399.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (2,666,666 samples, 0.08%)</title><rect x="23.2" y="421" width="1.0" height="15.0" fill="rgb(233,58,22)" rx="2" ry="2" />
<text  x="26.18" y="431.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="381.0" y="373" width="0.5" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="384.04" y="383.5" ></text>
</g>
<g >
<title>leveldb::port::Snappy_Compress (34,666,658 samples, 1.08%)</title><rect x="115.9" y="437" width="12.7" height="15.0" fill="rgb(246,114,22)" rx="2" ry="2" />
<text  x="118.94" y="447.5" ></text>
</g>
<g >
<title>vfs_write (277,333,264 samples, 8.61%)</title><rect x="811.6" y="373" width="101.6" height="15.0" fill="rgb(248,58,3)" rx="2" ry="2" />
<text  x="814.64" y="383.5" >vfs_write</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_deleter (1,333,333 samples, 0.04%)</title><rect x="1189.5" y="725" width="0.5" height="15.0" fill="rgb(222,69,0)" rx="2" ry="2" />
<text  x="1192.51" y="735.5" ></text>
</g>
<g >
<title>leveldb::Random::Uniform (5,333,332 samples, 0.17%)</title><rect x="1102.6" y="565" width="2.0" height="15.0" fill="rgb(228,202,6)" rx="2" ry="2" />
<text  x="1105.61" y="575.5" ></text>
</g>
<g >
<title>leveldb::MemTable::KeyComparator::operator (458,666,552 samples, 14.23%)</title><rect x="565.6" y="421" width="167.9" height="15.0" fill="rgb(253,82,17)" rx="2" ry="2" />
<text  x="568.58" y="431.5" >leveldb::MemTable::Ke..</text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::__basic_future (11,999,997 samples, 0.37%)</title><rect x="1048.4" y="517" width="4.4" height="15.0" fill="rgb(227,169,10)" rx="2" ry="2" />
<text  x="1051.42" y="527.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="995.7" y="325" width="0.5" height="15.0" fill="rgb(248,228,16)" rx="2" ry="2" />
<text  x="998.69" y="335.5" ></text>
</g>
<g >
<title>ext4_da_invalidatepage (1,333,333 samples, 0.04%)</title><rect x="236.5" y="293" width="0.5" height="15.0" fill="rgb(242,91,24)" rx="2" ry="2" />
<text  x="239.53" y="303.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (7,999,998 samples, 0.25%)</title><rect x="724.2" y="373" width="3.0" height="15.0" fill="rgb(249,65,25)" rx="2" ry="2" />
<text  x="727.25" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (1,333,333 samples, 0.04%)</title><rect x="87.1" y="373" width="0.5" height="15.0" fill="rgb(217,42,43)" rx="2" ry="2" />
<text  x="90.14" y="383.5" ></text>
</g>
<g >
<title>std::fill_n&lt;char*, unsigned long, char&gt; (5,333,332 samples, 0.17%)</title><rect x="331.2" y="389" width="2.0" height="15.0" fill="rgb(230,210,44)" rx="2" ry="2" />
<text  x="334.24" y="399.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::WriteLevel0Table (453,333,220 samples, 14.07%)</title><rect x="11.5" y="517" width="166.0" height="15.0" fill="rgb(209,223,6)" rx="2" ry="2" />
<text  x="14.46" y="527.5" >leveldb::DBImpl::Writ..</text>
</g>
<g >
<title>get_page_from_freelist (2,666,666 samples, 0.08%)</title><rect x="846.3" y="197" width="1.0" height="15.0" fill="rgb(240,45,8)" rx="2" ry="2" />
<text  x="849.30" y="207.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteBlock (63,999,984 samples, 1.99%)</title><rect x="105.2" y="453" width="23.4" height="15.0" fill="rgb(240,161,6)" rx="2" ry="2" />
<text  x="108.20" y="463.5" >l..</text>
</g>
<g >
<title>pmem_unmap (1,333,333 samples, 0.04%)</title><rect x="330.3" y="485" width="0.5" height="15.0" fill="rgb(235,138,25)" rx="2" ry="2" />
<text  x="333.26" y="495.5" ></text>
</g>
<g >
<title>leveldb::PutVarint32 (6,666,665 samples, 0.21%)</title><rect x="1113.8" y="533" width="2.5" height="15.0" fill="rgb(218,108,42)" rx="2" ry="2" />
<text  x="1116.84" y="543.5" ></text>
</g>
<g >
<title>ext4_inode_csum.isra.59 (38,666,657 samples, 1.20%)</title><rect x="871.7" y="181" width="14.1" height="15.0" fill="rgb(217,52,5)" rx="2" ry="2" />
<text  x="874.69" y="191.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;*, unsigned long&gt; (2,666,666 samples, 0.08%)</title><rect x="1130.9" y="565" width="1.0" height="15.0" fill="rgb(232,6,19)" rx="2" ry="2" />
<text  x="1133.93" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (2,666,666 samples, 0.08%)</title><rect x="165.7" y="373" width="1.0" height="15.0" fill="rgb(218,53,39)" rx="2" ry="2" />
<text  x="168.74" y="383.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::key (2,666,666 samples, 0.08%)</title><rect x="14.4" y="485" width="1.0" height="15.0" fill="rgb(236,99,11)" rx="2" ry="2" />
<text  x="17.39" y="495.5" ></text>
</g>
<g >
<title>leveldb::Arena::~Arena (1,333,333 samples, 0.04%)</title><rect x="177.5" y="485" width="0.4" height="15.0" fill="rgb(219,165,51)" rx="2" ry="2" />
<text  x="180.46" y="495.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (5,333,332 samples, 0.17%)</title><rect x="1069.9" y="453" width="2.0" height="15.0" fill="rgb(251,127,43)" rx="2" ry="2" />
<text  x="1072.90" y="463.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::FinishCompactionOutputFile (2,666,666 samples, 0.08%)</title><rect x="330.3" y="517" width="0.9" height="15.0" fill="rgb(241,176,9)" rx="2" ry="2" />
<text  x="333.26" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (14,666,663 samples, 0.46%)</title><rect x="86.6" y="405" width="5.4" height="15.0" fill="rgb(236,60,35)" rx="2" ry="2" />
<text  x="89.65" y="415.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Valid (2,666,666 samples, 0.08%)</title><rect x="13.4" y="469" width="1.0" height="15.0" fill="rgb(207,49,21)" rx="2" ry="2" />
<text  x="16.42" y="479.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="356.6" y="469" width="0.5" height="15.0" fill="rgb(230,118,5)" rx="2" ry="2" />
<text  x="359.63" y="479.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="336.6" y="341" width="0.5" height="15.0" fill="rgb(244,166,35)" rx="2" ry="2" />
<text  x="339.61" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get (1,333,333 samples, 0.04%)</title><rect x="1186.6" y="741" width="0.5" height="15.0" fill="rgb(213,182,22)" rx="2" ry="2" />
<text  x="1189.58" y="751.5" ></text>
</g>
<g >
<title>add_to_page_cache_lru (2,666,666 samples, 0.08%)</title><rect x="847.3" y="245" width="1.0" height="15.0" fill="rgb(253,181,39)" rx="2" ry="2" />
<text  x="850.28" y="255.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseListToSpans (1,333,333 samples, 0.04%)</title><rect x="177.5" y="405" width="0.4" height="15.0" fill="rgb(246,143,1)" rx="2" ry="2" />
<text  x="180.46" y="415.5" ></text>
</g>
<g >
<title>_raw_read_lock (2,666,666 samples, 0.08%)</title><rect x="830.7" y="245" width="1.0" height="15.0" fill="rgb(252,64,34)" rx="2" ry="2" />
<text  x="833.68" y="255.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (3,999,999 samples, 0.12%)</title><rect x="1151.4" y="725" width="1.5" height="15.0" fill="rgb(248,75,54)" rx="2" ry="2" />
<text  x="1154.43" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::__future_base::_State_baseV2&gt;::_M_ptr (1,333,333 samples, 0.04%)</title><rect x="1060.1" y="421" width="0.5" height="15.0" fill="rgb(253,88,4)" rx="2" ry="2" />
<text  x="1063.14" y="431.5" ></text>
</g>
<g >
<title>ext4_get_group_desc (1,333,333 samples, 0.04%)</title><rect x="892.7" y="181" width="0.5" height="15.0" fill="rgb(224,197,18)" rx="2" ry="2" />
<text  x="895.68" y="191.5" ></text>
</g>
<g >
<title>blk_rq_timed_out_timer (1,333,333 samples, 0.04%)</title><rect x="1135.8" y="613" width="0.5" height="15.0" fill="rgb(206,58,15)" rx="2" ry="2" />
<text  x="1138.81" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;leveldb::ParsedInternalKey*, std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt; &gt;::base (1,333,333 samples, 0.04%)</title><rect x="55.9" y="437" width="0.5" height="15.0" fill="rgb(210,17,27)" rx="2" ry="2" />
<text  x="58.89" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (3,999,999 samples, 0.12%)</title><rect x="285.3" y="405" width="1.5" height="15.0" fill="rgb(230,57,11)" rx="2" ry="2" />
<text  x="288.35" y="415.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1,333,333 samples, 0.04%)</title><rect x="390.3" y="325" width="0.5" height="15.0" fill="rgb(206,118,20)" rx="2" ry="2" />
<text  x="393.31" y="335.5" ></text>
</g>
<g >
<title>file_free_rcu (1,333,333 samples, 0.04%)</title><rect x="334.2" y="373" width="0.5" height="15.0" fill="rgb(240,91,16)" rx="2" ry="2" />
<text  x="337.17" y="383.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::RemoveObsoleteFiles (2,666,666 samples, 0.08%)</title><rect x="236.0" y="501" width="1.0" height="15.0" fill="rgb(226,215,29)" rx="2" ry="2" />
<text  x="239.04" y="511.5" ></text>
</g>
<g >
<title>seq_printf (1,333,333 samples, 0.04%)</title><rect x="1129.0" y="405" width="0.5" height="15.0" fill="rgb(205,72,20)" rx="2" ry="2" />
<text  x="1131.97" y="415.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (1,333,333 samples, 0.04%)</title><rect x="847.8" y="213" width="0.5" height="15.0" fill="rgb(209,104,53)" rx="2" ry="2" />
<text  x="850.77" y="223.5" ></text>
</g>
<g >
<title>load_balance (2,666,666 samples, 0.08%)</title><rect x="499.7" y="373" width="0.9" height="15.0" fill="rgb(236,100,34)" rx="2" ry="2" />
<text  x="502.67" y="383.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.04%)</title><rect x="435.2" y="501" width="0.5" height="15.0" fill="rgb(230,178,32)" rx="2" ry="2" />
<text  x="438.23" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (26,666,660 samples, 0.83%)</title><rect x="265.3" y="389" width="9.8" height="15.0" fill="rgb(249,201,3)" rx="2" ry="2" />
<text  x="268.33" y="399.5" ></text>
</g>
<g >
<title>evict (2,666,666 samples, 0.08%)</title><rect x="236.0" y="373" width="1.0" height="15.0" fill="rgb(248,198,2)" rx="2" ry="2" />
<text  x="239.04" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3,999,999 samples, 0.12%)</title><rect x="1129.5" y="565" width="1.4" height="15.0" fill="rgb(254,34,15)" rx="2" ry="2" />
<text  x="1132.46" y="575.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.04%)</title><rect x="90.1" y="277" width="0.5" height="15.0" fill="rgb(253,112,49)" rx="2" ry="2" />
<text  x="93.07" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1,333,333 samples, 0.04%)</title><rect x="303.4" y="437" width="0.5" height="15.0" fill="rgb(239,220,30)" rx="2" ry="2" />
<text  x="306.41" y="447.5" ></text>
</g>
<g >
<title>_ULx86_64_dwarf_search_unwind_table (1,333,333 samples, 0.04%)</title><rect x="1131.4" y="181" width="0.5" height="15.0" fill="rgb(226,33,46)" rx="2" ry="2" />
<text  x="1134.41" y="191.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (11,999,997 samples, 0.37%)</title><rect x="198.0" y="469" width="4.4" height="15.0" fill="rgb(224,158,17)" rx="2" ry="2" />
<text  x="200.96" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (1,333,333 samples, 0.04%)</title><rect x="1021.6" y="341" width="0.5" height="15.0" fill="rgb(236,6,53)" rx="2" ry="2" />
<text  x="1024.57" y="351.5" ></text>
</g>
<g >
<title>evict (2,666,666 samples, 0.08%)</title><rect x="10.0" y="389" width="1.0" height="15.0" fill="rgb(253,43,32)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>__strchrnul_avx2 (1,333,333 samples, 0.04%)</title><rect x="456.7" y="485" width="0.5" height="15.0" fill="rgb(248,23,18)" rx="2" ry="2" />
<text  x="459.71" y="495.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__future_base::_Result_base*, false&gt;::_Head_base (1,333,333 samples, 0.04%)</title><rect x="1066.0" y="325" width="0.5" height="15.0" fill="rgb(205,199,48)" rx="2" ry="2" />
<text  x="1069.00" y="335.5" ></text>
</g>
<g >
<title>ext4_inode_csum_set (41,333,323 samples, 1.28%)</title><rect x="870.7" y="197" width="15.1" height="15.0" fill="rgb(233,15,27)" rx="2" ry="2" />
<text  x="873.71" y="207.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="456.2" y="469" width="0.5" height="15.0" fill="rgb(250,188,20)" rx="2" ry="2" />
<text  x="459.22" y="479.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (3,999,999 samples, 0.12%)</title><rect x="564.1" y="357" width="1.5" height="15.0" fill="rgb(231,143,16)" rx="2" ry="2" />
<text  x="567.12" y="367.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::status (1,333,333 samples, 0.04%)</title><rect x="428.9" y="469" width="0.5" height="15.0" fill="rgb(232,105,48)" rx="2" ry="2" />
<text  x="431.88" y="479.5" ></text>
</g>
<g >
<title>TCMalloc_SystemRelease (1,333,333 samples, 0.04%)</title><rect x="330.8" y="325" width="0.4" height="15.0" fill="rgb(219,22,2)" rx="2" ry="2" />
<text  x="333.75" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (11,999,997 samples, 0.37%)</title><rect x="154.0" y="405" width="4.4" height="15.0" fill="rgb(249,228,20)" rx="2" ry="2" />
<text  x="157.02" y="415.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1,333,333 samples, 0.04%)</title><rect x="400.1" y="389" width="0.5" height="15.0" fill="rgb(254,109,0)" rx="2" ry="2" />
<text  x="403.08" y="399.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; (1,333,333 samples, 0.04%)</title><rect x="284.4" y="373" width="0.5" height="15.0" fill="rgb(240,83,19)" rx="2" ry="2" />
<text  x="287.37" y="383.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (65,333,317 samples, 2.03%)</title><rect x="994.2" y="357" width="24.0" height="15.0" fill="rgb(254,147,15)" rx="2" ry="2" />
<text  x="997.23" y="367.5" >s..</text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (2,666,666 samples, 0.08%)</title><rect x="147.7" y="421" width="1.0" height="15.0" fill="rgb(239,38,32)" rx="2" ry="2" />
<text  x="150.67" y="431.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (5,333,332 samples, 0.17%)</title><rect x="748.2" y="421" width="1.9" height="15.0" fill="rgb(214,83,15)" rx="2" ry="2" />
<text  x="751.17" y="431.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (6,666,665 samples, 0.21%)</title><rect x="315.6" y="373" width="2.5" height="15.0" fill="rgb(231,114,5)" rx="2" ry="2" />
<text  x="318.62" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::push_back (1,333,333 samples, 0.04%)</title><rect x="303.9" y="453" width="0.5" height="15.0" fill="rgb(223,60,16)" rx="2" ry="2" />
<text  x="306.90" y="463.5" ></text>
</g>
<g >
<title>__x64_sys_openat (1,333,333 samples, 0.04%)</title><rect x="1131.9" y="517" width="0.5" height="15.0" fill="rgb(231,205,8)" rx="2" ry="2" />
<text  x="1134.90" y="527.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (1,333,333 samples, 0.04%)</title><rect x="1178.8" y="741" width="0.5" height="15.0" fill="rgb(231,116,49)" rx="2" ry="2" />
<text  x="1181.77" y="751.5" ></text>
</g>
<g >
<title>do_futex (10,666,664 samples, 0.33%)</title><rect x="985.4" y="389" width="3.9" height="15.0" fill="rgb(245,0,4)" rx="2" ry="2" />
<text  x="988.44" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::~vector (1,333,333 samples, 0.04%)</title><rect x="330.8" y="469" width="0.4" height="15.0" fill="rgb(234,210,43)" rx="2" ry="2" />
<text  x="333.75" y="479.5" ></text>
</g>
<g >
<title>do_page_fault (2,666,666 samples, 0.08%)</title><rect x="503.1" y="325" width="1.0" height="15.0" fill="rgb(222,57,54)" rx="2" ry="2" />
<text  x="506.09" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (1,333,333 samples, 0.04%)</title><rect x="163.3" y="421" width="0.5" height="15.0" fill="rgb(225,53,28)" rx="2" ry="2" />
<text  x="166.30" y="431.5" ></text>
</g>
<g >
<title>rcu_gp_kthread_wake (1,333,333 samples, 0.04%)</title><rect x="103.7" y="325" width="0.5" height="15.0" fill="rgb(227,57,1)" rx="2" ry="2" />
<text  x="106.74" y="335.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (2,666,666 samples, 0.08%)</title><rect x="427.9" y="405" width="1.0" height="15.0" fill="rgb(234,214,51)" rx="2" ry="2" />
<text  x="430.91" y="415.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (6,666,665 samples, 0.21%)</title><rect x="296.1" y="373" width="2.4" height="15.0" fill="rgb(230,8,30)" rx="2" ry="2" />
<text  x="299.09" y="383.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1,333,333 samples, 0.04%)</title><rect x="255.1" y="421" width="0.5" height="15.0" fill="rgb(227,36,44)" rx="2" ry="2" />
<text  x="258.08" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.08%)</title><rect x="1018.6" y="309" width="1.0" height="15.0" fill="rgb(223,216,47)" rx="2" ry="2" />
<text  x="1021.64" y="319.5" ></text>
</g>
<g >
<title>leveldb::TableCache::NewIterator (1,333,333 samples, 0.04%)</title><rect x="144.7" y="485" width="0.5" height="15.0" fill="rgb(226,134,28)" rx="2" ry="2" />
<text  x="147.75" y="495.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (11,999,997 samples, 0.37%)</title><rect x="111.5" y="373" width="4.4" height="15.0" fill="rgb(245,56,31)" rx="2" ry="2" />
<text  x="114.55" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.04%)</title><rect x="155.0" y="389" width="0.5" height="15.0" fill="rgb(253,7,28)" rx="2" ry="2" />
<text  x="158.00" y="399.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (1,333,333 samples, 0.04%)</title><rect x="1180.2" y="725" width="0.5" height="15.0" fill="rgb(251,197,25)" rx="2" ry="2" />
<text  x="1183.24" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::get (1,333,333 samples, 0.04%)</title><rect x="1189.0" y="741" width="0.5" height="15.0" fill="rgb(240,104,23)" rx="2" ry="2" />
<text  x="1192.02" y="751.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32 (1,333,333 samples, 0.04%)</title><rect x="1142.2" y="725" width="0.4" height="15.0" fill="rgb(231,70,23)" rx="2" ry="2" />
<text  x="1145.16" y="735.5" ></text>
</g>
<g >
<title>generic_fillattr (1,333,333 samples, 0.04%)</title><rect x="1124.1" y="421" width="0.5" height="15.0" fill="rgb(246,13,13)" rx="2" ry="2" />
<text  x="1127.09" y="431.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, false&gt;::_Head_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,333,333 samples, 0.04%)</title><rect x="284.4" y="341" width="0.5" height="15.0" fill="rgb(240,134,48)" rx="2" ry="2" />
<text  x="287.37" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::_M_realloc_insert&lt;leveldb::ParsedInternalKey const&amp;&gt; (2,666,666 samples, 0.08%)</title><rect x="437.7" y="501" width="0.9" height="15.0" fill="rgb(221,2,32)" rx="2" ry="2" />
<text  x="440.67" y="511.5" ></text>
</g>
<g >
<title>ext4_reserve_inode_write (21,333,328 samples, 0.66%)</title><rect x="886.8" y="213" width="7.8" height="15.0" fill="rgb(224,57,14)" rx="2" ry="2" />
<text  x="889.82" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::_S_do_relocate (2,666,666 samples, 0.08%)</title><rect x="437.7" y="469" width="0.9" height="15.0" fill="rgb(236,11,21)" rx="2" ry="2" />
<text  x="440.67" y="479.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.08%)</title><rect x="1183.2" y="741" width="0.9" height="15.0" fill="rgb(211,93,45)" rx="2" ry="2" />
<text  x="1186.17" y="751.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::key (1,333,333 samples, 0.04%)</title><rect x="1135.3" y="725" width="0.5" height="15.0" fill="rgb(227,149,6)" rx="2" ry="2" />
<text  x="1138.32" y="735.5" ></text>
</g>
<g >
<title>__block_commit_write.isra.33 (13,333,330 samples, 0.41%)</title><rect x="895.6" y="245" width="4.9" height="15.0" fill="rgb(245,115,9)" rx="2" ry="2" />
<text  x="898.61" y="255.5" ></text>
</g>
<g >
<title>walk_page_range (1,333,333 samples, 0.04%)</title><rect x="144.3" y="181" width="0.4" height="15.0" fill="rgb(248,69,48)" rx="2" ry="2" />
<text  x="147.26" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (6,666,665 samples, 0.21%)</title><rect x="94.5" y="389" width="2.4" height="15.0" fill="rgb(233,69,40)" rx="2" ry="2" />
<text  x="97.46" y="399.5" ></text>
</g>
<g >
<title>_dl_start_final (3,999,999 samples, 0.12%)</title><rect x="1131.9" y="709" width="1.5" height="15.0" fill="rgb(242,187,24)" rx="2" ry="2" />
<text  x="1134.90" y="719.5" ></text>
</g>
<g >
<title>aperfmperf_snapshot_cpu (3,999,999 samples, 0.12%)</title><rect x="1129.5" y="389" width="1.4" height="15.0" fill="rgb(241,194,53)" rx="2" ry="2" />
<text  x="1132.46" y="399.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_State_baseV2 (2,666,666 samples, 0.08%)</title><rect x="1175.8" y="741" width="1.0" height="15.0" fill="rgb(250,6,4)" rx="2" ry="2" />
<text  x="1178.84" y="751.5" ></text>
</g>
<g >
<title>std::make_shared&lt;std::__future_base::_State_baseV2&gt; (51,999,987 samples, 1.61%)</title><rect x="1054.8" y="533" width="19.0" height="15.0" fill="rgb(211,67,49)" rx="2" ry="2" />
<text  x="1057.77" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get_deleter (1,333,333 samples, 0.04%)</title><rect x="1187.1" y="741" width="0.5" height="15.0" fill="rgb(227,46,35)" rx="2" ry="2" />
<text  x="1190.07" y="751.5" ></text>
</g>
<g >
<title>try_charge (1,333,333 samples, 0.04%)</title><rect x="131.1" y="277" width="0.5" height="15.0" fill="rgb(238,105,12)" rx="2" ry="2" />
<text  x="134.08" y="287.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::_M_get_result (18,666,662 samples, 0.58%)</title><rect x="1031.3" y="533" width="6.9" height="15.0" fill="rgb(237,174,15)" rx="2" ry="2" />
<text  x="1034.33" y="543.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.04%)</title><rect x="131.1" y="325" width="0.5" height="15.0" fill="rgb(242,27,29)" rx="2" ry="2" />
<text  x="134.08" y="335.5" ></text>
</g>
<g >
<title>operator new[] (2,666,666 samples, 0.08%)</title><rect x="333.7" y="469" width="1.0" height="15.0" fill="rgb(213,170,5)" rx="2" ry="2" />
<text  x="336.68" y="479.5" ></text>
</g>
<g >
<title>__gthread_once (141,333,298 samples, 4.39%)</title><rect x="971.3" y="485" width="51.7" height="15.0" fill="rgb(241,169,3)" rx="2" ry="2" />
<text  x="974.28" y="495.5" >__gth..</text>
</g>
<g >
<title>std::condition_variable::condition_variable (1,333,333 samples, 0.04%)</title><rect x="485.0" y="501" width="0.5" height="15.0" fill="rgb(230,27,31)" rx="2" ry="2" />
<text  x="488.03" y="511.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ReleaseToCentralCache (1,333,333 samples, 0.04%)</title><rect x="177.5" y="437" width="0.4" height="15.0" fill="rgb(228,182,39)" rx="2" ry="2" />
<text  x="180.46" y="447.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (3,999,999 samples, 0.12%)</title><rect x="1067.0" y="437" width="1.4" height="15.0" fill="rgb(251,97,20)" rx="2" ry="2" />
<text  x="1069.97" y="447.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.04%)</title><rect x="519.2" y="389" width="0.5" height="15.0" fill="rgb(220,203,53)" rx="2" ry="2" />
<text  x="522.20" y="399.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (1,333,333 samples, 0.04%)</title><rect x="395.2" y="469" width="0.5" height="15.0" fill="rgb(248,22,47)" rx="2" ry="2" />
<text  x="398.20" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,333,333 samples, 0.04%)</title><rect x="336.6" y="437" width="0.5" height="15.0" fill="rgb(232,6,3)" rx="2" ry="2" />
<text  x="339.61" y="447.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (2,666,666 samples, 0.08%)</title><rect x="281.0" y="373" width="0.9" height="15.0" fill="rgb(215,78,22)" rx="2" ry="2" />
<text  x="283.96" y="383.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (15,999,996 samples, 0.50%)</title><rect x="1038.7" y="517" width="5.8" height="15.0" fill="rgb(232,168,34)" rx="2" ry="2" />
<text  x="1041.66" y="527.5" ></text>
</g>
<g >
<title>std::move&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt;&amp;&gt; (2,666,666 samples, 0.08%)</title><rect x="1029.9" y="501" width="0.9" height="15.0" fill="rgb(225,141,13)" rx="2" ry="2" />
<text  x="1032.87" y="511.5" ></text>
</g>
<g >
<title>file_free_rcu (1,333,333 samples, 0.04%)</title><rect x="218.0" y="277" width="0.5" height="15.0" fill="rgb(234,14,4)" rx="2" ry="2" />
<text  x="220.98" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::release (9,333,331 samples, 0.29%)</title><rect x="1014.7" y="309" width="3.5" height="15.0" fill="rgb(212,176,47)" rx="2" ry="2" />
<text  x="1017.73" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::push_back (1,333,333 samples, 0.04%)</title><rect x="1137.3" y="725" width="0.5" height="15.0" fill="rgb(239,111,41)" rx="2" ry="2" />
<text  x="1140.27" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::push_back (5,333,332 samples, 0.17%)</title><rect x="436.7" y="517" width="1.9" height="15.0" fill="rgb(238,82,25)" rx="2" ry="2" />
<text  x="439.69" y="527.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (1,333,333 samples, 0.04%)</title><rect x="1189.0" y="725" width="0.5" height="15.0" fill="rgb(219,56,31)" rx="2" ry="2" />
<text  x="1192.02" y="735.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseToSpans (1,333,333 samples, 0.04%)</title><rect x="177.5" y="389" width="0.4" height="15.0" fill="rgb(215,140,48)" rx="2" ry="2" />
<text  x="180.46" y="399.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::SingletonEnv&lt;leveldb::(anonymous namespace)::PosixEnv&gt;::SingletonEnv (2,666,666 samples, 0.08%)</title><rect x="1130.9" y="661" width="1.0" height="15.0" fill="rgb(232,136,17)" rx="2" ry="2" />
<text  x="1133.93" y="671.5" ></text>
</g>
<g >
<title>ext4_da_invalidatepage (1,333,333 samples, 0.04%)</title><rect x="438.6" y="325" width="0.5" height="15.0" fill="rgb(220,189,22)" rx="2" ry="2" />
<text  x="441.65" y="335.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (45,333,322 samples, 1.41%)</title><rect x="145.2" y="501" width="16.6" height="15.0" fill="rgb(241,205,48)" rx="2" ry="2" />
<text  x="148.23" y="511.5" ></text>
</g>
<g >
<title>__do_page_fault (2,666,666 samples, 0.08%)</title><rect x="503.1" y="309" width="1.0" height="15.0" fill="rgb(207,84,53)" rx="2" ry="2" />
<text  x="506.09" y="319.5" ></text>
</g>
<g >
<title>file_free_rcu (1,333,333 samples, 0.04%)</title><rect x="995.7" y="261" width="0.5" height="15.0" fill="rgb(223,51,17)" rx="2" ry="2" />
<text  x="998.69" y="271.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (103,999,974 samples, 3.23%)</title><rect x="695.4" y="389" width="38.1" height="15.0" fill="rgb(206,71,15)" rx="2" ry="2" />
<text  x="698.44" y="399.5" >lev..</text>
</g>
<g >
<title>jbd2__journal_start (3,999,999 samples, 0.12%)</title><rect x="822.9" y="229" width="1.4" height="15.0" fill="rgb(222,113,52)" rx="2" ry="2" />
<text  x="825.87" y="239.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_deleter (1,333,333 samples, 0.04%)</title><rect x="1014.2" y="293" width="0.5" height="15.0" fill="rgb(253,128,29)" rx="2" ry="2" />
<text  x="1017.24" y="303.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Flush (217,333,279 samples, 6.74%)</title><rect x="53.5" y="469" width="79.5" height="15.0" fill="rgb(219,141,42)" rx="2" ry="2" />
<text  x="56.45" y="479.5" >leveldb::..</text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_S_check&lt;std::__future_base::_State_baseV2&gt; (2,666,666 samples, 0.08%)</title><rect x="1049.4" y="501" width="1.0" height="15.0" fill="rgb(221,205,44)" rx="2" ry="2" />
<text  x="1052.40" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.04%)</title><rect x="352.7" y="469" width="0.5" height="15.0" fill="rgb(235,153,2)" rx="2" ry="2" />
<text  x="355.72" y="479.5" ></text>
</g>
<g >
<title>ext4_da_write_end (1,333,333 samples, 0.04%)</title><rect x="819.4" y="309" width="0.5" height="15.0" fill="rgb(248,121,40)" rx="2" ry="2" />
<text  x="822.45" y="319.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (7,999,998 samples, 0.25%)</title><rect x="357.1" y="485" width="2.9" height="15.0" fill="rgb(214,184,23)" rx="2" ry="2" />
<text  x="360.12" y="495.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::key (5,333,332 samples, 0.17%)</title><rect x="325.4" y="485" width="1.9" height="15.0" fill="rgb(208,178,4)" rx="2" ry="2" />
<text  x="328.38" y="495.5" ></text>
</g>
<g >
<title>leveldb::Table::BlockReader (11,999,997 samples, 0.37%)</title><rect x="206.7" y="437" width="4.4" height="15.0" fill="rgb(221,13,5)" rx="2" ry="2" />
<text  x="209.75" y="447.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char*, std::allocator&lt;char*&gt; &gt;::_M_allocate (1,333,333 samples, 0.04%)</title><rect x="504.6" y="389" width="0.4" height="15.0" fill="rgb(218,222,1)" rx="2" ry="2" />
<text  x="507.56" y="399.5" ></text>
</g>
<g >
<title>apparmor_file_permission (1,333,333 samples, 0.04%)</title><rect x="912.2" y="325" width="0.5" height="15.0" fill="rgb(254,96,47)" rx="2" ry="2" />
<text  x="915.21" y="335.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="334.2" y="453" width="0.5" height="15.0" fill="rgb(229,216,14)" rx="2" ry="2" />
<text  x="337.17" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (5,333,332 samples, 0.17%)</title><rect x="75.4" y="373" width="2.0" height="15.0" fill="rgb(205,1,38)" rx="2" ry="2" />
<text  x="78.42" y="383.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.04%)</title><rect x="222.9" y="421" width="0.4" height="15.0" fill="rgb(251,161,12)" rx="2" ry="2" />
<text  x="225.86" y="431.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (1,333,333 samples, 0.04%)</title><rect x="93.5" y="389" width="0.5" height="15.0" fill="rgb(238,33,29)" rx="2" ry="2" />
<text  x="96.48" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add (1,333,333 samples, 0.04%)</title><rect x="1042.1" y="437" width="0.5" height="15.0" fill="rgb(228,126,44)" rx="2" ry="2" />
<text  x="1045.07" y="447.5" ></text>
</g>
<g >
<title>try_to_release_page (1,333,333 samples, 0.04%)</title><rect x="1127.5" y="437" width="0.5" height="15.0" fill="rgb(221,42,27)" rx="2" ry="2" />
<text  x="1130.51" y="447.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (27,999,993 samples, 0.87%)</title><rect x="105.7" y="405" width="10.2" height="15.0" fill="rgb(236,32,24)" rx="2" ry="2" />
<text  x="108.69" y="415.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (3,999,999 samples, 0.12%)</title><rect x="564.1" y="421" width="1.5" height="15.0" fill="rgb(208,54,38)" rx="2" ry="2" />
<text  x="567.12" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (7,999,998 samples, 0.25%)</title><rect x="346.9" y="453" width="2.9" height="15.0" fill="rgb(206,137,40)" rx="2" ry="2" />
<text  x="349.86" y="463.5" ></text>
</g>
<g >
<title>leveldb::MemTable::KeyComparator::operator (1,333,333 samples, 0.04%)</title><rect x="1150.5" y="725" width="0.4" height="15.0" fill="rgb(208,148,36)" rx="2" ry="2" />
<text  x="1153.46" y="735.5" ></text>
</g>
<g >
<title>rcu_report_qs_rnp (1,333,333 samples, 0.04%)</title><rect x="103.7" y="341" width="0.5" height="15.0" fill="rgb(214,174,1)" rx="2" ry="2" />
<text  x="106.74" y="351.5" ></text>
</g>
<g >
<title>leveldb::port::CondVar::CondVar (1,333,333 samples, 0.04%)</title><rect x="485.0" y="517" width="0.5" height="15.0" fill="rgb(206,92,19)" rx="2" ry="2" />
<text  x="488.03" y="527.5" ></text>
</g>
<g >
<title>ext4_ext_put_gap_in_cache (1,333,333 samples, 0.04%)</title><rect x="843.4" y="229" width="0.5" height="15.0" fill="rgb(250,175,4)" rx="2" ry="2" />
<text  x="846.37" y="239.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,333,333 samples, 0.04%)</title><rect x="278.0" y="229" width="0.5" height="15.0" fill="rgb(219,163,46)" rx="2" ry="2" />
<text  x="281.03" y="239.5" ></text>
</g>
<g >
<title>pagevec_lookup_entries (1,333,333 samples, 0.04%)</title><rect x="10.5" y="325" width="0.5" height="15.0" fill="rgb(227,90,21)" rx="2" ry="2" />
<text  x="13.49" y="335.5" ></text>
</g>
<g >
<title>leveldb::DestroyDB (9,333,331 samples, 0.29%)</title><rect x="1124.6" y="677" width="3.4" height="15.0" fill="rgb(212,10,11)" rx="2" ry="2" />
<text  x="1127.58" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;leveldb::ParsedInternalKey*, std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt; &gt; (1,333,333 samples, 0.04%)</title><rect x="263.4" y="437" width="0.5" height="15.0" fill="rgb(220,212,8)" rx="2" ry="2" />
<text  x="266.38" y="447.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::RandomGenerator::Generate (1,333,333 samples, 0.04%)</title><rect x="460.6" y="565" width="0.5" height="15.0" fill="rgb(240,3,51)" rx="2" ry="2" />
<text  x="463.62" y="575.5" ></text>
</g>
<g >
<title>ext4_writepages (1,333,333 samples, 0.04%)</title><rect x="1128.5" y="389" width="0.5" height="15.0" fill="rgb(226,148,19)" rx="2" ry="2" />
<text  x="1131.49" y="399.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (25,333,327 samples, 0.79%)</title><rect x="1057.2" y="453" width="9.3" height="15.0" fill="rgb(218,224,23)" rx="2" ry="2" />
<text  x="1060.21" y="463.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BGWork (1,171,999,707 samples, 36.37%)</title><rect x="10.0" y="581" width="429.1" height="15.0" fill="rgb(234,36,12)" rx="2" ry="2" />
<text  x="13.00" y="591.5" >leveldb::DBImpl::BGWork</text>
</g>
<g >
<title>do_syscall_64 (315,999,921 samples, 9.81%)</title><rect x="798.0" y="421" width="115.7" height="15.0" fill="rgb(215,190,49)" rx="2" ry="2" />
<text  x="800.97" y="431.5" >do_syscall_64</text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.08%)</title><rect x="1075.8" y="485" width="0.9" height="15.0" fill="rgb(223,59,0)" rx="2" ry="2" />
<text  x="1078.76" y="495.5" ></text>
</g>
<g >
<title>dl_main (3,999,999 samples, 0.12%)</title><rect x="1131.9" y="677" width="1.5" height="15.0" fill="rgb(237,21,3)" rx="2" ry="2" />
<text  x="1134.90" y="687.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,333,333 samples, 0.04%)</title><rect x="399.1" y="373" width="0.5" height="15.0" fill="rgb(213,82,38)" rx="2" ry="2" />
<text  x="402.10" y="383.5" ></text>
</g>
<g >
<title>leveldb::PutVarint32 (6,666,665 samples, 0.21%)</title><rect x="25.6" y="453" width="2.5" height="15.0" fill="rgb(231,16,12)" rx="2" ry="2" />
<text  x="28.62" y="463.5" ></text>
</g>
<g >
<title>leveldb::Status::ok (1,333,333 samples, 0.04%)</title><rect x="105.2" y="421" width="0.5" height="15.0" fill="rgb(234,139,8)" rx="2" ry="2" />
<text  x="108.20" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::begin (3,999,999 samples, 0.12%)</title><rect x="477.7" y="501" width="1.5" height="15.0" fill="rgb(223,107,12)" rx="2" ry="2" />
<text  x="480.70" y="511.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;leveldb::ParsedInternalKey*, leveldb::ParsedInternalKey*, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt; (2,666,666 samples, 0.08%)</title><rect x="437.7" y="453" width="0.9" height="15.0" fill="rgb(251,26,25)" rx="2" ry="2" />
<text  x="440.67" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator[]@plt (1,333,333 samples, 0.04%)</title><rect x="465.0" y="517" width="0.5" height="15.0" fill="rgb(249,21,47)" rx="2" ry="2" />
<text  x="468.01" y="527.5" ></text>
</g>
<g >
<title>__do_softirq (2,666,666 samples, 0.08%)</title><rect x="627.6" y="325" width="1.0" height="15.0" fill="rgb(222,24,29)" rx="2" ry="2" />
<text  x="630.58" y="335.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="409.4" y="389" width="0.4" height="15.0" fill="rgb(231,204,9)" rx="2" ry="2" />
<text  x="412.35" y="399.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.04%)</title><rect x="262.9" y="453" width="0.5" height="15.0" fill="rgb(234,126,27)" rx="2" ry="2" />
<text  x="265.89" y="463.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (1,333,333 samples, 0.04%)</title><rect x="1025.0" y="485" width="0.5" height="15.0" fill="rgb(245,173,4)" rx="2" ry="2" />
<text  x="1027.99" y="495.5" ></text>
</g>
<g >
<title>tcp_delack_timer (1,333,333 samples, 0.04%)</title><rect x="885.4" y="37" width="0.4" height="15.0" fill="rgb(249,220,9)" rx="2" ry="2" />
<text  x="888.36" y="47.5" ></text>
</g>
<g >
<title>generic_write_end (1,333,333 samples, 0.04%)</title><rect x="902.0" y="293" width="0.4" height="15.0" fill="rgb(217,157,37)" rx="2" ry="2" />
<text  x="904.96" y="303.5" ></text>
</g>
<g >
<title>__x64_sys_unlink (2,666,666 samples, 0.08%)</title><rect x="236.0" y="421" width="1.0" height="15.0" fill="rgb(205,23,2)" rx="2" ry="2" />
<text  x="239.04" y="431.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.04%)</title><rect x="248.7" y="325" width="0.5" height="15.0" fill="rgb(237,137,22)" rx="2" ry="2" />
<text  x="251.73" y="335.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="1130.9" y="405" width="0.5" height="15.0" fill="rgb(205,138,49)" rx="2" ry="2" />
<text  x="1133.93" y="415.5" ></text>
</g>
<g >
<title>leveldb::Status::OK (1,333,333 samples, 0.04%)</title><rect x="784.3" y="485" width="0.5" height="15.0" fill="rgb(205,97,38)" rx="2" ry="2" />
<text  x="787.30" y="495.5" ></text>
</g>
<g >
<title>[libunwind.so.8.0.1] (1,333,333 samples, 0.04%)</title><rect x="1131.4" y="165" width="0.5" height="15.0" fill="rgb(209,201,17)" rx="2" ry="2" />
<text  x="1134.41" y="175.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_set_retrieved_flag (1,333,333 samples, 0.04%)</title><rect x="1048.9" y="501" width="0.5" height="15.0" fill="rgb(254,89,18)" rx="2" ry="2" />
<text  x="1051.91" y="511.5" ></text>
</g>
<g >
<title>get_page_from_freelist (2,666,666 samples, 0.08%)</title><rect x="141.8" y="197" width="1.0" height="15.0" fill="rgb(226,63,49)" rx="2" ry="2" />
<text  x="144.82" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (1,333,333 samples, 0.04%)</title><rect x="1174.9" y="741" width="0.5" height="15.0" fill="rgb(248,158,14)" rx="2" ry="2" />
<text  x="1177.87" y="751.5" ></text>
</g>
<g >
<title>std::min&lt;unsigned long&gt; (1,333,333 samples, 0.04%)</title><rect x="372.7" y="485" width="0.5" height="15.0" fill="rgb(239,194,39)" rx="2" ry="2" />
<text  x="375.74" y="495.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (2,666,666 samples, 0.08%)</title><rect x="351.7" y="437" width="1.0" height="15.0" fill="rgb(249,123,9)" rx="2" ry="2" />
<text  x="354.75" y="447.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="1135.8" y="661" width="0.5" height="15.0" fill="rgb(220,11,17)" rx="2" ry="2" />
<text  x="1138.81" y="671.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;*, unsigned long, std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt; &gt; (2,666,666 samples, 0.08%)</title><rect x="1130.9" y="597" width="1.0" height="15.0" fill="rgb(216,62,32)" rx="2" ry="2" />
<text  x="1133.93" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (3,999,999 samples, 0.12%)</title><rect x="429.9" y="485" width="1.4" height="15.0" fill="rgb(219,125,16)" rx="2" ry="2" />
<text  x="432.86" y="495.5" ></text>
</g>
<g >
<title>rcu_cblist_dequeue (1,333,333 samples, 0.04%)</title><rect x="356.6" y="405" width="0.5" height="15.0" fill="rgb(252,63,31)" rx="2" ry="2" />
<text  x="359.63" y="415.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Finish (1,333,333 samples, 0.04%)</title><rect x="135.0" y="485" width="0.5" height="15.0" fill="rgb(209,80,18)" rx="2" ry="2" />
<text  x="137.98" y="495.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.04%)</title><rect x="466.0" y="469" width="0.5" height="15.0" fill="rgb(254,172,14)" rx="2" ry="2" />
<text  x="468.99" y="479.5" ></text>
</g>
<g >
<title>leveldb::Slice::operator[] (1,333,333 samples, 0.04%)</title><rect x="1136.3" y="725" width="0.5" height="15.0" fill="rgb(225,88,43)" rx="2" ry="2" />
<text  x="1139.30" y="735.5" ></text>
</g>
<g >
<title>__do_fault (7,999,998 samples, 0.25%)</title><rect x="1166.1" y="645" width="2.9" height="15.0" fill="rgb(247,20,40)" rx="2" ry="2" />
<text  x="1169.08" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (2,666,666 samples, 0.08%)</title><rect x="287.8" y="357" width="1.0" height="15.0" fill="rgb(220,223,48)" rx="2" ry="2" />
<text  x="290.79" y="367.5" ></text>
</g>
<g >
<title>__ext4_handle_dirty_metadata (1,333,333 samples, 0.04%)</title><rect x="870.2" y="197" width="0.5" height="15.0" fill="rgb(248,72,46)" rx="2" ry="2" />
<text  x="873.22" y="207.5" ></text>
</g>
<g >
<title>leveldb::PutVarint32 (3,999,999 samples, 0.12%)</title><rect x="249.2" y="437" width="1.5" height="15.0" fill="rgb(237,163,52)" rx="2" ry="2" />
<text  x="252.22" y="447.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, false&gt;::_Head_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,333,333 samples, 0.04%)</title><rect x="92.0" y="357" width="0.5" height="15.0" fill="rgb(253,106,23)" rx="2" ry="2" />
<text  x="95.02" y="367.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="334.2" y="405" width="0.5" height="15.0" fill="rgb(209,176,48)" rx="2" ry="2" />
<text  x="337.17" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.04%)</title><rect x="86.2" y="405" width="0.4" height="15.0" fill="rgb(254,0,9)" rx="2" ry="2" />
<text  x="89.16" y="415.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (1,333,333 samples, 0.04%)</title><rect x="819.0" y="309" width="0.4" height="15.0" fill="rgb(250,25,37)" rx="2" ry="2" />
<text  x="821.96" y="319.5" ></text>
</g>
<g >
<title>create_page_buffers (2,666,666 samples, 0.08%)</title><rect x="1169.5" y="581" width="1.0" height="15.0" fill="rgb(245,166,43)" rx="2" ry="2" />
<text  x="1172.50" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt;::_Deque_iterator (1,333,333 samples, 0.04%)</title><rect x="1180.7" y="725" width="0.5" height="15.0" fill="rgb(226,119,18)" rx="2" ry="2" />
<text  x="1183.72" y="735.5" ></text>
</g>
<g >
<title>up_read (1,333,333 samples, 0.04%)</title><rect x="286.3" y="261" width="0.5" height="15.0" fill="rgb(248,77,48)" rx="2" ry="2" />
<text  x="289.33" y="271.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (1,333,333 samples, 0.04%)</title><rect x="259.5" y="437" width="0.5" height="15.0" fill="rgb(243,225,6)" rx="2" ry="2" />
<text  x="262.47" y="447.5" ></text>
</g>
<g >
<title>leveldb::ParseInternalKey (3,999,999 samples, 0.12%)</title><rect x="176.0" y="501" width="1.5" height="15.0" fill="rgb(205,123,2)" rx="2" ry="2" />
<text  x="178.99" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1,333,333 samples, 0.04%)</title><rect x="429.4" y="485" width="0.5" height="15.0" fill="rgb(228,49,49)" rx="2" ry="2" />
<text  x="432.37" y="495.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseToSpans (2,666,666 samples, 0.08%)</title><rect x="328.8" y="373" width="1.0" height="15.0" fill="rgb(232,60,25)" rx="2" ry="2" />
<text  x="331.80" y="383.5" ></text>
</g>
<g >
<title>add_to_page_cache_lru (1,333,333 samples, 0.04%)</title><rect x="1166.1" y="533" width="0.5" height="15.0" fill="rgb(207,216,8)" rx="2" ry="2" />
<text  x="1169.08" y="543.5" ></text>
</g>
<g >
<title>ext4_releasepage (1,333,333 samples, 0.04%)</title><rect x="438.6" y="261" width="0.5" height="15.0" fill="rgb(244,183,12)" rx="2" ry="2" />
<text  x="441.65" y="271.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Next (9,333,331 samples, 0.29%)</title><rect x="216.5" y="437" width="3.4" height="15.0" fill="rgb(223,111,15)" rx="2" ry="2" />
<text  x="219.51" y="447.5" ></text>
</g>
<g >
<title>page_fault (2,666,666 samples, 0.08%)</title><rect x="282.9" y="261" width="1.0" height="15.0" fill="rgb(230,12,3)" rx="2" ry="2" />
<text  x="285.91" y="271.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, 0ul&gt; (1,333,333 samples, 0.04%)</title><rect x="91.0" y="341" width="0.5" height="15.0" fill="rgb(228,125,43)" rx="2" ry="2" />
<text  x="94.04" y="351.5" ></text>
</g>
<g >
<title>security_file_permission (2,666,666 samples, 0.08%)</title><rect x="912.2" y="341" width="1.0" height="15.0" fill="rgb(215,20,27)" rx="2" ry="2" />
<text  x="915.21" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (9,333,331 samples, 0.29%)</title><rect x="1124.6" y="613" width="3.4" height="15.0" fill="rgb(208,174,47)" rx="2" ry="2" />
<text  x="1127.58" y="623.5" ></text>
</g>
<g >
<title>file_remove_privs (1,333,333 samples, 0.04%)</title><rect x="819.9" y="309" width="0.5" height="15.0" fill="rgb(212,154,26)" rx="2" ry="2" />
<text  x="822.94" y="319.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2,666,666 samples, 0.08%)</title><rect x="99.8" y="293" width="1.0" height="15.0" fill="rgb(216,189,1)" rx="2" ry="2" />
<text  x="102.83" y="303.5" ></text>
</g>
<g >
<title>jbd2_journal_stop (17,333,329 samples, 0.54%)</title><rect x="852.2" y="261" width="6.3" height="15.0" fill="rgb(252,65,30)" rx="2" ry="2" />
<text  x="855.16" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string@plt (1,333,333 samples, 0.04%)</title><rect x="132.1" y="453" width="0.4" height="15.0" fill="rgb(251,108,25)" rx="2" ry="2" />
<text  x="135.05" y="463.5" ></text>
</g>
<g >
<title>__GI___clone (3,037,332,574 samples, 94.25%)</title><rect x="10.0" y="741" width="1112.1" height="15.0" fill="rgb(223,46,7)" rx="2" ry="2" />
<text  x="13.00" y="751.5" >__GI___clone</text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (2,666,666 samples, 0.08%)</title><rect x="90.1" y="309" width="0.9" height="15.0" fill="rgb(232,101,29)" rx="2" ry="2" />
<text  x="93.07" y="319.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (3,999,999 samples, 0.12%)</title><rect x="99.3" y="325" width="1.5" height="15.0" fill="rgb(219,55,20)" rx="2" ry="2" />
<text  x="102.34" y="335.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (10,666,664 samples, 0.33%)</title><rect x="36.4" y="437" width="3.9" height="15.0" fill="rgb(252,80,41)" rx="2" ry="2" />
<text  x="39.36" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (2,666,666 samples, 0.08%)</title><rect x="1096.8" y="389" width="0.9" height="15.0" fill="rgb(252,186,31)" rx="2" ry="2" />
<text  x="1099.75" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (25,333,327 samples, 0.79%)</title><rect x="94.0" y="421" width="9.2" height="15.0" fill="rgb(207,14,20)" rx="2" ry="2" />
<text  x="96.97" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1,333,333 samples, 0.04%)</title><rect x="57.8" y="421" width="0.5" height="15.0" fill="rgb(215,64,39)" rx="2" ry="2" />
<text  x="60.84" y="431.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (2,666,666 samples, 0.08%)</title><rect x="401.5" y="469" width="1.0" height="15.0" fill="rgb(253,141,3)" rx="2" ry="2" />
<text  x="404.54" y="479.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::InsertInto (755,999,811 samples, 23.46%)</title><rect x="495.3" y="533" width="276.8" height="15.0" fill="rgb(210,19,5)" rx="2" ry="2" />
<text  x="498.28" y="543.5" >leveldb::WriteBatchInternal::InsertInto</text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (3,999,999 samples, 0.12%)</title><rect x="89.6" y="325" width="1.4" height="15.0" fill="rgb(229,25,47)" rx="2" ry="2" />
<text  x="92.58" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get (2,666,666 samples, 0.08%)</title><rect x="1017.2" y="293" width="1.0" height="15.0" fill="rgb(205,53,46)" rx="2" ry="2" />
<text  x="1020.17" y="303.5" ></text>
</g>
<g >
<title>leveldb::Random::OneIn (5,333,332 samples, 0.17%)</title><rect x="754.0" y="437" width="2.0" height="15.0" fill="rgb(210,104,28)" rx="2" ry="2" />
<text  x="757.03" y="447.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (2,666,666 samples, 0.08%)</title><rect x="494.3" y="517" width="1.0" height="15.0" fill="rgb(222,212,49)" rx="2" ry="2" />
<text  x="497.30" y="527.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.04%)</title><rect x="332.7" y="277" width="0.5" height="15.0" fill="rgb(212,49,11)" rx="2" ry="2" />
<text  x="335.71" y="287.5" ></text>
</g>
<g >
<title>alloc_buffer_head (2,666,666 samples, 0.08%)</title><rect x="1169.5" y="533" width="1.0" height="15.0" fill="rgb(214,190,51)" rx="2" ry="2" />
<text  x="1172.50" y="543.5" ></text>
</g>
<g >
<title>rebalance_domains (1,333,333 samples, 0.04%)</title><rect x="1094.3" y="293" width="0.5" height="15.0" fill="rgb(217,213,20)" rx="2" ry="2" />
<text  x="1097.31" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (6,666,665 samples, 0.21%)</title><rect x="281.9" y="389" width="2.5" height="15.0" fill="rgb(235,86,44)" rx="2" ry="2" />
<text  x="284.93" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_allocate_buckets (1,333,333 samples, 0.04%)</title><rect x="278.0" y="325" width="0.5" height="15.0" fill="rgb(254,77,3)" rx="2" ry="2" />
<text  x="281.03" y="335.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.04%)</title><rect x="74.0" y="293" width="0.4" height="15.0" fill="rgb(248,220,43)" rx="2" ry="2" />
<text  x="76.96" y="303.5" ></text>
</g>
<g >
<title>_pthread_cleanup_push (1,333,333 samples, 0.04%)</title><rect x="977.6" y="453" width="0.5" height="15.0" fill="rgb(215,157,0)" rx="2" ry="2" />
<text  x="980.63" y="463.5" ></text>
</g>
<g >
<title>std::move&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;&amp;&gt; (1,333,333 samples, 0.04%)</title><rect x="998.6" y="309" width="0.5" height="15.0" fill="rgb(246,212,6)" rx="2" ry="2" />
<text  x="1001.62" y="319.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (30,666,659 samples, 0.95%)</title><rect x="307.3" y="469" width="11.2" height="15.0" fill="rgb(244,160,48)" rx="2" ry="2" />
<text  x="310.32" y="479.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (3,999,999 samples, 0.12%)</title><rect x="92.5" y="437" width="1.5" height="15.0" fill="rgb(224,65,4)" rx="2" ry="2" />
<text  x="95.51" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (2,666,666 samples, 0.08%)</title><rect x="78.8" y="357" width="1.0" height="15.0" fill="rgb(220,136,11)" rx="2" ry="2" />
<text  x="81.84" y="367.5" ></text>
</g>
<g >
<title>iput (2,666,666 samples, 0.08%)</title><rect x="10.0" y="405" width="1.0" height="15.0" fill="rgb(236,55,40)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>file_write_and_wait_range (1,333,333 samples, 0.04%)</title><rect x="1128.5" y="437" width="0.5" height="15.0" fill="rgb(225,47,21)" rx="2" ry="2" />
<text  x="1131.49" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (2,666,666 samples, 0.08%)</title><rect x="278.5" y="341" width="1.0" height="15.0" fill="rgb(236,177,1)" rx="2" ry="2" />
<text  x="281.51" y="351.5" ></text>
</g>
<g >
<title>try_to_release_page (1,333,333 samples, 0.04%)</title><rect x="1127.0" y="421" width="0.5" height="15.0" fill="rgb(229,95,43)" rx="2" ry="2" />
<text  x="1130.02" y="431.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (1,333,333 samples, 0.04%)</title><rect x="1017.7" y="277" width="0.5" height="15.0" fill="rgb(227,119,46)" rx="2" ry="2" />
<text  x="1020.66" y="287.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (1,333,333 samples, 0.04%)</title><rect x="50.5" y="453" width="0.5" height="15.0" fill="rgb(251,182,19)" rx="2" ry="2" />
<text  x="53.52" y="463.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (1,333,333 samples, 0.04%)</title><rect x="1169.5" y="517" width="0.5" height="15.0" fill="rgb(222,77,52)" rx="2" ry="2" />
<text  x="1172.50" y="527.5" ></text>
</g>
<g >
<title>unlock_page (1,333,333 samples, 0.04%)</title><rect x="901.5" y="277" width="0.5" height="15.0" fill="rgb(206,19,35)" rx="2" ry="2" />
<text  x="904.47" y="287.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;char*, unsigned long&gt; (6,666,665 samples, 0.21%)</title><rect x="304.4" y="389" width="2.4" height="15.0" fill="rgb(218,170,27)" rx="2" ry="2" />
<text  x="307.39" y="399.5" ></text>
</g>
<g >
<title>snappy::RawCompress (10,666,664 samples, 0.33%)</title><rect x="298.5" y="405" width="3.9" height="15.0" fill="rgb(219,188,33)" rx="2" ry="2" />
<text  x="301.53" y="415.5" ></text>
</g>
<g >
<title>leveldb::MemTable::KeyComparator::operator (17,333,329 samples, 0.54%)</title><rect x="513.8" y="437" width="6.4" height="15.0" fill="rgb(228,158,44)" rx="2" ry="2" />
<text  x="516.83" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char*&gt;::allocate (1,333,333 samples, 0.04%)</title><rect x="504.6" y="357" width="0.4" height="15.0" fill="rgb(217,23,21)" rx="2" ry="2" />
<text  x="507.56" y="367.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (13,333,330 samples, 0.41%)</title><rect x="412.3" y="405" width="4.9" height="15.0" fill="rgb(210,49,22)" rx="2" ry="2" />
<text  x="415.28" y="415.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="336.6" y="373" width="0.5" height="15.0" fill="rgb(247,60,0)" rx="2" ry="2" />
<text  x="339.61" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (2,666,666 samples, 0.08%)</title><rect x="395.7" y="421" width="1.0" height="15.0" fill="rgb(212,99,43)" rx="2" ry="2" />
<text  x="398.68" y="431.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpans (1,333,333 samples, 0.04%)</title><rect x="93.5" y="357" width="0.5" height="15.0" fill="rgb(221,214,32)" rx="2" ry="2" />
<text  x="96.48" y="367.5" ></text>
</g>
<g >
<title>std::fill_n&lt;char*, unsigned long, char&gt; (23,999,994 samples, 0.74%)</title><rect x="135.5" y="373" width="8.8" height="15.0" fill="rgb(254,13,8)" rx="2" ry="2" />
<text  x="138.47" y="383.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2,666,666 samples, 0.08%)</title><rect x="23.2" y="437" width="1.0" height="15.0" fill="rgb(239,110,17)" rx="2" ry="2" />
<text  x="26.18" y="447.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.04%)</title><rect x="115.9" y="341" width="0.5" height="15.0" fill="rgb(248,130,22)" rx="2" ry="2" />
<text  x="118.94" y="351.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (2,666,666 samples, 0.08%)</title><rect x="161.8" y="485" width="1.0" height="15.0" fill="rgb(223,186,12)" rx="2" ry="2" />
<text  x="164.83" y="495.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::tuple&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*&amp;, std::__future_base::_Result_base::_Deleter, true&gt; (5,333,332 samples, 0.17%)</title><rect x="1003.0" y="277" width="2.0" height="15.0" fill="rgb(216,228,13)" rx="2" ry="2" />
<text  x="1006.02" y="287.5" ></text>
</g>
<g >
<title>leveldb::WriteBatch::Clear (13,333,330 samples, 0.41%)</title><rect x="1106.5" y="565" width="4.9" height="15.0" fill="rgb(252,109,47)" rx="2" ry="2" />
<text  x="1109.52" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (1,333,333 samples, 0.04%)</title><rect x="264.4" y="357" width="0.4" height="15.0" fill="rgb(228,27,26)" rx="2" ry="2" />
<text  x="267.36" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;char*, unsigned long, char&gt; (5,333,332 samples, 0.17%)</title><rect x="331.2" y="437" width="2.0" height="15.0" fill="rgb(239,2,54)" rx="2" ry="2" />
<text  x="334.24" y="447.5" ></text>
</g>
<g >
<title>leveldb::WriteBatch::Handler::~Handler (1,333,333 samples, 0.04%)</title><rect x="495.8" y="501" width="0.5" height="15.0" fill="rgb(227,116,5)" rx="2" ry="2" />
<text  x="498.77" y="511.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (1,333,333 samples, 0.04%)</title><rect x="395.2" y="373" width="0.5" height="15.0" fill="rgb(238,24,5)" rx="2" ry="2" />
<text  x="398.20" y="383.5" ></text>
</g>
<g >
<title>leveldb::PutLengthPrefixedSlice (23,999,994 samples, 0.74%)</title><rect x="1112.4" y="549" width="8.8" height="15.0" fill="rgb(250,110,50)" rx="2" ry="2" />
<text  x="1115.37" y="559.5" ></text>
</g>
<g >
<title>std::fill_n&lt;char*, unsigned long, char&gt; (6,666,665 samples, 0.21%)</title><rect x="304.4" y="357" width="2.4" height="15.0" fill="rgb(222,216,19)" rx="2" ry="2" />
<text  x="307.39" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt;::operator* (2,666,666 samples, 0.08%)</title><rect x="960.1" y="517" width="0.9" height="15.0" fill="rgb(247,101,36)" rx="2" ry="2" />
<text  x="963.05" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,333,333 samples, 0.04%)</title><rect x="397.1" y="373" width="0.5" height="15.0" fill="rgb(238,188,52)" rx="2" ry="2" />
<text  x="400.15" y="383.5" ></text>
</g>
<g >
<title>handle_mm_fault (6,666,665 samples, 0.21%)</title><rect x="141.3" y="261" width="2.5" height="15.0" fill="rgb(239,85,51)" rx="2" ry="2" />
<text  x="144.33" y="271.5" ></text>
</g>
<g >
<title>leveldb::WriteBatch::Put (29,333,326 samples, 0.91%)</title><rect x="1111.4" y="565" width="10.7" height="15.0" fill="rgb(233,24,33)" rx="2" ry="2" />
<text  x="1114.40" y="575.5" ></text>
</g>
<g >
<title>_IO_new_file_fopen (3,999,999 samples, 0.12%)</title><rect x="1129.5" y="613" width="1.4" height="15.0" fill="rgb(237,71,20)" rx="2" ry="2" />
<text  x="1132.46" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::empty (3,999,999 samples, 0.12%)</title><rect x="475.3" y="517" width="1.4" height="15.0" fill="rgb(242,198,54)" rx="2" ry="2" />
<text  x="478.26" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (1,333,333 samples, 0.04%)</title><rect x="348.8" y="405" width="0.5" height="15.0" fill="rgb(218,9,44)" rx="2" ry="2" />
<text  x="351.82" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt;::_M_initialize_map (1,333,333 samples, 0.04%)</title><rect x="1131.4" y="485" width="0.5" height="15.0" fill="rgb(232,123,41)" rx="2" ry="2" />
<text  x="1134.41" y="495.5" ></text>
</g>
<g >
<title>std::move&lt;leveldb::Status&amp;&gt; (1,333,333 samples, 0.04%)</title><rect x="1045.0" y="533" width="0.5" height="15.0" fill="rgb(248,104,29)" rx="2" ry="2" />
<text  x="1048.00" y="543.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.04%)</title><rect x="733.5" y="389" width="0.5" height="15.0" fill="rgb(239,190,11)" rx="2" ry="2" />
<text  x="736.53" y="399.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;::_Tuple_impl&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,333,333 samples, 0.04%)</title><rect x="284.4" y="357" width="0.5" height="15.0" fill="rgb(243,197,38)" rx="2" ry="2" />
<text  x="287.37" y="367.5" ></text>
</g>
<g >
<title>_dl_map_object (1,333,333 samples, 0.04%)</title><rect x="1131.9" y="613" width="0.5" height="15.0" fill="rgb(224,19,29)" rx="2" ry="2" />
<text  x="1134.90" y="623.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Value (38,666,657 samples, 1.20%)</title><rect x="403.5" y="453" width="14.2" height="15.0" fill="rgb(205,213,31)" rx="2" ry="2" />
<text  x="406.50" y="463.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MemTableInserter::~MemTableInserter (1,333,333 samples, 0.04%)</title><rect x="495.8" y="517" width="0.5" height="15.0" fill="rgb(241,78,35)" rx="2" ry="2" />
<text  x="498.77" y="527.5" ></text>
</g>
<g >
<title>handle_mm_fault (11,999,997 samples, 0.37%)</title><rect x="1166.1" y="677" width="4.4" height="15.0" fill="rgb(214,191,21)" rx="2" ry="2" />
<text  x="1169.08" y="687.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt;::_Deque_iterator (2,666,666 samples, 0.08%)</title><rect x="476.7" y="501" width="1.0" height="15.0" fill="rgb(247,171,21)" rx="2" ry="2" />
<text  x="479.73" y="511.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::_M_head (1,333,333 samples, 0.04%)</title><rect x="1176.8" y="725" width="0.5" height="15.0" fill="rgb(247,27,41)" rx="2" ry="2" />
<text  x="1179.82" y="735.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (3,999,999 samples, 0.12%)</title><rect x="1138.7" y="725" width="1.5" height="15.0" fill="rgb(231,161,36)" rx="2" ry="2" />
<text  x="1141.74" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result_base::_Deleter, void&gt; (10,666,664 samples, 0.33%)</title><rect x="1073.8" y="533" width="3.9" height="15.0" fill="rgb(234,80,35)" rx="2" ry="2" />
<text  x="1076.81" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,333,333 samples, 0.04%)</title><rect x="81.8" y="341" width="0.5" height="15.0" fill="rgb(233,139,51)" rx="2" ry="2" />
<text  x="84.77" y="351.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (1,333,333 samples, 0.04%)</title><rect x="144.3" y="373" width="0.4" height="15.0" fill="rgb(234,44,51)" rx="2" ry="2" />
<text  x="147.26" y="383.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (31,999,992 samples, 0.99%)</title><rect x="92.5" y="453" width="11.7" height="15.0" fill="rgb(243,199,29)" rx="2" ry="2" />
<text  x="95.51" y="463.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1,333,333 samples, 0.04%)</title><rect x="1177.3" y="741" width="0.5" height="15.0" fill="rgb(244,158,5)" rx="2" ry="2" />
<text  x="1180.31" y="751.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set (79,999,980 samples, 2.48%)</title><rect x="992.8" y="373" width="29.3" height="15.0" fill="rgb(254,30,49)" rx="2" ry="2" />
<text  x="995.76" y="383.5" >st..</text>
</g>
<g >
<title>__pthread_enable_asynccancel (2,666,666 samples, 0.08%)</title><rect x="795.0" y="437" width="1.0" height="15.0" fill="rgb(229,42,38)" rx="2" ry="2" />
<text  x="798.04" y="447.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (1,333,333 samples, 0.04%)</title><rect x="1177.8" y="725" width="0.5" height="15.0" fill="rgb(220,150,29)" rx="2" ry="2" />
<text  x="1180.79" y="735.5" ></text>
</g>
<g >
<title>truncate_cleanup_page (1,333,333 samples, 0.04%)</title><rect x="438.6" y="341" width="0.5" height="15.0" fill="rgb(227,93,40)" rx="2" ry="2" />
<text  x="441.65" y="351.5" ></text>
</g>
<g >
<title>leveldb::Status::operator= (3,999,999 samples, 0.12%)</title><rect x="1104.6" y="565" width="1.4" height="15.0" fill="rgb(239,134,13)" rx="2" ry="2" />
<text  x="1107.56" y="575.5" ></text>
</g>
<g >
<title>__pthread_cond_destroy (2,666,666 samples, 0.08%)</title><rect x="485.5" y="501" width="1.0" height="15.0" fill="rgb(231,187,46)" rx="2" ry="2" />
<text  x="488.52" y="511.5" ></text>
</g>
<g >
<title>truncate_inode_pages_final (9,333,331 samples, 0.29%)</title><rect x="1124.6" y="517" width="3.4" height="15.0" fill="rgb(206,39,29)" rx="2" ry="2" />
<text  x="1127.58" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (1,333,333 samples, 0.04%)</title><rect x="163.3" y="405" width="0.5" height="15.0" fill="rgb(236,214,28)" rx="2" ry="2" />
<text  x="166.30" y="415.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1,333,333 samples, 0.04%)</title><rect x="90.1" y="197" width="0.5" height="15.0" fill="rgb(238,77,32)" rx="2" ry="2" />
<text  x="93.07" y="207.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseListToSpans (2,666,666 samples, 0.08%)</title><rect x="328.8" y="389" width="1.0" height="15.0" fill="rgb(213,98,38)" rx="2" ry="2" />
<text  x="331.80" y="399.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (5,333,332 samples, 0.17%)</title><rect x="56.9" y="437" width="1.9" height="15.0" fill="rgb(233,218,17)" rx="2" ry="2" />
<text  x="59.87" y="447.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::WriteUnbuffered (341,333,248 samples, 10.59%)</title><rect x="789.2" y="469" width="125.0" height="15.0" fill="rgb(232,166,43)" rx="2" ry="2" />
<text  x="792.18" y="479.5" >leveldb::(anony..</text>
</g>
<g >
<title>leveldb::Arena::~Arena (2,666,666 samples, 0.08%)</title><rect x="328.8" y="469" width="1.0" height="15.0" fill="rgb(237,211,16)" rx="2" ry="2" />
<text  x="331.80" y="479.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.04%)</title><rect x="427.4" y="405" width="0.5" height="15.0" fill="rgb(231,153,46)" rx="2" ry="2" />
<text  x="430.42" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt;@plt (1,333,333 samples, 0.04%)</title><rect x="162.3" y="469" width="0.5" height="15.0" fill="rgb(221,21,8)" rx="2" ry="2" />
<text  x="165.32" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_S_cget (1,333,333 samples, 0.04%)</title><rect x="350.3" y="437" width="0.5" height="15.0" fill="rgb(252,22,53)" rx="2" ry="2" />
<text  x="353.28" y="447.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteRawBlock (39,999,990 samples, 1.24%)</title><rect x="403.0" y="469" width="14.7" height="15.0" fill="rgb(220,114,25)" rx="2" ry="2" />
<text  x="406.01" y="479.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (31,999,992 samples, 0.99%)</title><rect x="712.5" y="373" width="11.7" height="15.0" fill="rgb(208,93,51)" rx="2" ry="2" />
<text  x="715.53" y="383.5" ></text>
</g>
<g >
<title>rcu_report_qs_rnp (1,333,333 samples, 0.04%)</title><rect x="456.2" y="389" width="0.5" height="15.0" fill="rgb(218,105,2)" rx="2" ry="2" />
<text  x="459.22" y="399.5" ></text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.04%)</title><rect x="504.6" y="341" width="0.4" height="15.0" fill="rgb(237,69,16)" rx="2" ry="2" />
<text  x="507.56" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (2,666,666 samples, 0.08%)</title><rect x="400.6" y="421" width="0.9" height="15.0" fill="rgb(247,224,11)" rx="2" ry="2" />
<text  x="403.57" y="431.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (3,999,999 samples, 0.12%)</title><rect x="854.1" y="229" width="1.5" height="15.0" fill="rgb(228,227,46)" rx="2" ry="2" />
<text  x="857.11" y="239.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__future_base::_State_baseV2&gt;::allocator (1,333,333 samples, 0.04%)</title><rect x="1072.8" y="517" width="0.5" height="15.0" fill="rgb(247,150,54)" rx="2" ry="2" />
<text  x="1075.83" y="527.5" ></text>
</g>
<g >
<title>std::operator&amp; (1,333,333 samples, 0.04%)</title><rect x="172.1" y="421" width="0.5" height="15.0" fill="rgb(236,1,13)" rx="2" ry="2" />
<text  x="175.09" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (10,666,664 samples, 0.33%)</title><rect x="1117.3" y="533" width="3.9" height="15.0" fill="rgb(205,60,39)" rx="2" ry="2" />
<text  x="1120.26" y="543.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (14,666,663 samples, 0.46%)</title><rect x="1025.5" y="517" width="5.3" height="15.0" fill="rgb(222,120,25)" rx="2" ry="2" />
<text  x="1028.47" y="527.5" ></text>
</g>
<g >
<title>fts_build (1,333,333 samples, 0.04%)</title><rect x="1124.1" y="597" width="0.5" height="15.0" fill="rgb(215,45,19)" rx="2" ry="2" />
<text  x="1127.09" y="607.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (25,333,327 samples, 0.79%)</title><rect x="161.8" y="501" width="9.3" height="15.0" fill="rgb(244,187,24)" rx="2" ry="2" />
<text  x="164.83" y="511.5" ></text>
</g>
<g >
<title>kmem_cache_free (1,333,333 samples, 0.04%)</title><rect x="591.9" y="293" width="0.5" height="15.0" fill="rgb(221,40,16)" rx="2" ry="2" />
<text  x="594.94" y="303.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::Delete (1,333,333 samples, 0.04%)</title><rect x="144.3" y="357" width="0.4" height="15.0" fill="rgb(227,220,19)" rx="2" ry="2" />
<text  x="147.26" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (6,666,665 samples, 0.21%)</title><rect x="347.4" y="421" width="2.4" height="15.0" fill="rgb(237,168,25)" rx="2" ry="2" />
<text  x="350.35" y="431.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.04%)</title><rect x="41.2" y="437" width="0.5" height="15.0" fill="rgb(227,114,6)" rx="2" ry="2" />
<text  x="44.25" y="447.5" ></text>
</g>
<g >
<title>__do_softirq (3,999,999 samples, 0.12%)</title><rect x="564.1" y="373" width="1.5" height="15.0" fill="rgb(241,177,52)" rx="2" ry="2" />
<text  x="567.12" y="383.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ListTooLong (2,666,666 samples, 0.08%)</title><rect x="328.8" y="437" width="1.0" height="15.0" fill="rgb(233,214,50)" rx="2" ry="2" />
<text  x="331.80" y="447.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteBlock (71,999,982 samples, 2.23%)</title><rect x="402.5" y="485" width="26.4" height="15.0" fill="rgb(211,101,52)" rx="2" ry="2" />
<text  x="405.52" y="495.5" >l..</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_deleter (1,333,333 samples, 0.04%)</title><rect x="1187.1" y="725" width="0.5" height="15.0" fill="rgb(206,57,11)" rx="2" ry="2" />
<text  x="1190.07" y="735.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (10,666,664 samples, 0.33%)</title><rect x="286.8" y="421" width="3.9" height="15.0" fill="rgb(245,210,43)" rx="2" ry="2" />
<text  x="289.81" y="431.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (2,666,666 samples, 0.08%)</title><rect x="393.7" y="469" width="1.0" height="15.0" fill="rgb(245,68,23)" rx="2" ry="2" />
<text  x="396.73" y="479.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.04%)</title><rect x="1116.3" y="533" width="0.5" height="15.0" fill="rgb(225,57,13)" rx="2" ry="2" />
<text  x="1119.28" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (1,333,333 samples, 0.04%)</title><rect x="393.2" y="421" width="0.5" height="15.0" fill="rgb(245,66,44)" rx="2" ry="2" />
<text  x="396.24" y="431.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="958.1" y="437" width="0.5" height="15.0" fill="rgb(247,55,11)" rx="2" ry="2" />
<text  x="961.10" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_allocate_buckets (1,333,333 samples, 0.04%)</title><rect x="81.3" y="341" width="0.5" height="15.0" fill="rgb(214,124,11)" rx="2" ry="2" />
<text  x="84.28" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;leveldb::ParsedInternalKey*, std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt; &gt;::operator++ (1,333,333 samples, 0.04%)</title><rect x="54.9" y="453" width="0.5" height="15.0" fill="rgb(247,184,18)" rx="2" ry="2" />
<text  x="57.92" y="463.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (1,333,333 samples, 0.04%)</title><rect x="826.3" y="277" width="0.5" height="15.0" fill="rgb(233,24,21)" rx="2" ry="2" />
<text  x="829.28" y="287.5" ></text>
</g>
<g >
<title>std::mutex::lock (2,666,666 samples, 0.08%)</title><rect x="486.5" y="501" width="1.0" height="15.0" fill="rgb(209,106,36)" rx="2" ry="2" />
<text  x="489.49" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::end (2,666,666 samples, 0.08%)</title><rect x="476.7" y="517" width="1.0" height="15.0" fill="rgb(223,52,1)" rx="2" ry="2" />
<text  x="479.73" y="527.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (6,666,665 samples, 0.21%)</title><rect x="357.6" y="469" width="2.4" height="15.0" fill="rgb(206,194,36)" rx="2" ry="2" />
<text  x="360.60" y="479.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (2,666,666 samples, 0.08%)</title><rect x="756.0" y="469" width="1.0" height="15.0" fill="rgb(216,198,27)" rx="2" ry="2" />
<text  x="758.98" y="479.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;char*, unsigned long&gt; (6,666,665 samples, 0.21%)</title><rect x="304.4" y="373" width="2.4" height="15.0" fill="rgb(228,212,22)" rx="2" ry="2" />
<text  x="307.39" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result_base::_Deleter, void&gt; (3,999,999 samples, 0.12%)</title><rect x="1065.0" y="389" width="1.5" height="15.0" fill="rgb(216,152,7)" rx="2" ry="2" />
<text  x="1068.02" y="399.5" ></text>
</g>
<g >
<title>generic_update_time (10,666,664 samples, 0.33%)</title><rect x="822.9" y="293" width="3.9" height="15.0" fill="rgb(237,11,49)" rx="2" ry="2" />
<text  x="825.87" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (5,333,332 samples, 0.17%)</title><rect x="84.2" y="405" width="2.0" height="15.0" fill="rgb(246,1,5)" rx="2" ry="2" />
<text  x="87.21" y="415.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (93,333,310 samples, 2.90%)</title><rect x="661.3" y="373" width="34.1" height="15.0" fill="rgb(225,225,17)" rx="2" ry="2" />
<text  x="664.27" y="383.5" >le..</text>
</g>
<g >
<title>leveldb::Slice::size (3,999,999 samples, 0.12%)</title><rect x="366.9" y="469" width="1.4" height="15.0" fill="rgb(227,190,54)" rx="2" ry="2" />
<text  x="369.88" y="479.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.04%)</title><rect x="131.6" y="437" width="0.5" height="15.0" fill="rgb(251,227,28)" rx="2" ry="2" />
<text  x="134.56" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (1,333,333 samples, 0.04%)</title><rect x="339.5" y="373" width="0.5" height="15.0" fill="rgb(209,93,2)" rx="2" ry="2" />
<text  x="342.54" y="383.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteBlock (1,333,333 samples, 0.04%)</title><rect x="135.0" y="469" width="0.5" height="15.0" fill="rgb(227,31,42)" rx="2" ry="2" />
<text  x="137.98" y="479.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::PrintHeader (5,333,332 samples, 0.17%)</title><rect x="1129.0" y="677" width="1.9" height="15.0" fill="rgb(221,192,29)" rx="2" ry="2" />
<text  x="1131.97" y="687.5" ></text>
</g>
<g >
<title>do_page_fault (2,666,666 samples, 0.08%)</title><rect x="305.9" y="277" width="0.9" height="15.0" fill="rgb(250,84,10)" rx="2" ry="2" />
<text  x="308.85" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt;::allocate (1,333,333 samples, 0.04%)</title><rect x="1131.4" y="421" width="0.5" height="15.0" fill="rgb(248,174,48)" rx="2" ry="2" />
<text  x="1134.41" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::deallocate (1,333,333 samples, 0.04%)</title><rect x="330.8" y="421" width="0.4" height="15.0" fill="rgb(228,26,2)" rx="2" ry="2" />
<text  x="333.75" y="431.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::DoWrite (1,865,332,867 samples, 57.88%)</title><rect x="439.1" y="581" width="683.0" height="15.0" fill="rgb(215,197,31)" rx="2" ry="2" />
<text  x="442.14" y="591.5" >leveldb::Benchmark::DoWrite</text>
</g>
<g >
<title>leveldb::Block::Iter::GetRestartPoint (2,666,666 samples, 0.08%)</title><rect x="220.9" y="421" width="1.0" height="15.0" fill="rgb(209,158,7)" rx="2" ry="2" />
<text  x="223.91" y="431.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::value (1,333,333 samples, 0.04%)</title><rect x="1136.8" y="725" width="0.5" height="15.0" fill="rgb(215,21,30)" rx="2" ry="2" />
<text  x="1139.79" y="735.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="378.6" y="485" width="0.5" height="15.0" fill="rgb(212,211,23)" rx="2" ry="2" />
<text  x="381.60" y="495.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="1094.3" y="373" width="0.5" height="15.0" fill="rgb(232,13,32)" rx="2" ry="2" />
<text  x="1097.31" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (2,666,666 samples, 0.08%)</title><rect x="93.0" y="421" width="1.0" height="15.0" fill="rgb(224,76,49)" rx="2" ry="2" />
<text  x="96.00" y="431.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (33,333,325 samples, 1.03%)</title><rect x="341.0" y="517" width="12.2" height="15.0" fill="rgb(229,90,21)" rx="2" ry="2" />
<text  x="344.01" y="527.5" ></text>
</g>
<g >
<title>call_timer_fn (1,333,333 samples, 0.04%)</title><rect x="885.4" y="53" width="0.4" height="15.0" fill="rgb(214,138,50)" rx="2" ry="2" />
<text  x="888.36" y="63.5" ></text>
</g>
<g >
<title>elf_dynamic_do_Rela (2,666,666 samples, 0.08%)</title><rect x="1132.4" y="645" width="1.0" height="15.0" fill="rgb(249,88,44)" rx="2" ry="2" />
<text  x="1135.39" y="655.5" ></text>
</g>
<g >
<title>leveldb::port::CondVar::~CondVar (2,666,666 samples, 0.08%)</title><rect x="485.5" y="517" width="1.0" height="15.0" fill="rgb(231,13,53)" rx="2" ry="2" />
<text  x="488.52" y="527.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::_M_head (1,333,333 samples, 0.04%)</title><rect x="1076.2" y="453" width="0.5" height="15.0" fill="rgb(222,50,29)" rx="2" ry="2" />
<text  x="1079.25" y="463.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.04%)</title><rect x="103.7" y="293" width="0.5" height="15.0" fill="rgb(232,123,38)" rx="2" ry="2" />
<text  x="106.74" y="303.5" ></text>
</g>
<g >
<title>do_page_fault (3,999,999 samples, 0.12%)</title><rect x="130.1" y="357" width="1.5" height="15.0" fill="rgb(240,69,20)" rx="2" ry="2" />
<text  x="133.10" y="367.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.04%)</title><rect x="261.9" y="437" width="0.5" height="15.0" fill="rgb(237,7,22)" rx="2" ry="2" />
<text  x="264.92" y="447.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (7,999,998 samples, 0.25%)</title><rect x="501.1" y="373" width="3.0" height="15.0" fill="rgb(216,194,5)" rx="2" ry="2" />
<text  x="504.14" y="383.5" ></text>
</g>
<g >
<title>__add_to_page_cache_locked (1,333,333 samples, 0.04%)</title><rect x="1166.1" y="517" width="0.5" height="15.0" fill="rgb(249,100,40)" rx="2" ry="2" />
<text  x="1169.08" y="527.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.04%)</title><rect x="57.8" y="405" width="0.5" height="15.0" fill="rgb(211,211,49)" rx="2" ry="2" />
<text  x="60.84" y="415.5" ></text>
</g>
<g >
<title>iput (2,666,666 samples, 0.08%)</title><rect x="236.0" y="389" width="1.0" height="15.0" fill="rgb(243,109,40)" rx="2" ry="2" />
<text  x="239.04" y="399.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (18,666,662 samples, 0.58%)</title><rect x="757.0" y="501" width="6.8" height="15.0" fill="rgb(207,184,19)" rx="2" ry="2" />
<text  x="759.96" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (3,999,999 samples, 0.12%)</title><rect x="1068.4" y="437" width="1.5" height="15.0" fill="rgb(218,111,36)" rx="2" ry="2" />
<text  x="1071.44" y="447.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="743.8" y="373" width="0.5" height="15.0" fill="rgb(210,8,39)" rx="2" ry="2" />
<text  x="746.78" y="383.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (53,333,320 samples, 1.65%)</title><rect x="206.3" y="485" width="19.5" height="15.0" fill="rgb(221,119,11)" rx="2" ry="2" />
<text  x="209.26" y="495.5" ></text>
</g>
<g >
<title>leveldb::EncodeVarint32 (1,333,333 samples, 0.04%)</title><rect x="1114.8" y="517" width="0.5" height="15.0" fill="rgb(211,89,34)" rx="2" ry="2" />
<text  x="1117.82" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (1,333,333 samples, 0.04%)</title><rect x="169.6" y="421" width="0.5" height="15.0" fill="rgb(243,181,2)" rx="2" ry="2" />
<text  x="172.64" y="431.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*&amp;, std::__future_base::_Result_base::_Deleter, void&gt; (5,333,332 samples, 0.17%)</title><rect x="1003.0" y="261" width="2.0" height="15.0" fill="rgb(210,105,23)" rx="2" ry="2" />
<text  x="1006.02" y="271.5" ></text>
</g>
<g >
<title>from_kuid (1,333,333 samples, 0.04%)</title><rect x="886.3" y="197" width="0.5" height="15.0" fill="rgb(239,82,32)" rx="2" ry="2" />
<text  x="889.33" y="207.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,333,333 samples, 0.04%)</title><rect x="400.1" y="421" width="0.5" height="15.0" fill="rgb(213,79,23)" rx="2" ry="2" />
<text  x="403.08" y="431.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (9,333,331 samples, 0.29%)</title><rect x="1124.6" y="629" width="3.4" height="15.0" fill="rgb(211,16,49)" rx="2" ry="2" />
<text  x="1127.58" y="639.5" ></text>
</g>
<g >
<title>generic_write_end (115,999,971 samples, 3.60%)</title><rect x="859.0" y="277" width="42.5" height="15.0" fill="rgb(212,183,52)" rx="2" ry="2" />
<text  x="861.99" y="287.5" >gen..</text>
</g>
<g >
<title>__gthread_mutex_unlock (2,666,666 samples, 0.08%)</title><rect x="957.6" y="501" width="1.0" height="15.0" fill="rgb(213,12,25)" rx="2" ry="2" />
<text  x="960.61" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (3,999,999 samples, 0.12%)</title><rect x="75.4" y="357" width="1.5" height="15.0" fill="rgb(230,204,12)" rx="2" ry="2" />
<text  x="78.42" y="367.5" ></text>
</g>
<g >
<title>std::__fill_a&lt;char&gt; (5,333,332 samples, 0.17%)</title><rect x="331.2" y="357" width="2.0" height="15.0" fill="rgb(226,150,48)" rx="2" ry="2" />
<text  x="334.24" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (2,666,666 samples, 0.08%)</title><rect x="281.0" y="389" width="0.9" height="15.0" fill="rgb(223,172,32)" rx="2" ry="2" />
<text  x="283.96" y="399.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (6,666,665 samples, 0.21%)</title><rect x="315.6" y="341" width="2.5" height="15.0" fill="rgb(250,42,43)" rx="2" ry="2" />
<text  x="318.62" y="351.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.08%)</title><rect x="1182.2" y="741" width="1.0" height="15.0" fill="rgb(252,165,11)" rx="2" ry="2" />
<text  x="1185.19" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1,333,333 samples, 0.04%)</title><rect x="435.2" y="517" width="0.5" height="15.0" fill="rgb(228,190,40)" rx="2" ry="2" />
<text  x="438.23" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (9,333,331 samples, 0.29%)</title><rect x="97.4" y="357" width="3.4" height="15.0" fill="rgb(220,1,26)" rx="2" ry="2" />
<text  x="100.39" y="367.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.04%)</title><rect x="1131.9" y="549" width="0.5" height="15.0" fill="rgb(249,142,37)" rx="2" ry="2" />
<text  x="1134.90" y="559.5" ></text>
</g>
<g >
<title>__unlink (9,333,331 samples, 0.29%)</title><rect x="1124.6" y="645" width="3.4" height="15.0" fill="rgb(228,125,40)" rx="2" ry="2" />
<text  x="1127.58" y="655.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.04%)</title><rect x="913.2" y="405" width="0.5" height="15.0" fill="rgb(252,127,23)" rx="2" ry="2" />
<text  x="916.19" y="415.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.04%)</title><rect x="74.0" y="325" width="0.4" height="15.0" fill="rgb(243,33,40)" rx="2" ry="2" />
<text  x="76.96" y="335.5" ></text>
</g>
<g >
<title>load_balance (1,333,333 samples, 0.04%)</title><rect x="695.0" y="245" width="0.4" height="15.0" fill="rgb(247,198,45)" rx="2" ry="2" />
<text  x="697.96" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (2,666,666 samples, 0.08%)</title><rect x="307.3" y="437" width="1.0" height="15.0" fill="rgb(234,215,48)" rx="2" ry="2" />
<text  x="310.32" y="447.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (5,333,332 samples, 0.17%)</title><rect x="241.4" y="437" width="2.0" height="15.0" fill="rgb(212,212,16)" rx="2" ry="2" />
<text  x="244.41" y="447.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.04%)</title><rect x="94.0" y="325" width="0.5" height="15.0" fill="rgb(216,2,45)" rx="2" ry="2" />
<text  x="96.97" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (7,999,998 samples, 0.25%)</title><rect x="94.0" y="405" width="2.9" height="15.0" fill="rgb(225,145,25)" rx="2" ry="2" />
<text  x="96.97" y="415.5" ></text>
</g>
<g >
<title>__slab_alloc (1,333,333 samples, 0.04%)</title><rect x="1169.5" y="501" width="0.5" height="15.0" fill="rgb(246,114,12)" rx="2" ry="2" />
<text  x="1172.50" y="511.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (1,333,333 samples, 0.04%)</title><rect x="144.3" y="245" width="0.4" height="15.0" fill="rgb(231,21,30)" rx="2" ry="2" />
<text  x="147.26" y="255.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt;::_Deque_iterator (1,333,333 samples, 0.04%)</title><rect x="478.7" y="485" width="0.5" height="15.0" fill="rgb(213,161,47)" rx="2" ry="2" />
<text  x="481.68" y="495.5" ></text>
</g>
<g >
<title>all (3,222,665,861 samples, 100%)</title><rect x="10.0" y="773" width="1180.0" height="15.0" fill="rgb(220,103,43)" rx="2" ry="2" />
<text  x="13.00" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;char*, std::allocator&lt;char*&gt; &gt;::_M_realloc_insert&lt;char* const&amp;&gt; (1,333,333 samples, 0.04%)</title><rect x="504.6" y="405" width="0.4" height="15.0" fill="rgb(221,189,12)" rx="2" ry="2" />
<text  x="507.56" y="415.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (1,333,333 samples, 0.04%)</title><rect x="503.6" y="261" width="0.5" height="15.0" fill="rgb(207,202,28)" rx="2" ry="2" />
<text  x="506.58" y="271.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::Valid (1,333,333 samples, 0.04%)</title><rect x="211.6" y="469" width="0.5" height="15.0" fill="rgb(253,220,8)" rx="2" ry="2" />
<text  x="214.63" y="479.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::Contents (2,666,666 samples, 0.08%)</title><rect x="494.3" y="533" width="1.0" height="15.0" fill="rgb(249,223,32)" rx="2" ry="2" />
<text  x="497.30" y="543.5" ></text>
</g>
<g >
<title>leveldb::MutexLock::MutexLock (2,666,666 samples, 0.08%)</title><rect x="486.5" y="533" width="1.0" height="15.0" fill="rgb(245,42,35)" rx="2" ry="2" />
<text  x="489.49" y="543.5" ></text>
</g>
<g >
<title>snappy::RawUncompress (6,666,665 samples, 0.21%)</title><rect x="214.1" y="357" width="2.4" height="15.0" fill="rgb(246,38,19)" rx="2" ry="2" />
<text  x="217.07" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (3,999,999 samples, 0.12%)</title><rect x="344.9" y="453" width="1.5" height="15.0" fill="rgb(252,193,20)" rx="2" ry="2" />
<text  x="347.91" y="463.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (3,999,999 samples, 0.12%)</title><rect x="24.2" y="437" width="1.4" height="15.0" fill="rgb(223,177,9)" rx="2" ry="2" />
<text  x="27.16" y="447.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl (2,666,666 samples, 0.08%)</title><rect x="1076.7" y="485" width="1.0" height="15.0" fill="rgb(252,116,27)" rx="2" ry="2" />
<text  x="1079.74" y="495.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="695.0" y="309" width="0.4" height="15.0" fill="rgb(215,59,11)" rx="2" ry="2" />
<text  x="697.96" y="319.5" ></text>
</g>
<g >
<title>__x64_sys_unlink (2,666,666 samples, 0.08%)</title><rect x="10.0" y="437" width="1.0" height="15.0" fill="rgb(224,68,24)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.04%)</title><rect x="473.3" y="485" width="0.5" height="15.0" fill="rgb(229,7,30)" rx="2" ry="2" />
<text  x="476.31" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (11,999,997 samples, 0.37%)</title><rect x="96.9" y="405" width="4.4" height="15.0" fill="rgb(208,60,22)" rx="2" ry="2" />
<text  x="99.90" y="415.5" ></text>
</g>
<g >
<title>__x64_sys_futex (15,999,996 samples, 0.50%)</title><rect x="984.0" y="405" width="5.8" height="15.0" fill="rgb(220,193,24)" rx="2" ry="2" />
<text  x="986.98" y="415.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::status (2,666,666 samples, 0.08%)</title><rect x="431.8" y="485" width="1.0" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="434.81" y="495.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (5,333,332 samples, 0.17%)</title><rect x="84.2" y="373" width="2.0" height="15.0" fill="rgb(226,135,2)" rx="2" ry="2" />
<text  x="87.21" y="383.5" ></text>
</g>
<g >
<title>mark_buffer_dirty (1,333,333 samples, 0.04%)</title><rect x="1169.0" y="581" width="0.5" height="15.0" fill="rgb(234,130,38)" rx="2" ry="2" />
<text  x="1172.01" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (10,666,664 samples, 0.33%)</title><rect x="386.9" y="389" width="3.9" height="15.0" fill="rgb(218,208,31)" rx="2" ry="2" />
<text  x="389.90" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (3,999,999 samples, 0.12%)</title><rect x="1153.9" y="725" width="1.4" height="15.0" fill="rgb(206,174,40)" rx="2" ry="2" />
<text  x="1156.87" y="735.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (1,333,333 samples, 0.04%)</title><rect x="302.9" y="389" width="0.5" height="15.0" fill="rgb(252,2,52)" rx="2" ry="2" />
<text  x="305.93" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl&lt;std::__future_base::_Result_base::_Deleter&gt; (9,333,331 samples, 0.29%)</title><rect x="1001.6" y="293" width="3.4" height="15.0" fill="rgb(230,4,19)" rx="2" ry="2" />
<text  x="1004.55" y="303.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1,333,333 samples, 0.04%)</title><rect x="81.3" y="245" width="0.5" height="15.0" fill="rgb(224,138,17)" rx="2" ry="2" />
<text  x="84.28" y="255.5" ></text>
</g>
<g >
<title>_ULx86_64_step (1,333,333 samples, 0.04%)</title><rect x="1131.4" y="261" width="0.5" height="15.0" fill="rgb(211,145,50)" rx="2" ry="2" />
<text  x="1134.41" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char*&gt; &gt;::allocate (1,333,333 samples, 0.04%)</title><rect x="504.6" y="373" width="0.4" height="15.0" fill="rgb(242,182,1)" rx="2" ry="2" />
<text  x="507.56" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (90,666,644 samples, 2.81%)</title><rect x="59.3" y="421" width="33.2" height="15.0" fill="rgb(220,172,1)" rx="2" ry="2" />
<text  x="62.31" y="431.5" >st..</text>
</g>
<g >
<title>ext4_journal_check_start (1,333,333 samples, 0.04%)</title><rect x="861.4" y="213" width="0.5" height="15.0" fill="rgb(223,112,42)" rx="2" ry="2" />
<text  x="864.44" y="223.5" ></text>
</g>
<g >
<title>ksys_write (301,333,258 samples, 9.35%)</title><rect x="802.9" y="389" width="110.3" height="15.0" fill="rgb(246,73,31)" rx="2" ry="2" />
<text  x="805.85" y="399.5" >ksys_write</text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::get_deleter (1,333,333 samples, 0.04%)</title><rect x="1189.5" y="741" width="0.5" height="15.0" fill="rgb(227,75,1)" rx="2" ry="2" />
<text  x="1192.51" y="751.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (3,999,999 samples, 0.12%)</title><rect x="282.4" y="325" width="1.5" height="15.0" fill="rgb(240,45,29)" rx="2" ry="2" />
<text  x="285.42" y="335.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::ThreadBody (1,865,332,867 samples, 57.88%)</title><rect x="439.1" y="613" width="683.0" height="15.0" fill="rgb(213,101,32)" rx="2" ry="2" />
<text  x="442.14" y="623.5" >leveldb::Benchmark::ThreadBody</text>
</g>
<g >
<title>leveldb::Arena::MemoryUsage (1,333,333 samples, 0.04%)</title><rect x="481.1" y="501" width="0.5" height="15.0" fill="rgb(214,152,23)" rx="2" ry="2" />
<text  x="484.12" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::empty (1,333,333 samples, 0.04%)</title><rect x="483.6" y="517" width="0.5" height="15.0" fill="rgb(251,57,53)" rx="2" ry="2" />
<text  x="486.56" y="527.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.04%)</title><rect x="456.2" y="341" width="0.5" height="15.0" fill="rgb(231,207,29)" rx="2" ry="2" />
<text  x="459.22" y="351.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.04%)</title><rect x="212.1" y="389" width="0.5" height="15.0" fill="rgb(214,109,36)" rx="2" ry="2" />
<text  x="215.12" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (9,333,331 samples, 0.29%)</title><rect x="396.7" y="421" width="3.4" height="15.0" fill="rgb(247,32,31)" rx="2" ry="2" />
<text  x="399.66" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (3,999,999 samples, 0.12%)</title><rect x="147.2" y="453" width="1.5" height="15.0" fill="rgb(224,161,40)" rx="2" ry="2" />
<text  x="150.19" y="463.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1,333,333 samples, 0.04%)</title><rect x="81.3" y="325" width="0.5" height="15.0" fill="rgb(246,73,37)" rx="2" ry="2" />
<text  x="84.28" y="335.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (3,999,999 samples, 0.12%)</title><rect x="89.6" y="341" width="1.4" height="15.0" fill="rgb(246,203,22)" rx="2" ry="2" />
<text  x="92.58" y="351.5" ></text>
</g>
<g >
<title>__GI___libc_read (1,333,333 samples, 0.04%)</title><rect x="1129.0" y="565" width="0.5" height="15.0" fill="rgb(213,152,35)" rx="2" ry="2" />
<text  x="1131.97" y="575.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;leveldb::Status&gt;::~_Result (5,333,332 samples, 0.17%)</title><rect x="1094.8" y="357" width="2.0" height="15.0" fill="rgb(215,14,45)" rx="2" ry="2" />
<text  x="1097.80" y="367.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (6,666,665 samples, 0.21%)</title><rect x="240.9" y="453" width="2.5" height="15.0" fill="rgb(245,171,9)" rx="2" ry="2" />
<text  x="243.92" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::swap (9,333,331 samples, 0.29%)</title><rect x="1018.2" y="357" width="3.4" height="15.0" fill="rgb(234,144,18)" rx="2" ry="2" />
<text  x="1021.15" y="367.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.04%)</title><rect x="103.7" y="389" width="0.5" height="15.0" fill="rgb(240,123,2)" rx="2" ry="2" />
<text  x="106.74" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (3,999,999 samples, 0.12%)</title><rect x="385.4" y="389" width="1.5" height="15.0" fill="rgb(250,108,44)" rx="2" ry="2" />
<text  x="388.43" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (5,333,332 samples, 0.17%)</title><rect x="61.8" y="373" width="1.9" height="15.0" fill="rgb(241,75,8)" rx="2" ry="2" />
<text  x="64.75" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (3,999,999 samples, 0.12%)</title><rect x="344.9" y="469" width="1.5" height="15.0" fill="rgb(232,69,27)" rx="2" ry="2" />
<text  x="347.91" y="479.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (3,999,999 samples, 0.12%)</title><rect x="1089.4" y="405" width="1.5" height="15.0" fill="rgb(237,67,2)" rx="2" ry="2" />
<text  x="1092.43" y="415.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::Append (9,333,331 samples, 0.29%)</title><rect x="781.4" y="501" width="3.4" height="15.0" fill="rgb(254,68,37)" rx="2" ry="2" />
<text  x="784.37" y="511.5" ></text>
</g>
<g >
<title>kmem_cache_free (1,333,333 samples, 0.04%)</title><rect x="438.6" y="197" width="0.5" height="15.0" fill="rgb(216,228,43)" rx="2" ry="2" />
<text  x="441.65" y="207.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::shared_ptr (6,666,665 samples, 0.21%)</title><rect x="1050.4" y="501" width="2.4" height="15.0" fill="rgb(210,61,40)" rx="2" ry="2" />
<text  x="1053.37" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (2,666,666 samples, 0.08%)</title><rect x="385.9" y="373" width="1.0" height="15.0" fill="rgb(253,5,16)" rx="2" ry="2" />
<text  x="388.92" y="383.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (3,999,999 samples, 0.12%)</title><rect x="253.1" y="421" width="1.5" height="15.0" fill="rgb(244,89,36)" rx="2" ry="2" />
<text  x="256.13" y="431.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_State_baseV2 (13,333,330 samples, 0.41%)</title><rect x="1061.6" y="405" width="4.9" height="15.0" fill="rgb(213,149,44)" rx="2" ry="2" />
<text  x="1064.60" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt;::_Deque_impl::_Deque_impl (1,333,333 samples, 0.04%)</title><rect x="1130.9" y="485" width="0.5" height="15.0" fill="rgb(216,33,23)" rx="2" ry="2" />
<text  x="1133.93" y="495.5" ></text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.04%)</title><rect x="93.5" y="405" width="0.5" height="15.0" fill="rgb(227,221,54)" rx="2" ry="2" />
<text  x="96.48" y="415.5" ></text>
</g>
<g >
<title>__GI___sigprocmask (1,333,333 samples, 0.04%)</title><rect x="90.6" y="165" width="0.4" height="15.0" fill="rgb(242,118,50)" rx="2" ry="2" />
<text  x="93.55" y="175.5" ></text>
</g>
<g >
<title>iov_iter_advance (1,333,333 samples, 0.04%)</title><rect x="902.4" y="293" width="0.5" height="15.0" fill="rgb(214,220,23)" rx="2" ry="2" />
<text  x="905.45" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::~vector (1,333,333 samples, 0.04%)</title><rect x="144.3" y="453" width="0.4" height="15.0" fill="rgb(216,17,47)" rx="2" ry="2" />
<text  x="147.26" y="463.5" ></text>
</g>
<g >
<title>memcpy@plt (1,333,333 samples, 0.04%)</title><rect x="258.0" y="421" width="0.5" height="15.0" fill="rgb(244,199,17)" rx="2" ry="2" />
<text  x="261.01" y="431.5" ></text>
</g>
<g >
<title>link_path_walk (1,333,333 samples, 0.04%)</title><rect x="1131.9" y="453" width="0.5" height="15.0" fill="rgb(244,100,52)" rx="2" ry="2" />
<text  x="1134.90" y="463.5" ></text>
</g>
<g >
<title>vfs_statx (1,333,333 samples, 0.04%)</title><rect x="1124.1" y="485" width="0.5" height="15.0" fill="rgb(212,63,12)" rx="2" ry="2" />
<text  x="1127.09" y="495.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::GetMaxHeight (1,333,333 samples, 0.04%)</title><rect x="744.3" y="453" width="0.5" height="15.0" fill="rgb(222,216,40)" rx="2" ry="2" />
<text  x="747.27" y="463.5" ></text>
</g>
<g >
<title>__ext4_journal_stop (1,333,333 samples, 0.04%)</title><rect x="861.9" y="229" width="0.5" height="15.0" fill="rgb(251,148,7)" rx="2" ry="2" />
<text  x="864.92" y="239.5" ></text>
</g>
<g >
<title>tlb_remove_table_rcu (1,333,333 samples, 0.04%)</title><rect x="409.4" y="341" width="0.4" height="15.0" fill="rgb(250,218,1)" rx="2" ry="2" />
<text  x="412.35" y="351.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;leveldb::Status&gt;::~_Result (2,666,666 samples, 0.08%)</title><rect x="1094.8" y="341" width="1.0" height="15.0" fill="rgb(215,175,16)" rx="2" ry="2" />
<text  x="1097.80" y="351.5" ></text>
</g>
<g >
<title>pagecache_get_page (11,999,997 samples, 0.37%)</title><rect x="844.8" y="261" width="4.4" height="15.0" fill="rgb(249,20,10)" rx="2" ry="2" />
<text  x="847.84" y="271.5" ></text>
</g>
<g >
<title>__do_page_fault (13,333,330 samples, 0.41%)</title><rect x="1165.6" y="693" width="4.9" height="15.0" fill="rgb(223,34,9)" rx="2" ry="2" />
<text  x="1168.59" y="703.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.04%)</title><rect x="115.9" y="309" width="0.5" height="15.0" fill="rgb(247,12,14)" rx="2" ry="2" />
<text  x="118.94" y="319.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::NoBarrier_SetNext (3,999,999 samples, 0.12%)</title><rect x="1151.4" y="741" width="1.5" height="15.0" fill="rgb(253,188,36)" rx="2" ry="2" />
<text  x="1154.43" y="751.5" ></text>
</g>
</g>
</svg>
