<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="806.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="789" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="789" > </text>
<g id="frames">
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1,333,333 samples, 0.05%)</title><rect x="269.1" y="373" width="0.6" height="15.0" fill="rgb(241,54,35)" rx="2" ry="2" />
<text  x="272.13" y="383.5" ></text>
</g>
<g >
<title>__brelse (2,666,666 samples, 0.09%)</title><rect x="863.4" y="197" width="1.1" height="15.0" fill="rgb(214,143,53)" rx="2" ry="2" />
<text  x="866.41" y="207.5" ></text>
</g>
<g >
<title>leveldb::VersionSet::LastSequence (1,333,333 samples, 0.05%)</title><rect x="483.3" y="517" width="0.5" height="15.0" fill="rgb(208,48,1)" rx="2" ry="2" />
<text  x="486.28" y="527.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::GetMaxHeight (2,666,666 samples, 0.09%)</title><rect x="744.0" y="421" width="1.1" height="15.0" fill="rgb(249,42,4)" rx="2" ry="2" />
<text  x="747.02" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.09%)</title><rect x="1017.6" y="261" width="1.1" height="15.0" fill="rgb(216,45,34)" rx="2" ry="2" />
<text  x="1020.60" y="271.5" ></text>
</g>
<g >
<title>ext4_invalidatepage (2,666,666 samples, 0.09%)</title><rect x="231.7" y="261" width="1.0" height="15.0" fill="rgb(218,68,43)" rx="2" ry="2" />
<text  x="234.65" y="271.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (5,333,332 samples, 0.18%)</title><rect x="173.8" y="469" width="2.2" height="15.0" fill="rgb(213,115,49)" rx="2" ry="2" />
<text  x="176.83" y="479.5" ></text>
</g>
<g >
<title>drop_buffers (1,333,333 samples, 0.05%)</title><rect x="12.7" y="181" width="0.5" height="15.0" fill="rgb(242,9,32)" rx="2" ry="2" />
<text  x="15.68" y="191.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (5,333,332 samples, 0.18%)</title><rect x="1020.3" y="293" width="2.1" height="15.0" fill="rgb(218,190,50)" rx="2" ry="2" />
<text  x="1023.28" y="303.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::NoBarrier_SetNext (2,666,666 samples, 0.09%)</title><rect x="749.9" y="437" width="1.1" height="15.0" fill="rgb(234,194,31)" rx="2" ry="2" />
<text  x="752.91" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="1173.4" y="725" width="0.5" height="15.0" fill="rgb(245,119,54)" rx="2" ry="2" />
<text  x="1176.40" y="735.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::~__basic_future (5,333,332 samples, 0.18%)</title><rect x="1050.8" y="517" width="2.1" height="15.0" fill="rgb(241,41,27)" rx="2" ry="2" />
<text  x="1053.80" y="527.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Next (27,999,993 samples, 0.95%)</title><rect x="209.2" y="485" width="11.2" height="15.0" fill="rgb(232,32,25)" rx="2" ry="2" />
<text  x="212.17" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (9,333,331 samples, 0.32%)</title><rect x="1071.1" y="421" width="3.8" height="15.0" fill="rgb(236,213,41)" rx="2" ry="2" />
<text  x="1074.14" y="431.5" ></text>
</g>
<g >
<title>leveldb::Slice::operator[] (9,333,331 samples, 0.32%)</title><rect x="246.1" y="421" width="3.8" height="15.0" fill="rgb(226,153,30)" rx="2" ry="2" />
<text  x="249.11" y="431.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.05%)</title><rect x="94.6" y="213" width="0.5" height="15.0" fill="rgb(239,76,30)" rx="2" ry="2" />
<text  x="97.59" y="223.5" ></text>
</g>
<g >
<title>ksys_write (1,333,333 samples, 0.05%)</title><rect x="161.0" y="309" width="0.5" height="15.0" fill="rgb(206,224,24)" rx="2" ry="2" />
<text  x="163.98" y="319.5" ></text>
</g>
<g >
<title>jbd2_journal_stop (1,333,333 samples, 0.05%)</title><rect x="820.6" y="213" width="0.5" height="15.0" fill="rgb(207,53,1)" rx="2" ry="2" />
<text  x="823.58" y="223.5" ></text>
</g>
<g >
<title>security_cred_free (1,333,333 samples, 0.05%)</title><rect x="284.1" y="261" width="0.6" height="15.0" fill="rgb(227,63,41)" rx="2" ry="2" />
<text  x="287.12" y="271.5" ></text>
</g>
<g >
<title>leveldb::MemHashTableValue::MemHashTableValue (1,333,333 samples, 0.05%)</title><rect x="113.9" y="437" width="0.5" height="15.0" fill="rgb(206,34,13)" rx="2" ry="2" />
<text  x="116.87" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (10,666,664 samples, 0.36%)</title><rect x="296.4" y="421" width="4.3" height="15.0" fill="rgb(254,191,26)" rx="2" ry="2" />
<text  x="299.43" y="431.5" ></text>
</g>
<g >
<title>std::future&lt;leveldb::Status&gt;::get (25,333,327 samples, 0.86%)</title><rect x="1040.6" y="533" width="10.2" height="15.0" fill="rgb(226,86,12)" rx="2" ry="2" />
<text  x="1043.63" y="543.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.05%)</title><rect x="366.0" y="469" width="0.6" height="15.0" fill="rgb(228,100,15)" rx="2" ry="2" />
<text  x="369.03" y="479.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::GetChildren (1,333,333 samples, 0.05%)</title><rect x="1126.3" y="613" width="0.5" height="15.0" fill="rgb(210,62,28)" rx="2" ry="2" />
<text  x="1129.29" y="623.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="703.9" y="357" width="0.5" height="15.0" fill="rgb(214,207,7)" rx="2" ry="2" />
<text  x="706.87" y="367.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::NewDB (1,333,333 samples, 0.05%)</title><rect x="1125.8" y="613" width="0.5" height="15.0" fill="rgb(236,91,15)" rx="2" ry="2" />
<text  x="1128.75" y="623.5" ></text>
</g>
<g >
<title>handle_mm_fault (3,999,999 samples, 0.14%)</title><rect x="497.2" y="277" width="1.6" height="15.0" fill="rgb(209,226,26)" rx="2" ry="2" />
<text  x="500.21" y="287.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;char*, unsigned long, char&gt; (5,333,332 samples, 0.18%)</title><rect x="294.3" y="389" width="2.1" height="15.0" fill="rgb(230,58,38)" rx="2" ry="2" />
<text  x="297.29" y="399.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.05%)</title><rect x="409.9" y="389" width="0.6" height="15.0" fill="rgb(245,21,2)" rx="2" ry="2" />
<text  x="412.94" y="399.5" ></text>
</g>
<g >
<title>do_mprotect_pkey (1,333,333 samples, 0.05%)</title><rect x="1130.0" y="549" width="0.6" height="15.0" fill="rgb(224,16,49)" rx="2" ry="2" />
<text  x="1133.04" y="559.5" ></text>
</g>
<g >
<title>__GI__IO_default_xsputn (1,333,333 samples, 0.05%)</title><rect x="441.0" y="469" width="0.5" height="15.0" fill="rgb(253,214,6)" rx="2" ry="2" />
<text  x="443.99" y="479.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (5,333,332 samples, 0.18%)</title><rect x="142.8" y="421" width="2.1" height="15.0" fill="rgb(210,60,40)" rx="2" ry="2" />
<text  x="145.78" y="431.5" ></text>
</g>
<g >
<title>std::atomic&lt;bool&gt;::load (1,333,333 samples, 0.05%)</title><rect x="419.6" y="485" width="0.5" height="15.0" fill="rgb(238,45,24)" rx="2" ry="2" />
<text  x="422.57" y="495.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadNodeMain (1,025,333,077 samples, 34.89%)</title><rect x="10.5" y="581" width="411.8" height="15.0" fill="rgb(222,56,26)" rx="2" ry="2" />
<text  x="13.54" y="591.5" >leveldb::(anonymous namespace)::PosixEnv::BackgroundThre..</text>
</g>
<g >
<title>ext4_mark_iloc_dirty (53,333,320 samples, 1.81%)</title><rect x="866.1" y="197" width="21.4" height="15.0" fill="rgb(230,48,49)" rx="2" ry="2" />
<text  x="869.09" y="207.5" >e..</text>
</g>
<g >
<title>leveldb::TableBuilder::Finish (3,999,999 samples, 0.14%)</title><rect x="149.2" y="469" width="1.6" height="15.0" fill="rgb(232,187,51)" rx="2" ry="2" />
<text  x="152.20" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (1,333,333 samples, 0.05%)</title><rect x="1188.9" y="709" width="0.6" height="15.0" fill="rgb(209,33,44)" rx="2" ry="2" />
<text  x="1191.93" y="719.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,333,333 samples, 0.05%)</title><rect x="333.4" y="389" width="0.5" height="15.0" fill="rgb(224,172,42)" rx="2" ry="2" />
<text  x="336.38" y="399.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::WriteRandom (1,731,999,567 samples, 58.94%)</title><rect x="422.3" y="581" width="695.4" height="15.0" fill="rgb(249,186,10)" rx="2" ry="2" />
<text  x="425.25" y="591.5" >leveldb::Benchmark::WriteRandom</text>
</g>
<g >
<title>leveldb::DBImpl::WriteLevel0Table (450,666,554 samples, 15.34%)</title><rect x="13.2" y="501" width="181.0" height="15.0" fill="rgb(217,168,19)" rx="2" ry="2" />
<text  x="16.21" y="511.5" >leveldb::DBImpl::WriteL..</text>
</g>
<g >
<title>std::allocate_shared&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;&gt; (47,999,988 samples, 1.63%)</title><rect x="1058.3" y="501" width="19.3" height="15.0" fill="rgb(217,13,47)" rx="2" ry="2" />
<text  x="1061.29" y="511.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::Open (3,999,999 samples, 0.14%)</title><rect x="1125.8" y="661" width="1.6" height="15.0" fill="rgb(225,53,51)" rx="2" ry="2" />
<text  x="1128.75" y="671.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.05%)</title><rect x="1130.0" y="597" width="0.6" height="15.0" fill="rgb(240,118,24)" rx="2" ry="2" />
<text  x="1133.04" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_insert_unique&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (1,333,333 samples, 0.05%)</title><rect x="1120.4" y="597" width="0.5" height="15.0" fill="rgb(247,64,51)" rx="2" ry="2" />
<text  x="1123.40" y="607.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,333,333 samples, 0.05%)</title><rect x="173.3" y="421" width="0.5" height="15.0" fill="rgb(236,187,41)" rx="2" ry="2" />
<text  x="176.29" y="431.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (29,333,326 samples, 1.00%)</title><rect x="367.6" y="469" width="11.8" height="15.0" fill="rgb(229,178,51)" rx="2" ry="2" />
<text  x="370.64" y="479.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="562.5" y="405" width="0.6" height="15.0" fill="rgb(238,49,28)" rx="2" ry="2" />
<text  x="565.52" y="415.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="400.3" y="357" width="0.5" height="15.0" fill="rgb(250,170,45)" rx="2" ry="2" />
<text  x="403.30" y="367.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1,333,333 samples, 0.05%)</title><rect x="1081.3" y="485" width="0.6" height="15.0" fill="rgb(206,214,20)" rx="2" ry="2" />
<text  x="1084.32" y="495.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (3,999,999 samples, 0.14%)</title><rect x="299.1" y="325" width="1.6" height="15.0" fill="rgb(227,221,43)" rx="2" ry="2" />
<text  x="302.11" y="335.5" ></text>
</g>
<g >
<title>current_time (2,666,666 samples, 0.09%)</title><rect x="816.8" y="277" width="1.1" height="15.0" fill="rgb(227,208,22)" rx="2" ry="2" />
<text  x="819.83" y="287.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.05%)</title><rect x="446.9" y="533" width="0.5" height="15.0" fill="rgb(231,219,46)" rx="2" ry="2" />
<text  x="449.88" y="543.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (22,666,661 samples, 0.77%)</title><rect x="370.3" y="453" width="9.1" height="15.0" fill="rgb(206,173,54)" rx="2" ry="2" />
<text  x="373.32" y="463.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="44.8" y="389" width="0.5" height="15.0" fill="rgb(205,180,48)" rx="2" ry="2" />
<text  x="47.80" y="399.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.05%)</title><rect x="53.9" y="421" width="0.5" height="15.0" fill="rgb(224,28,38)" rx="2" ry="2" />
<text  x="56.90" y="431.5" ></text>
</g>
<g >
<title>run_timer_softirq (1,333,333 samples, 0.05%)</title><rect x="140.1" y="293" width="0.5" height="15.0" fill="rgb(215,56,17)" rx="2" ry="2" />
<text  x="143.10" y="303.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2,666,666 samples, 0.09%)</title><rect x="210.8" y="341" width="1.0" height="15.0" fill="rgb(242,61,46)" rx="2" ry="2" />
<text  x="213.77" y="351.5" ></text>
</g>
<g >
<title>leveldb::Status::~Status (2,666,666 samples, 0.09%)</title><rect x="482.2" y="517" width="1.1" height="15.0" fill="rgb(244,173,26)" rx="2" ry="2" />
<text  x="485.21" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,333,333 samples, 0.05%)</title><rect x="255.7" y="341" width="0.6" height="15.0" fill="rgb(218,226,4)" rx="2" ry="2" />
<text  x="258.74" y="351.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (1,333,333 samples, 0.05%)</title><rect x="377.8" y="325" width="0.5" height="15.0" fill="rgb(218,10,5)" rx="2" ry="2" />
<text  x="380.81" y="335.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="446.3" y="437" width="0.6" height="15.0" fill="rgb(244,64,22)" rx="2" ry="2" />
<text  x="449.34" y="447.5" ></text>
</g>
<g >
<title>ext4_mark_inode_dirty (1,333,333 samples, 0.05%)</title><rect x="161.0" y="165" width="0.5" height="15.0" fill="rgb(224,63,9)" rx="2" ry="2" />
<text  x="163.98" y="175.5" ></text>
</g>
<g >
<title>leveldb::ParseInternalKey (3,999,999 samples, 0.14%)</title><rect x="312.5" y="469" width="1.6" height="15.0" fill="rgb(220,169,20)" rx="2" ry="2" />
<text  x="315.50" y="479.5" ></text>
</g>
<g >
<title>leveldb::Status::Status (1,333,333 samples, 0.05%)</title><rect x="1135.4" y="709" width="0.5" height="15.0" fill="rgb(234,212,32)" rx="2" ry="2" />
<text  x="1138.39" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (2,666,666 samples, 0.09%)</title><rect x="277.2" y="325" width="1.0" height="15.0" fill="rgb(237,170,44)" rx="2" ry="2" />
<text  x="280.16" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (101,333,308 samples, 3.45%)</title><rect x="61.4" y="405" width="40.7" height="15.0" fill="rgb(226,7,29)" rx="2" ry="2" />
<text  x="64.40" y="415.5" >std..</text>
</g>
<g >
<title>put_cred_rcu (1,333,333 samples, 0.05%)</title><rect x="355.9" y="373" width="0.5" height="15.0" fill="rgb(224,104,13)" rx="2" ry="2" />
<text  x="358.86" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (3,999,999 samples, 0.14%)</title><rect x="278.8" y="357" width="1.6" height="15.0" fill="rgb(233,155,16)" rx="2" ry="2" />
<text  x="281.77" y="367.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.05%)</title><rect x="368.2" y="421" width="0.5" height="15.0" fill="rgb(251,156,40)" rx="2" ry="2" />
<text  x="371.18" y="431.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.05%)</title><rect x="769.7" y="469" width="0.6" height="15.0" fill="rgb(217,135,43)" rx="2" ry="2" />
<text  x="772.72" y="479.5" ></text>
</g>
<g >
<title>std::atomic_flag::_S_init (1,333,333 samples, 0.05%)</title><rect x="1065.8" y="357" width="0.5" height="15.0" fill="rgb(243,149,28)" rx="2" ry="2" />
<text  x="1068.79" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (1,333,333 samples, 0.05%)</title><rect x="180.3" y="341" width="0.5" height="15.0" fill="rgb(227,32,4)" rx="2" ry="2" />
<text  x="183.25" y="351.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,333,333 samples, 0.05%)</title><rect x="264.8" y="213" width="0.6" height="15.0" fill="rgb(240,104,34)" rx="2" ry="2" />
<text  x="267.85" y="223.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed64 (1,333,333 samples, 0.05%)</title><rect x="193.6" y="469" width="0.6" height="15.0" fill="rgb(244,28,7)" rx="2" ry="2" />
<text  x="196.64" y="479.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (7,999,998 samples, 0.27%)</title><rect x="284.7" y="357" width="3.2" height="15.0" fill="rgb(213,100,25)" rx="2" ry="2" />
<text  x="287.66" y="367.5" ></text>
</g>
<g >
<title>do_unlinkat (1,333,333 samples, 0.05%)</title><rect x="421.2" y="421" width="0.5" height="15.0" fill="rgb(245,95,8)" rx="2" ry="2" />
<text  x="424.18" y="431.5" ></text>
</g>
<g >
<title>_IO_new_file_underflow (1,333,333 samples, 0.05%)</title><rect x="1127.4" y="565" width="0.5" height="15.0" fill="rgb(214,185,31)" rx="2" ry="2" />
<text  x="1130.36" y="575.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (2,666,666 samples, 0.09%)</title><rect x="334.4" y="421" width="1.1" height="15.0" fill="rgb(233,120,35)" rx="2" ry="2" />
<text  x="337.45" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.05%)</title><rect x="335.5" y="453" width="0.6" height="15.0" fill="rgb(232,92,2)" rx="2" ry="2" />
<text  x="338.52" y="463.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.05%)</title><rect x="421.7" y="341" width="0.6" height="15.0" fill="rgb(243,73,2)" rx="2" ry="2" />
<text  x="424.72" y="351.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.05%)</title><rect x="94.6" y="229" width="0.5" height="15.0" fill="rgb(220,186,4)" rx="2" ry="2" />
<text  x="97.59" y="239.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::InsertInto (1,333,333 samples, 0.05%)</title><rect x="1155.2" y="725" width="0.5" height="15.0" fill="rgb(234,48,52)" rx="2" ry="2" />
<text  x="1158.20" y="735.5" ></text>
</g>
<g >
<title>do_unlinkat (3,999,999 samples, 0.14%)</title><rect x="231.1" y="389" width="1.6" height="15.0" fill="rgb(218,93,15)" rx="2" ry="2" />
<text  x="234.12" y="399.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt; (2,666,666 samples, 0.09%)</title><rect x="96.7" y="341" width="1.1" height="15.0" fill="rgb(217,227,47)" rx="2" ry="2" />
<text  x="99.73" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt;::_Deque_iterator (3,999,999 samples, 0.14%)</title><rect x="463.5" y="469" width="1.6" height="15.0" fill="rgb(251,148,11)" rx="2" ry="2" />
<text  x="466.48" y="479.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="192.6" y="389" width="0.5" height="15.0" fill="rgb(221,217,35)" rx="2" ry="2" />
<text  x="195.57" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result_base::_Deleter, void&gt; (1,333,333 samples, 0.05%)</title><rect x="1178.2" y="709" width="0.6" height="15.0" fill="rgb(246,227,6)" rx="2" ry="2" />
<text  x="1181.22" y="719.5" ></text>
</g>
<g >
<title>start_thread (2,757,332,644 samples, 93.83%)</title><rect x="10.5" y="709" width="1107.2" height="15.0" fill="rgb(206,38,23)" rx="2" ry="2" />
<text  x="13.54" y="719.5" >start_thread</text>
</g>
<g >
<title>__GI___pthread_mutex_unlock (1,333,333 samples, 0.05%)</title><rect x="477.4" y="453" width="0.5" height="15.0" fill="rgb(222,40,34)" rx="2" ry="2" />
<text  x="480.40" y="463.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="796.0" y="373" width="0.5" height="15.0" fill="rgb(246,65,52)" rx="2" ry="2" />
<text  x="798.95" y="383.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (3,999,999 samples, 0.14%)</title><rect x="94.1" y="277" width="1.6" height="15.0" fill="rgb(210,78,46)" rx="2" ry="2" />
<text  x="97.06" y="287.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (1,333,333 samples, 0.05%)</title><rect x="1099.5" y="373" width="0.6" height="15.0" fill="rgb(237,71,7)" rx="2" ry="2" />
<text  x="1102.52" y="383.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (7,999,998 samples, 0.27%)</title><rect x="506.8" y="405" width="3.3" height="15.0" fill="rgb(228,171,23)" rx="2" ry="2" />
<text  x="509.84" y="415.5" ></text>
</g>
<g >
<title>path_openat (1,333,333 samples, 0.05%)</title><rect x="468.3" y="389" width="0.5" height="15.0" fill="rgb(208,159,41)" rx="2" ry="2" />
<text  x="471.29" y="399.5" ></text>
</g>
<g >
<title>leveldb::Status::Status (1,333,333 samples, 0.05%)</title><rect x="770.3" y="469" width="0.5" height="15.0" fill="rgb(218,187,48)" rx="2" ry="2" />
<text  x="773.25" y="479.5" ></text>
</g>
<g >
<title>vm_munmap (1,333,333 samples, 0.05%)</title><rect x="421.7" y="309" width="0.6" height="15.0" fill="rgb(233,166,19)" rx="2" ry="2" />
<text  x="424.72" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (1,333,333 samples, 0.05%)</title><rect x="329.1" y="421" width="0.5" height="15.0" fill="rgb(253,50,28)" rx="2" ry="2" />
<text  x="332.09" y="431.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1,333,333 samples, 0.05%)</title><rect x="270.2" y="181" width="0.5" height="15.0" fill="rgb(210,64,41)" rx="2" ry="2" />
<text  x="273.20" y="191.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,333,333 samples, 0.05%)</title><rect x="94.6" y="197" width="0.5" height="15.0" fill="rgb(248,219,16)" rx="2" ry="2" />
<text  x="97.59" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (13,333,330 samples, 0.45%)</title><rect x="79.6" y="357" width="5.4" height="15.0" fill="rgb(233,145,13)" rx="2" ry="2" />
<text  x="82.60" y="367.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteRawBlock (26,666,660 samples, 0.91%)</title><rect x="390.1" y="453" width="10.7" height="15.0" fill="rgb(252,196,12)" rx="2" ry="2" />
<text  x="393.13" y="463.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::Delete (1,333,333 samples, 0.05%)</title><rect x="194.7" y="357" width="0.5" height="15.0" fill="rgb(225,75,21)" rx="2" ry="2" />
<text  x="197.71" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1,333,333 samples, 0.05%)</title><rect x="1175.5" y="709" width="0.6" height="15.0" fill="rgb(250,105,36)" rx="2" ry="2" />
<text  x="1178.54" y="719.5" ></text>
</g>
<g >
<title>__do_sys_madvise (1,333,333 samples, 0.05%)</title><rect x="1119.9" y="357" width="0.5" height="15.0" fill="rgb(246,8,8)" rx="2" ry="2" />
<text  x="1122.86" y="367.5" ></text>
</g>
<g >
<title>__x64_sys_mprotect (1,333,333 samples, 0.05%)</title><rect x="1130.0" y="565" width="0.6" height="15.0" fill="rgb(209,144,48)" rx="2" ry="2" />
<text  x="1133.04" y="575.5" ></text>
</g>
<g >
<title>ext4_da_invalidatepage (3,999,999 samples, 0.14%)</title><rect x="11.6" y="293" width="1.6" height="15.0" fill="rgb(222,167,8)" rx="2" ry="2" />
<text  x="14.61" y="303.5" ></text>
</g>
<g >
<title>std::mutex::unlock (2,666,666 samples, 0.09%)</title><rect x="477.4" y="485" width="1.1" height="15.0" fill="rgb(223,123,30)" rx="2" ry="2" />
<text  x="480.40" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (3,999,999 samples, 0.14%)</title><rect x="332.3" y="453" width="1.6" height="15.0" fill="rgb(221,224,53)" rx="2" ry="2" />
<text  x="335.30" y="463.5" ></text>
</g>
<g >
<title>jbd2_journal_try_to_free_buffers (6,666,665 samples, 0.23%)</title><rect x="1123.1" y="373" width="2.7" height="15.0" fill="rgb(249,162,35)" rx="2" ry="2" />
<text  x="1126.08" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (1,333,333 samples, 0.05%)</title><rect x="184.5" y="421" width="0.6" height="15.0" fill="rgb(222,106,52)" rx="2" ry="2" />
<text  x="187.54" y="431.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (499,999,875 samples, 17.01%)</title><rect x="525.0" y="421" width="200.8" height="15.0" fill="rgb(241,94,53)" rx="2" ry="2" />
<text  x="528.05" y="431.5" >leveldb::SkipList&lt;char con..</text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add (2,666,666 samples, 0.09%)</title><rect x="1049.2" y="421" width="1.1" height="15.0" fill="rgb(214,97,39)" rx="2" ry="2" />
<text  x="1052.19" y="431.5" ></text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.05%)</title><rect x="301.3" y="421" width="0.5" height="15.0" fill="rgb(243,6,43)" rx="2" ry="2" />
<text  x="304.25" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get (2,666,666 samples, 0.09%)</title><rect x="1011.7" y="261" width="1.1" height="15.0" fill="rgb(241,211,3)" rx="2" ry="2" />
<text  x="1014.72" y="271.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3,999,999 samples, 0.14%)</title><rect x="380.5" y="421" width="1.6" height="15.0" fill="rgb(222,72,34)" rx="2" ry="2" />
<text  x="383.49" y="431.5" ></text>
</g>
<g >
<title>std::set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::insert (1,333,333 samples, 0.05%)</title><rect x="1120.4" y="613" width="0.5" height="15.0" fill="rgb(230,53,11)" rx="2" ry="2" />
<text  x="1123.40" y="623.5" ></text>
</g>
<g >
<title>evict (11,999,997 samples, 0.41%)</title><rect x="1120.9" y="533" width="4.9" height="15.0" fill="rgb(212,164,32)" rx="2" ry="2" />
<text  x="1123.93" y="543.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (1,333,333 samples, 0.05%)</title><rect x="1125.8" y="597" width="0.5" height="15.0" fill="rgb(234,204,53)" rx="2" ry="2" />
<text  x="1128.75" y="607.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.05%)</title><rect x="388.0" y="293" width="0.5" height="15.0" fill="rgb(254,187,13)" rx="2" ry="2" />
<text  x="390.99" y="303.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;unsigned long, char&gt; (23,999,994 samples, 0.82%)</title><rect x="150.8" y="341" width="9.6" height="15.0" fill="rgb(231,209,31)" rx="2" ry="2" />
<text  x="153.81" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (5,333,332 samples, 0.18%)</title><rect x="271.3" y="341" width="2.1" height="15.0" fill="rgb(242,75,7)" rx="2" ry="2" />
<text  x="274.27" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_allocate_buckets (1,333,333 samples, 0.05%)</title><rect x="264.8" y="309" width="0.6" height="15.0" fill="rgb(254,208,54)" rx="2" ry="2" />
<text  x="267.85" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (2,666,666 samples, 0.09%)</title><rect x="452.8" y="517" width="1.0" height="15.0" fill="rgb(207,147,43)" rx="2" ry="2" />
<text  x="455.77" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2,666,666 samples, 0.09%)</title><rect x="348.4" y="453" width="1.0" height="15.0" fill="rgb(214,108,11)" rx="2" ry="2" />
<text  x="351.37" y="463.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1,333,333 samples, 0.05%)</title><rect x="1179.3" y="709" width="0.5" height="15.0" fill="rgb(253,113,32)" rx="2" ry="2" />
<text  x="1182.29" y="719.5" ></text>
</g>
<g >
<title>iput (11,999,997 samples, 0.41%)</title><rect x="1120.9" y="549" width="4.9" height="15.0" fill="rgb(252,222,19)" rx="2" ry="2" />
<text  x="1123.93" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="320.0" y="437" width="0.5" height="15.0" fill="rgb(241,224,33)" rx="2" ry="2" />
<text  x="322.99" y="447.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (1,333,333 samples, 0.05%)</title><rect x="159.4" y="197" width="0.5" height="15.0" fill="rgb(251,38,47)" rx="2" ry="2" />
<text  x="162.37" y="207.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::InitModule (1,333,333 samples, 0.05%)</title><rect x="1119.3" y="645" width="0.6" height="15.0" fill="rgb(253,39,0)" rx="2" ry="2" />
<text  x="1122.33" y="655.5" ></text>
</g>
<g >
<title>ext4_inode_csum.isra.59 (1,333,333 samples, 0.05%)</title><rect x="161.0" y="117" width="0.5" height="15.0" fill="rgb(219,96,12)" rx="2" ry="2" />
<text  x="163.98" y="127.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (634,666,508 samples, 21.60%)</title><rect x="501.5" y="453" width="254.8" height="15.0" fill="rgb(223,166,34)" rx="2" ry="2" />
<text  x="504.49" y="463.5" >leveldb::SkipList&lt;char const*, le..</text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="417.4" y="421" width="0.6" height="15.0" fill="rgb(251,174,26)" rx="2" ry="2" />
<text  x="420.43" y="431.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.05%)</title><rect x="264.8" y="245" width="0.6" height="15.0" fill="rgb(227,66,5)" rx="2" ry="2" />
<text  x="267.85" y="255.5" ></text>
</g>
<g >
<title>__ext4_journal_get_write_access (5,333,332 samples, 0.18%)</title><rect x="824.9" y="197" width="2.1" height="15.0" fill="rgb(212,108,18)" rx="2" ry="2" />
<text  x="827.86" y="207.5" ></text>
</g>
<g >
<title>operator new[] (7,999,998 samples, 0.27%)</title><rect x="496.1" y="405" width="3.2" height="15.0" fill="rgb(220,33,11)" rx="2" ry="2" />
<text  x="499.13" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (9,333,331 samples, 0.32%)</title><rect x="374.6" y="373" width="3.7" height="15.0" fill="rgb(211,140,24)" rx="2" ry="2" />
<text  x="377.60" y="383.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (1,333,333 samples, 0.05%)</title><rect x="194.7" y="149" width="0.5" height="15.0" fill="rgb(221,3,11)" rx="2" ry="2" />
<text  x="197.71" y="159.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;::tuple (6,666,665 samples, 0.23%)</title><rect x="97.8" y="341" width="2.7" height="15.0" fill="rgb(207,84,18)" rx="2" ry="2" />
<text  x="100.80" y="351.5" ></text>
</g>
<g >
<title>jbd2_journal_stop (19,999,995 samples, 0.68%)</title><rect x="851.1" y="245" width="8.0" height="15.0" fill="rgb(226,11,18)" rx="2" ry="2" />
<text  x="854.10" y="255.5" ></text>
</g>
<g >
<title>ksys_write (293,333,260 samples, 9.98%)</title><rect x="799.2" y="373" width="117.8" height="15.0" fill="rgb(205,173,27)" rx="2" ry="2" />
<text  x="802.17" y="383.5" >ksys_write</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (1,333,333 samples, 0.05%)</title><rect x="1174.5" y="709" width="0.5" height="15.0" fill="rgb(207,14,18)" rx="2" ry="2" />
<text  x="1177.47" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,333,333 samples, 0.05%)</title><rect x="331.8" y="421" width="0.5" height="15.0" fill="rgb(234,144,29)" rx="2" ry="2" />
<text  x="334.77" y="431.5" ></text>
</g>
<g >
<title>jbd2__journal_start (1,333,333 samples, 0.05%)</title><rect x="893.9" y="213" width="0.6" height="15.0" fill="rgb(248,204,35)" rx="2" ry="2" />
<text  x="896.93" y="223.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set (1,333,333 samples, 0.05%)</title><rect x="1176.6" y="725" width="0.6" height="15.0" fill="rgb(250,193,54)" rx="2" ry="2" />
<text  x="1179.62" y="735.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ReleaseToCentralCache (2,666,666 samples, 0.09%)</title><rect x="194.2" y="421" width="1.0" height="15.0" fill="rgb(212,74,38)" rx="2" ry="2" />
<text  x="197.17" y="431.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (231,999,942 samples, 7.89%)</title><rect x="632.7" y="389" width="93.1" height="15.0" fill="rgb(223,128,27)" rx="2" ry="2" />
<text  x="635.66" y="399.5" >leveldb::In..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="320.0" y="453" width="0.5" height="15.0" fill="rgb(235,177,35)" rx="2" ry="2" />
<text  x="322.99" y="463.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::__future_base::_Result_base::_Deleter, true&gt;::_Head_base&lt;std::__future_base::_Result_base::_Deleter&gt; (3,999,999 samples, 0.14%)</title><rect x="1007.4" y="213" width="1.6" height="15.0" fill="rgb(234,184,27)" rx="2" ry="2" />
<text  x="1010.43" y="223.5" ></text>
</g>
<g >
<title>rebalance_domains (1,333,333 samples, 0.05%)</title><rect x="562.5" y="325" width="0.6" height="15.0" fill="rgb(225,107,22)" rx="2" ry="2" />
<text  x="565.52" y="335.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.05%)</title><rect x="270.2" y="197" width="0.5" height="15.0" fill="rgb(222,188,23)" rx="2" ry="2" />
<text  x="273.20" y="207.5" ></text>
</g>
<g >
<title>madvise_free_pte_range (1,333,333 samples, 0.05%)</title><rect x="160.4" y="133" width="0.6" height="15.0" fill="rgb(211,200,27)" rx="2" ry="2" />
<text  x="163.44" y="143.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2,666,666 samples, 0.09%)</title><rect x="626.8" y="357" width="1.0" height="15.0" fill="rgb(226,111,12)" rx="2" ry="2" />
<text  x="629.77" y="367.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1,333,333 samples, 0.05%)</title><rect x="703.9" y="293" width="0.5" height="15.0" fill="rgb(226,130,45)" rx="2" ry="2" />
<text  x="706.87" y="303.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;*, unsigned long&gt; (1,333,333 samples, 0.05%)</title><rect x="1129.0" y="565" width="0.5" height="15.0" fill="rgb(245,219,41)" rx="2" ry="2" />
<text  x="1131.97" y="575.5" ></text>
</g>
<g >
<title>radix_tree_lookup_slot (1,333,333 samples, 0.05%)</title><rect x="845.7" y="229" width="0.6" height="15.0" fill="rgb(235,203,12)" rx="2" ry="2" />
<text  x="848.74" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1,333,333 samples, 0.05%)</title><rect x="361.8" y="469" width="0.5" height="15.0" fill="rgb(208,177,8)" rx="2" ry="2" />
<text  x="364.75" y="479.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::RemoveObsoleteFiles (2,666,666 samples, 0.09%)</title><rect x="421.2" y="517" width="1.1" height="15.0" fill="rgb(205,44,3)" rx="2" ry="2" />
<text  x="424.18" y="527.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="279.8" y="309" width="0.6" height="15.0" fill="rgb(227,54,7)" rx="2" ry="2" />
<text  x="282.84" y="319.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.05%)</title><rect x="143.8" y="325" width="0.6" height="15.0" fill="rgb(220,168,35)" rx="2" ry="2" />
<text  x="146.85" y="335.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (6,666,665 samples, 0.23%)</title><rect x="200.6" y="437" width="2.7" height="15.0" fill="rgb(248,188,12)" rx="2" ry="2" />
<text  x="203.60" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (1,333,333 samples, 0.05%)</title><rect x="297.5" y="357" width="0.5" height="15.0" fill="rgb(206,34,37)" rx="2" ry="2" />
<text  x="300.50" y="367.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::PrintEnvironment (3,999,999 samples, 0.14%)</title><rect x="1127.4" y="645" width="1.6" height="15.0" fill="rgb(223,10,21)" rx="2" ry="2" />
<text  x="1130.36" y="655.5" ></text>
</g>
<g >
<title>leveldb::operator== (1,333,333 samples, 0.05%)</title><rect x="249.9" y="421" width="0.5" height="15.0" fill="rgb(219,13,45)" rx="2" ry="2" />
<text  x="252.85" y="431.5" ></text>
</g>
<g >
<title>__GI___snprintf (1,333,333 samples, 0.05%)</title><rect x="1126.8" y="581" width="0.6" height="15.0" fill="rgb(210,48,40)" rx="2" ry="2" />
<text  x="1129.82" y="591.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (3,999,999 samples, 0.14%)</title><rect x="180.3" y="357" width="1.6" height="15.0" fill="rgb(243,10,4)" rx="2" ry="2" />
<text  x="183.25" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1,333,333 samples, 0.05%)</title><rect x="113.9" y="421" width="0.5" height="15.0" fill="rgb(218,165,9)" rx="2" ry="2" />
<text  x="116.87" y="431.5" ></text>
</g>
<g >
<title>apparmor_cred_free (1,333,333 samples, 0.05%)</title><rect x="284.1" y="245" width="0.6" height="15.0" fill="rgb(246,45,13)" rx="2" ry="2" />
<text  x="287.12" y="255.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (2,757,332,644 samples, 93.83%)</title><rect x="10.5" y="613" width="1107.2" height="15.0" fill="rgb(234,20,48)" rx="2" ry="2" />
<text  x="13.54" y="623.5" >std::__invoke_impl&lt;void, void </text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.09%)</title><rect x="1077.6" y="453" width="1.0" height="15.0" fill="rgb(220,5,1)" rx="2" ry="2" />
<text  x="1080.57" y="463.5" ></text>
</g>
<g >
<title>do_page_fault (2,666,666 samples, 0.09%)</title><rect x="82.8" y="309" width="1.1" height="15.0" fill="rgb(215,162,8)" rx="2" ry="2" />
<text  x="85.81" y="319.5" ></text>
</g>
<g >
<title>show_cpuinfo (1,333,333 samples, 0.05%)</title><rect x="1127.4" y="405" width="0.5" height="15.0" fill="rgb(244,90,22)" rx="2" ry="2" />
<text  x="1130.36" y="415.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (26,666,660 samples, 0.91%)</title><rect x="197.9" y="469" width="10.7" height="15.0" fill="rgb(213,90,16)" rx="2" ry="2" />
<text  x="200.92" y="479.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (2,666,666 samples, 0.09%)</title><rect x="317.8" y="485" width="1.1" height="15.0" fill="rgb(220,153,53)" rx="2" ry="2" />
<text  x="320.85" y="495.5" ></text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.05%)</title><rect x="1057.2" y="517" width="0.6" height="15.0" fill="rgb(246,228,2)" rx="2" ry="2" />
<text  x="1060.22" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="87.6" y="341" width="0.6" height="15.0" fill="rgb(254,50,18)" rx="2" ry="2" />
<text  x="90.63" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator[]@plt (1,333,333 samples, 0.05%)</title><rect x="451.7" y="501" width="0.5" height="15.0" fill="rgb(225,86,53)" rx="2" ry="2" />
<text  x="454.70" y="511.5" ></text>
</g>
<g >
<title>page_fault (10,666,664 samples, 0.36%)</title><rect x="156.2" y="293" width="4.2" height="15.0" fill="rgb(206,150,37)" rx="2" ry="2" />
<text  x="159.16" y="303.5" ></text>
</g>
<g >
<title>leveldb::BuildTable (363,999,909 samples, 12.39%)</title><rect x="14.8" y="485" width="146.2" height="15.0" fill="rgb(252,81,37)" rx="2" ry="2" />
<text  x="17.82" y="495.5" >leveldb::BuildTable</text>
</g>
<g >
<title>release_pages (2,666,666 samples, 0.09%)</title><rect x="1120.9" y="453" width="1.1" height="15.0" fill="rgb(243,87,51)" rx="2" ry="2" />
<text  x="1123.93" y="463.5" ></text>
</g>
<g >
<title>__GI___open64_nocancel (1,333,333 samples, 0.05%)</title><rect x="1126.3" y="581" width="0.5" height="15.0" fill="rgb(244,12,8)" rx="2" ry="2" />
<text  x="1129.29" y="591.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::Append (1,333,333 samples, 0.05%)</title><rect x="1155.7" y="709" width="0.6" height="15.0" fill="rgb(213,77,17)" rx="2" ry="2" />
<text  x="1158.74" y="719.5" ></text>
</g>
<g >
<title>rcu_report_qs_rnp (2,666,666 samples, 0.09%)</title><rect x="626.8" y="277" width="1.0" height="15.0" fill="rgb(231,151,52)" rx="2" ry="2" />
<text  x="629.77" y="287.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (6,666,665 samples, 0.23%)</title><rect x="1096.8" y="325" width="2.7" height="15.0" fill="rgb(243,126,7)" rx="2" ry="2" />
<text  x="1099.84" y="335.5" ></text>
</g>
<g >
<title>__block_commit_write.isra.33 (10,666,664 samples, 0.36%)</title><rect x="895.5" y="229" width="4.3" height="15.0" fill="rgb(231,49,32)" rx="2" ry="2" />
<text  x="898.54" y="239.5" ></text>
</g>
<g >
<title>add_transaction_credits (1,333,333 samples, 0.05%)</title><rect x="819.0" y="181" width="0.5" height="15.0" fill="rgb(220,228,14)" rx="2" ry="2" />
<text  x="821.97" y="191.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.05%)</title><rect x="139.6" y="357" width="0.5" height="15.0" fill="rgb(241,71,15)" rx="2" ry="2" />
<text  x="142.56" y="367.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.05%)</title><rect x="340.3" y="485" width="0.6" height="15.0" fill="rgb(253,175,15)" rx="2" ry="2" />
<text  x="343.34" y="495.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="497.2" y="197" width="0.5" height="15.0" fill="rgb(219,35,26)" rx="2" ry="2" />
<text  x="500.21" y="207.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteBlock (1,333,333 samples, 0.05%)</title><rect x="293.8" y="421" width="0.5" height="15.0" fill="rgb(233,36,40)" rx="2" ry="2" />
<text  x="296.76" y="431.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (11,999,997 samples, 0.41%)</title><rect x="275.6" y="405" width="4.8" height="15.0" fill="rgb(242,88,23)" rx="2" ry="2" />
<text  x="278.55" y="415.5" ></text>
</g>
<g >
<title>ext4_reserve_inode_write (7,999,998 samples, 0.27%)</title><rect x="823.8" y="213" width="3.2" height="15.0" fill="rgb(223,128,41)" rx="2" ry="2" />
<text  x="826.79" y="223.5" ></text>
</g>
<g >
<title>leveldb::EncodeFixed32 (1,333,333 samples, 0.05%)</title><rect x="1116.7" y="517" width="0.5" height="15.0" fill="rgb(232,161,40)" rx="2" ry="2" />
<text  x="1119.65" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (22,666,661 samples, 0.77%)</title><rect x="176.0" y="453" width="9.1" height="15.0" fill="rgb(216,126,5)" rx="2" ry="2" />
<text  x="178.97" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (3,999,999 samples, 0.14%)</title><rect x="333.9" y="453" width="1.6" height="15.0" fill="rgb(234,182,35)" rx="2" ry="2" />
<text  x="336.91" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::release (6,666,665 samples, 0.23%)</title><rect x="1010.1" y="277" width="2.7" height="15.0" fill="rgb(236,200,11)" rx="2" ry="2" />
<text  x="1013.11" y="287.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.05%)</title><rect x="509.5" y="373" width="0.6" height="15.0" fill="rgb(252,223,23)" rx="2" ry="2" />
<text  x="512.52" y="383.5" ></text>
</g>
<g >
<title>ext4_invalidatepage (2,666,666 samples, 0.09%)</title><rect x="12.1" y="277" width="1.1" height="15.0" fill="rgb(253,207,12)" rx="2" ry="2" />
<text  x="15.14" y="287.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;char*, unsigned long&gt; (23,999,994 samples, 0.82%)</title><rect x="150.8" y="389" width="9.6" height="15.0" fill="rgb(243,50,12)" rx="2" ry="2" />
<text  x="153.81" y="399.5" ></text>
</g>
<g >
<title>ext4_claim_free_clusters (1,333,333 samples, 0.05%)</title><rect x="842.0" y="229" width="0.5" height="15.0" fill="rgb(226,168,12)" rx="2" ry="2" />
<text  x="845.00" y="239.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="843.6" y="149" width="0.5" height="15.0" fill="rgb(224,199,23)" rx="2" ry="2" />
<text  x="846.60" y="159.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="843.6" y="133" width="0.5" height="15.0" fill="rgb(244,4,31)" rx="2" ry="2" />
<text  x="846.60" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (5,333,332 samples, 0.18%)</title><rect x="1171.3" y="725" width="2.1" height="15.0" fill="rgb(223,43,18)" rx="2" ry="2" />
<text  x="1174.26" y="735.5" ></text>
</g>
<g >
<title>leveldb::Random::Uniform (2,666,666 samples, 0.09%)</title><rect x="1103.3" y="549" width="1.0" height="15.0" fill="rgb(254,75,34)" rx="2" ry="2" />
<text  x="1106.27" y="559.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::value (1,333,333 samples, 0.05%)</title><rect x="222.5" y="453" width="0.6" height="15.0" fill="rgb(251,18,32)" rx="2" ry="2" />
<text  x="225.55" y="463.5" ></text>
</g>
<g >
<title>ext4_inode_csum_set (1,333,333 samples, 0.05%)</title><rect x="161.0" y="133" width="0.5" height="15.0" fill="rgb(209,28,5)" rx="2" ry="2" />
<text  x="163.98" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (1,333,333 samples, 0.05%)</title><rect x="111.2" y="357" width="0.5" height="15.0" fill="rgb(249,24,23)" rx="2" ry="2" />
<text  x="114.19" y="367.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (1,333,333 samples, 0.05%)</title><rect x="270.2" y="293" width="0.5" height="15.0" fill="rgb(226,151,15)" rx="2" ry="2" />
<text  x="273.20" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::destroy&lt;leveldb::DBImpl::Writer*&gt; (1,333,333 samples, 0.05%)</title><rect x="961.4" y="501" width="0.5" height="15.0" fill="rgb(239,84,13)" rx="2" ry="2" />
<text  x="964.39" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;leveldb::ParsedInternalKey*, std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt; &gt;::base (1,333,333 samples, 0.05%)</title><rect x="1118.3" y="709" width="0.5" height="15.0" fill="rgb(216,189,14)" rx="2" ry="2" />
<text  x="1121.26" y="719.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Flush (2,666,666 samples, 0.09%)</title><rect x="1153.1" y="725" width="1.0" height="15.0" fill="rgb(228,44,54)" rx="2" ry="2" />
<text  x="1156.06" y="735.5" ></text>
</g>
<g >
<title>munmap (1,333,333 samples, 0.05%)</title><rect x="421.7" y="373" width="0.6" height="15.0" fill="rgb(247,207,38)" rx="2" ry="2" />
<text  x="424.72" y="383.5" ></text>
</g>
<g >
<title>__x64_sys_openat (1,333,333 samples, 0.05%)</title><rect x="1126.3" y="533" width="0.5" height="15.0" fill="rgb(216,80,34)" rx="2" ry="2" />
<text  x="1129.29" y="543.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.05%)</title><rect x="1118.8" y="517" width="0.5" height="15.0" fill="rgb(222,121,51)" rx="2" ry="2" />
<text  x="1121.79" y="527.5" ></text>
</g>
<g >
<title>snappy::RawUncompress (5,333,332 samples, 0.18%)</title><rect x="209.7" y="357" width="2.1" height="15.0" fill="rgb(216,89,13)" rx="2" ry="2" />
<text  x="212.70" y="367.5" ></text>
</g>
<g >
<title>__ext4_journal_start_sb (5,333,332 samples, 0.18%)</title><rect x="817.9" y="229" width="2.1" height="15.0" fill="rgb(243,188,10)" rx="2" ry="2" />
<text  x="820.90" y="239.5" ></text>
</g>
<g >
<title>note_gp_changes (1,333,333 samples, 0.05%)</title><rect x="226.8" y="405" width="0.6" height="15.0" fill="rgb(237,49,22)" rx="2" ry="2" />
<text  x="229.83" y="415.5" ></text>
</g>
<g >
<title>elf_dynamic_do_Rela (1,333,333 samples, 0.05%)</title><rect x="1130.6" y="629" width="0.5" height="15.0" fill="rgb(251,164,14)" rx="2" ry="2" />
<text  x="1133.57" y="639.5" ></text>
</g>
<g >
<title>std::move&lt;char const*&amp;&gt; (1,333,333 samples, 0.05%)</title><rect x="1186.3" y="709" width="0.5" height="15.0" fill="rgb(223,134,46)" rx="2" ry="2" />
<text  x="1189.25" y="719.5" ></text>
</g>
<g >
<title>_IO_new_file_sync (1,333,333 samples, 0.05%)</title><rect x="161.0" y="437" width="0.5" height="15.0" fill="rgb(250,134,11)" rx="2" ry="2" />
<text  x="163.98" y="447.5" ></text>
</g>
<g >
<title>leveldb::MemHashTableValue::MemHashTableValue (2,666,666 samples, 0.09%)</title><rect x="280.4" y="421" width="1.0" height="15.0" fill="rgb(215,28,34)" rx="2" ry="2" />
<text  x="283.37" y="431.5" ></text>
</g>
<g >
<title>std::_Construct&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;&gt; (1,333,333 samples, 0.05%)</title><rect x="1129.0" y="533" width="0.5" height="15.0" fill="rgb(251,89,2)" rx="2" ry="2" />
<text  x="1131.97" y="543.5" ></text>
</g>
<g >
<title>__GI___clone (2,757,332,644 samples, 93.83%)</title><rect x="10.5" y="725" width="1107.2" height="15.0" fill="rgb(243,98,35)" rx="2" ry="2" />
<text  x="13.54" y="735.5" >__GI___clone</text>
</g>
<g >
<title>__block_commit_write.isra.33 (1,333,333 samples, 0.05%)</title><rect x="1165.4" y="581" width="0.5" height="15.0" fill="rgb(211,188,9)" rx="2" ry="2" />
<text  x="1168.37" y="591.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_deleter (1,333,333 samples, 0.05%)</title><rect x="1100.6" y="357" width="0.5" height="15.0" fill="rgb(209,67,51)" rx="2" ry="2" />
<text  x="1103.59" y="367.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__future_base::_State_baseV2&gt;::allocator (1,333,333 samples, 0.05%)</title><rect x="1063.1" y="421" width="0.5" height="15.0" fill="rgb(226,216,13)" rx="2" ry="2" />
<text  x="1066.11" y="431.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::_Reset::~_Reset (6,666,665 samples, 0.23%)</title><rect x="1047.6" y="517" width="2.7" height="15.0" fill="rgb(220,135,19)" rx="2" ry="2" />
<text  x="1050.59" y="527.5" ></text>
</g>
<g >
<title>ondemand_readahead (9,333,331 samples, 0.32%)</title><rect x="1161.1" y="565" width="3.7" height="15.0" fill="rgb(232,138,47)" rx="2" ry="2" />
<text  x="1164.09" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (22,666,661 samples, 0.77%)</title><rect x="1092.0" y="389" width="9.1" height="15.0" fill="rgb(230,217,10)" rx="2" ry="2" />
<text  x="1095.02" y="399.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::NoBarrier_SetNext (1,333,333 samples, 0.05%)</title><rect x="1149.8" y="709" width="0.6" height="15.0" fill="rgb(236,139,11)" rx="2" ry="2" />
<text  x="1152.85" y="719.5" ></text>
</g>
<g >
<title>do_syscall_64 (41,333,323 samples, 1.41%)</title><rect x="978.0" y="405" width="16.6" height="15.0" fill="rgb(206,87,6)" rx="2" ry="2" />
<text  x="980.99" y="415.5" ></text>
</g>
<g >
<title>leveldb::EncodeVarint32 (1,333,333 samples, 0.05%)</title><rect x="501.0" y="453" width="0.5" height="15.0" fill="rgb(251,35,20)" rx="2" ry="2" />
<text  x="503.95" y="463.5" ></text>
</g>
<g >
<title>_IO_new_do_write (1,333,333 samples, 0.05%)</title><rect x="161.0" y="421" width="0.5" height="15.0" fill="rgb(247,157,43)" rx="2" ry="2" />
<text  x="163.98" y="431.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::DecommitSpan (1,333,333 samples, 0.05%)</title><rect x="1119.9" y="453" width="0.5" height="15.0" fill="rgb(227,162,29)" rx="2" ry="2" />
<text  x="1122.86" y="463.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="703.9" y="309" width="0.5" height="15.0" fill="rgb(207,64,18)" rx="2" ry="2" />
<text  x="706.87" y="319.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::~TableBuilder (1,333,333 samples, 0.05%)</title><rect x="160.4" y="469" width="0.6" height="15.0" fill="rgb(232,129,7)" rx="2" ry="2" />
<text  x="163.44" y="479.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (9,333,331 samples, 0.32%)</title><rect x="397.1" y="389" width="3.7" height="15.0" fill="rgb(225,217,24)" rx="2" ry="2" />
<text  x="400.09" y="399.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="358.5" y="389" width="0.6" height="15.0" fill="rgb(253,52,52)" rx="2" ry="2" />
<text  x="361.54" y="399.5" ></text>
</g>
<g >
<title>leveldb::MemTable::Unref (2,666,666 samples, 0.09%)</title><rect x="194.2" y="501" width="1.0" height="15.0" fill="rgb(232,151,48)" rx="2" ry="2" />
<text  x="197.17" y="511.5" ></text>
</g>
<g >
<title>ext4_inode_csum_set (2,666,666 samples, 0.09%)</title><rect x="822.7" y="197" width="1.1" height="15.0" fill="rgb(227,199,34)" rx="2" ry="2" />
<text  x="825.72" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (10,666,664 samples, 0.36%)</title><rect x="177.6" y="437" width="4.3" height="15.0" fill="rgb(244,134,10)" rx="2" ry="2" />
<text  x="180.58" y="447.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Value (33,333,325 samples, 1.13%)</title><rect x="115.5" y="405" width="13.4" height="15.0" fill="rgb(220,87,37)" rx="2" ry="2" />
<text  x="118.47" y="415.5" ></text>
</g>
<g >
<title>__filemap_fdatawrite_range (1,333,333 samples, 0.05%)</title><rect x="1125.8" y="437" width="0.5" height="15.0" fill="rgb(237,147,36)" rx="2" ry="2" />
<text  x="1128.75" y="447.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::DecommitSpan (1,333,333 samples, 0.05%)</title><rect x="160.4" y="309" width="0.6" height="15.0" fill="rgb(246,67,5)" rx="2" ry="2" />
<text  x="163.44" y="319.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2,666,666 samples, 0.09%)</title><rect x="334.4" y="405" width="1.1" height="15.0" fill="rgb(210,194,12)" rx="2" ry="2" />
<text  x="337.45" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (2,757,332,644 samples, 93.83%)</title><rect x="10.5" y="693" width="1107.2" height="15.0" fill="rgb(211,113,10)" rx="2" ry="2" />
<text  x="13.54" y="703.5" >[libstdc++.so.6.0.29]</text>
</g>
<g >
<title>snappy::RawUncompress (5,333,332 samples, 0.18%)</title><rect x="209.7" y="373" width="2.1" height="15.0" fill="rgb(238,168,27)" rx="2" ry="2" />
<text  x="212.70" y="383.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;::_M_head (2,666,666 samples, 0.09%)</title><rect x="272.3" y="293" width="1.1" height="15.0" fill="rgb(234,199,44)" rx="2" ry="2" />
<text  x="275.34" y="303.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned int&gt;::__atomic_base (1,333,333 samples, 0.05%)</title><rect x="1065.3" y="341" width="0.5" height="15.0" fill="rgb(218,145,23)" rx="2" ry="2" />
<text  x="1068.25" y="351.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Flush (1,333,333 samples, 0.05%)</title><rect x="149.2" y="453" width="0.5" height="15.0" fill="rgb(222,165,18)" rx="2" ry="2" />
<text  x="152.20" y="463.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Add (133,333,300 samples, 4.54%)</title><rect x="240.2" y="453" width="53.6" height="15.0" fill="rgb(230,172,22)" rx="2" ry="2" />
<text  x="243.22" y="463.5" >level..</text>
</g>
<g >
<title>std::__shared_ptr_access&lt;std::__future_base::_State_baseV2,  (2,666,666 samples, 0.09%)</title><rect x="1031.5" y="485" width="1.1" height="15.0" fill="rgb(222,98,32)" rx="2" ry="2" />
<text  x="1034.52" y="495.5" ></text>
</g>
<g >
<title>__wake_up (1,333,333 samples, 0.05%)</title><rect x="850.6" y="245" width="0.5" height="15.0" fill="rgb(231,16,44)" rx="2" ry="2" />
<text  x="853.56" y="255.5" ></text>
</g>
<g >
<title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::__atomic_futex_unsigned (1,333,333 samples, 0.05%)</title><rect x="1177.7" y="709" width="0.5" height="15.0" fill="rgb(223,34,25)" rx="2" ry="2" />
<text  x="1180.69" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (2,666,666 samples, 0.09%)</title><rect x="1049.2" y="437" width="1.1" height="15.0" fill="rgb(234,148,14)" rx="2" ry="2" />
<text  x="1052.19" y="447.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="222.0" y="453" width="0.5" height="15.0" fill="rgb(230,183,7)" rx="2" ry="2" />
<text  x="225.01" y="463.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1,333,333 samples, 0.05%)</title><rect x="385.8" y="341" width="0.6" height="15.0" fill="rgb(217,167,51)" rx="2" ry="2" />
<text  x="388.84" y="351.5" ></text>
</g>
<g >
<title>free_buffer_head (1,333,333 samples, 0.05%)</title><rect x="1125.2" y="341" width="0.6" height="15.0" fill="rgb(206,89,34)" rx="2" ry="2" />
<text  x="1128.22" y="351.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::set_value (191,999,952 samples, 6.53%)</title><rect x="963.5" y="517" width="77.1" height="15.0" fill="rgb(233,189,26)" rx="2" ry="2" />
<text  x="966.53" y="527.5" >std::pro..</text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.05%)</title><rect x="143.8" y="309" width="0.6" height="15.0" fill="rgb(235,56,40)" rx="2" ry="2" />
<text  x="146.85" y="319.5" ></text>
</g>
<g >
<title>__x64_sys_getdents (1,333,333 samples, 0.05%)</title><rect x="10.5" y="405" width="0.6" height="15.0" fill="rgb(249,203,49)" rx="2" ry="2" />
<text  x="13.54" y="415.5" ></text>
</g>
<g >
<title>fault_dirty_shared_page.isra.74 (1,333,333 samples, 0.05%)</title><rect x="1166.4" y="629" width="0.6" height="15.0" fill="rgb(226,115,52)" rx="2" ry="2" />
<text  x="1169.44" y="639.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl (5,333,332 samples, 0.18%)</title><rect x="1077.6" y="501" width="2.1" height="15.0" fill="rgb(206,177,41)" rx="2" ry="2" />
<text  x="1080.57" y="511.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (1,333,333 samples, 0.05%)</title><rect x="819.5" y="213" width="0.5" height="15.0" fill="rgb(239,177,19)" rx="2" ry="2" />
<text  x="822.51" y="223.5" ></text>
</g>
<g >
<title>__x64_sys_futex (5,333,332 samples, 0.18%)</title><rect x="975.3" y="405" width="2.2" height="15.0" fill="rgb(240,76,27)" rx="2" ry="2" />
<text  x="978.31" y="415.5" ></text>
</g>
<g >
<title>leveldb::Arena::AllocateNewBlock (3,999,999 samples, 0.14%)</title><rect x="745.6" y="389" width="1.6" height="15.0" fill="rgb(244,81,45)" rx="2" ry="2" />
<text  x="748.63" y="399.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (30,666,659 samples, 1.04%)</title><rect x="196.9" y="485" width="12.3" height="15.0" fill="rgb(228,211,27)" rx="2" ry="2" />
<text  x="199.85" y="495.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (3,999,999 samples, 0.14%)</title><rect x="94.1" y="325" width="1.6" height="15.0" fill="rgb(213,80,44)" rx="2" ry="2" />
<text  x="97.06" y="335.5" ></text>
</g>
<g >
<title>std::make_shared&lt;std::__future_base::_State_baseV2&gt; (47,999,988 samples, 1.63%)</title><rect x="1058.3" y="517" width="19.3" height="15.0" fill="rgb(205,160,6)" rx="2" ry="2" />
<text  x="1061.29" y="527.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (1,333,333 samples, 0.05%)</title><rect x="187.2" y="453" width="0.5" height="15.0" fill="rgb(244,148,42)" rx="2" ry="2" />
<text  x="190.21" y="463.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (2,757,332,644 samples, 93.83%)</title><rect x="10.5" y="645" width="1107.2" height="15.0" fill="rgb(225,114,3)" rx="2" ry="2" />
<text  x="13.54" y="655.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>file_free_rcu (1,333,333 samples, 0.05%)</title><rect x="212.4" y="277" width="0.5" height="15.0" fill="rgb(237,88,51)" rx="2" ry="2" />
<text  x="215.38" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (1,333,333 samples, 0.05%)</title><rect x="378.3" y="405" width="0.6" height="15.0" fill="rgb(213,19,21)" rx="2" ry="2" />
<text  x="381.35" y="415.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::DecommitSpan (1,333,333 samples, 0.05%)</title><rect x="194.7" y="325" width="0.5" height="15.0" fill="rgb(226,52,14)" rx="2" ry="2" />
<text  x="197.71" y="335.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.05%)</title><rect x="509.0" y="373" width="0.5" height="15.0" fill="rgb(214,130,11)" rx="2" ry="2" />
<text  x="511.98" y="383.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;unsigned long, char&gt; (5,333,332 samples, 0.18%)</title><rect x="315.2" y="357" width="2.1" height="15.0" fill="rgb(223,123,21)" rx="2" ry="2" />
<text  x="318.17" y="367.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.05%)</title><rect x="312.0" y="325" width="0.5" height="15.0" fill="rgb(233,215,1)" rx="2" ry="2" />
<text  x="314.96" y="335.5" ></text>
</g>
<g >
<title>seq_printf (1,333,333 samples, 0.05%)</title><rect x="1127.4" y="389" width="0.5" height="15.0" fill="rgb(215,143,44)" rx="2" ry="2" />
<text  x="1130.36" y="399.5" ></text>
</g>
<g >
<title>snappy::RawCompress (33,333,325 samples, 1.13%)</title><rect x="128.9" y="405" width="13.3" height="15.0" fill="rgb(251,148,18)" rx="2" ry="2" />
<text  x="131.86" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (1,333,333 samples, 0.05%)</title><rect x="1172.3" y="709" width="0.6" height="15.0" fill="rgb(222,140,29)" rx="2" ry="2" />
<text  x="1175.33" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2,666,666 samples, 0.09%)</title><rect x="49.6" y="437" width="1.1" height="15.0" fill="rgb(209,43,0)" rx="2" ry="2" />
<text  x="52.62" y="447.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="321.1" y="373" width="0.5" height="15.0" fill="rgb(236,78,3)" rx="2" ry="2" />
<text  x="324.06" y="383.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::GetMaxHeight (2,666,666 samples, 0.09%)</title><rect x="744.0" y="437" width="1.1" height="15.0" fill="rgb(231,187,14)" rx="2" ry="2" />
<text  x="747.02" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.05%)</title><rect x="1182.0" y="725" width="0.5" height="15.0" fill="rgb(221,7,15)" rx="2" ry="2" />
<text  x="1184.97" y="735.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::NewNode (10,666,664 samples, 0.36%)</title><rect x="745.1" y="437" width="4.3" height="15.0" fill="rgb(232,138,43)" rx="2" ry="2" />
<text  x="748.09" y="447.5" ></text>
</g>
<g >
<title>leveldb::Block::Iter::GetRestartPoint (1,333,333 samples, 0.05%)</title><rect x="214.0" y="373" width="0.5" height="15.0" fill="rgb(222,146,51)" rx="2" ry="2" />
<text  x="216.98" y="383.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::GetChildren (1,333,333 samples, 0.05%)</title><rect x="10.5" y="485" width="0.6" height="15.0" fill="rgb(213,199,48)" rx="2" ry="2" />
<text  x="13.54" y="495.5" ></text>
</g>
<g >
<title>leveldb::PutVarint32 (1,333,333 samples, 0.05%)</title><rect x="1109.7" y="517" width="0.5" height="15.0" fill="rgb(207,95,39)" rx="2" ry="2" />
<text  x="1112.69" y="527.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.05%)</title><rect x="999.4" y="245" width="0.5" height="15.0" fill="rgb(234,146,50)" rx="2" ry="2" />
<text  x="1002.40" y="255.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (1,333,333 samples, 0.05%)</title><rect x="955.0" y="485" width="0.5" height="15.0" fill="rgb(254,53,31)" rx="2" ry="2" />
<text  x="957.96" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="303.4" y="373" width="0.5" height="15.0" fill="rgb(217,195,40)" rx="2" ry="2" />
<text  x="306.39" y="383.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1,333,333 samples, 0.05%)</title><rect x="140.6" y="357" width="0.6" height="15.0" fill="rgb(212,209,2)" rx="2" ry="2" />
<text  x="143.64" y="367.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1,333,333 samples, 0.05%)</title><rect x="1178.8" y="725" width="0.5" height="15.0" fill="rgb(232,155,26)" rx="2" ry="2" />
<text  x="1181.76" y="735.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.05%)</title><rect x="1125.8" y="533" width="0.5" height="15.0" fill="rgb(251,27,14)" rx="2" ry="2" />
<text  x="1128.75" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1,333,333 samples, 0.05%)</title><rect x="1114.5" y="517" width="0.5" height="15.0" fill="rgb(250,134,47)" rx="2" ry="2" />
<text  x="1117.51" y="527.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="230.6" y="437" width="0.5" height="15.0" fill="rgb(205,222,29)" rx="2" ry="2" />
<text  x="233.58" y="447.5" ></text>
</g>
<g >
<title>__x64_sys_unlink (3,999,999 samples, 0.14%)</title><rect x="231.1" y="405" width="1.6" height="15.0" fill="rgb(213,93,46)" rx="2" ry="2" />
<text  x="234.12" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.05%)</title><rect x="1130.0" y="581" width="0.6" height="15.0" fill="rgb(253,89,46)" rx="2" ry="2" />
<text  x="1133.04" y="591.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="140.1" y="325" width="0.5" height="15.0" fill="rgb(215,176,16)" rx="2" ry="2" />
<text  x="143.10" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_addr (1,333,333 samples, 0.05%)</title><rect x="108.5" y="277" width="0.5" height="15.0" fill="rgb(215,112,20)" rx="2" ry="2" />
<text  x="111.51" y="287.5" ></text>
</g>
<g >
<title>leveldb::MemTable::KeyComparator::operator (1,333,333 samples, 0.05%)</title><rect x="1144.5" y="725" width="0.5" height="15.0" fill="rgb(249,228,9)" rx="2" ry="2" />
<text  x="1147.49" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::operator (5,333,332 samples, 0.18%)</title><rect x="1001.5" y="293" width="2.2" height="15.0" fill="rgb(242,90,16)" rx="2" ry="2" />
<text  x="1004.54" y="303.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::Benchmark (13,333,330 samples, 0.45%)</title><rect x="1120.4" y="677" width="5.4" height="15.0" fill="rgb(232,136,40)" rx="2" ry="2" />
<text  x="1123.40" y="687.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.05%)</title><rect x="150.3" y="373" width="0.5" height="15.0" fill="rgb(248,97,40)" rx="2" ry="2" />
<text  x="153.27" y="383.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::SyncFd (1,333,333 samples, 0.05%)</title><rect x="1125.8" y="581" width="0.5" height="15.0" fill="rgb(250,96,44)" rx="2" ry="2" />
<text  x="1128.75" y="591.5" ></text>
</g>
<g >
<title>ext4_inode_csum.isra.59 (31,999,992 samples, 1.09%)</title><rect x="874.1" y="165" width="12.9" height="15.0" fill="rgb(230,110,54)" rx="2" ry="2" />
<text  x="877.12" y="175.5" ></text>
</g>
<g >
<title>truncate_cleanup_page (3,999,999 samples, 0.14%)</title><rect x="11.6" y="309" width="1.6" height="15.0" fill="rgb(230,217,0)" rx="2" ry="2" />
<text  x="14.61" y="319.5" ></text>
</g>
<g >
<title>std::atomic_flag::atomic_flag (1,333,333 samples, 0.05%)</title><rect x="1065.8" y="373" width="0.5" height="15.0" fill="rgb(232,201,2)" rx="2" ry="2" />
<text  x="1068.79" y="383.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; (2,666,666 samples, 0.09%)</title><rect x="324.8" y="373" width="1.1" height="15.0" fill="rgb(243,175,34)" rx="2" ry="2" />
<text  x="327.81" y="383.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;leveldb::Status&gt;::_M_destroy (11,999,997 samples, 0.41%)</title><rect x="1094.7" y="357" width="4.8" height="15.0" fill="rgb(251,137,17)" rx="2" ry="2" />
<text  x="1097.70" y="367.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::_M_head (1,333,333 samples, 0.05%)</title><rect x="1018.1" y="229" width="0.6" height="15.0" fill="rgb(246,20,54)" rx="2" ry="2" />
<text  x="1021.14" y="239.5" ></text>
</g>
<g >
<title>leveldb::WriteBatch::Put (2,666,666 samples, 0.09%)</title><rect x="1131.6" y="709" width="1.1" height="15.0" fill="rgb(223,87,47)" rx="2" ry="2" />
<text  x="1134.64" y="719.5" ></text>
</g>
<g >
<title>std::future&lt;leveldb::Status&gt;::future (9,333,331 samples, 0.32%)</title><rect x="1052.9" y="517" width="3.8" height="15.0" fill="rgb(247,120,13)" rx="2" ry="2" />
<text  x="1055.94" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="86.0" y="357" width="0.6" height="15.0" fill="rgb(210,196,42)" rx="2" ry="2" />
<text  x="89.03" y="367.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.09%)</title><rect x="1013.9" y="277" width="1.0" height="15.0" fill="rgb(250,228,43)" rx="2" ry="2" />
<text  x="1016.86" y="287.5" ></text>
</g>
<g >
<title>arch_tlb_finish_mmu (1,333,333 samples, 0.05%)</title><rect x="194.7" y="181" width="0.5" height="15.0" fill="rgb(228,193,9)" rx="2" ry="2" />
<text  x="197.71" y="191.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MergingIterator::value (6,666,665 samples, 0.23%)</title><rect x="220.4" y="501" width="2.7" height="15.0" fill="rgb(251,64,14)" rx="2" ry="2" />
<text  x="223.41" y="511.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::RemoveObsoleteFiles (6,666,665 samples, 0.23%)</title><rect x="10.5" y="501" width="2.7" height="15.0" fill="rgb(230,32,54)" rx="2" ry="2" />
<text  x="13.54" y="511.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::Add (27,999,993 samples, 0.95%)</title><rect x="240.8" y="437" width="11.2" height="15.0" fill="rgb(230,106,26)" rx="2" ry="2" />
<text  x="243.75" y="447.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (1,333,333 samples, 0.05%)</title><rect x="161.0" y="181" width="0.5" height="15.0" fill="rgb(236,15,21)" rx="2" ry="2" />
<text  x="163.98" y="191.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::end (1,333,333 samples, 0.05%)</title><rect x="461.9" y="501" width="0.5" height="15.0" fill="rgb(224,31,46)" rx="2" ry="2" />
<text  x="464.87" y="511.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="396.0" y="389" width="0.6" height="15.0" fill="rgb(239,205,8)" rx="2" ry="2" />
<text  x="399.02" y="399.5" ></text>
</g>
<g >
<title>ext4_da_invalidatepage (7,999,998 samples, 0.27%)</title><rect x="1122.5" y="453" width="3.3" height="15.0" fill="rgb(247,88,22)" rx="2" ry="2" />
<text  x="1125.54" y="463.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (2,666,666 samples, 0.09%)</title><rect x="325.9" y="373" width="1.1" height="15.0" fill="rgb(214,120,41)" rx="2" ry="2" />
<text  x="328.88" y="383.5" ></text>
</g>
<g >
<title>leveldb::port::Mutex::Lock (1,333,333 samples, 0.05%)</title><rect x="955.0" y="517" width="0.5" height="15.0" fill="rgb(236,110,14)" rx="2" ry="2" />
<text  x="957.96" y="527.5" ></text>
</g>
<g >
<title>leveldb::VersionSet::NumLevelFiles (2,666,666 samples, 0.09%)</title><rect x="471.5" y="501" width="1.1" height="15.0" fill="rgb(254,40,47)" rx="2" ry="2" />
<text  x="474.51" y="511.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.05%)</title><rect x="270.2" y="213" width="0.5" height="15.0" fill="rgb(233,30,49)" rx="2" ry="2" />
<text  x="273.20" y="223.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (2,666,666 samples, 0.09%)</title><rect x="1074.9" y="437" width="1.1" height="15.0" fill="rgb(231,81,11)" rx="2" ry="2" />
<text  x="1077.89" y="447.5" ></text>
</g>
<g >
<title>blk_finish_plug (1,333,333 samples, 0.05%)</title><rect x="1125.8" y="389" width="0.5" height="15.0" fill="rgb(213,132,4)" rx="2" ry="2" />
<text  x="1128.75" y="399.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (2,666,666 samples, 0.09%)</title><rect x="1055.6" y="469" width="1.1" height="15.0" fill="rgb(224,198,51)" rx="2" ry="2" />
<text  x="1058.62" y="479.5" ></text>
</g>
<g >
<title>_dl_start_final (3,999,999 samples, 0.14%)</title><rect x="1129.5" y="693" width="1.6" height="15.0" fill="rgb(235,153,16)" rx="2" ry="2" />
<text  x="1132.50" y="703.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="192.6" y="405" width="0.5" height="15.0" fill="rgb(217,76,53)" rx="2" ry="2" />
<text  x="195.57" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="374.1" y="373" width="0.5" height="15.0" fill="rgb(229,228,51)" rx="2" ry="2" />
<text  x="377.07" y="383.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (29,333,326 samples, 1.00%)</title><rect x="162.1" y="469" width="11.7" height="15.0" fill="rgb(206,141,10)" rx="2" ry="2" />
<text  x="165.05" y="479.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::ok (1,333,333 samples, 0.05%)</title><rect x="293.2" y="437" width="0.6" height="15.0" fill="rgb(239,98,31)" rx="2" ry="2" />
<text  x="296.22" y="447.5" ></text>
</g>
<g >
<title>uncharge_batch (1,333,333 samples, 0.05%)</title><rect x="279.8" y="149" width="0.6" height="15.0" fill="rgb(208,141,24)" rx="2" ry="2" />
<text  x="282.84" y="159.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; &gt;::_M_init_functor (6,666,665 samples, 0.23%)</title><rect x="1035.3" y="469" width="2.6" height="15.0" fill="rgb(238,186,11)" rx="2" ry="2" />
<text  x="1038.27" y="479.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1,333,333 samples, 0.05%)</title><rect x="388.0" y="373" width="0.5" height="15.0" fill="rgb(235,14,20)" rx="2" ry="2" />
<text  x="390.99" y="383.5" ></text>
</g>
<g >
<title>std::_Sp_ebo_helper&lt;0, std::allocator&lt;std::__future_base::_State_baseV2&gt;, true&gt;::~_Sp_ebo_helper (1,333,333 samples, 0.05%)</title><rect x="1167.5" y="709" width="0.5" height="15.0" fill="rgb(231,54,14)" rx="2" ry="2" />
<text  x="1170.51" y="719.5" ></text>
</g>
<g >
<title>leveldb::port::Mutex::Unlock (1,333,333 samples, 0.05%)</title><rect x="1145.6" y="709" width="0.5" height="15.0" fill="rgb(205,181,48)" rx="2" ry="2" />
<text  x="1148.56" y="719.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;leveldb::Status&gt;::_M_set (3,999,999 samples, 0.14%)</title><rect x="999.9" y="293" width="1.6" height="15.0" fill="rgb(246,78,43)" rx="2" ry="2" />
<text  x="1002.94" y="303.5" ></text>
</g>
<g >
<title>__tls_get_addr (2,666,666 samples, 0.09%)</title><rect x="970.0" y="421" width="1.0" height="15.0" fill="rgb(254,207,23)" rx="2" ry="2" />
<text  x="972.95" y="431.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MemTableInserter::Put (665,333,167 samples, 22.64%)</title><rect x="490.2" y="485" width="267.2" height="15.0" fill="rgb(237,154,32)" rx="2" ry="2" />
<text  x="493.25" y="495.5" >leveldb::(anonymous namespace)::Mem..</text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.09%)</title><rect x="1018.7" y="229" width="1.0" height="15.0" fill="rgb(220,101,40)" rx="2" ry="2" />
<text  x="1021.68" y="239.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Finish (1,333,333 samples, 0.05%)</title><rect x="293.8" y="453" width="0.5" height="15.0" fill="rgb(217,176,10)" rx="2" ry="2" />
<text  x="296.76" y="463.5" ></text>
</g>
<g >
<title>try_charge (1,333,333 samples, 0.05%)</title><rect x="295.4" y="197" width="0.5" height="15.0" fill="rgb(209,152,2)" rx="2" ry="2" />
<text  x="298.36" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::size (1,333,333 samples, 0.05%)</title><rect x="362.3" y="469" width="0.5" height="15.0" fill="rgb(246,196,32)" rx="2" ry="2" />
<text  x="365.29" y="479.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::get_future (9,333,331 samples, 0.32%)</title><rect x="1052.9" y="533" width="3.8" height="15.0" fill="rgb(254,182,49)" rx="2" ry="2" />
<text  x="1055.94" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (6,666,665 samples, 0.23%)</title><rect x="181.9" y="437" width="2.6" height="15.0" fill="rgb(235,96,9)" rx="2" ry="2" />
<text  x="184.86" y="447.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="999.4" y="261" width="0.5" height="15.0" fill="rgb(250,71,36)" rx="2" ry="2" />
<text  x="1002.40" y="271.5" ></text>
</g>
<g >
<title>alloc_pages_vma (2,666,666 samples, 0.09%)</title><rect x="497.2" y="245" width="1.1" height="15.0" fill="rgb(254,122,40)" rx="2" ry="2" />
<text  x="500.21" y="255.5" ></text>
</g>
<g >
<title>aperfmperf_snapshot_cpu (2,666,666 samples, 0.09%)</title><rect x="1127.9" y="373" width="1.1" height="15.0" fill="rgb(218,23,44)" rx="2" ry="2" />
<text  x="1130.89" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (1,333,333 samples, 0.05%)</title><rect x="766.0" y="469" width="0.5" height="15.0" fill="rgb(247,123,17)" rx="2" ry="2" />
<text  x="768.97" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (2,666,666 samples, 0.09%)</title><rect x="375.7" y="357" width="1.0" height="15.0" fill="rgb(254,31,28)" rx="2" ry="2" />
<text  x="378.67" y="367.5" ></text>
</g>
<g >
<title>file_update_time (27,999,993 samples, 0.95%)</title><rect x="815.8" y="293" width="11.2" height="15.0" fill="rgb(239,71,26)" rx="2" ry="2" />
<text  x="818.76" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (7,999,998 samples, 0.27%)</title><rect x="384.2" y="421" width="3.3" height="15.0" fill="rgb(232,12,23)" rx="2" ry="2" />
<text  x="387.24" y="431.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1,333,333 samples, 0.05%)</title><rect x="749.4" y="405" width="0.5" height="15.0" fill="rgb(246,43,4)" rx="2" ry="2" />
<text  x="752.37" y="415.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="886.4" y="69" width="0.6" height="15.0" fill="rgb(232,114,15)" rx="2" ry="2" />
<text  x="889.43" y="79.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (1,333,333 samples, 0.05%)</title><rect x="269.1" y="341" width="0.6" height="15.0" fill="rgb(246,223,31)" rx="2" ry="2" />
<text  x="272.13" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (1,333,333 samples, 0.05%)</title><rect x="766.5" y="469" width="0.5" height="15.0" fill="rgb(206,112,40)" rx="2" ry="2" />
<text  x="769.51" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="371.9" y="405" width="0.6" height="15.0" fill="rgb(215,207,32)" rx="2" ry="2" />
<text  x="374.92" y="415.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Add (305,333,257 samples, 10.39%)</title><rect x="26.6" y="469" width="122.6" height="15.0" fill="rgb(221,58,21)" rx="2" ry="2" />
<text  x="29.60" y="479.5" >leveldb::TableB..</text>
</g>
<g >
<title>__put_page (1,333,333 samples, 0.05%)</title><rect x="279.8" y="197" width="0.6" height="15.0" fill="rgb(218,203,22)" rx="2" ry="2" />
<text  x="282.84" y="207.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::__basic_future (7,999,998 samples, 0.27%)</title><rect x="1053.5" y="501" width="3.2" height="15.0" fill="rgb(208,51,27)" rx="2" ry="2" />
<text  x="1056.48" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.05%)</title><rect x="111.2" y="389" width="0.5" height="15.0" fill="rgb(216,154,34)" rx="2" ry="2" />
<text  x="114.19" y="399.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (1,333,333 samples, 0.05%)</title><rect x="214.0" y="357" width="0.5" height="15.0" fill="rgb(240,38,35)" rx="2" ry="2" />
<text  x="216.98" y="367.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="230.6" y="405" width="0.5" height="15.0" fill="rgb(207,80,36)" rx="2" ry="2" />
<text  x="233.58" y="415.5" ></text>
</g>
<g >
<title>free_unref_page_prepare.part.68 (1,333,333 samples, 0.05%)</title><rect x="1121.5" y="437" width="0.5" height="15.0" fill="rgb(227,31,22)" rx="2" ry="2" />
<text  x="1124.47" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (2,666,666 samples, 0.09%)</title><rect x="1011.7" y="245" width="1.1" height="15.0" fill="rgb(234,158,9)" rx="2" ry="2" />
<text  x="1014.72" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (7,999,998 samples, 0.27%)</title><rect x="108.0" y="357" width="3.2" height="15.0" fill="rgb(233,123,19)" rx="2" ry="2" />
<text  x="110.98" y="367.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.05%)</title><rect x="1076.0" y="437" width="0.5" height="15.0" fill="rgb(206,213,12)" rx="2" ry="2" />
<text  x="1078.96" y="447.5" ></text>
</g>
<g >
<title>mark_buffer_dirty (1,333,333 samples, 0.05%)</title><rect x="1165.4" y="565" width="0.5" height="15.0" fill="rgb(246,89,1)" rx="2" ry="2" />
<text  x="1168.37" y="575.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, 0ul&gt; (1,333,333 samples, 0.05%)</title><rect x="1184.6" y="725" width="0.6" height="15.0" fill="rgb(207,173,52)" rx="2" ry="2" />
<text  x="1187.65" y="735.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1,333,333 samples, 0.05%)</title><rect x="158.8" y="181" width="0.6" height="15.0" fill="rgb(250,12,51)" rx="2" ry="2" />
<text  x="161.84" y="191.5" ></text>
</g>
<g >
<title>leveldb::Arena::~Arena (2,666,666 samples, 0.09%)</title><rect x="194.2" y="469" width="1.0" height="15.0" fill="rgb(251,136,0)" rx="2" ry="2" />
<text  x="197.17" y="479.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;std::__future_base::_State_baseV2,  (2,666,666 samples, 0.09%)</title><rect x="1031.5" y="501" width="1.1" height="15.0" fill="rgb(237,175,25)" rx="2" ry="2" />
<text  x="1034.52" y="511.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (2,666,666 samples, 0.09%)</title><rect x="1077.6" y="485" width="1.0" height="15.0" fill="rgb(219,224,35)" rx="2" ry="2" />
<text  x="1080.57" y="495.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="886.4" y="117" width="0.6" height="15.0" fill="rgb(226,144,32)" rx="2" ry="2" />
<text  x="889.43" y="127.5" ></text>
</g>
<g >
<title>[libnuma.so.1.0.0] (1,333,333 samples, 0.05%)</title><rect x="1118.8" y="677" width="0.5" height="15.0" fill="rgb(206,6,28)" rx="2" ry="2" />
<text  x="1121.79" y="687.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::SetSequence (6,666,665 samples, 0.23%)</title><rect x="772.4" y="517" width="2.7" height="15.0" fill="rgb(211,68,9)" rx="2" ry="2" />
<text  x="775.40" y="527.5" ></text>
</g>
<g >
<title>page_fault (5,333,332 samples, 0.18%)</title><rect x="497.2" y="325" width="2.1" height="15.0" fill="rgb(230,60,30)" rx="2" ry="2" />
<text  x="500.21" y="335.5" ></text>
</g>
<g >
<title>leveldb::Options::Options (1,333,333 samples, 0.05%)</title><rect x="1129.0" y="677" width="0.5" height="15.0" fill="rgb(216,215,12)" rx="2" ry="2" />
<text  x="1131.97" y="687.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (1,333,333 samples, 0.05%)</title><rect x="1047.1" y="453" width="0.5" height="15.0" fill="rgb(217,177,23)" rx="2" ry="2" />
<text  x="1050.05" y="463.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1,333,333 samples, 0.05%)</title><rect x="264.8" y="293" width="0.6" height="15.0" fill="rgb(239,107,24)" rx="2" ry="2" />
<text  x="267.85" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_default_append (5,333,332 samples, 0.18%)</title><rect x="315.2" y="437" width="2.1" height="15.0" fill="rgb(208,26,43)" rx="2" ry="2" />
<text  x="318.17" y="447.5" ></text>
</g>
<g >
<title>__pthread_cond_destroy (1,333,333 samples, 0.05%)</title><rect x="475.3" y="485" width="0.5" height="15.0" fill="rgb(210,80,39)" rx="2" ry="2" />
<text  x="478.25" y="495.5" ></text>
</g>
<g >
<title>__split_vma (1,333,333 samples, 0.05%)</title><rect x="1130.0" y="501" width="0.6" height="15.0" fill="rgb(237,69,29)" rx="2" ry="2" />
<text  x="1133.04" y="511.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::FlushBuffer (329,333,251 samples, 11.21%)</title><rect x="786.9" y="469" width="132.2" height="15.0" fill="rgb(231,195,52)" rx="2" ry="2" />
<text  x="789.85" y="479.5" >leveldb::(anonym..</text>
</g>
<g >
<title>leveldb::log::Writer::EmitPhysicalRecord (2,666,666 samples, 0.09%)</title><rect x="1155.7" y="725" width="1.1" height="15.0" fill="rgb(216,176,44)" rx="2" ry="2" />
<text  x="1158.74" y="735.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2,666,666 samples, 0.09%)</title><rect x="144.9" y="421" width="1.1" height="15.0" fill="rgb(251,85,11)" rx="2" ry="2" />
<text  x="147.92" y="431.5" ></text>
</g>
<g >
<title>__do_page_fault (2,666,666 samples, 0.09%)</title><rect x="452.8" y="453" width="1.0" height="15.0" fill="rgb(223,7,36)" rx="2" ry="2" />
<text  x="455.77" y="463.5" ></text>
</g>
<g >
<title>leveldb::port::Snappy_Compress (33,333,325 samples, 1.13%)</title><rect x="128.9" y="421" width="13.3" height="15.0" fill="rgb(232,131,32)" rx="2" ry="2" />
<text  x="131.86" y="431.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (3,999,999 samples, 0.14%)</title><rect x="812.0" y="293" width="1.6" height="15.0" fill="rgb(230,159,8)" rx="2" ry="2" />
<text  x="815.01" y="303.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;leveldb::Status&gt;::~_Result (11,999,997 samples, 0.41%)</title><rect x="1094.7" y="341" width="4.8" height="15.0" fill="rgb(225,38,29)" rx="2" ry="2" />
<text  x="1097.70" y="351.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (45,333,322 samples, 1.54%)</title><rect x="725.8" y="421" width="18.2" height="15.0" fill="rgb(224,138,28)" rx="2" ry="2" />
<text  x="728.82" y="431.5" ></text>
</g>
<g >
<title>pmem_init (1,333,333 samples, 0.05%)</title><rect x="1119.9" y="661" width="0.5" height="15.0" fill="rgb(243,205,9)" rx="2" ry="2" />
<text  x="1122.86" y="671.5" ></text>
</g>
<g >
<title>std::forward&lt;void  (1,333,333 samples, 0.05%)</title><rect x="1029.4" y="389" width="0.5" height="15.0" fill="rgb(226,77,44)" rx="2" ry="2" />
<text  x="1032.38" y="399.5" ></text>
</g>
<g >
<title>snappy::internal::CompressFragment (23,999,994 samples, 0.82%)</title><rect x="400.8" y="405" width="9.7" height="15.0" fill="rgb(253,114,40)" rx="2" ry="2" />
<text  x="403.83" y="415.5" ></text>
</g>
<g >
<title>lru_add_drain (1,333,333 samples, 0.05%)</title><rect x="1119.9" y="325" width="0.5" height="15.0" fill="rgb(239,77,3)" rx="2" ry="2" />
<text  x="1122.86" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (6,666,665 samples, 0.23%)</title><rect x="170.6" y="389" width="2.7" height="15.0" fill="rgb(237,164,23)" rx="2" ry="2" />
<text  x="173.62" y="399.5" ></text>
</g>
<g >
<title>ext4_set_page_dirty (1,333,333 samples, 0.05%)</title><rect x="1166.4" y="597" width="0.6" height="15.0" fill="rgb(245,38,23)" rx="2" ry="2" />
<text  x="1169.44" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_base::_Hash_node_base (1,333,333 samples, 0.05%)</title><rect x="1173.9" y="709" width="0.6" height="15.0" fill="rgb(251,155,38)" rx="2" ry="2" />
<text  x="1176.94" y="719.5" ></text>
</g>
<g >
<title>std::swap&lt;char const*&gt; (7,999,998 samples, 0.27%)</title><rect x="479.0" y="501" width="3.2" height="15.0" fill="rgb(254,159,40)" rx="2" ry="2" />
<text  x="482.00" y="511.5" ></text>
</g>
<g >
<title>path_openat (2,666,666 samples, 0.09%)</title><rect x="1127.9" y="469" width="1.1" height="15.0" fill="rgb(246,131,50)" rx="2" ry="2" />
<text  x="1130.89" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;leveldb::DBImpl::Writer*&gt;::construct&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&gt; (2,666,666 samples, 0.09%)</title><rect x="962.5" y="469" width="1.0" height="15.0" fill="rgb(237,0,42)" rx="2" ry="2" />
<text  x="965.46" y="479.5" ></text>
</g>
<g >
<title>leveldb::DeleteEntry (1,333,333 samples, 0.05%)</title><rect x="421.7" y="421" width="0.6" height="15.0" fill="rgb(218,216,44)" rx="2" ry="2" />
<text  x="424.72" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (15,999,996 samples, 0.54%)</title><rect x="262.2" y="357" width="6.4" height="15.0" fill="rgb(211,82,30)" rx="2" ry="2" />
<text  x="265.17" y="367.5" ></text>
</g>
<g >
<title>evict (3,999,999 samples, 0.14%)</title><rect x="231.1" y="357" width="1.6" height="15.0" fill="rgb(209,124,22)" rx="2" ry="2" />
<text  x="234.12" y="367.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (2,666,666 samples, 0.09%)</title><rect x="626.8" y="293" width="1.0" height="15.0" fill="rgb(233,180,4)" rx="2" ry="2" />
<text  x="629.77" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.05%)</title><rect x="1117.7" y="709" width="0.6" height="15.0" fill="rgb(231,228,2)" rx="2" ry="2" />
<text  x="1120.72" y="719.5" ></text>
</g>
<g >
<title>path_openat (1,333,333 samples, 0.05%)</title><rect x="1126.3" y="485" width="0.5" height="15.0" fill="rgb(245,195,5)" rx="2" ry="2" />
<text  x="1129.29" y="495.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (30,666,659 samples, 1.04%)</title><rect x="161.5" y="485" width="12.3" height="15.0" fill="rgb(207,217,3)" rx="2" ry="2" />
<text  x="164.52" y="495.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::NumEntries (2,666,666 samples, 0.09%)</title><rect x="418.0" y="501" width="1.0" height="15.0" fill="rgb(209,49,29)" rx="2" ry="2" />
<text  x="420.97" y="511.5" ></text>
</g>
<g >
<title>__fopen_internal (2,666,666 samples, 0.09%)</title><rect x="1127.9" y="613" width="1.1" height="15.0" fill="rgb(213,185,36)" rx="2" ry="2" />
<text  x="1130.89" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (5,333,332 samples, 0.18%)</title><rect x="63.5" y="373" width="2.2" height="15.0" fill="rgb(218,123,54)" rx="2" ry="2" />
<text  x="66.54" y="383.5" ></text>
</g>
<g >
<title>snappy::RawCompress (11,999,997 samples, 0.41%)</title><rect x="287.9" y="389" width="4.8" height="15.0" fill="rgb(248,223,18)" rx="2" ry="2" />
<text  x="290.87" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (3,999,999 samples, 0.14%)</title><rect x="452.2" y="533" width="1.6" height="15.0" fill="rgb(232,147,46)" rx="2" ry="2" />
<text  x="455.23" y="543.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteRawBlock (1,333,333 samples, 0.05%)</title><rect x="293.8" y="405" width="0.5" height="15.0" fill="rgb(240,64,0)" rx="2" ry="2" />
<text  x="296.76" y="415.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.05%)</title><rect x="270.2" y="245" width="0.5" height="15.0" fill="rgb(236,204,8)" rx="2" ry="2" />
<text  x="273.20" y="255.5" ></text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.05%)</title><rect x="161.5" y="437" width="0.6" height="15.0" fill="rgb(240,131,49)" rx="2" ry="2" />
<text  x="164.52" y="447.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (5,333,332 samples, 0.18%)</title><rect x="362.8" y="469" width="2.2" height="15.0" fill="rgb(237,214,45)" rx="2" ry="2" />
<text  x="365.82" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (3,999,999 samples, 0.14%)</title><rect x="38.4" y="421" width="1.6" height="15.0" fill="rgb(225,190,39)" rx="2" ry="2" />
<text  x="41.38" y="431.5" ></text>
</g>
<g >
<title>leveldb::Env::Default (1,333,333 samples, 0.05%)</title><rect x="1129.0" y="661" width="0.5" height="15.0" fill="rgb(220,78,38)" rx="2" ry="2" />
<text  x="1131.97" y="671.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="312.0" y="389" width="0.5" height="15.0" fill="rgb(245,160,3)" rx="2" ry="2" />
<text  x="314.96" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (1,333,333 samples, 0.05%)</title><rect x="1189.5" y="725" width="0.5" height="15.0" fill="rgb(246,88,19)" rx="2" ry="2" />
<text  x="1192.46" y="735.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (1,333,333 samples, 0.05%)</title><rect x="385.8" y="325" width="0.6" height="15.0" fill="rgb(254,86,26)" rx="2" ry="2" />
<text  x="388.84" y="335.5" ></text>
</g>
<g >
<title>rcu_all_qs (1,333,333 samples, 0.05%)</title><rect x="806.1" y="325" width="0.6" height="15.0" fill="rgb(207,36,37)" rx="2" ry="2" />
<text  x="809.13" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (11,999,997 samples, 0.41%)</title><rect x="296.4" y="437" width="4.9" height="15.0" fill="rgb(207,73,5)" rx="2" ry="2" />
<text  x="299.43" y="447.5" ></text>
</g>
<g >
<title>leveldb::port::CondVar::~CondVar (1,333,333 samples, 0.05%)</title><rect x="475.3" y="501" width="0.5" height="15.0" fill="rgb(209,202,36)" rx="2" ry="2" />
<text  x="478.25" y="511.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (94,666,643 samples, 3.22%)</title><rect x="589.8" y="373" width="38.0" height="15.0" fill="rgb(239,75,13)" rx="2" ry="2" />
<text  x="592.83" y="383.5" >lev..</text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (7,999,998 samples, 0.27%)</title><rect x="237.0" y="437" width="3.2" height="15.0" fill="rgb(235,167,49)" rx="2" ry="2" />
<text  x="240.01" y="447.5" ></text>
</g>
<g >
<title>leveldb::Status::OK (1,333,333 samples, 0.05%)</title><rect x="770.3" y="485" width="0.5" height="15.0" fill="rgb(224,11,12)" rx="2" ry="2" />
<text  x="773.25" y="495.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl&lt;std::__future_base::_Result_base::_Deleter&gt; (5,333,332 samples, 0.18%)</title><rect x="1006.9" y="229" width="2.1" height="15.0" fill="rgb(207,213,45)" rx="2" ry="2" />
<text  x="1009.90" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="105.8" y="389" width="0.6" height="15.0" fill="rgb(214,65,15)" rx="2" ry="2" />
<text  x="108.83" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.05%)</title><rect x="160.4" y="261" width="0.6" height="15.0" fill="rgb(228,156,54)" rx="2" ry="2" />
<text  x="163.44" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1,333,333 samples, 0.05%)</title><rect x="333.4" y="437" width="0.5" height="15.0" fill="rgb(244,130,10)" rx="2" ry="2" />
<text  x="336.38" y="447.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteRawBlock (14,666,663 samples, 0.50%)</title><rect x="282.0" y="405" width="5.9" height="15.0" fill="rgb(210,198,15)" rx="2" ry="2" />
<text  x="284.98" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (5,333,332 samples, 0.18%)</title><rect x="11.1" y="437" width="2.1" height="15.0" fill="rgb(231,212,54)" rx="2" ry="2" />
<text  x="14.07" y="447.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Next (2,666,666 samples, 0.09%)</title><rect x="233.8" y="437" width="1.1" height="15.0" fill="rgb(224,203,12)" rx="2" ry="2" />
<text  x="236.79" y="447.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (5,333,332 samples, 0.18%)</title><rect x="761.2" y="453" width="2.1" height="15.0" fill="rgb(208,4,4)" rx="2" ry="2" />
<text  x="764.15" y="463.5" ></text>
</g>
<g >
<title>std::condition_variable::condition_variable (3,999,999 samples, 0.14%)</title><rect x="473.1" y="485" width="1.6" height="15.0" fill="rgb(247,202,4)" rx="2" ry="2" />
<text  x="476.11" y="495.5" ></text>
</g>
<g >
<title>std::mutex::lock (1,333,333 samples, 0.05%)</title><rect x="955.0" y="501" width="0.5" height="15.0" fill="rgb(215,97,51)" rx="2" ry="2" />
<text  x="957.96" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.05%)</title><rect x="1119.9" y="389" width="0.5" height="15.0" fill="rgb(209,128,54)" rx="2" ry="2" />
<text  x="1122.86" y="399.5" ></text>
</g>
<g >
<title>note_gp_changes (1,333,333 samples, 0.05%)</title><rect x="312.0" y="341" width="0.5" height="15.0" fill="rgb(222,88,0)" rx="2" ry="2" />
<text  x="314.96" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (9,333,331 samples, 0.32%)</title><rect x="302.3" y="437" width="3.8" height="15.0" fill="rgb(243,114,34)" rx="2" ry="2" />
<text  x="305.32" y="447.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::FindShortestSeparator (1,333,333 samples, 0.05%)</title><rect x="54.4" y="453" width="0.6" height="15.0" fill="rgb(243,18,53)" rx="2" ry="2" />
<text  x="57.44" y="463.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (27,999,993 samples, 0.95%)</title><rect x="732.8" y="405" width="11.2" height="15.0" fill="rgb(249,138,14)" rx="2" ry="2" />
<text  x="735.78" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (11,999,997 samples, 0.41%)</title><rect x="331.2" y="469" width="4.9" height="15.0" fill="rgb(237,164,39)" rx="2" ry="2" />
<text  x="334.23" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (5,333,332 samples, 0.18%)</title><rect x="59.3" y="405" width="2.1" height="15.0" fill="rgb(216,229,40)" rx="2" ry="2" />
<text  x="62.26" y="415.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (19,999,995 samples, 0.68%)</title><rect x="1061.0" y="437" width="8.0" height="15.0" fill="rgb(249,183,35)" rx="2" ry="2" />
<text  x="1063.97" y="447.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (45,333,322 samples, 1.54%)</title><rect x="255.7" y="405" width="18.2" height="15.0" fill="rgb(216,83,43)" rx="2" ry="2" />
<text  x="258.74" y="415.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (6,666,665 samples, 0.23%)</title><rect x="1047.6" y="485" width="2.7" height="15.0" fill="rgb(219,39,33)" rx="2" ry="2" />
<text  x="1050.59" y="495.5" ></text>
</g>
<g >
<title>__ext4_get_inode_loc (2,666,666 samples, 0.09%)</title><rect x="823.8" y="197" width="1.1" height="15.0" fill="rgb(251,150,47)" rx="2" ry="2" />
<text  x="826.79" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (302,666,591 samples, 10.30%)</title><rect x="796.5" y="421" width="121.5" height="15.0" fill="rgb(236,81,49)" rx="2" ry="2" />
<text  x="799.49" y="431.5" >entry_SYSCALL_6..</text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::_M_deallocate (1,333,333 samples, 0.05%)</title><rect x="160.4" y="405" width="0.6" height="15.0" fill="rgb(241,189,34)" rx="2" ry="2" />
<text  x="163.44" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (1,333,333 samples, 0.05%)</title><rect x="303.4" y="341" width="0.5" height="15.0" fill="rgb(250,21,12)" rx="2" ry="2" />
<text  x="306.39" y="351.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (5,333,332 samples, 0.18%)</title><rect x="142.8" y="389" width="2.1" height="15.0" fill="rgb(223,219,0)" rx="2" ry="2" />
<text  x="145.78" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (2,666,666 samples, 0.09%)</title><rect x="78.5" y="325" width="1.1" height="15.0" fill="rgb(222,168,50)" rx="2" ry="2" />
<text  x="81.53" y="335.5" ></text>
</g>
<g >
<title>_IO_str_init_static_internal (1,333,333 samples, 0.05%)</title><rect x="427.6" y="501" width="0.5" height="15.0" fill="rgb(215,121,35)" rx="2" ry="2" />
<text  x="430.60" y="511.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;char*, unsigned long, char&gt; (5,333,332 samples, 0.18%)</title><rect x="315.2" y="421" width="2.1" height="15.0" fill="rgb(206,126,53)" rx="2" ry="2" />
<text  x="318.17" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (5,333,332 samples, 0.18%)</title><rect x="1012.8" y="309" width="2.1" height="15.0" fill="rgb(214,53,22)" rx="2" ry="2" />
<text  x="1015.79" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get (2,666,666 samples, 0.09%)</title><rect x="1018.7" y="277" width="1.0" height="15.0" fill="rgb(221,147,3)" rx="2" ry="2" />
<text  x="1021.68" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt;::allocate (10,666,664 samples, 0.36%)</title><rect x="91.4" y="357" width="4.3" height="15.0" fill="rgb(215,88,41)" rx="2" ry="2" />
<text  x="94.38" y="367.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.09%)</title><rect x="1077.6" y="469" width="1.0" height="15.0" fill="rgb(252,24,28)" rx="2" ry="2" />
<text  x="1080.57" y="479.5" ></text>
</g>
<g >
<title>__vfs_read (1,333,333 samples, 0.05%)</title><rect x="1127.4" y="453" width="0.5" height="15.0" fill="rgb(244,227,32)" rx="2" ry="2" />
<text  x="1130.36" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;leveldb::ParsedInternalKey*, std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt; &gt;::operator* (1,333,333 samples, 0.05%)</title><rect x="57.6" y="437" width="0.6" height="15.0" fill="rgb(215,165,0)" rx="2" ry="2" />
<text  x="60.65" y="447.5" ></text>
</g>
<g >
<title>tcmalloc::Sampler::PopulateFastLog2Table (1,333,333 samples, 0.05%)</title><rect x="1119.3" y="629" width="0.6" height="15.0" fill="rgb(233,102,48)" rx="2" ry="2" />
<text  x="1122.33" y="639.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed64 (2,666,666 samples, 0.09%)</title><rect x="312.5" y="453" width="1.1" height="15.0" fill="rgb(253,61,27)" rx="2" ry="2" />
<text  x="315.50" y="463.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.05%)</title><rect x="206.5" y="437" width="0.5" height="15.0" fill="rgb(254,102,15)" rx="2" ry="2" />
<text  x="209.49" y="447.5" ></text>
</g>
<g >
<title>__lru_cache_add (1,333,333 samples, 0.05%)</title><rect x="1164.3" y="469" width="0.5" height="15.0" fill="rgb(237,5,14)" rx="2" ry="2" />
<text  x="1167.30" y="479.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MemTableInserter::~MemTableInserter (1,333,333 samples, 0.05%)</title><rect x="1155.2" y="709" width="0.5" height="15.0" fill="rgb(211,82,53)" rx="2" ry="2" />
<text  x="1158.20" y="719.5" ></text>
</g>
<g >
<title>std::move&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt;&amp;&gt; (2,666,666 samples, 0.09%)</title><rect x="1039.6" y="485" width="1.0" height="15.0" fill="rgb(218,12,14)" rx="2" ry="2" />
<text  x="1042.56" y="495.5" ></text>
</g>
<g >
<title>snappy::internal::WorkingMemory::GetHashTable (2,666,666 samples, 0.09%)</title><rect x="140.6" y="373" width="1.1" height="15.0" fill="rgb(249,173,51)" rx="2" ry="2" />
<text  x="143.64" y="383.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::MakeRoomForWrite (17,333,329 samples, 0.59%)</title><rect x="466.2" y="517" width="6.9" height="15.0" fill="rgb(253,151,37)" rx="2" ry="2" />
<text  x="469.15" y="527.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (2,666,666 samples, 0.09%)</title><rect x="497.2" y="229" width="1.1" height="15.0" fill="rgb(248,111,43)" rx="2" ry="2" />
<text  x="500.21" y="239.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (1,333,333 samples, 0.05%)</title><rect x="1044.9" y="485" width="0.5" height="15.0" fill="rgb(250,216,44)" rx="2" ry="2" />
<text  x="1047.91" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="86.0" y="341" width="0.6" height="15.0" fill="rgb(223,181,13)" rx="2" ry="2" />
<text  x="89.03" y="351.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (11,999,997 samples, 0.41%)</title><rect x="331.2" y="485" width="4.9" height="15.0" fill="rgb(208,174,11)" rx="2" ry="2" />
<text  x="334.23" y="495.5" ></text>
</g>
<g >
<title>perf_iterate_sb (1,333,333 samples, 0.05%)</title><rect x="144.4" y="149" width="0.5" height="15.0" fill="rgb(235,26,7)" rx="2" ry="2" />
<text  x="147.38" y="159.5" ></text>
</g>
<g >
<title>file_free_rcu (1,333,333 samples, 0.05%)</title><rect x="358.5" y="357" width="0.6" height="15.0" fill="rgb(253,36,44)" rx="2" ry="2" />
<text  x="361.54" y="367.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::RemoveFile (11,999,997 samples, 0.41%)</title><rect x="1120.9" y="645" width="4.9" height="15.0" fill="rgb(205,116,9)" rx="2" ry="2" />
<text  x="1123.93" y="655.5" ></text>
</g>
<g >
<title>__mprotect (1,333,333 samples, 0.05%)</title><rect x="1130.0" y="613" width="0.6" height="15.0" fill="rgb(214,21,2)" rx="2" ry="2" />
<text  x="1133.04" y="623.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="396.0" y="405" width="0.6" height="15.0" fill="rgb(216,18,12)" rx="2" ry="2" />
<text  x="399.02" y="415.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1,333,333 samples, 0.05%)</title><rect x="34.6" y="389" width="0.6" height="15.0" fill="rgb(243,108,50)" rx="2" ry="2" />
<text  x="37.63" y="399.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Add (191,999,952 samples, 6.53%)</title><rect x="340.9" y="501" width="77.1" height="15.0" fill="rgb(248,9,42)" rx="2" ry="2" />
<text  x="343.87" y="511.5" >leveldb:..</text>
</g>
<g >
<title>leveldb::DecodeFixed32 (3,999,999 samples, 0.14%)</title><rect x="286.3" y="341" width="1.6" height="15.0" fill="rgb(207,117,27)" rx="2" ry="2" />
<text  x="289.26" y="351.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.05%)</title><rect x="400.3" y="309" width="0.5" height="15.0" fill="rgb(230,150,22)" rx="2" ry="2" />
<text  x="403.30" y="319.5" ></text>
</g>
<g >
<title>__do_page_cache_readahead (9,333,331 samples, 0.32%)</title><rect x="1161.1" y="549" width="3.7" height="15.0" fill="rgb(219,208,21)" rx="2" ry="2" />
<text  x="1164.09" y="559.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_r10 (1,333,333 samples, 0.05%)</title><rect x="810.9" y="293" width="0.6" height="15.0" fill="rgb(231,89,37)" rx="2" ry="2" />
<text  x="813.94" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate (1,333,333 samples, 0.05%)</title><rect x="160.4" y="373" width="0.6" height="15.0" fill="rgb(252,100,28)" rx="2" ry="2" />
<text  x="163.44" y="383.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::~_State_baseV2 (22,666,661 samples, 0.77%)</title><rect x="1092.0" y="405" width="9.1" height="15.0" fill="rgb(205,137,42)" rx="2" ry="2" />
<text  x="1095.02" y="415.5" ></text>
</g>
<g >
<title>__ext4_journal_stop (1,333,333 samples, 0.05%)</title><rect x="860.7" y="229" width="0.6" height="15.0" fill="rgb(247,221,38)" rx="2" ry="2" />
<text  x="863.74" y="239.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="562.5" y="389" width="0.6" height="15.0" fill="rgb(240,130,31)" rx="2" ry="2" />
<text  x="565.52" y="399.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (6,666,665 samples, 0.23%)</title><rect x="1047.6" y="501" width="2.7" height="15.0" fill="rgb(211,103,53)" rx="2" ry="2" />
<text  x="1050.59" y="511.5" ></text>
</g>
<g >
<title>do_page_fault (10,666,664 samples, 0.36%)</title><rect x="156.2" y="277" width="4.2" height="15.0" fill="rgb(234,184,25)" rx="2" ry="2" />
<text  x="159.16" y="287.5" ></text>
</g>
<g >
<title>unmap_page_range (1,333,333 samples, 0.05%)</title><rect x="421.7" y="229" width="0.6" height="15.0" fill="rgb(208,190,0)" rx="2" ry="2" />
<text  x="424.72" y="239.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;char*, unsigned long, char&gt; (23,999,994 samples, 0.82%)</title><rect x="150.8" y="405" width="9.6" height="15.0" fill="rgb(225,215,8)" rx="2" ry="2" />
<text  x="153.81" y="415.5" ></text>
</g>
<g >
<title>smp_call_function_single (2,666,666 samples, 0.09%)</title><rect x="1127.9" y="357" width="1.1" height="15.0" fill="rgb(253,164,27)" rx="2" ry="2" />
<text  x="1130.89" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.05%)</title><rect x="178.1" y="373" width="0.5" height="15.0" fill="rgb(248,222,7)" rx="2" ry="2" />
<text  x="181.11" y="383.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,666,666 samples, 0.09%)</title><rect x="1127.9" y="533" width="1.1" height="15.0" fill="rgb(226,211,18)" rx="2" ry="2" />
<text  x="1130.89" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::get (1,333,333 samples, 0.05%)</title><rect x="1188.9" y="725" width="0.6" height="15.0" fill="rgb(208,177,19)" rx="2" ry="2" />
<text  x="1191.93" y="735.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1,333,333 samples, 0.05%)</title><rect x="1081.3" y="469" width="0.6" height="15.0" fill="rgb(225,197,47)" rx="2" ry="2" />
<text  x="1084.32" y="479.5" ></text>
</g>
<g >
<title>perf_iterate_ctx (1,333,333 samples, 0.05%)</title><rect x="144.4" y="133" width="0.5" height="15.0" fill="rgb(243,104,19)" rx="2" ry="2" />
<text  x="147.38" y="143.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (2,666,666 samples, 0.09%)</title><rect x="1151.5" y="709" width="1.0" height="15.0" fill="rgb(220,222,14)" rx="2" ry="2" />
<text  x="1154.45" y="719.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.05%)</title><rect x="78.0" y="309" width="0.5" height="15.0" fill="rgb(223,54,37)" rx="2" ry="2" />
<text  x="80.99" y="319.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="284.1" y="325" width="0.6" height="15.0" fill="rgb(212,64,42)" rx="2" ry="2" />
<text  x="287.12" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (6,666,665 samples, 0.23%)</title><rect x="63.0" y="389" width="2.7" height="15.0" fill="rgb(227,168,43)" rx="2" ry="2" />
<text  x="66.00" y="399.5" ></text>
</g>
<g >
<title>ext4_journal_check_start (3,999,999 samples, 0.14%)</title><rect x="829.7" y="245" width="1.6" height="15.0" fill="rgb(222,98,6)" rx="2" ry="2" />
<text  x="832.68" y="255.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access (5,333,332 samples, 0.18%)</title><rect x="1035.8" y="453" width="2.1" height="15.0" fill="rgb(213,76,36)" rx="2" ry="2" />
<text  x="1038.81" y="463.5" ></text>
</g>
<g >
<title>put_cred_rcu (1,333,333 samples, 0.05%)</title><rect x="230.6" y="357" width="0.5" height="15.0" fill="rgb(231,152,22)" rx="2" ry="2" />
<text  x="233.58" y="367.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.05%)</title><rect x="1183.6" y="709" width="0.5" height="15.0" fill="rgb(245,50,30)" rx="2" ry="2" />
<text  x="1186.58" y="719.5" ></text>
</g>
<g >
<title>_IO_vfprintf_internal (1,333,333 samples, 0.05%)</title><rect x="10.0" y="725" width="0.5" height="15.0" fill="rgb(223,74,25)" rx="2" ry="2" />
<text  x="13.00" y="735.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (1,333,333 samples, 0.05%)</title><rect x="388.0" y="389" width="0.5" height="15.0" fill="rgb(209,87,10)" rx="2" ry="2" />
<text  x="390.99" y="399.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.05%)</title><rect x="416.4" y="469" width="0.5" height="15.0" fill="rgb(240,215,32)" rx="2" ry="2" />
<text  x="419.36" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.05%)</title><rect x="1176.1" y="709" width="0.5" height="15.0" fill="rgb(231,143,39)" rx="2" ry="2" />
<text  x="1179.08" y="719.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;unsigned int*&gt; (1,333,333 samples, 0.05%)</title><rect x="281.4" y="341" width="0.6" height="15.0" fill="rgb(251,194,31)" rx="2" ry="2" />
<text  x="284.44" y="351.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.05%)</title><rect x="453.3" y="437" width="0.5" height="15.0" fill="rgb(209,13,31)" rx="2" ry="2" />
<text  x="456.30" y="447.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Next (1,333,333 samples, 0.05%)</title><rect x="306.6" y="453" width="0.5" height="15.0" fill="rgb(208,227,43)" rx="2" ry="2" />
<text  x="309.61" y="463.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (3,999,999 samples, 0.14%)</title><rect x="834.0" y="229" width="1.6" height="15.0" fill="rgb(228,153,45)" rx="2" ry="2" />
<text  x="836.97" y="239.5" ></text>
</g>
<g >
<title>from_kuid (1,333,333 samples, 0.05%)</title><rect x="887.0" y="181" width="0.5" height="15.0" fill="rgb(208,226,41)" rx="2" ry="2" />
<text  x="889.97" y="191.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (2,666,666 samples, 0.09%)</title><rect x="185.1" y="469" width="1.0" height="15.0" fill="rgb(240,155,17)" rx="2" ry="2" />
<text  x="188.07" y="479.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.05%)</title><rect x="1017.1" y="261" width="0.5" height="15.0" fill="rgb(223,42,22)" rx="2" ry="2" />
<text  x="1020.07" y="271.5" ></text>
</g>
<g >
<title>__page_cache_release (1,333,333 samples, 0.05%)</title><rect x="279.8" y="181" width="0.6" height="15.0" fill="rgb(231,150,29)" rx="2" ry="2" />
<text  x="282.84" y="191.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;&amp;&gt; (1,333,333 samples, 0.05%)</title><rect x="375.7" y="341" width="0.5" height="15.0" fill="rgb(252,116,18)" rx="2" ry="2" />
<text  x="378.67" y="351.5" ></text>
</g>
<g >
<title>libpmem_init (1,333,333 samples, 0.05%)</title><rect x="1119.9" y="677" width="0.5" height="15.0" fill="rgb(210,163,29)" rx="2" ry="2" />
<text  x="1122.86" y="687.5" ></text>
</g>
<g >
<title>__x64_sys_openat (1,333,333 samples, 0.05%)</title><rect x="150.3" y="357" width="0.5" height="15.0" fill="rgb(245,209,12)" rx="2" ry="2" />
<text  x="153.27" y="367.5" ></text>
</g>
<g >
<title>std::move&lt;std::__future_base::_Result_base*&amp;&gt; (3,999,999 samples, 0.14%)</title><rect x="1025.1" y="293" width="1.6" height="15.0" fill="rgb(218,149,10)" rx="2" ry="2" />
<text  x="1028.10" y="303.5" ></text>
</g>
<g >
<title>leveldb::Random::OneIn (5,333,332 samples, 0.18%)</title><rect x="754.2" y="421" width="2.1" height="15.0" fill="rgb(248,166,50)" rx="2" ry="2" />
<text  x="757.19" y="431.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.05%)</title><rect x="360.1" y="453" width="0.6" height="15.0" fill="rgb(253,0,18)" rx="2" ry="2" />
<text  x="363.15" y="463.5" ></text>
</g>
<g >
<title>jbd2_write_access_granted.part.11 (3,999,999 samples, 0.14%)</title><rect x="825.4" y="165" width="1.6" height="15.0" fill="rgb(236,199,22)" rx="2" ry="2" />
<text  x="828.40" y="175.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (2,666,666 samples, 0.09%)</title><rect x="1051.9" y="485" width="1.0" height="15.0" fill="rgb(254,82,19)" rx="2" ry="2" />
<text  x="1054.87" y="495.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (1,333,333 samples, 0.05%)</title><rect x="1179.3" y="725" width="0.5" height="15.0" fill="rgb(250,148,38)" rx="2" ry="2" />
<text  x="1182.29" y="735.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (2,666,666 samples, 0.09%)</title><rect x="1150.4" y="725" width="1.1" height="15.0" fill="rgb(221,226,52)" rx="2" ry="2" />
<text  x="1153.38" y="735.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (1,333,333 samples, 0.05%)</title><rect x="506.3" y="389" width="0.5" height="15.0" fill="rgb(224,163,11)" rx="2" ry="2" />
<text  x="509.31" y="399.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (6,666,665 samples, 0.23%)</title><rect x="356.4" y="453" width="2.7" height="15.0" fill="rgb(216,75,17)" rx="2" ry="2" />
<text  x="359.40" y="463.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="212.4" y="341" width="0.5" height="15.0" fill="rgb(215,36,12)" rx="2" ry="2" />
<text  x="215.38" y="351.5" ></text>
</g>
<g >
<title>leveldb::Compaction::ShouldStopBefore (19,999,995 samples, 0.68%)</title><rect x="223.1" y="501" width="8.0" height="15.0" fill="rgb(254,72,24)" rx="2" ry="2" />
<text  x="226.09" y="511.5" ></text>
</g>
<g >
<title>ext4_get_group_desc (5,333,332 samples, 0.18%)</title><rect x="891.8" y="165" width="2.1" height="15.0" fill="rgb(230,22,1)" rx="2" ry="2" />
<text  x="894.79" y="175.5" ></text>
</g>
<g >
<title>put_cred_rcu (1,333,333 samples, 0.05%)</title><rect x="396.0" y="325" width="0.6" height="15.0" fill="rgb(220,199,5)" rx="2" ry="2" />
<text  x="399.02" y="335.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.05%)</title><rect x="1089.3" y="421" width="0.6" height="15.0" fill="rgb(250,153,9)" rx="2" ry="2" />
<text  x="1092.35" y="431.5" ></text>
</g>
<g >
<title>_dl_relocate_object (2,666,666 samples, 0.09%)</title><rect x="1130.0" y="645" width="1.1" height="15.0" fill="rgb(213,7,48)" rx="2" ry="2" />
<text  x="1133.04" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result_base::_Deleter, void&gt; (5,333,332 samples, 0.18%)</title><rect x="1077.6" y="517" width="2.1" height="15.0" fill="rgb(246,114,6)" rx="2" ry="2" />
<text  x="1080.57" y="527.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, false&gt;::_M_head (1,333,333 samples, 0.05%)</title><rect x="1014.4" y="229" width="0.5" height="15.0" fill="rgb(216,206,23)" rx="2" ry="2" />
<text  x="1017.39" y="239.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1,333,333 samples, 0.05%)</title><rect x="1119.3" y="677" width="0.6" height="15.0" fill="rgb(210,147,51)" rx="2" ry="2" />
<text  x="1122.33" y="687.5" ></text>
</g>
<g >
<title>queue_unplugged (1,333,333 samples, 0.05%)</title><rect x="1125.8" y="357" width="0.5" height="15.0" fill="rgb(236,197,21)" rx="2" ry="2" />
<text  x="1128.75" y="367.5" ></text>
</g>
<g >
<title>jbd2_journal_try_to_free_buffers (1,333,333 samples, 0.05%)</title><rect x="12.7" y="213" width="0.5" height="15.0" fill="rgb(213,79,40)" rx="2" ry="2" />
<text  x="15.68" y="223.5" ></text>
</g>
<g >
<title>load_balance (1,333,333 samples, 0.05%)</title><rect x="703.9" y="261" width="0.5" height="15.0" fill="rgb(231,82,21)" rx="2" ry="2" />
<text  x="706.87" y="271.5" ></text>
</g>
<g >
<title>page_fault (3,999,999 samples, 0.14%)</title><rect x="294.8" y="277" width="1.6" height="15.0" fill="rgb(214,101,22)" rx="2" ry="2" />
<text  x="297.83" y="287.5" ></text>
</g>
<g >
<title>os_open (1,333,333 samples, 0.05%)</title><rect x="150.3" y="421" width="0.5" height="15.0" fill="rgb(218,132,30)" rx="2" ry="2" />
<text  x="153.27" y="431.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (1,333,333 samples, 0.05%)</title><rect x="161.0" y="197" width="0.5" height="15.0" fill="rgb(237,139,28)" rx="2" ry="2" />
<text  x="163.98" y="207.5" ></text>
</g>
<g >
<title>check_domain_in_region (1,333,333 samples, 0.05%)</title><rect x="1119.9" y="629" width="0.5" height="15.0" fill="rgb(233,81,51)" rx="2" ry="2" />
<text  x="1122.86" y="639.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.05%)</title><rect x="411.5" y="453" width="0.6" height="15.0" fill="rgb(240,44,34)" rx="2" ry="2" />
<text  x="414.54" y="463.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="482.7" y="453" width="0.6" height="15.0" fill="rgb(254,185,51)" rx="2" ry="2" />
<text  x="485.75" y="463.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (5,333,332 samples, 0.18%)</title><rect x="751.0" y="421" width="2.1" height="15.0" fill="rgb(221,150,18)" rx="2" ry="2" />
<text  x="753.98" y="431.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.05%)</title><rect x="243.4" y="389" width="0.6" height="15.0" fill="rgb(248,147,15)" rx="2" ry="2" />
<text  x="246.43" y="399.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::key (5,333,332 samples, 0.18%)</title><rect x="234.9" y="453" width="2.1" height="15.0" fill="rgb(220,85,40)" rx="2" ry="2" />
<text  x="237.86" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (6,666,665 samples, 0.23%)</title><rect x="270.7" y="357" width="2.7" height="15.0" fill="rgb(238,61,45)" rx="2" ry="2" />
<text  x="273.74" y="367.5" ></text>
</g>
<g >
<title>leveldb::Random::Next (1,333,333 samples, 0.05%)</title><rect x="1103.8" y="533" width="0.5" height="15.0" fill="rgb(218,41,21)" rx="2" ry="2" />
<text  x="1106.80" y="543.5" ></text>
</g>
<g >
<title>leveldb::MemTable::Add (663,999,834 samples, 22.60%)</title><rect x="490.8" y="469" width="266.6" height="15.0" fill="rgb(237,62,1)" rx="2" ry="2" />
<text  x="493.78" y="479.5" >leveldb::MemTable::Add</text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.05%)</title><rect x="452.2" y="469" width="0.6" height="15.0" fill="rgb(210,196,27)" rx="2" ry="2" />
<text  x="455.23" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get_deleter (2,666,666 samples, 0.09%)</title><rect x="1187.9" y="709" width="1.0" height="15.0" fill="rgb(213,135,7)" rx="2" ry="2" />
<text  x="1190.86" y="719.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (1,333,333 samples, 0.05%)</title><rect x="141.7" y="373" width="0.5" height="15.0" fill="rgb(239,98,35)" rx="2" ry="2" />
<text  x="144.71" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1,333,333 samples, 0.05%)</title><rect x="146.0" y="437" width="0.5" height="15.0" fill="rgb(231,149,43)" rx="2" ry="2" />
<text  x="148.99" y="447.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.05%)</title><rect x="264.8" y="261" width="0.6" height="15.0" fill="rgb(220,64,48)" rx="2" ry="2" />
<text  x="267.85" y="271.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;1ul, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.05%)</title><rect x="1017.1" y="245" width="0.5" height="15.0" fill="rgb(212,146,12)" rx="2" ry="2" />
<text  x="1020.07" y="255.5" ></text>
</g>
<g >
<title>block_invalidatepage (2,666,666 samples, 0.09%)</title><rect x="231.7" y="245" width="1.0" height="15.0" fill="rgb(237,64,16)" rx="2" ry="2" />
<text  x="234.65" y="255.5" ></text>
</g>
<g >
<title>std::swap&lt;std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.05%)</title><rect x="1026.7" y="309" width="0.5" height="15.0" fill="rgb(238,226,22)" rx="2" ry="2" />
<text  x="1029.71" y="319.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::ShardedLRUCache::Erase (1,333,333 samples, 0.05%)</title><rect x="421.7" y="485" width="0.6" height="15.0" fill="rgb(219,228,44)" rx="2" ry="2" />
<text  x="424.72" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (3,999,999 samples, 0.14%)</title><rect x="1002.1" y="261" width="1.6" height="15.0" fill="rgb(253,171,7)" rx="2" ry="2" />
<text  x="1005.08" y="271.5" ></text>
</g>
<g >
<title>ext4_journal_check_start (1,333,333 samples, 0.05%)</title><rect x="821.1" y="229" width="0.6" height="15.0" fill="rgb(238,147,50)" rx="2" ry="2" />
<text  x="824.12" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1,333,333 samples, 0.05%)</title><rect x="161.5" y="453" width="0.6" height="15.0" fill="rgb(237,29,43)" rx="2" ry="2" />
<text  x="164.52" y="463.5" ></text>
</g>
<g >
<title>std::_Function_base::_Function_base (1,333,333 samples, 0.05%)</title><rect x="1183.0" y="709" width="0.6" height="15.0" fill="rgb(245,47,52)" rx="2" ry="2" />
<text  x="1186.04" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="302.3" y="421" width="0.6" height="15.0" fill="rgb(253,6,13)" rx="2" ry="2" />
<text  x="305.32" y="431.5" ></text>
</g>
<g >
<title>leveldb::InternalKey::Encode (1,333,333 samples, 0.05%)</title><rect x="227.4" y="485" width="0.5" height="15.0" fill="rgb(230,98,51)" rx="2" ry="2" />
<text  x="230.37" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (1,333,333 samples, 0.05%)</title><rect x="1117.2" y="533" width="0.5" height="15.0" fill="rgb(249,111,46)" rx="2" ry="2" />
<text  x="1120.19" y="543.5" ></text>
</g>
<g >
<title>do_unlinkat (11,999,997 samples, 0.41%)</title><rect x="1120.9" y="565" width="4.9" height="15.0" fill="rgb(231,224,28)" rx="2" ry="2" />
<text  x="1123.93" y="575.5" ></text>
</g>
<g >
<title>leveldb::ParsedInternalKey::ParsedInternalKey (1,333,333 samples, 0.05%)</title><rect x="366.0" y="485" width="0.6" height="15.0" fill="rgb(207,109,15)" rx="2" ry="2" />
<text  x="369.03" y="495.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (2,666,666 samples, 0.09%)</title><rect x="1051.9" y="469" width="1.0" height="15.0" fill="rgb(253,69,41)" rx="2" ry="2" />
<text  x="1054.87" y="479.5" ></text>
</g>
<g >
<title>_IO_old_init (2,666,666 samples, 0.09%)</title><rect x="426.5" y="485" width="1.1" height="15.0" fill="rgb(214,202,30)" rx="2" ry="2" />
<text  x="429.53" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::begin (1,333,333 samples, 0.05%)</title><rect x="460.8" y="501" width="0.5" height="15.0" fill="rgb(224,119,9)" rx="2" ry="2" />
<text  x="463.80" y="511.5" ></text>
</g>
<g >
<title>__add_to_page_cache_locked (2,666,666 samples, 0.09%)</title><rect x="843.1" y="213" width="1.0" height="15.0" fill="rgb(238,67,34)" rx="2" ry="2" />
<text  x="846.07" y="223.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixLockTable::Insert (1,333,333 samples, 0.05%)</title><rect x="1120.4" y="629" width="0.5" height="15.0" fill="rgb(216,160,10)" rx="2" ry="2" />
<text  x="1123.40" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (2,666,666 samples, 0.09%)</title><rect x="1171.3" y="709" width="1.0" height="15.0" fill="rgb(227,210,47)" rx="2" ry="2" />
<text  x="1174.26" y="719.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (1,333,333 samples, 0.05%)</title><rect x="421.7" y="325" width="0.6" height="15.0" fill="rgb(243,172,49)" rx="2" ry="2" />
<text  x="424.72" y="335.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::key (9,333,331 samples, 0.32%)</title><rect x="189.4" y="485" width="3.7" height="15.0" fill="rgb(240,83,22)" rx="2" ry="2" />
<text  x="192.36" y="495.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Flush (223,999,944 samples, 7.62%)</title><rect x="56.6" y="453" width="89.9" height="15.0" fill="rgb(229,203,46)" rx="2" ry="2" />
<text  x="59.58" y="463.5" >leveldb::T..</text>
</g>
<g >
<title>tcmalloc::PageHeap::Delete (1,333,333 samples, 0.05%)</title><rect x="160.4" y="341" width="0.6" height="15.0" fill="rgb(242,154,24)" rx="2" ry="2" />
<text  x="163.44" y="351.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.05%)</title><rect x="886.4" y="53" width="0.6" height="15.0" fill="rgb(208,149,38)" rx="2" ry="2" />
<text  x="889.43" y="63.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="843.6" y="165" width="0.5" height="15.0" fill="rgb(218,228,36)" rx="2" ry="2" />
<text  x="846.60" y="175.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1,333,333 samples, 0.05%)</title><rect x="453.3" y="373" width="0.5" height="15.0" fill="rgb(253,140,54)" rx="2" ry="2" />
<text  x="456.30" y="383.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.05%)</title><rect x="1118.8" y="501" width="0.5" height="15.0" fill="rgb(250,136,40)" rx="2" ry="2" />
<text  x="1121.79" y="511.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteRawBlock (33,333,325 samples, 1.13%)</title><rect x="115.5" y="421" width="13.4" height="15.0" fill="rgb(226,166,3)" rx="2" ry="2" />
<text  x="118.47" y="431.5" ></text>
</g>
<g >
<title>__generic_file_write_iter (247,999,938 samples, 8.44%)</title><rect x="809.9" y="309" width="99.6" height="15.0" fill="rgb(234,165,43)" rx="2" ry="2" />
<text  x="812.87" y="319.5" >__generic_fi..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.05%)</title><rect x="194.7" y="277" width="0.5" height="15.0" fill="rgb(238,182,5)" rx="2" ry="2" />
<text  x="197.71" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1,333,333 samples, 0.05%)</title><rect x="275.0" y="405" width="0.6" height="15.0" fill="rgb(218,52,52)" rx="2" ry="2" />
<text  x="278.02" y="415.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.05%)</title><rect x="60.3" y="389" width="0.6" height="15.0" fill="rgb(246,11,47)" rx="2" ry="2" />
<text  x="63.33" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::release (5,333,332 samples, 0.18%)</title><rect x="1017.6" y="293" width="2.1" height="15.0" fill="rgb(212,142,49)" rx="2" ry="2" />
<text  x="1020.60" y="303.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (1,333,333 samples, 0.05%)</title><rect x="149.2" y="389" width="0.5" height="15.0" fill="rgb(217,146,16)" rx="2" ry="2" />
<text  x="152.20" y="399.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;::_M_head (2,666,666 samples, 0.09%)</title><rect x="99.4" y="309" width="1.1" height="15.0" fill="rgb(248,90,47)" rx="2" ry="2" />
<text  x="102.41" y="319.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.05%)</title><rect x="279.8" y="245" width="0.6" height="15.0" fill="rgb(242,103,34)" rx="2" ry="2" />
<text  x="282.84" y="255.5" ></text>
</g>
<g >
<title>leveldb::ParseInternalKey (2,666,666 samples, 0.09%)</title><rect x="365.0" y="485" width="1.0" height="15.0" fill="rgb(223,215,20)" rx="2" ry="2" />
<text  x="367.96" y="495.5" ></text>
</g>
<g >
<title>leveldb::PutVarint32 (3,999,999 samples, 0.14%)</title><rect x="244.0" y="421" width="1.6" height="15.0" fill="rgb(253,61,50)" rx="2" ry="2" />
<text  x="246.97" y="431.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="229.0" y="437" width="0.5" height="15.0" fill="rgb(233,142,23)" rx="2" ry="2" />
<text  x="231.97" y="447.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1,333,333 samples, 0.05%)</title><rect x="843.6" y="117" width="0.5" height="15.0" fill="rgb(211,176,23)" rx="2" ry="2" />
<text  x="846.60" y="127.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (1,333,333 samples, 0.05%)</title><rect x="306.1" y="453" width="0.5" height="15.0" fill="rgb(235,42,50)" rx="2" ry="2" />
<text  x="309.07" y="463.5" ></text>
</g>
<g >
<title>leveldb::Status::operator= (6,666,665 samples, 0.23%)</title><rect x="776.7" y="501" width="2.7" height="15.0" fill="rgb(250,173,33)" rx="2" ry="2" />
<text  x="779.68" y="511.5" ></text>
</g>
<g >
<title>leveldb::Status::OK (1,333,333 samples, 0.05%)</title><rect x="282.0" y="389" width="0.5" height="15.0" fill="rgb(217,91,11)" rx="2" ry="2" />
<text  x="284.98" y="399.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;leveldb::Status&gt;::~_Result (3,999,999 samples, 0.14%)</title><rect x="1095.2" y="325" width="1.6" height="15.0" fill="rgb(254,56,21)" rx="2" ry="2" />
<text  x="1098.24" y="335.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (1,333,333 samples, 0.05%)</title><rect x="326.4" y="357" width="0.6" height="15.0" fill="rgb(249,7,44)" rx="2" ry="2" />
<text  x="329.42" y="367.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::LockFile (1,333,333 samples, 0.05%)</title><rect x="1120.4" y="645" width="0.5" height="15.0" fill="rgb(224,213,43)" rx="2" ry="2" />
<text  x="1123.40" y="655.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_rax (1,333,333 samples, 0.05%)</title><rect x="977.5" y="405" width="0.5" height="15.0" fill="rgb(232,185,11)" rx="2" ry="2" />
<text  x="980.45" y="415.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (7,999,998 samples, 0.27%)</title><rect x="227.9" y="485" width="3.2" height="15.0" fill="rgb(248,80,54)" rx="2" ry="2" />
<text  x="230.90" y="495.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (2,666,666 samples, 0.09%)</title><rect x="1110.8" y="517" width="1.0" height="15.0" fill="rgb(250,0,38)" rx="2" ry="2" />
<text  x="1113.76" y="527.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MergingIterator::Valid (1,333,333 samples, 0.05%)</title><rect x="220.9" y="485" width="0.6" height="15.0" fill="rgb(216,107,14)" rx="2" ry="2" />
<text  x="223.94" y="495.5" ></text>
</g>
<g >
<title>put_cred_rcu (1,333,333 samples, 0.05%)</title><rect x="388.0" y="277" width="0.5" height="15.0" fill="rgb(215,201,17)" rx="2" ry="2" />
<text  x="390.99" y="287.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.05%)</title><rect x="1168.0" y="709" width="0.6" height="15.0" fill="rgb(220,17,52)" rx="2" ry="2" />
<text  x="1171.05" y="719.5" ></text>
</g>
<g >
<title>__GI__IO_getline (1,333,333 samples, 0.05%)</title><rect x="1127.4" y="613" width="0.5" height="15.0" fill="rgb(206,25,16)" rx="2" ry="2" />
<text  x="1130.36" y="623.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (6,666,665 samples, 0.23%)</title><rect x="496.7" y="341" width="2.6" height="15.0" fill="rgb(217,227,1)" rx="2" ry="2" />
<text  x="499.67" y="351.5" ></text>
</g>
<g >
<title>leveldb::Status::Status (2,666,666 samples, 0.09%)</title><rect x="468.8" y="501" width="1.1" height="15.0" fill="rgb(226,69,17)" rx="2" ry="2" />
<text  x="471.83" y="511.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="358.5" y="421" width="0.6" height="15.0" fill="rgb(214,97,41)" rx="2" ry="2" />
<text  x="361.54" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5,333,332 samples, 0.18%)</title><rect x="276.6" y="357" width="2.2" height="15.0" fill="rgb(250,199,17)" rx="2" ry="2" />
<text  x="279.62" y="367.5" ></text>
</g>
<g >
<title>ext4_readpages (7,999,998 samples, 0.27%)</title><rect x="1161.6" y="517" width="3.2" height="15.0" fill="rgb(224,171,21)" rx="2" ry="2" />
<text  x="1164.62" y="527.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (9,333,331 samples, 0.32%)</title><rect x="33.0" y="437" width="3.8" height="15.0" fill="rgb(238,3,4)" rx="2" ry="2" />
<text  x="36.02" y="447.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MemTableInserter::~MemTableInserter (3,999,999 samples, 0.14%)</title><rect x="486.5" y="501" width="1.6" height="15.0" fill="rgb(254,129,5)" rx="2" ry="2" />
<text  x="489.50" y="511.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1,333,333 samples, 0.05%)</title><rect x="377.8" y="309" width="0.5" height="15.0" fill="rgb(219,194,25)" rx="2" ry="2" />
<text  x="380.81" y="319.5" ></text>
</g>
<g >
<title>new_do_write (1,333,333 samples, 0.05%)</title><rect x="161.0" y="405" width="0.5" height="15.0" fill="rgb(246,54,15)" rx="2" ry="2" />
<text  x="163.98" y="415.5" ></text>
</g>
<g >
<title>ext4_da_write_end (127,999,968 samples, 4.36%)</title><rect x="849.5" y="277" width="51.4" height="15.0" fill="rgb(235,93,52)" rx="2" ry="2" />
<text  x="852.49" y="287.5" >ext4_..</text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (1,333,333 samples, 0.05%)</title><rect x="1183.0" y="725" width="0.6" height="15.0" fill="rgb(240,135,6)" rx="2" ry="2" />
<text  x="1186.04" y="735.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (5,333,332 samples, 0.18%)</title><rect x="1048.1" y="469" width="2.2" height="15.0" fill="rgb(225,27,51)" rx="2" ry="2" />
<text  x="1051.12" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::operator (1,333,333 samples, 0.05%)</title><rect x="1177.2" y="709" width="0.5" height="15.0" fill="rgb(218,185,39)" rx="2" ry="2" />
<text  x="1180.15" y="719.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (1,333,333 samples, 0.05%)</title><rect x="389.6" y="453" width="0.5" height="15.0" fill="rgb(250,224,20)" rx="2" ry="2" />
<text  x="392.59" y="463.5" ></text>
</g>
<g >
<title>__fget_light (2,666,666 samples, 0.09%)</title><rect x="802.4" y="357" width="1.0" height="15.0" fill="rgb(232,11,12)" rx="2" ry="2" />
<text  x="805.38" y="367.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;1ul, std::__future_base::_Result_base::_Deleter&gt; (5,333,332 samples, 0.18%)</title><rect x="1020.3" y="277" width="2.1" height="15.0" fill="rgb(206,144,52)" rx="2" ry="2" />
<text  x="1023.28" y="287.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_State_baseV2 (13,333,330 samples, 0.45%)</title><rect x="1063.6" y="389" width="5.4" height="15.0" fill="rgb(213,85,12)" rx="2" ry="2" />
<text  x="1066.65" y="399.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="222.0" y="421" width="0.5" height="15.0" fill="rgb(252,1,27)" rx="2" ry="2" />
<text  x="225.01" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1,333,333 samples, 0.05%)</title><rect x="317.3" y="485" width="0.5" height="15.0" fill="rgb(216,203,21)" rx="2" ry="2" />
<text  x="320.31" y="495.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="284.1" y="357" width="0.6" height="15.0" fill="rgb(222,31,45)" rx="2" ry="2" />
<text  x="287.12" y="367.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl (1,333,333 samples, 0.05%)</title><rect x="1079.2" y="453" width="0.5" height="15.0" fill="rgb(253,20,6)" rx="2" ry="2" />
<text  x="1082.17" y="463.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Valid (1,333,333 samples, 0.05%)</title><rect x="26.1" y="437" width="0.5" height="15.0" fill="rgb(249,116,36)" rx="2" ry="2" />
<text  x="29.06" y="447.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (5,333,332 samples, 0.18%)</title><rect x="142.8" y="373" width="2.1" height="15.0" fill="rgb(208,48,10)" rx="2" ry="2" />
<text  x="145.78" y="383.5" ></text>
</g>
<g >
<title>operator new (2,666,666 samples, 0.09%)</title><rect x="748.3" y="421" width="1.1" height="15.0" fill="rgb(225,159,11)" rx="2" ry="2" />
<text  x="751.30" y="431.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (86,666,645 samples, 2.95%)</title><rect x="995.1" y="421" width="34.8" height="15.0" fill="rgb(236,152,28)" rx="2" ry="2" />
<text  x="998.12" y="431.5" >st..</text>
</g>
<g >
<title>inode_sb_list_add (1,333,333 samples, 0.05%)</title><rect x="150.3" y="245" width="0.5" height="15.0" fill="rgb(241,109,24)" rx="2" ry="2" />
<text  x="153.27" y="255.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, false&gt;::_Head_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,333,333 samples, 0.05%)</title><rect x="271.8" y="293" width="0.5" height="15.0" fill="rgb(252,50,36)" rx="2" ry="2" />
<text  x="274.81" y="303.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.05%)</title><rect x="1118.8" y="373" width="0.5" height="15.0" fill="rgb(247,155,21)" rx="2" ry="2" />
<text  x="1121.79" y="383.5" ></text>
</g>
<g >
<title>delete_from_page_cache_batch (1,333,333 samples, 0.05%)</title><rect x="421.2" y="325" width="0.5" height="15.0" fill="rgb(254,167,40)" rx="2" ry="2" />
<text  x="424.18" y="335.5" ></text>
</g>
<g >
<title>TCMalloc_SystemRelease (1,333,333 samples, 0.05%)</title><rect x="160.4" y="293" width="0.6" height="15.0" fill="rgb(216,180,14)" rx="2" ry="2" />
<text  x="163.44" y="303.5" ></text>
</g>
<g >
<title>std::fill_n&lt;char*, unsigned long, char&gt; (5,333,332 samples, 0.18%)</title><rect x="315.2" y="373" width="2.1" height="15.0" fill="rgb(213,152,51)" rx="2" ry="2" />
<text  x="318.17" y="383.5" ></text>
</g>
<g >
<title>fdatasync (1,333,333 samples, 0.05%)</title><rect x="1125.8" y="565" width="0.5" height="15.0" fill="rgb(234,24,45)" rx="2" ry="2" />
<text  x="1128.75" y="575.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (1,333,333 samples, 0.05%)</title><rect x="270.2" y="261" width="0.5" height="15.0" fill="rgb(218,172,26)" rx="2" ry="2" />
<text  x="273.20" y="271.5" ></text>
</g>
<g >
<title>ext4_es_lookup_extent (1,333,333 samples, 0.05%)</title><rect x="1165.9" y="549" width="0.5" height="15.0" fill="rgb(212,8,4)" rx="2" ry="2" />
<text  x="1168.91" y="559.5" ></text>
</g>
<g >
<title>set_page_dirty (1,333,333 samples, 0.05%)</title><rect x="1166.4" y="613" width="0.6" height="15.0" fill="rgb(243,191,19)" rx="2" ry="2" />
<text  x="1169.44" y="623.5" ></text>
</g>
<g >
<title>page_counter_cancel (1,333,333 samples, 0.05%)</title><rect x="279.8" y="133" width="0.6" height="15.0" fill="rgb(242,90,36)" rx="2" ry="2" />
<text  x="282.84" y="143.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt;::_M_allocate_map (1,333,333 samples, 0.05%)</title><rect x="1129.0" y="453" width="0.5" height="15.0" fill="rgb(206,137,25)" rx="2" ry="2" />
<text  x="1131.97" y="463.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.05%)</title><rect x="321.1" y="309" width="0.5" height="15.0" fill="rgb(211,164,17)" rx="2" ry="2" />
<text  x="324.06" y="319.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl&lt;std::__future_base::_Result_base::_Deleter&gt; (3,999,999 samples, 0.14%)</title><rect x="1015.5" y="293" width="1.6" height="15.0" fill="rgb(254,111,36)" rx="2" ry="2" />
<text  x="1018.46" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,333,333 samples, 0.05%)</title><rect x="321.1" y="389" width="0.5" height="15.0" fill="rgb(244,145,15)" rx="2" ry="2" />
<text  x="324.06" y="399.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1,333,333 samples, 0.05%)</title><rect x="1131.1" y="725" width="0.5" height="15.0" fill="rgb(221,91,28)" rx="2" ry="2" />
<text  x="1134.11" y="735.5" ></text>
</g>
<g >
<title>fts_build (1,333,333 samples, 0.05%)</title><rect x="1119.9" y="581" width="0.5" height="15.0" fill="rgb(225,140,41)" rx="2" ry="2" />
<text  x="1122.86" y="591.5" ></text>
</g>
<g >
<title>iov_iter_advance (3,999,999 samples, 0.14%)</title><rect x="900.9" y="277" width="1.6" height="15.0" fill="rgb(227,181,49)" rx="2" ry="2" />
<text  x="903.89" y="287.5" ></text>
</g>
<g >
<title>file_free_rcu (1,333,333 samples, 0.05%)</title><rect x="321.1" y="293" width="0.5" height="15.0" fill="rgb(228,57,8)" rx="2" ry="2" />
<text  x="324.06" y="303.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;char*, unsigned long&gt; (5,333,332 samples, 0.18%)</title><rect x="294.3" y="357" width="2.1" height="15.0" fill="rgb(240,131,43)" rx="2" ry="2" />
<text  x="297.29" y="367.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (1,333,333 samples, 0.05%)</title><rect x="293.8" y="341" width="0.5" height="15.0" fill="rgb(234,199,39)" rx="2" ry="2" />
<text  x="296.76" y="351.5" ></text>
</g>
<g >
<title>jbd2__journal_start (17,333,329 samples, 0.59%)</title><rect x="831.3" y="245" width="6.9" height="15.0" fill="rgb(216,126,42)" rx="2" ry="2" />
<text  x="834.29" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::push_back (2,666,666 samples, 0.09%)</title><rect x="148.1" y="453" width="1.1" height="15.0" fill="rgb(221,195,21)" rx="2" ry="2" />
<text  x="151.13" y="463.5" ></text>
</g>
<g >
<title>ext4_releasepage (2,666,666 samples, 0.09%)</title><rect x="231.7" y="213" width="1.0" height="15.0" fill="rgb(237,57,10)" rx="2" ry="2" />
<text  x="234.65" y="223.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (1,333,333 samples, 0.05%)</title><rect x="452.2" y="405" width="0.6" height="15.0" fill="rgb(247,55,16)" rx="2" ry="2" />
<text  x="455.23" y="415.5" ></text>
</g>
<g >
<title>__do_fault (9,333,331 samples, 0.32%)</title><rect x="1161.1" y="629" width="3.7" height="15.0" fill="rgb(231,54,20)" rx="2" ry="2" />
<text  x="1164.09" y="639.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ListTooLong (2,666,666 samples, 0.09%)</title><rect x="194.2" y="437" width="1.0" height="15.0" fill="rgb(219,57,48)" rx="2" ry="2" />
<text  x="197.17" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch (2,666,666 samples, 0.09%)</title><rect x="1055.6" y="421" width="1.1" height="15.0" fill="rgb(220,144,22)" rx="2" ry="2" />
<text  x="1058.62" y="431.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (1,333,333 samples, 0.05%)</title><rect x="1185.7" y="709" width="0.6" height="15.0" fill="rgb(218,177,26)" rx="2" ry="2" />
<text  x="1188.72" y="719.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="279.8" y="277" width="0.6" height="15.0" fill="rgb(224,214,49)" rx="2" ry="2" />
<text  x="282.84" y="287.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::SingletonEnv&lt;leveldb::(anonymous namespace)::PosixEnv&gt;::SingletonEnv (1,333,333 samples, 0.05%)</title><rect x="1129.0" y="645" width="0.5" height="15.0" fill="rgb(223,171,49)" rx="2" ry="2" />
<text  x="1131.97" y="655.5" ></text>
</g>
<g >
<title>leveldb::Status::operator= (3,999,999 samples, 0.14%)</title><rect x="1104.3" y="549" width="1.6" height="15.0" fill="rgb(208,209,8)" rx="2" ry="2" />
<text  x="1107.34" y="559.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.09%)</title><rect x="1102.2" y="485" width="1.1" height="15.0" fill="rgb(237,4,3)" rx="2" ry="2" />
<text  x="1105.20" y="495.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::shared_ptr (1,333,333 samples, 0.05%)</title><rect x="1170.7" y="709" width="0.6" height="15.0" fill="rgb(241,224,23)" rx="2" ry="2" />
<text  x="1173.73" y="719.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseToSpans (1,333,333 samples, 0.05%)</title><rect x="1119.9" y="501" width="0.5" height="15.0" fill="rgb(253,218,28)" rx="2" ry="2" />
<text  x="1122.86" y="511.5" ></text>
</g>
<g >
<title>vsnprintf (1,333,333 samples, 0.05%)</title><rect x="1127.4" y="357" width="0.5" height="15.0" fill="rgb(209,137,41)" rx="2" ry="2" />
<text  x="1130.36" y="367.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, false&gt;::_M_head (1,333,333 samples, 0.05%)</title><rect x="1011.2" y="197" width="0.5" height="15.0" fill="rgb(233,102,23)" rx="2" ry="2" />
<text  x="1014.18" y="207.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.05%)</title><rect x="361.2" y="453" width="0.6" height="15.0" fill="rgb(208,107,23)" rx="2" ry="2" />
<text  x="364.22" y="463.5" ></text>
</g>
<g >
<title>alloc_pages_current (1,333,333 samples, 0.05%)</title><rect x="1161.1" y="517" width="0.5" height="15.0" fill="rgb(241,205,48)" rx="2" ry="2" />
<text  x="1164.09" y="527.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.05%)</title><rect x="359.1" y="469" width="0.5" height="15.0" fill="rgb(209,131,42)" rx="2" ry="2" />
<text  x="362.07" y="479.5" ></text>
</g>
<g >
<title>delete_from_page_cache_batch (1,333,333 samples, 0.05%)</title><rect x="1122.0" y="469" width="0.5" height="15.0" fill="rgb(241,140,18)" rx="2" ry="2" />
<text  x="1125.01" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (14,666,663 samples, 0.50%)</title><rect x="321.6" y="421" width="5.9" height="15.0" fill="rgb(254,130,48)" rx="2" ry="2" />
<text  x="324.60" y="431.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::CompactionState::current_output (2,666,666 samples, 0.09%)</title><rect x="314.1" y="501" width="1.1" height="15.0" fill="rgb(253,145,33)" rx="2" ry="2" />
<text  x="317.10" y="511.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2,666,666 samples, 0.09%)</title><rect x="854.3" y="197" width="1.1" height="15.0" fill="rgb(230,171,37)" rx="2" ry="2" />
<text  x="857.31" y="207.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,333,333 samples, 0.05%)</title><rect x="101.6" y="357" width="0.5" height="15.0" fill="rgb(248,208,15)" rx="2" ry="2" />
<text  x="104.55" y="367.5" ></text>
</g>
<g >
<title>unlock_page (1,333,333 samples, 0.05%)</title><rect x="900.4" y="261" width="0.5" height="15.0" fill="rgb(242,13,4)" rx="2" ry="2" />
<text  x="903.35" y="271.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1,333,333 samples, 0.05%)</title><rect x="264.8" y="197" width="0.6" height="15.0" fill="rgb(217,18,49)" rx="2" ry="2" />
<text  x="267.85" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (7,999,998 samples, 0.27%)</title><rect x="297.5" y="389" width="3.2" height="15.0" fill="rgb(229,229,3)" rx="2" ry="2" />
<text  x="300.50" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_extract (1,333,333 samples, 0.05%)</title><rect x="386.4" y="373" width="0.5" height="15.0" fill="rgb(254,160,5)" rx="2" ry="2" />
<text  x="389.38" y="383.5" ></text>
</g>
<g >
<title>rcu_gp_kthread_wake (2,666,666 samples, 0.09%)</title><rect x="626.8" y="261" width="1.0" height="15.0" fill="rgb(250,220,42)" rx="2" ry="2" />
<text  x="629.77" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (14,666,663 samples, 0.50%)</title><rect x="372.5" y="421" width="5.8" height="15.0" fill="rgb(226,164,35)" rx="2" ry="2" />
<text  x="375.46" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (1,333,333 samples, 0.05%)</title><rect x="1175.0" y="725" width="0.5" height="15.0" fill="rgb(205,213,31)" rx="2" ry="2" />
<text  x="1178.01" y="735.5" ></text>
</g>
<g >
<title>leveldb::WriteBatch::Put (22,666,661 samples, 0.77%)</title><rect x="1108.6" y="549" width="9.1" height="15.0" fill="rgb(251,126,48)" rx="2" ry="2" />
<text  x="1111.62" y="559.5" ></text>
</g>
<g >
<title>path_openat (1,333,333 samples, 0.05%)</title><rect x="1129.5" y="453" width="0.5" height="15.0" fill="rgb(247,207,16)" rx="2" ry="2" />
<text  x="1132.50" y="463.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Flush (93,333,310 samples, 3.18%)</title><rect x="255.7" y="437" width="37.5" height="15.0" fill="rgb(225,156,0)" rx="2" ry="2" />
<text  x="258.74" y="447.5" >lev..</text>
</g>
<g >
<title>leveldb::ParseInternalKey (10,666,664 samples, 0.36%)</title><rect x="336.6" y="501" width="4.3" height="15.0" fill="rgb(226,2,10)" rx="2" ry="2" />
<text  x="339.59" y="511.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.05%)</title><rect x="764.9" y="469" width="0.5" height="15.0" fill="rgb(248,177,40)" rx="2" ry="2" />
<text  x="767.90" y="479.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (18,666,662 samples, 0.64%)</title><rect x="382.1" y="453" width="7.5" height="15.0" fill="rgb(247,53,6)" rx="2" ry="2" />
<text  x="385.10" y="463.5" ></text>
</g>
<g >
<title>leveldb::WriteBatch::Iterate (703,999,824 samples, 23.96%)</title><rect x="488.1" y="501" width="282.7" height="15.0" fill="rgb(242,16,21)" rx="2" ry="2" />
<text  x="491.10" y="511.5" >leveldb::WriteBatch::Iterate</text>
</g>
<g >
<title>__closedir (1,333,333 samples, 0.05%)</title><rect x="1119.9" y="565" width="0.5" height="15.0" fill="rgb(219,214,54)" rx="2" ry="2" />
<text  x="1122.86" y="575.5" ></text>
</g>
<g >
<title>leveldb::MutexLock::MutexLock (2,666,666 samples, 0.09%)</title><rect x="475.8" y="517" width="1.1" height="15.0" fill="rgb(214,113,37)" rx="2" ry="2" />
<text  x="478.79" y="527.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="396.0" y="357" width="0.6" height="15.0" fill="rgb(237,70,23)" rx="2" ry="2" />
<text  x="399.02" y="367.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (2,666,666 samples, 0.09%)</title><rect x="194.2" y="453" width="1.0" height="15.0" fill="rgb(246,123,45)" rx="2" ry="2" />
<text  x="197.17" y="463.5" ></text>
</g>
<g >
<title>_IO_getdelim (1,333,333 samples, 0.05%)</title><rect x="1118.8" y="661" width="0.5" height="15.0" fill="rgb(221,160,5)" rx="2" ry="2" />
<text  x="1121.79" y="671.5" ></text>
</g>
<g >
<title>__block_write_begin_int (1,333,333 samples, 0.05%)</title><rect x="1165.9" y="581" width="0.5" height="15.0" fill="rgb(254,68,1)" rx="2" ry="2" />
<text  x="1168.91" y="591.5" ></text>
</g>
<g >
<title>__GI___sbrk (1,333,333 samples, 0.05%)</title><rect x="144.4" y="261" width="0.5" height="15.0" fill="rgb(223,164,37)" rx="2" ry="2" />
<text  x="147.38" y="271.5" ></text>
</g>
<g >
<title>split_vma (1,333,333 samples, 0.05%)</title><rect x="1130.0" y="517" width="0.6" height="15.0" fill="rgb(244,93,13)" rx="2" ry="2" />
<text  x="1133.04" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (2,666,666 samples, 0.09%)</title><rect x="388.5" y="421" width="1.1" height="15.0" fill="rgb(217,140,21)" rx="2" ry="2" />
<text  x="391.52" y="431.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (1,333,333 samples, 0.05%)</title><rect x="1144.5" y="709" width="0.5" height="15.0" fill="rgb(208,59,1)" rx="2" ry="2" />
<text  x="1147.49" y="719.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.05%)</title><rect x="212.4" y="293" width="0.5" height="15.0" fill="rgb(223,72,22)" rx="2" ry="2" />
<text  x="215.38" y="303.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.05%)</title><rect x="143.8" y="341" width="0.6" height="15.0" fill="rgb(207,42,8)" rx="2" ry="2" />
<text  x="146.85" y="351.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (15,999,996 samples, 0.54%)</title><rect x="273.9" y="421" width="6.5" height="15.0" fill="rgb(228,70,0)" rx="2" ry="2" />
<text  x="276.95" y="431.5" ></text>
</g>
<g >
<title>leveldb::SetCurrentFile (1,333,333 samples, 0.05%)</title><rect x="1126.8" y="613" width="0.6" height="15.0" fill="rgb(207,119,5)" rx="2" ry="2" />
<text  x="1129.82" y="623.5" ></text>
</g>
<g >
<title>leveldb::ReadBlock (1,333,333 samples, 0.05%)</title><rect x="212.4" y="373" width="0.5" height="15.0" fill="rgb(251,83,54)" rx="2" ry="2" />
<text  x="215.38" y="383.5" ></text>
</g>
<g >
<title>leveldb::Random::Uniform (7,999,998 samples, 0.27%)</title><rect x="448.5" y="501" width="3.2" height="15.0" fill="rgb(254,104,41)" rx="2" ry="2" />
<text  x="451.48" y="511.5" ></text>
</g>
<g >
<title>do_fsync (1,333,333 samples, 0.05%)</title><rect x="1125.8" y="501" width="0.5" height="15.0" fill="rgb(217,163,44)" rx="2" ry="2" />
<text  x="1128.75" y="511.5" ></text>
</g>
<g >
<title>file_free_rcu (1,333,333 samples, 0.05%)</title><rect x="886.4" y="37" width="0.6" height="15.0" fill="rgb(214,119,27)" rx="2" ry="2" />
<text  x="889.43" y="47.5" ></text>
</g>
<g >
<title>generic_update_time (1,333,333 samples, 0.05%)</title><rect x="161.0" y="213" width="0.5" height="15.0" fill="rgb(230,180,49)" rx="2" ry="2" />
<text  x="163.98" y="223.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::key (1,333,333 samples, 0.05%)</title><rect x="219.9" y="453" width="0.5" height="15.0" fill="rgb(205,142,19)" rx="2" ry="2" />
<text  x="222.87" y="463.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (2,666,666 samples, 0.09%)</title><rect x="229.5" y="453" width="1.1" height="15.0" fill="rgb(231,66,36)" rx="2" ry="2" />
<text  x="232.51" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="371.9" y="421" width="0.6" height="15.0" fill="rgb(229,208,21)" rx="2" ry="2" />
<text  x="374.92" y="431.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (98,666,642 samples, 3.36%)</title><rect x="649.3" y="373" width="39.6" height="15.0" fill="rgb(244,194,53)" rx="2" ry="2" />
<text  x="652.26" y="383.5" >lev..</text>
</g>
<g >
<title>__find_specmb (1,333,333 samples, 0.05%)</title><rect x="441.5" y="485" width="0.6" height="15.0" fill="rgb(251,23,14)" rx="2" ry="2" />
<text  x="444.52" y="495.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, false&gt;::_Head_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (2,666,666 samples, 0.09%)</title><rect x="98.3" y="309" width="1.1" height="15.0" fill="rgb(219,164,4)" rx="2" ry="2" />
<text  x="101.34" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__future_base::_State_baseV2&gt;::construct&lt;std::__future_base::_State_baseV2&gt; (13,333,330 samples, 0.45%)</title><rect x="1063.6" y="405" width="5.4" height="15.0" fill="rgb(235,51,13)" rx="2" ry="2" />
<text  x="1066.65" y="415.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="796.0" y="405" width="0.5" height="15.0" fill="rgb(246,228,37)" rx="2" ry="2" />
<text  x="798.95" y="415.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock (1,333,333 samples, 0.05%)</title><rect x="955.0" y="469" width="0.5" height="15.0" fill="rgb(221,61,10)" rx="2" ry="2" />
<text  x="957.96" y="479.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::value (3,999,999 samples, 0.14%)</title><rect x="221.5" y="485" width="1.6" height="15.0" fill="rgb(232,37,19)" rx="2" ry="2" />
<text  x="224.48" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (7,999,998 samples, 0.27%)</title><rect x="170.1" y="405" width="3.2" height="15.0" fill="rgb(245,170,29)" rx="2" ry="2" />
<text  x="173.08" y="415.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (3,999,999 samples, 0.14%)</title><rect x="505.2" y="405" width="1.6" height="15.0" fill="rgb(217,54,3)" rx="2" ry="2" />
<text  x="508.24" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (1,333,333 samples, 0.05%)</title><rect x="227.4" y="453" width="0.5" height="15.0" fill="rgb(245,173,38)" rx="2" ry="2" />
<text  x="230.37" y="463.5" ></text>
</g>
<g >
<title>find_get_entry (3,999,999 samples, 0.14%)</title><rect x="844.1" y="229" width="1.6" height="15.0" fill="rgb(213,183,11)" rx="2" ry="2" />
<text  x="847.14" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (1,333,333 samples, 0.05%)</title><rect x="303.4" y="357" width="0.5" height="15.0" fill="rgb(213,188,38)" rx="2" ry="2" />
<text  x="306.39" y="367.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Valid (2,666,666 samples, 0.09%)</title><rect x="186.1" y="453" width="1.1" height="15.0" fill="rgb(219,76,28)" rx="2" ry="2" />
<text  x="189.14" y="463.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl&lt;std::__future_base::_Result_base*&amp;, std::__future_base::_Result_base::_Deleter, void&gt; (1,333,333 samples, 0.05%)</title><rect x="1016.5" y="261" width="0.6" height="15.0" fill="rgb(210,11,37)" rx="2" ry="2" />
<text  x="1019.53" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::emplace_back&lt;leveldb::DBImpl::Writer*&gt; (3,999,999 samples, 0.14%)</title><rect x="961.9" y="501" width="1.6" height="15.0" fill="rgb(237,185,47)" rx="2" ry="2" />
<text  x="964.92" y="511.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="400.3" y="325" width="0.5" height="15.0" fill="rgb(208,55,14)" rx="2" ry="2" />
<text  x="403.30" y="335.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2,666,666 samples, 0.09%)</title><rect x="253.1" y="389" width="1.0" height="15.0" fill="rgb(228,226,11)" rx="2" ry="2" />
<text  x="256.07" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::front (6,666,665 samples, 0.23%)</title><rect x="462.4" y="501" width="2.7" height="15.0" fill="rgb(238,50,49)" rx="2" ry="2" />
<text  x="465.40" y="511.5" ></text>
</g>
<g >
<title>elf_machine_rela (1,333,333 samples, 0.05%)</title><rect x="1130.6" y="613" width="0.5" height="15.0" fill="rgb(230,174,37)" rx="2" ry="2" />
<text  x="1133.57" y="623.5" ></text>
</g>
<g >
<title>__GI___libc_read (1,333,333 samples, 0.05%)</title><rect x="1127.4" y="549" width="0.5" height="15.0" fill="rgb(219,22,9)" rx="2" ry="2" />
<text  x="1130.36" y="559.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::_M_head (1,333,333 samples, 0.05%)</title><rect x="1019.2" y="213" width="0.5" height="15.0" fill="rgb(247,194,42)" rx="2" ry="2" />
<text  x="1022.21" y="223.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::push_back (3,999,999 samples, 0.14%)</title><rect x="961.9" y="517" width="1.6" height="15.0" fill="rgb(240,141,12)" rx="2" ry="2" />
<text  x="964.92" y="527.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (11,999,997 samples, 0.41%)</title><rect x="203.8" y="453" width="4.8" height="15.0" fill="rgb(244,96,2)" rx="2" ry="2" />
<text  x="206.81" y="463.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="279.8" y="293" width="0.6" height="15.0" fill="rgb(220,66,6)" rx="2" ry="2" />
<text  x="282.84" y="303.5" ></text>
</g>
<g >
<title>ext4_mark_inode_dirty (13,333,330 samples, 0.45%)</title><rect x="821.7" y="229" width="5.3" height="15.0" fill="rgb(210,212,34)" rx="2" ry="2" />
<text  x="824.65" y="239.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (1,333,333 samples, 0.05%)</title><rect x="212.4" y="421" width="0.5" height="15.0" fill="rgb(234,113,40)" rx="2" ry="2" />
<text  x="215.38" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt;::operator++ (2,666,666 samples, 0.09%)</title><rect x="459.7" y="501" width="1.1" height="15.0" fill="rgb(215,37,51)" rx="2" ry="2" />
<text  x="462.73" y="511.5" ></text>
</g>
<g >
<title>_dl_map_object_deps (1,333,333 samples, 0.05%)</title><rect x="1129.5" y="645" width="0.5" height="15.0" fill="rgb(213,199,5)" rx="2" ry="2" />
<text  x="1132.50" y="655.5" ></text>
</g>
<g >
<title>put_cred_rcu (1,333,333 samples, 0.05%)</title><rect x="284.1" y="277" width="0.6" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="287.12" y="287.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2,666,666 samples, 0.09%)</title><rect x="180.8" y="325" width="1.1" height="15.0" fill="rgb(230,134,41)" rx="2" ry="2" />
<text  x="183.79" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::DBImpl::CompactionState::Output, std::allocator&lt;leveldb::DBImpl::CompactionState::Output&gt; &gt;::operator[] (1,333,333 samples, 0.05%)</title><rect x="314.6" y="485" width="0.6" height="15.0" fill="rgb(221,171,11)" rx="2" ry="2" />
<text  x="317.64" y="495.5" ></text>
</g>
<g >
<title>leveldb::Status::Status (1,333,333 samples, 0.05%)</title><rect x="415.3" y="453" width="0.5" height="15.0" fill="rgb(228,217,11)" rx="2" ry="2" />
<text  x="418.29" y="463.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="358.5" y="437" width="0.6" height="15.0" fill="rgb(245,219,38)" rx="2" ry="2" />
<text  x="361.54" y="447.5" ></text>
</g>
<g >
<title>operator new[] (7,999,998 samples, 0.27%)</title><rect x="92.5" y="341" width="3.2" height="15.0" fill="rgb(223,66,44)" rx="2" ry="2" />
<text  x="95.45" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (13,333,330 samples, 0.45%)</title><rect x="256.3" y="357" width="5.3" height="15.0" fill="rgb(222,216,11)" rx="2" ry="2" />
<text  x="259.28" y="367.5" ></text>
</g>
<g >
<title>try_to_release_page (6,666,665 samples, 0.23%)</title><rect x="1123.1" y="405" width="2.7" height="15.0" fill="rgb(225,134,12)" rx="2" ry="2" />
<text  x="1126.08" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.05%)</title><rect x="184.5" y="437" width="0.6" height="15.0" fill="rgb(210,146,2)" rx="2" ry="2" />
<text  x="187.54" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (1,333,333 samples, 0.05%)</title><rect x="63.5" y="357" width="0.6" height="15.0" fill="rgb(242,145,10)" rx="2" ry="2" />
<text  x="66.54" y="367.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (3,999,999 samples, 0.14%)</title><rect x="506.8" y="389" width="1.6" height="15.0" fill="rgb(227,62,31)" rx="2" ry="2" />
<text  x="509.84" y="399.5" ></text>
</g>
<g >
<title>__do_page_fault (5,333,332 samples, 0.18%)</title><rect x="497.2" y="293" width="2.1" height="15.0" fill="rgb(218,168,24)" rx="2" ry="2" />
<text  x="500.21" y="303.5" ></text>
</g>
<g >
<title>futex_wake (3,999,999 samples, 0.14%)</title><rect x="989.8" y="357" width="1.6" height="15.0" fill="rgb(224,16,27)" rx="2" ry="2" />
<text  x="992.76" y="367.5" ></text>
</g>
<g >
<title>vfs_open (2,666,666 samples, 0.09%)</title><rect x="1127.9" y="453" width="1.1" height="15.0" fill="rgb(224,218,18)" rx="2" ry="2" />
<text  x="1130.89" y="463.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2,666,666 samples, 0.09%)</title><rect x="227.9" y="437" width="1.1" height="15.0" fill="rgb(220,147,28)" rx="2" ry="2" />
<text  x="230.90" y="447.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Valid (1,333,333 samples, 0.05%)</title><rect x="307.1" y="453" width="0.6" height="15.0" fill="rgb(239,206,11)" rx="2" ry="2" />
<text  x="310.14" y="463.5" ></text>
</g>
<g >
<title>crc32c_pcl_intel_update (13,333,330 samples, 0.45%)</title><rect x="876.8" y="149" width="5.4" height="15.0" fill="rgb(228,102,16)" rx="2" ry="2" />
<text  x="879.80" y="159.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::GrowHeap (1,333,333 samples, 0.05%)</title><rect x="144.4" y="341" width="0.5" height="15.0" fill="rgb(237,152,34)" rx="2" ry="2" />
<text  x="147.38" y="351.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixMmapReadableFile::~PosixMmapReadableFile (1,333,333 samples, 0.05%)</title><rect x="421.7" y="389" width="0.6" height="15.0" fill="rgb(246,206,35)" rx="2" ry="2" />
<text  x="424.72" y="399.5" ></text>
</g>
<g >
<title>find_busiest_group (1,333,333 samples, 0.05%)</title><rect x="562.5" y="293" width="0.6" height="15.0" fill="rgb(245,10,7)" rx="2" ry="2" />
<text  x="565.52" y="303.5" ></text>
</g>
<g >
<title>__GI_madvise (1,333,333 samples, 0.05%)</title><rect x="194.7" y="293" width="0.5" height="15.0" fill="rgb(217,29,8)" rx="2" ry="2" />
<text  x="197.71" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get_deleter (1,333,333 samples, 0.05%)</title><rect x="1186.8" y="725" width="0.5" height="15.0" fill="rgb(246,154,12)" rx="2" ry="2" />
<text  x="1189.79" y="735.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="140.1" y="341" width="0.5" height="15.0" fill="rgb(213,216,39)" rx="2" ry="2" />
<text  x="143.10" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::resize (23,999,994 samples, 0.82%)</title><rect x="150.8" y="437" width="9.6" height="15.0" fill="rgb(209,58,30)" rx="2" ry="2" />
<text  x="153.81" y="447.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (2,666,666 samples, 0.09%)</title><rect x="1132.7" y="709" width="1.1" height="15.0" fill="rgb(210,102,2)" rx="2" ry="2" />
<text  x="1135.71" y="719.5" ></text>
</g>
<g >
<title>__GI__IO_setb (1,333,333 samples, 0.05%)</title><rect x="427.6" y="485" width="0.5" height="15.0" fill="rgb(238,228,53)" rx="2" ry="2" />
<text  x="430.60" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="321.1" y="421" width="0.5" height="15.0" fill="rgb(211,8,43)" rx="2" ry="2" />
<text  x="324.06" y="431.5" ></text>
</g>
<g >
<title>anon_vma_clone (1,333,333 samples, 0.05%)</title><rect x="1130.0" y="485" width="0.6" height="15.0" fill="rgb(224,5,42)" rx="2" ry="2" />
<text  x="1133.04" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="107.4" y="341" width="0.6" height="15.0" fill="rgb(236,183,31)" rx="2" ry="2" />
<text  x="110.44" y="351.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.09%)</title><rect x="1017.6" y="245" width="1.1" height="15.0" fill="rgb(225,83,49)" rx="2" ry="2" />
<text  x="1020.60" y="255.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (1,333,333 samples, 0.05%)</title><rect x="498.3" y="245" width="0.5" height="15.0" fill="rgb(219,91,21)" rx="2" ry="2" />
<text  x="501.28" y="255.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="226.8" y="453" width="0.6" height="15.0" fill="rgb(211,158,36)" rx="2" ry="2" />
<text  x="229.83" y="463.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (1,333,333 samples, 0.05%)</title><rect x="94.6" y="181" width="0.5" height="15.0" fill="rgb(216,68,50)" rx="2" ry="2" />
<text  x="97.59" y="191.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (1,333,333 samples, 0.05%)</title><rect x="161.5" y="469" width="0.6" height="15.0" fill="rgb(225,139,48)" rx="2" ry="2" />
<text  x="164.52" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (2,666,666 samples, 0.09%)</title><rect x="144.9" y="437" width="1.1" height="15.0" fill="rgb(243,115,38)" rx="2" ry="2" />
<text  x="147.92" y="447.5" ></text>
</g>
<g >
<title>__GI__IO_file_open (2,666,666 samples, 0.09%)</title><rect x="1127.9" y="581" width="1.1" height="15.0" fill="rgb(247,159,39)" rx="2" ry="2" />
<text  x="1130.89" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::size (1,333,333 samples, 0.05%)</title><rect x="114.4" y="405" width="0.5" height="15.0" fill="rgb(229,173,20)" rx="2" ry="2" />
<text  x="117.40" y="415.5" ></text>
</g>
<g >
<title>leveldb::Slice::remove_prefix (3,999,999 samples, 0.14%)</title><rect x="768.6" y="485" width="1.7" height="15.0" fill="rgb(246,92,13)" rx="2" ry="2" />
<text  x="771.65" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt;::_Deque_iterator (1,333,333 samples, 0.05%)</title><rect x="461.9" y="485" width="0.5" height="15.0" fill="rgb(216,59,36)" rx="2" ry="2" />
<text  x="464.87" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (18,666,662 samples, 0.64%)</title><rect x="382.1" y="437" width="7.5" height="15.0" fill="rgb(232,74,46)" rx="2" ry="2" />
<text  x="385.10" y="447.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;*, unsigned long, std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt; &gt; (1,333,333 samples, 0.05%)</title><rect x="1129.0" y="581" width="0.5" height="15.0" fill="rgb(206,81,6)" rx="2" ry="2" />
<text  x="1131.97" y="591.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (7,999,998 samples, 0.27%)</title><rect x="45.3" y="421" width="3.2" height="15.0" fill="rgb(227,185,50)" rx="2" ry="2" />
<text  x="48.34" y="431.5" ></text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.05%)</title><rect x="292.7" y="421" width="0.5" height="15.0" fill="rgb(235,62,24)" rx="2" ry="2" />
<text  x="295.69" y="431.5" ></text>
</g>
<g >
<title>__readdir (1,333,333 samples, 0.05%)</title><rect x="10.5" y="469" width="0.6" height="15.0" fill="rgb(239,109,40)" rx="2" ry="2" />
<text  x="13.54" y="479.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (1,333,333 samples, 0.05%)</title><rect x="330.7" y="485" width="0.5" height="15.0" fill="rgb(217,39,39)" rx="2" ry="2" />
<text  x="333.70" y="495.5" ></text>
</g>
<g >
<title>unmap_vmas (1,333,333 samples, 0.05%)</title><rect x="421.7" y="261" width="0.6" height="15.0" fill="rgb(230,156,6)" rx="2" ry="2" />
<text  x="424.72" y="271.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::TableBuilder (5,333,332 samples, 0.18%)</title><rect x="315.2" y="485" width="2.1" height="15.0" fill="rgb(231,222,13)" rx="2" ry="2" />
<text  x="318.17" y="495.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (2,757,332,644 samples, 93.83%)</title><rect x="10.5" y="677" width="1107.2" height="15.0" fill="rgb(213,56,50)" rx="2" ry="2" />
<text  x="13.54" y="687.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10,666,664 samples, 0.36%)</title><rect x="177.6" y="421" width="4.3" height="15.0" fill="rgb(225,123,11)" rx="2" ry="2" />
<text  x="180.58" y="431.5" ></text>
</g>
<g >
<title>memset_erms (5,333,332 samples, 0.18%)</title><rect x="847.4" y="261" width="2.1" height="15.0" fill="rgb(213,127,4)" rx="2" ry="2" />
<text  x="850.35" y="271.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.05%)</title><rect x="74.8" y="309" width="0.5" height="15.0" fill="rgb(245,29,12)" rx="2" ry="2" />
<text  x="77.78" y="319.5" ></text>
</g>
<g >
<title>__tls_get_addr@plt (1,333,333 samples, 0.05%)</title><rect x="971.0" y="421" width="0.6" height="15.0" fill="rgb(242,176,22)" rx="2" ry="2" />
<text  x="974.03" y="431.5" ></text>
</g>
<g >
<title>rebalance_domains (1,333,333 samples, 0.05%)</title><rect x="703.9" y="277" width="0.5" height="15.0" fill="rgb(232,38,36)" rx="2" ry="2" />
<text  x="706.87" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt;::_Deque_base (1,333,333 samples, 0.05%)</title><rect x="1129.0" y="485" width="0.5" height="15.0" fill="rgb(233,227,34)" rx="2" ry="2" />
<text  x="1131.97" y="495.5" ></text>
</g>
<g >
<title>TCMalloc_SystemAlloc (1,333,333 samples, 0.05%)</title><rect x="144.4" y="325" width="0.5" height="15.0" fill="rgb(240,82,48)" rx="2" ry="2" />
<text  x="147.38" y="335.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (7,999,998 samples, 0.27%)</title><rect x="51.2" y="437" width="3.2" height="15.0" fill="rgb(249,224,49)" rx="2" ry="2" />
<text  x="54.23" y="447.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="843.6" y="181" width="0.5" height="15.0" fill="rgb(243,163,31)" rx="2" ry="2" />
<text  x="846.60" y="191.5" ></text>
</g>
<g >
<title>ext4_evict_inode (1,333,333 samples, 0.05%)</title><rect x="421.2" y="373" width="0.5" height="15.0" fill="rgb(250,143,46)" rx="2" ry="2" />
<text  x="424.18" y="383.5" ></text>
</g>
<g >
<title>leveldb::Arena::AllocateFallback (3,999,999 samples, 0.14%)</title><rect x="745.6" y="405" width="1.6" height="15.0" fill="rgb(231,82,2)" rx="2" ry="2" />
<text  x="748.63" y="415.5" ></text>
</g>
<g >
<title>tc_malloc (1,333,333 samples, 0.05%)</title><rect x="1119.3" y="661" width="0.6" height="15.0" fill="rgb(251,155,8)" rx="2" ry="2" />
<text  x="1122.33" y="671.5" ></text>
</g>
<g >
<title>do_dentry_open (2,666,666 samples, 0.09%)</title><rect x="1127.9" y="437" width="1.1" height="15.0" fill="rgb(220,166,38)" rx="2" ry="2" />
<text  x="1130.89" y="447.5" ></text>
</g>
<g >
<title>memcg_kmem_put_cache (1,333,333 samples, 0.05%)</title><rect x="835.6" y="229" width="0.5" height="15.0" fill="rgb(222,127,47)" rx="2" ry="2" />
<text  x="838.57" y="239.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::key (1,333,333 samples, 0.05%)</title><rect x="1145.0" y="725" width="0.6" height="15.0" fill="rgb(241,146,45)" rx="2" ry="2" />
<text  x="1148.03" y="735.5" ></text>
</g>
<g >
<title>mutex_unlock (2,666,666 samples, 0.09%)</title><rect x="803.4" y="357" width="1.1" height="15.0" fill="rgb(248,46,41)" rx="2" ry="2" />
<text  x="806.45" y="367.5" ></text>
</g>
<g >
<title>__gthread_active_p (1,333,333 samples, 0.05%)</title><rect x="967.3" y="453" width="0.5" height="15.0" fill="rgb(250,82,51)" rx="2" ry="2" />
<text  x="970.28" y="463.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (11,999,997 samples, 0.41%)</title><rect x="1120.9" y="613" width="4.9" height="15.0" fill="rgb(211,91,44)" rx="2" ry="2" />
<text  x="1123.93" y="623.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="703.9" y="325" width="0.5" height="15.0" fill="rgb(252,2,14)" rx="2" ry="2" />
<text  x="706.87" y="335.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="417.4" y="437" width="0.6" height="15.0" fill="rgb(210,5,51)" rx="2" ry="2" />
<text  x="420.43" y="447.5" ></text>
</g>
<g >
<title>__x64_sys_write (297,333,259 samples, 10.12%)</title><rect x="798.1" y="389" width="119.4" height="15.0" fill="rgb(237,32,48)" rx="2" ry="2" />
<text  x="801.09" y="399.5" >__x64_sys_write</text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.05%)</title><rect x="40.0" y="437" width="0.5" height="15.0" fill="rgb(221,209,41)" rx="2" ry="2" />
<text  x="42.98" y="447.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.05%)</title><rect x="216.1" y="389" width="0.6" height="15.0" fill="rgb(241,29,41)" rx="2" ry="2" />
<text  x="219.13" y="399.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__future_base::_State_baseV2&gt;::allocator (2,666,666 samples, 0.09%)</title><rect x="1076.5" y="437" width="1.1" height="15.0" fill="rgb(212,8,44)" rx="2" ry="2" />
<text  x="1079.50" y="447.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="284.1" y="341" width="0.6" height="15.0" fill="rgb(232,92,43)" rx="2" ry="2" />
<text  x="287.12" y="351.5" ></text>
</g>
<g >
<title>std::__addressof&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.05%)</title><rect x="1089.9" y="421" width="0.5" height="15.0" fill="rgb(220,158,25)" rx="2" ry="2" />
<text  x="1092.88" y="431.5" ></text>
</g>
<g >
<title>std::forward&lt;std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (1,333,333 samples, 0.05%)</title><rect x="1028.3" y="373" width="0.5" height="15.0" fill="rgb(218,189,27)" rx="2" ry="2" />
<text  x="1031.31" y="383.5" ></text>
</g>
<g >
<title>rcu_segcblist_ready_cbs (1,333,333 samples, 0.05%)</title><rect x="222.0" y="389" width="0.5" height="15.0" fill="rgb(221,19,43)" rx="2" ry="2" />
<text  x="225.01" y="399.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (1,333,333 samples, 0.05%)</title><rect x="270.2" y="309" width="0.5" height="15.0" fill="rgb(230,224,35)" rx="2" ry="2" />
<text  x="273.20" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5,333,332 samples, 0.18%)</title><rect x="303.4" y="405" width="2.1" height="15.0" fill="rgb(212,155,42)" rx="2" ry="2" />
<text  x="306.39" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (22,666,661 samples, 0.77%)</title><rect x="370.3" y="437" width="9.1" height="15.0" fill="rgb(231,86,22)" rx="2" ry="2" />
<text  x="373.32" y="447.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1,333,333 samples, 0.05%)</title><rect x="446.3" y="421" width="0.6" height="15.0" fill="rgb(254,182,44)" rx="2" ry="2" />
<text  x="449.34" y="431.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (1,333,333 samples, 0.05%)</title><rect x="293.8" y="357" width="0.5" height="15.0" fill="rgb(222,26,32)" rx="2" ry="2" />
<text  x="296.76" y="367.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BuildBatchGroup (17,333,329 samples, 0.59%)</title><rect x="459.2" y="517" width="7.0" height="15.0" fill="rgb(236,62,41)" rx="2" ry="2" />
<text  x="462.19" y="527.5" ></text>
</g>
<g >
<title>__ext4_journal_stop (21,333,328 samples, 0.73%)</title><rect x="850.6" y="261" width="8.5" height="15.0" fill="rgb(233,169,28)" rx="2" ry="2" />
<text  x="853.56" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1,333,333 samples, 0.05%)</title><rect x="305.5" y="421" width="0.6" height="15.0" fill="rgb(206,176,45)" rx="2" ry="2" />
<text  x="308.54" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.05%)</title><rect x="1179.8" y="709" width="0.6" height="15.0" fill="rgb(240,182,16)" rx="2" ry="2" />
<text  x="1182.83" y="719.5" ></text>
</g>
<g >
<title>do_dentry_open (1,333,333 samples, 0.05%)</title><rect x="1126.3" y="453" width="0.5" height="15.0" fill="rgb(246,7,41)" rx="2" ry="2" />
<text  x="1129.29" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (2,666,666 samples, 0.09%)</title><rect x="387.5" y="421" width="1.0" height="15.0" fill="rgb(244,77,24)" rx="2" ry="2" />
<text  x="390.45" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (2,666,666 samples, 0.09%)</title><rect x="334.4" y="437" width="1.1" height="15.0" fill="rgb(244,6,36)" rx="2" ry="2" />
<text  x="337.45" y="447.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::__basic_future (2,666,666 samples, 0.09%)</title><rect x="1170.2" y="725" width="1.1" height="15.0" fill="rgb(239,222,1)" rx="2" ry="2" />
<text  x="1173.19" y="735.5" ></text>
</g>
<g >
<title>__do_page_fault (10,666,664 samples, 0.36%)</title><rect x="156.2" y="261" width="4.2" height="15.0" fill="rgb(236,34,15)" rx="2" ry="2" />
<text  x="159.16" y="271.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl&lt;std::__future_base::_Result_base::_Deleter&gt; (9,333,331 samples, 0.32%)</title><rect x="1005.3" y="277" width="3.7" height="15.0" fill="rgb(246,212,29)" rx="2" ry="2" />
<text  x="1008.29" y="287.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (47,999,988 samples, 1.63%)</title><rect x="1081.9" y="501" width="19.2" height="15.0" fill="rgb(226,139,50)" rx="2" ry="2" />
<text  x="1084.85" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.05%)</title><rect x="161.0" y="357" width="0.5" height="15.0" fill="rgb(217,215,26)" rx="2" ry="2" />
<text  x="163.98" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (3,999,999 samples, 0.14%)</title><rect x="1048.7" y="453" width="1.6" height="15.0" fill="rgb(221,137,6)" rx="2" ry="2" />
<text  x="1051.66" y="463.5" ></text>
</g>
<g >
<title>cpuinfo_open (2,666,666 samples, 0.09%)</title><rect x="1127.9" y="405" width="1.1" height="15.0" fill="rgb(208,142,6)" rx="2" ry="2" />
<text  x="1130.89" y="415.5" ></text>
</g>
<g >
<title>__GI_madvise (1,333,333 samples, 0.05%)</title><rect x="1119.9" y="421" width="0.5" height="15.0" fill="rgb(224,124,31)" rx="2" ry="2" />
<text  x="1122.86" y="431.5" ></text>
</g>
<g >
<title>do_sys_open (1,333,333 samples, 0.05%)</title><rect x="150.3" y="341" width="0.5" height="15.0" fill="rgb(229,68,32)" rx="2" ry="2" />
<text  x="153.27" y="351.5" ></text>
</g>
<g >
<title>do_filp_open (1,333,333 samples, 0.05%)</title><rect x="150.3" y="325" width="0.5" height="15.0" fill="rgb(238,111,30)" rx="2" ry="2" />
<text  x="153.27" y="335.5" ></text>
</g>
<g >
<title>leveldb::Slice::operator[] (1,333,333 samples, 0.05%)</title><rect x="1133.8" y="709" width="0.5" height="15.0" fill="rgb(211,107,40)" rx="2" ry="2" />
<text  x="1136.78" y="719.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="312.0" y="373" width="0.5" height="15.0" fill="rgb(238,67,32)" rx="2" ry="2" />
<text  x="314.96" y="383.5" ></text>
</g>
<g >
<title>call_init (3,999,999 samples, 0.14%)</title><rect x="1118.8" y="693" width="1.6" height="15.0" fill="rgb(218,185,34)" rx="2" ry="2" />
<text  x="1121.79" y="703.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1,333,333 samples, 0.05%)</title><rect x="264.8" y="181" width="0.6" height="15.0" fill="rgb(239,70,40)" rx="2" ry="2" />
<text  x="267.85" y="191.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.09%)</title><rect x="1002.6" y="245" width="1.1" height="15.0" fill="rgb(222,40,7)" rx="2" ry="2" />
<text  x="1005.61" y="255.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::CompactMemTable (459,999,885 samples, 15.65%)</title><rect x="10.5" y="517" width="184.7" height="15.0" fill="rgb(229,202,39)" rx="2" ry="2" />
<text  x="13.54" y="527.5" >leveldb::DBImpl::Compact..</text>
</g>
<g >
<title>leveldb::log::Writer::EmitPhysicalRecord (437,333,224 samples, 14.88%)</title><rect x="779.4" y="501" width="175.6" height="15.0" fill="rgb(223,137,45)" rx="2" ry="2" />
<text  x="782.36" y="511.5" >leveldb::log::Writer::..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2,666,666 samples, 0.09%)</title><rect x="360.7" y="469" width="1.1" height="15.0" fill="rgb(220,50,34)" rx="2" ry="2" />
<text  x="363.68" y="479.5" ></text>
</g>
<g >
<title>leveldb::Block::Iter::GetRestartPoint (1,333,333 samples, 0.05%)</title><rect x="214.5" y="405" width="0.6" height="15.0" fill="rgb(222,86,11)" rx="2" ry="2" />
<text  x="217.52" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.05%)</title><rect x="10.5" y="421" width="0.6" height="15.0" fill="rgb(232,65,0)" rx="2" ry="2" />
<text  x="13.54" y="431.5" ></text>
</g>
<g >
<title>do_filp_open (1,333,333 samples, 0.05%)</title><rect x="1126.3" y="501" width="0.5" height="15.0" fill="rgb(214,4,45)" rx="2" ry="2" />
<text  x="1129.29" y="511.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (6,666,665 samples, 0.23%)</title><rect x="252.0" y="437" width="2.7" height="15.0" fill="rgb(220,159,36)" rx="2" ry="2" />
<text  x="255.00" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Select1st, true&gt;::_S_cget (1,333,333 samples, 0.05%)</title><rect x="386.4" y="357" width="0.5" height="15.0" fill="rgb(223,137,8)" rx="2" ry="2" />
<text  x="389.38" y="367.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadNodeEntryPoint (1,025,333,077 samples, 34.89%)</title><rect x="10.5" y="597" width="411.8" height="15.0" fill="rgb(211,32,1)" rx="2" ry="2" />
<text  x="13.54" y="607.5" >leveldb::(anonymous namespace)::PosixEnv::BackgroundThre..</text>
</g>
<g >
<title>ext4_mpage_readpages (7,999,998 samples, 0.27%)</title><rect x="1161.6" y="501" width="3.2" height="15.0" fill="rgb(242,22,33)" rx="2" ry="2" />
<text  x="1164.62" y="511.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.05%)</title><rect x="1122.0" y="453" width="0.5" height="15.0" fill="rgb(232,216,45)" rx="2" ry="2" />
<text  x="1125.01" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::resize (5,333,332 samples, 0.18%)</title><rect x="294.3" y="421" width="2.1" height="15.0" fill="rgb(240,36,15)" rx="2" ry="2" />
<text  x="297.29" y="431.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.05%)</title><rect x="764.4" y="453" width="0.5" height="15.0" fill="rgb(227,133,6)" rx="2" ry="2" />
<text  x="767.36" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (1,333,333 samples, 0.05%)</title><rect x="178.1" y="341" width="0.5" height="15.0" fill="rgb(226,212,0)" rx="2" ry="2" />
<text  x="181.11" y="351.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="321.1" y="325" width="0.5" height="15.0" fill="rgb(253,80,47)" rx="2" ry="2" />
<text  x="324.06" y="335.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (15,999,996 samples, 0.54%)</title><rect x="122.4" y="357" width="6.5" height="15.0" fill="rgb(207,12,52)" rx="2" ry="2" />
<text  x="125.43" y="367.5" ></text>
</g>
<g >
<title>__GI__IO_getline_info (1,333,333 samples, 0.05%)</title><rect x="1127.4" y="597" width="0.5" height="15.0" fill="rgb(219,198,15)" rx="2" ry="2" />
<text  x="1130.36" y="607.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.05%)</title><rect x="143.8" y="357" width="0.6" height="15.0" fill="rgb(238,56,24)" rx="2" ry="2" />
<text  x="146.85" y="367.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.05%)</title><rect x="1126.3" y="565" width="0.5" height="15.0" fill="rgb(221,94,15)" rx="2" ry="2" />
<text  x="1129.29" y="575.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.05%)</title><rect x="270.2" y="229" width="0.5" height="15.0" fill="rgb(239,54,23)" rx="2" ry="2" />
<text  x="273.20" y="239.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteBlock (1,333,333 samples, 0.05%)</title><rect x="149.7" y="453" width="0.6" height="15.0" fill="rgb(219,202,8)" rx="2" ry="2" />
<text  x="152.74" y="463.5" ></text>
</g>
<g >
<title>leveldb::port::Snappy_Compress (11,999,997 samples, 0.41%)</title><rect x="287.9" y="405" width="4.8" height="15.0" fill="rgb(224,209,22)" rx="2" ry="2" />
<text  x="290.87" y="415.5" ></text>
</g>
<g >
<title>page_cache_async_readahead (9,333,331 samples, 0.32%)</title><rect x="1161.1" y="581" width="3.7" height="15.0" fill="rgb(247,205,33)" rx="2" ry="2" />
<text  x="1164.09" y="591.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (2,666,666 samples, 0.09%)</title><rect x="1091.0" y="389" width="1.0" height="15.0" fill="rgb(222,227,32)" rx="2" ry="2" />
<text  x="1093.95" y="399.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock (2,666,666 samples, 0.09%)</title><rect x="956.0" y="469" width="1.1" height="15.0" fill="rgb(224,37,12)" rx="2" ry="2" />
<text  x="959.03" y="479.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::TableBuilder (23,999,994 samples, 0.82%)</title><rect x="150.8" y="469" width="9.6" height="15.0" fill="rgb(222,105,1)" rx="2" ry="2" />
<text  x="153.81" y="479.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, false&gt;::_M_head (1,333,333 samples, 0.05%)</title><rect x="272.9" y="277" width="0.5" height="15.0" fill="rgb(240,73,22)" rx="2" ry="2" />
<text  x="275.88" y="287.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="388.0" y="309" width="0.5" height="15.0" fill="rgb(228,100,0)" rx="2" ry="2" />
<text  x="390.99" y="319.5" ></text>
</g>
<g >
<title>std::__future_base::_Result_base::~_Result_base (1,333,333 samples, 0.05%)</title><rect x="1096.3" y="309" width="0.5" height="15.0" fill="rgb(246,213,4)" rx="2" ry="2" />
<text  x="1099.31" y="319.5" ></text>
</g>
<g >
<title>try_charge (1,333,333 samples, 0.05%)</title><rect x="94.6" y="165" width="0.5" height="15.0" fill="rgb(216,204,39)" rx="2" ry="2" />
<text  x="97.59" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (2,666,666 samples, 0.09%)</title><rect x="260.6" y="325" width="1.0" height="15.0" fill="rgb(247,202,29)" rx="2" ry="2" />
<text  x="263.56" y="335.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (47,999,988 samples, 1.63%)</title><rect x="1081.9" y="485" width="19.2" height="15.0" fill="rgb(212,42,22)" rx="2" ry="2" />
<text  x="1084.85" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (1,333,333 samples, 0.05%)</title><rect x="333.4" y="421" width="0.5" height="15.0" fill="rgb(222,129,27)" rx="2" ry="2" />
<text  x="336.38" y="431.5" ></text>
</g>
<g >
<title>walk_page_range (1,333,333 samples, 0.05%)</title><rect x="160.4" y="165" width="0.6" height="15.0" fill="rgb(210,91,34)" rx="2" ry="2" />
<text  x="163.44" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="255.7" y="373" width="0.6" height="15.0" fill="rgb(247,82,0)" rx="2" ry="2" />
<text  x="258.74" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (18,666,662 samples, 0.64%)</title><rect x="261.6" y="373" width="7.5" height="15.0" fill="rgb(222,59,33)" rx="2" ry="2" />
<text  x="264.63" y="383.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl (2,666,666 samples, 0.09%)</title><rect x="1078.6" y="469" width="1.1" height="15.0" fill="rgb(210,32,33)" rx="2" ry="2" />
<text  x="1081.64" y="479.5" ></text>
</g>
<g >
<title>__mnt_want_write (1,333,333 samples, 0.05%)</title><rect x="468.3" y="357" width="0.5" height="15.0" fill="rgb(209,51,32)" rx="2" ry="2" />
<text  x="471.29" y="367.5" ></text>
</g>
<g >
<title>__ext4_journal_stop (2,666,666 samples, 0.09%)</title><rect x="820.0" y="229" width="1.1" height="15.0" fill="rgb(235,67,49)" rx="2" ry="2" />
<text  x="823.05" y="239.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::MergeIntoFreeList (1,333,333 samples, 0.05%)</title><rect x="160.4" y="325" width="0.6" height="15.0" fill="rgb(253,27,4)" rx="2" ry="2" />
<text  x="163.44" y="335.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (3,999,999 samples, 0.14%)</title><rect x="1141.3" y="709" width="1.6" height="15.0" fill="rgb(247,112,18)" rx="2" ry="2" />
<text  x="1144.28" y="719.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.09%)</title><rect x="1013.9" y="261" width="1.0" height="15.0" fill="rgb(206,176,43)" rx="2" ry="2" />
<text  x="1016.86" y="271.5" ></text>
</g>
<g >
<title>do_filp_open (2,666,666 samples, 0.09%)</title><rect x="1127.9" y="485" width="1.1" height="15.0" fill="rgb(206,157,26)" rx="2" ry="2" />
<text  x="1130.89" y="495.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (582,666,521 samples, 19.83%)</title><rect x="510.1" y="437" width="233.9" height="15.0" fill="rgb(231,18,41)" rx="2" ry="2" />
<text  x="513.05" y="447.5" >leveldb::SkipList&lt;char const*, ..</text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="212.4" y="357" width="0.5" height="15.0" fill="rgb(235,139,40)" rx="2" ry="2" />
<text  x="215.38" y="367.5" ></text>
</g>
<g >
<title>leveldb::Status::~Status (1,333,333 samples, 0.05%)</title><rect x="1156.3" y="709" width="0.5" height="15.0" fill="rgb(216,82,52)" rx="2" ry="2" />
<text  x="1159.27" y="719.5" ></text>
</g>
<g >
<title>leveldb::Table::BlockReader (1,333,333 samples, 0.05%)</title><rect x="1152.5" y="725" width="0.6" height="15.0" fill="rgb(243,10,45)" rx="2" ry="2" />
<text  x="1155.52" y="735.5" ></text>
</g>
<g >
<title>do_page_mkwrite (3,999,999 samples, 0.14%)</title><rect x="1164.8" y="629" width="1.6" height="15.0" fill="rgb(250,161,12)" rx="2" ry="2" />
<text  x="1167.84" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data@plt (1,333,333 samples, 0.05%)</title><rect x="298.0" y="325" width="0.6" height="15.0" fill="rgb(243,191,54)" rx="2" ry="2" />
<text  x="301.04" y="335.5" ></text>
</g>
<g >
<title>std::atomic&lt;bool&gt;::load (1,333,333 samples, 0.05%)</title><rect x="419.6" y="501" width="0.5" height="15.0" fill="rgb(217,74,21)" rx="2" ry="2" />
<text  x="422.57" y="511.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (13,333,330 samples, 0.45%)</title><rect x="301.3" y="469" width="5.3" height="15.0" fill="rgb(246,203,52)" rx="2" ry="2" />
<text  x="304.25" y="479.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.05%)</title><rect x="245.6" y="421" width="0.5" height="15.0" fill="rgb(218,64,2)" rx="2" ry="2" />
<text  x="248.57" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::begin (9,333,331 samples, 0.32%)</title><rect x="957.1" y="501" width="3.8" height="15.0" fill="rgb(238,186,3)" rx="2" ry="2" />
<text  x="960.11" y="511.5" ></text>
</g>
<g >
<title>do_sys_open (1,333,333 samples, 0.05%)</title><rect x="468.3" y="421" width="0.5" height="15.0" fill="rgb(238,20,41)" rx="2" ry="2" />
<text  x="471.29" y="431.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1,333,333 samples, 0.05%)</title><rect x="261.1" y="293" width="0.5" height="15.0" fill="rgb(210,190,21)" rx="2" ry="2" />
<text  x="264.10" y="303.5" ></text>
</g>
<g >
<title>tcmalloc::DLL_Prepend (1,333,333 samples, 0.05%)</title><rect x="496.1" y="341" width="0.6" height="15.0" fill="rgb(237,229,52)" rx="2" ry="2" />
<text  x="499.13" y="351.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (2,666,666 samples, 0.09%)</title><rect x="180.8" y="341" width="1.1" height="15.0" fill="rgb(253,160,3)" rx="2" ry="2" />
<text  x="183.79" y="351.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl (1,333,333 samples, 0.05%)</title><rect x="1181.4" y="725" width="0.6" height="15.0" fill="rgb(250,147,27)" rx="2" ry="2" />
<text  x="1184.43" y="735.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (7,999,998 samples, 0.27%)</title><rect x="1139.7" y="725" width="3.2" height="15.0" fill="rgb(209,67,33)" rx="2" ry="2" />
<text  x="1142.67" y="735.5" ></text>
</g>
<g >
<title>mem_cgroup_uncharge (1,333,333 samples, 0.05%)</title><rect x="279.8" y="165" width="0.6" height="15.0" fill="rgb(226,58,0)" rx="2" ry="2" />
<text  x="282.84" y="175.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,333,333 samples, 0.05%)</title><rect x="101.0" y="325" width="0.6" height="15.0" fill="rgb(238,145,50)" rx="2" ry="2" />
<text  x="104.02" y="335.5" ></text>
</g>
<g >
<title>ext4_da_get_block_prep (2,666,666 samples, 0.09%)</title><rect x="841.5" y="245" width="1.0" height="15.0" fill="rgb(229,107,48)" rx="2" ry="2" />
<text  x="844.46" y="255.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;::_Tuple_impl&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,333,333 samples, 0.05%)</title><rect x="1169.1" y="725" width="0.6" height="15.0" fill="rgb(244,23,20)" rx="2" ry="2" />
<text  x="1172.12" y="735.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (2,666,666 samples, 0.09%)</title><rect x="110.1" y="325" width="1.1" height="15.0" fill="rgb(214,68,35)" rx="2" ry="2" />
<text  x="113.12" y="335.5" ></text>
</g>
<g >
<title>start_this_handle (3,999,999 samples, 0.14%)</title><rect x="836.6" y="229" width="1.6" height="15.0" fill="rgb(217,41,6)" rx="2" ry="2" />
<text  x="839.64" y="239.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::RemoveObsoleteFiles (3,999,999 samples, 0.14%)</title><rect x="231.1" y="485" width="1.6" height="15.0" fill="rgb(231,169,7)" rx="2" ry="2" />
<text  x="234.12" y="495.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (2,666,666 samples, 0.09%)</title><rect x="345.2" y="437" width="1.0" height="15.0" fill="rgb(211,70,14)" rx="2" ry="2" />
<text  x="348.15" y="447.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.05%)</title><rect x="1024.0" y="277" width="0.6" height="15.0" fill="rgb(239,102,20)" rx="2" ry="2" />
<text  x="1027.03" y="287.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="388.0" y="325" width="0.5" height="15.0" fill="rgb(246,189,1)" rx="2" ry="2" />
<text  x="390.99" y="335.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="388.0" y="357" width="0.5" height="15.0" fill="rgb(226,210,34)" rx="2" ry="2" />
<text  x="390.99" y="367.5" ></text>
</g>
<g >
<title>leveldb::Status::operator= (7,999,998 samples, 0.27%)</title><rect x="479.0" y="517" width="3.2" height="15.0" fill="rgb(207,139,33)" rx="2" ry="2" />
<text  x="482.00" y="527.5" ></text>
</g>
<g >
<title>std::forward&lt;bool*&gt; (1,333,333 samples, 0.05%)</title><rect x="1028.8" y="389" width="0.6" height="15.0" fill="rgb(250,193,11)" rx="2" ry="2" />
<text  x="1031.85" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt; &gt;::construct&lt;std::__future_base::_State_baseV2&gt; (13,333,330 samples, 0.45%)</title><rect x="1063.6" y="421" width="5.4" height="15.0" fill="rgb(209,174,19)" rx="2" ry="2" />
<text  x="1066.65" y="431.5" ></text>
</g>
<g >
<title>_IO_new_file_fopen (2,666,666 samples, 0.09%)</title><rect x="1127.9" y="597" width="1.1" height="15.0" fill="rgb(237,78,3)" rx="2" ry="2" />
<text  x="1130.89" y="607.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (7,999,998 samples, 0.27%)</title><rect x="496.1" y="389" width="3.2" height="15.0" fill="rgb(217,149,22)" rx="2" ry="2" />
<text  x="499.13" y="399.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (161,333,293 samples, 5.49%)</title><rect x="965.1" y="485" width="64.8" height="15.0" fill="rgb(230,2,16)" rx="2" ry="2" />
<text  x="968.14" y="495.5" >std::ca..</text>
</g>
<g >
<title>leveldb::ExtractUserKey (91,999,977 samples, 3.13%)</title><rect x="688.9" y="373" width="36.9" height="15.0" fill="rgb(254,56,49)" rx="2" ry="2" />
<text  x="691.87" y="383.5" >lev..</text>
</g>
<g >
<title>leveldb::InternalKey::DecodeFrom (1,333,333 samples, 0.05%)</title><rect x="317.3" y="501" width="0.5" height="15.0" fill="rgb(211,229,46)" rx="2" ry="2" />
<text  x="320.31" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (2,666,666 samples, 0.09%)</title><rect x="1027.2" y="341" width="1.1" height="15.0" fill="rgb(242,8,43)" rx="2" ry="2" />
<text  x="1030.24" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1,333,333 samples, 0.05%)</title><rect x="378.3" y="421" width="0.6" height="15.0" fill="rgb(228,138,7)" rx="2" ry="2" />
<text  x="381.35" y="431.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::Add (53,333,320 samples, 1.81%)</title><rect x="29.3" y="453" width="21.4" height="15.0" fill="rgb(239,221,6)" rx="2" ry="2" />
<text  x="32.27" y="463.5" >l..</text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (5,333,332 samples, 0.18%)</title><rect x="179.7" y="373" width="2.2" height="15.0" fill="rgb(207,61,42)" rx="2" ry="2" />
<text  x="182.72" y="383.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Value (1,333,333 samples, 0.05%)</title><rect x="293.8" y="389" width="0.5" height="15.0" fill="rgb(217,26,10)" rx="2" ry="2" />
<text  x="296.76" y="399.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (5,333,332 samples, 0.18%)</title><rect x="212.4" y="437" width="2.1" height="15.0" fill="rgb(253,81,8)" rx="2" ry="2" />
<text  x="215.38" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::get (1,333,333 samples, 0.05%)</title><rect x="1047.1" y="469" width="0.5" height="15.0" fill="rgb(219,57,44)" rx="2" ry="2" />
<text  x="1050.05" y="479.5" ></text>
</g>
<g >
<title>ext4_invalidatepage (6,666,665 samples, 0.23%)</title><rect x="1123.1" y="437" width="2.7" height="15.0" fill="rgb(206,9,54)" rx="2" ry="2" />
<text  x="1126.08" y="447.5" ></text>
</g>
<g >
<title>std::swap&lt;char const*&gt; (2,666,666 samples, 0.09%)</title><rect x="920.2" y="469" width="1.0" height="15.0" fill="rgb(246,130,14)" rx="2" ry="2" />
<text  x="923.16" y="479.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (11,999,997 samples, 0.41%)</title><rect x="21.2" y="453" width="4.9" height="15.0" fill="rgb(254,228,34)" rx="2" ry="2" />
<text  x="24.24" y="463.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl (2,666,666 samples, 0.09%)</title><rect x="1067.9" y="309" width="1.1" height="15.0" fill="rgb(229,170,40)" rx="2" ry="2" />
<text  x="1070.93" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (2,666,666 samples, 0.09%)</title><rect x="383.2" y="389" width="1.0" height="15.0" fill="rgb(249,198,53)" rx="2" ry="2" />
<text  x="386.17" y="399.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (107,999,973 samples, 3.68%)</title><rect x="58.7" y="437" width="43.4" height="15.0" fill="rgb(232,48,35)" rx="2" ry="2" />
<text  x="61.72" y="447.5" >leve..</text>
</g>
<g >
<title>kmem_cache_free (1,333,333 samples, 0.05%)</title><rect x="999.4" y="213" width="0.5" height="15.0" fill="rgb(216,145,35)" rx="2" ry="2" />
<text  x="1002.40" y="223.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.05%)</title><rect x="452.2" y="517" width="0.6" height="15.0" fill="rgb(226,175,16)" rx="2" ry="2" />
<text  x="455.23" y="527.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1,333,333 samples, 0.05%)</title><rect x="1062.6" y="421" width="0.5" height="15.0" fill="rgb(207,94,28)" rx="2" ry="2" />
<text  x="1065.58" y="431.5" ></text>
</g>
<g >
<title>_dl_catch_exception (1,333,333 samples, 0.05%)</title><rect x="1129.5" y="629" width="0.5" height="15.0" fill="rgb(241,16,44)" rx="2" ry="2" />
<text  x="1132.50" y="639.5" ></text>
</g>
<g >
<title>__ieee754_log_fma (1,333,333 samples, 0.05%)</title><rect x="1119.3" y="613" width="0.6" height="15.0" fill="rgb(246,203,47)" rx="2" ry="2" />
<text  x="1122.33" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;, std::allocator&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt; &gt; &gt;::resize (1,333,333 samples, 0.05%)</title><rect x="1129.0" y="613" width="0.5" height="15.0" fill="rgb(245,75,29)" rx="2" ry="2" />
<text  x="1131.97" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux (1,333,333 samples, 0.05%)</title><rect x="1154.1" y="709" width="0.6" height="15.0" fill="rgb(254,35,54)" rx="2" ry="2" />
<text  x="1157.13" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (5,333,332 samples, 0.18%)</title><rect x="1101.1" y="517" width="2.2" height="15.0" fill="rgb(246,125,45)" rx="2" ry="2" />
<text  x="1104.13" y="527.5" ></text>
</g>
<g >
<title>__libc_start_main (22,666,661 samples, 0.77%)</title><rect x="1120.4" y="709" width="9.1" height="15.0" fill="rgb(248,89,34)" rx="2" ry="2" />
<text  x="1123.40" y="719.5" ></text>
</g>
<g >
<title>leveldb::WriteBatch::Iterate (1,333,333 samples, 0.05%)</title><rect x="1154.7" y="725" width="0.5" height="15.0" fill="rgb(212,188,53)" rx="2" ry="2" />
<text  x="1157.66" y="735.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.05%)</title><rect x="78.0" y="277" width="0.5" height="15.0" fill="rgb(210,2,50)" rx="2" ry="2" />
<text  x="80.99" y="287.5" ></text>
</g>
<g >
<title>ext4_mark_inode_dirty (78,666,647 samples, 2.68%)</title><rect x="862.3" y="213" width="31.6" height="15.0" fill="rgb(227,129,35)" rx="2" ry="2" />
<text  x="865.34" y="223.5" >ex..</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_deleter (5,333,332 samples, 0.18%)</title><rect x="1020.3" y="309" width="2.1" height="15.0" fill="rgb(254,62,52)" rx="2" ry="2" />
<text  x="1023.28" y="319.5" ></text>
</g>
<g >
<title>perf_event_mmap_output (1,333,333 samples, 0.05%)</title><rect x="144.4" y="117" width="0.5" height="15.0" fill="rgb(246,98,4)" rx="2" ry="2" />
<text  x="147.38" y="127.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.05%)</title><rect x="1119.9" y="405" width="0.5" height="15.0" fill="rgb(240,167,12)" rx="2" ry="2" />
<text  x="1122.86" y="415.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (6,666,665 samples, 0.23%)</title><rect x="367.6" y="453" width="2.7" height="15.0" fill="rgb(239,51,45)" rx="2" ry="2" />
<text  x="370.64" y="463.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.05%)</title><rect x="1118.8" y="469" width="0.5" height="15.0" fill="rgb(227,194,50)" rx="2" ry="2" />
<text  x="1121.79" y="479.5" ></text>
</g>
<g >
<title>__ext4_journal_start_sb (1,333,333 samples, 0.05%)</title><rect x="861.8" y="213" width="0.5" height="15.0" fill="rgb(213,193,28)" rx="2" ry="2" />
<text  x="864.81" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add (6,666,665 samples, 0.23%)</title><rect x="1084.5" y="437" width="2.7" height="15.0" fill="rgb(244,36,9)" rx="2" ry="2" />
<text  x="1087.53" y="447.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1,333,333 samples, 0.05%)</title><rect x="305.0" y="341" width="0.5" height="15.0" fill="rgb(237,26,20)" rx="2" ry="2" />
<text  x="308.00" y="351.5" ></text>
</g>
<g >
<title>handle_mm_fault (3,999,999 samples, 0.14%)</title><rect x="158.8" y="245" width="1.6" height="15.0" fill="rgb(208,161,42)" rx="2" ry="2" />
<text  x="161.84" y="255.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::DoWrite (2,666,666 samples, 0.09%)</title><rect x="1131.6" y="725" width="1.1" height="15.0" fill="rgb(234,189,35)" rx="2" ry="2" />
<text  x="1134.64" y="735.5" ></text>
</g>
<g >
<title>clear_page_erms (1,333,333 samples, 0.05%)</title><rect x="294.8" y="165" width="0.6" height="15.0" fill="rgb(213,2,42)" rx="2" ry="2" />
<text  x="297.83" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result_base::_Deleter, void&gt; (6,666,665 samples, 0.23%)</title><rect x="1066.3" y="373" width="2.7" height="15.0" fill="rgb(205,159,28)" rx="2" ry="2" />
<text  x="1069.32" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.05%)</title><rect x="1127.4" y="533" width="0.5" height="15.0" fill="rgb(252,188,14)" rx="2" ry="2" />
<text  x="1130.36" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add (1,333,333 samples, 0.05%)</title><rect x="1056.2" y="405" width="0.5" height="15.0" fill="rgb(213,41,49)" rx="2" ry="2" />
<text  x="1059.15" y="415.5" ></text>
</g>
<g >
<title>iov_iter_fault_in_readable (1,333,333 samples, 0.05%)</title><rect x="907.3" y="277" width="0.5" height="15.0" fill="rgb(252,137,41)" rx="2" ry="2" />
<text  x="910.31" y="287.5" ></text>
</g>
<g >
<title>leveldb::port::Mutex::Unlock (3,999,999 samples, 0.14%)</title><rect x="955.5" y="517" width="1.6" height="15.0" fill="rgb(232,16,29)" rx="2" ry="2" />
<text  x="958.50" y="527.5" ></text>
</g>
<g >
<title>__x64_sys_read (1,333,333 samples, 0.05%)</title><rect x="1127.4" y="501" width="0.5" height="15.0" fill="rgb(231,49,41)" rx="2" ry="2" />
<text  x="1130.36" y="511.5" ></text>
</g>
<g >
<title>openaux (1,333,333 samples, 0.05%)</title><rect x="1129.5" y="613" width="0.5" height="15.0" fill="rgb(231,12,8)" rx="2" ry="2" />
<text  x="1132.50" y="623.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (6,666,665 samples, 0.23%)</title><rect x="496.7" y="357" width="2.6" height="15.0" fill="rgb(240,220,9)" rx="2" ry="2" />
<text  x="499.67" y="367.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (3,999,999 samples, 0.14%)</title><rect x="238.6" y="421" width="1.6" height="15.0" fill="rgb(245,141,40)" rx="2" ry="2" />
<text  x="241.61" y="431.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::Add (3,999,999 samples, 0.14%)</title><rect x="1132.7" y="725" width="1.6" height="15.0" fill="rgb(237,7,7)" rx="2" ry="2" />
<text  x="1135.71" y="735.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (2,666,666 samples, 0.09%)</title><rect x="52.8" y="421" width="1.1" height="15.0" fill="rgb(212,67,5)" rx="2" ry="2" />
<text  x="55.83" y="431.5" ></text>
</g>
<g >
<title>leveldb::Arena::AllocateNewBlock (7,999,998 samples, 0.27%)</title><rect x="496.1" y="421" width="3.2" height="15.0" fill="rgb(218,6,29)" rx="2" ry="2" />
<text  x="499.13" y="431.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.05%)</title><rect x="756.3" y="453" width="0.6" height="15.0" fill="rgb(212,141,25)" rx="2" ry="2" />
<text  x="759.33" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="105.8" y="373" width="0.6" height="15.0" fill="rgb(228,135,21)" rx="2" ry="2" />
<text  x="108.83" y="383.5" ></text>
</g>
<g >
<title>proc_reg_read (1,333,333 samples, 0.05%)</title><rect x="1127.4" y="437" width="0.5" height="15.0" fill="rgb(248,14,41)" rx="2" ry="2" />
<text  x="1130.36" y="447.5" ></text>
</g>
<g >
<title>truncate_inode_pages_final (5,333,332 samples, 0.18%)</title><rect x="11.1" y="341" width="2.1" height="15.0" fill="rgb(234,155,33)" rx="2" ry="2" />
<text  x="14.07" y="351.5" ></text>
</g>
<g >
<title>hash_futex (5,333,332 samples, 0.18%)</title><rect x="991.4" y="357" width="2.1" height="15.0" fill="rgb(251,32,42)" rx="2" ry="2" />
<text  x="994.37" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::swap (18,666,662 samples, 0.64%)</title><rect x="1019.7" y="341" width="7.5" height="15.0" fill="rgb(207,114,17)" rx="2" ry="2" />
<text  x="1022.75" y="351.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::Next (3,999,999 samples, 0.14%)</title><rect x="186.1" y="485" width="1.6" height="15.0" fill="rgb(213,47,11)" rx="2" ry="2" />
<text  x="189.14" y="495.5" ></text>
</g>
<g >
<title>crypto_shash_update (1,333,333 samples, 0.05%)</title><rect x="161.0" y="101" width="0.5" height="15.0" fill="rgb(227,221,41)" rx="2" ry="2" />
<text  x="163.98" y="111.5" ></text>
</g>
<g >
<title>__page_cache_alloc (1,333,333 samples, 0.05%)</title><rect x="1161.1" y="533" width="0.5" height="15.0" fill="rgb(249,20,18)" rx="2" ry="2" />
<text  x="1164.09" y="543.5" ></text>
</g>
<g >
<title>generic_write_checks (1,333,333 samples, 0.05%)</title><rect x="910.5" y="309" width="0.6" height="15.0" fill="rgb(214,180,33)" rx="2" ry="2" />
<text  x="913.53" y="319.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (59,999,985 samples, 2.04%)</title><rect x="664.8" y="341" width="24.1" height="15.0" fill="rgb(212,117,25)" rx="2" ry="2" />
<text  x="667.78" y="351.5" >_..</text>
</g>
<g >
<title>std::swap&lt;char const*&gt; (1,333,333 samples, 0.05%)</title><rect x="1105.4" y="533" width="0.5" height="15.0" fill="rgb(249,201,53)" rx="2" ry="2" />
<text  x="1108.41" y="543.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (5,333,332 samples, 0.18%)</title><rect x="191.0" y="453" width="2.1" height="15.0" fill="rgb(235,206,20)" rx="2" ry="2" />
<text  x="193.96" y="463.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="796.0" y="357" width="0.5" height="15.0" fill="rgb(207,206,48)" rx="2" ry="2" />
<text  x="798.95" y="367.5" ></text>
</g>
<g >
<title>std::make_shared&lt;std::__future_base::_State_baseV2&gt; (1,333,333 samples, 0.05%)</title><rect x="1184.1" y="725" width="0.5" height="15.0" fill="rgb(251,13,13)" rx="2" ry="2" />
<text  x="1187.11" y="735.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (1,333,333 samples, 0.05%)</title><rect x="301.3" y="453" width="0.5" height="15.0" fill="rgb(252,105,48)" rx="2" ry="2" />
<text  x="304.25" y="463.5" ></text>
</g>
<g >
<title>do_page_fault (3,999,999 samples, 0.14%)</title><rect x="294.8" y="261" width="1.6" height="15.0" fill="rgb(218,93,35)" rx="2" ry="2" />
<text  x="297.83" y="271.5" ></text>
</g>
<g >
<title>truncate_inode_pages_final (11,999,997 samples, 0.41%)</title><rect x="1120.9" y="501" width="4.9" height="15.0" fill="rgb(215,3,33)" rx="2" ry="2" />
<text  x="1123.93" y="511.5" ></text>
</g>
<g >
<title>security_file_permission (5,333,332 samples, 0.18%)</title><rect x="914.8" y="325" width="2.2" height="15.0" fill="rgb(237,213,36)" rx="2" ry="2" />
<text  x="917.81" y="335.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (2,666,666 samples, 0.09%)</title><rect x="1018.7" y="261" width="1.0" height="15.0" fill="rgb(210,96,23)" rx="2" ry="2" />
<text  x="1021.68" y="271.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (1,333,333 samples, 0.05%)</title><rect x="1115.0" y="517" width="0.6" height="15.0" fill="rgb(234,66,43)" rx="2" ry="2" />
<text  x="1118.05" y="527.5" ></text>
</g>
<g >
<title>__libc_open64 (2,666,666 samples, 0.09%)</title><rect x="1127.9" y="565" width="1.1" height="15.0" fill="rgb(241,38,39)" rx="2" ry="2" />
<text  x="1130.89" y="575.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Next (3,999,999 samples, 0.14%)</title><rect x="212.9" y="421" width="1.6" height="15.0" fill="rgb(218,229,52)" rx="2" ry="2" />
<text  x="215.91" y="431.5" ></text>
</g>
<g >
<title>__getblk_gfp (3,999,999 samples, 0.14%)</title><rect x="890.2" y="165" width="1.6" height="15.0" fill="rgb(254,99,22)" rx="2" ry="2" />
<text  x="893.18" y="175.5" ></text>
</g>
<g >
<title>do_sys_open (2,666,666 samples, 0.09%)</title><rect x="1127.9" y="501" width="1.1" height="15.0" fill="rgb(242,204,29)" rx="2" ry="2" />
<text  x="1130.89" y="511.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="886.4" y="85" width="0.6" height="15.0" fill="rgb(209,90,29)" rx="2" ry="2" />
<text  x="889.43" y="95.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::Add (53,333,320 samples, 1.81%)</title><rect x="340.9" y="485" width="21.4" height="15.0" fill="rgb(239,174,19)" rx="2" ry="2" />
<text  x="343.87" y="495.5" >l..</text>
</g>
<g >
<title>std::call_once&lt;void  (1,333,333 samples, 0.05%)</title><rect x="1182.5" y="725" width="0.5" height="15.0" fill="rgb(214,134,36)" rx="2" ry="2" />
<text  x="1185.50" y="735.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::EnsureLimit (1,333,333 samples, 0.05%)</title><rect x="95.1" y="229" width="0.6" height="15.0" fill="rgb(254,126,5)" rx="2" ry="2" />
<text  x="98.13" y="239.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.09%)</title><rect x="1180.4" y="709" width="1.0" height="15.0" fill="rgb(205,60,20)" rx="2" ry="2" />
<text  x="1183.36" y="719.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt; &gt;::destroy&lt;std::__future_base::_State_baseV2&gt; (1,333,333 samples, 0.05%)</title><rect x="1168.6" y="709" width="0.5" height="15.0" fill="rgb(233,214,4)" rx="2" ry="2" />
<text  x="1171.58" y="719.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (86,666,645 samples, 2.95%)</title><rect x="995.1" y="405" width="34.8" height="15.0" fill="rgb(207,14,13)" rx="2" ry="2" />
<text  x="998.12" y="415.5" >st..</text>
</g>
<g >
<title>leveldb::PosixLogger::Logv (1,333,333 samples, 0.05%)</title><rect x="161.0" y="469" width="0.5" height="15.0" fill="rgb(207,103,13)" rx="2" ry="2" />
<text  x="163.98" y="479.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::WriteWrapper (1,457,332,969 samples, 49.59%)</title><rect x="455.4" y="533" width="585.2" height="15.0" fill="rgb(222,8,3)" rx="2" ry="2" />
<text  x="458.44" y="543.5" >leveldb::DBImpl::WriteWrapper</text>
</g>
<g >
<title>leveldb::Slice::Slice (23,999,994 samples, 0.82%)</title><rect x="704.4" y="357" width="9.6" height="15.0" fill="rgb(244,33,26)" rx="2" ry="2" />
<text  x="707.40" y="367.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.05%)</title><rect x="160.4" y="245" width="0.6" height="15.0" fill="rgb(241,228,34)" rx="2" ry="2" />
<text  x="163.44" y="255.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (45,333,322 samples, 1.54%)</title><rect x="255.7" y="421" width="18.2" height="15.0" fill="rgb(244,196,18)" rx="2" ry="2" />
<text  x="258.74" y="431.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (10,666,664 samples, 0.36%)</title><rect x="739.7" y="389" width="4.3" height="15.0" fill="rgb(232,166,4)" rx="2" ry="2" />
<text  x="742.74" y="399.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteBlock (27,999,993 samples, 0.95%)</title><rect x="281.4" y="421" width="11.3" height="15.0" fill="rgb(227,89,0)" rx="2" ry="2" />
<text  x="284.44" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (46,666,655 samples, 1.59%)</title><rect x="1082.4" y="469" width="18.7" height="15.0" fill="rgb(228,200,26)" rx="2" ry="2" />
<text  x="1085.39" y="479.5" ></text>
</g>
<g >
<title>block_write_end (14,666,663 samples, 0.50%)</title><rect x="894.5" y="245" width="5.9" height="15.0" fill="rgb(253,183,39)" rx="2" ry="2" />
<text  x="897.46" y="255.5" ></text>
</g>
<g >
<title>ext4_writepages (1,333,333 samples, 0.05%)</title><rect x="1125.8" y="405" width="0.5" height="15.0" fill="rgb(228,102,51)" rx="2" ry="2" />
<text  x="1128.75" y="415.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (2,757,332,644 samples, 93.83%)</title><rect x="10.5" y="629" width="1107.2" height="15.0" fill="rgb(218,68,9)" rx="2" ry="2" />
<text  x="13.54" y="639.5" >std::__invoke&lt;void </text>
</g>
<g >
<title>leveldb::Status::OK (2,666,666 samples, 0.09%)</title><rect x="918.0" y="437" width="1.1" height="15.0" fill="rgb(246,76,27)" rx="2" ry="2" />
<text  x="921.02" y="447.5" ></text>
</g>
<g >
<title>leveldb::ParseInternalKey (3,999,999 samples, 0.14%)</title><rect x="55.0" y="453" width="1.6" height="15.0" fill="rgb(232,68,25)" rx="2" ry="2" />
<text  x="57.97" y="463.5" ></text>
</g>
<g >
<title>truncate_cleanup_page (3,999,999 samples, 0.14%)</title><rect x="231.1" y="293" width="1.6" height="15.0" fill="rgb(208,213,6)" rx="2" ry="2" />
<text  x="234.12" y="303.5" ></text>
</g>
<g >
<title>load_balance (1,333,333 samples, 0.05%)</title><rect x="843.6" y="85" width="0.5" height="15.0" fill="rgb(235,29,33)" rx="2" ry="2" />
<text  x="846.60" y="95.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::KeyBuffer::Set (55,999,986 samples, 1.91%)</title><rect x="424.4" y="549" width="22.5" height="15.0" fill="rgb(219,184,0)" rx="2" ry="2" />
<text  x="427.39" y="559.5" >l..</text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.05%)</title><rect x="1118.8" y="485" width="0.5" height="15.0" fill="rgb(230,143,39)" rx="2" ry="2" />
<text  x="1121.79" y="495.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (3,999,999 samples, 0.14%)</title><rect x="229.5" y="469" width="1.6" height="15.0" fill="rgb(251,116,1)" rx="2" ry="2" />
<text  x="232.51" y="479.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (6,666,665 samples, 0.23%)</title><rect x="1111.8" y="501" width="2.7" height="15.0" fill="rgb(212,52,49)" rx="2" ry="2" />
<text  x="1114.83" y="511.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__future_base::_State_baseV2&gt;::~allocator (1,333,333 samples, 0.05%)</title><rect x="1089.3" y="389" width="0.6" height="15.0" fill="rgb(245,94,16)" rx="2" ry="2" />
<text  x="1092.35" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_eq (1,333,333 samples, 0.05%)</title><rect x="1175.0" y="709" width="0.5" height="15.0" fill="rgb(224,45,15)" rx="2" ry="2" />
<text  x="1178.01" y="719.5" ></text>
</g>
<g >
<title>snappy::Compress (1,333,333 samples, 0.05%)</title><rect x="149.7" y="405" width="0.6" height="15.0" fill="rgb(222,225,33)" rx="2" ry="2" />
<text  x="152.74" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (1,333,333 samples, 0.05%)</title><rect x="382.6" y="389" width="0.6" height="15.0" fill="rgb(252,21,52)" rx="2" ry="2" />
<text  x="385.63" y="399.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::NewWritableFile (1,333,333 samples, 0.05%)</title><rect x="468.3" y="501" width="0.5" height="15.0" fill="rgb(251,138,2)" rx="2" ry="2" />
<text  x="471.29" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (25,333,327 samples, 0.86%)</title><rect x="90.3" y="389" width="10.2" height="15.0" fill="rgb(228,20,30)" rx="2" ry="2" />
<text  x="93.31" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::empty (1,333,333 samples, 0.05%)</title><rect x="461.3" y="501" width="0.6" height="15.0" fill="rgb(210,150,21)" rx="2" ry="2" />
<text  x="464.33" y="511.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (3,999,999 samples, 0.14%)</title><rect x="1107.0" y="517" width="1.6" height="15.0" fill="rgb(252,215,10)" rx="2" ry="2" />
<text  x="1110.01" y="527.5" ></text>
</g>
<g >
<title>db_bench (2,938,665,932 samples, 100.00%)</title><rect x="10.0" y="741" width="1180.0" height="15.0" fill="rgb(221,33,28)" rx="2" ry="2" />
<text  x="13.00" y="751.5" >db_bench</text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.05%)</title><rect x="54.4" y="421" width="0.6" height="15.0" fill="rgb(222,57,18)" rx="2" ry="2" />
<text  x="57.44" y="431.5" ></text>
</g>
<g >
<title>std::move&lt;std::__future_base::_Result_base*&amp;&gt; (1,333,333 samples, 0.05%)</title><rect x="1100.1" y="373" width="0.5" height="15.0" fill="rgb(236,184,42)" rx="2" ry="2" />
<text  x="1103.05" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter, void&gt; (11,999,997 samples, 0.41%)</title><rect x="1014.9" y="309" width="4.8" height="15.0" fill="rgb(217,197,28)" rx="2" ry="2" />
<text  x="1017.93" y="319.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;::_Tuple_impl (6,666,665 samples, 0.23%)</title><rect x="97.8" y="325" width="2.7" height="15.0" fill="rgb(230,123,5)" rx="2" ry="2" />
<text  x="100.80" y="335.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="140.1" y="357" width="0.5" height="15.0" fill="rgb(244,213,48)" rx="2" ry="2" />
<text  x="143.10" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::clear (1,333,333 samples, 0.05%)</title><rect x="281.4" y="389" width="0.6" height="15.0" fill="rgb(237,168,30)" rx="2" ry="2" />
<text  x="284.44" y="399.5" ></text>
</g>
<g >
<title>generic_perform_write (203,999,949 samples, 6.94%)</title><rect x="827.0" y="293" width="81.9" height="15.0" fill="rgb(229,32,24)" rx="2" ry="2" />
<text  x="830.01" y="303.5" >generic_p..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (25,333,327 samples, 0.86%)</title><rect x="163.1" y="437" width="10.2" height="15.0" fill="rgb(229,82,10)" rx="2" ry="2" />
<text  x="166.12" y="447.5" ></text>
</g>
<g >
<title>__do_page_fault (17,333,329 samples, 0.59%)</title><rect x="1160.0" y="677" width="7.0" height="15.0" fill="rgb(218,116,19)" rx="2" ry="2" />
<text  x="1163.02" y="687.5" ></text>
</g>
<g >
<title>leveldb::Status::~Status (6,666,665 samples, 0.23%)</title><rect x="921.2" y="485" width="2.7" height="15.0" fill="rgb(240,169,52)" rx="2" ry="2" />
<text  x="924.23" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (45,333,322 samples, 1.54%)</title><rect x="255.7" y="389" width="18.2" height="15.0" fill="rgb(225,196,12)" rx="2" ry="2" />
<text  x="258.74" y="399.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (5,333,332 samples, 0.18%)</title><rect x="315.2" y="325" width="2.1" height="15.0" fill="rgb(229,74,4)" rx="2" ry="2" />
<text  x="318.17" y="335.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (1,333,333 samples, 0.05%)</title><rect x="243.4" y="405" width="0.6" height="15.0" fill="rgb(253,144,47)" rx="2" ry="2" />
<text  x="246.43" y="415.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed64 (1,333,333 samples, 0.05%)</title><rect x="255.2" y="421" width="0.5" height="15.0" fill="rgb(246,199,10)" rx="2" ry="2" />
<text  x="258.21" y="431.5" ></text>
</g>
<g >
<title>arch_freq_prepare_all (2,666,666 samples, 0.09%)</title><rect x="1127.9" y="389" width="1.1" height="15.0" fill="rgb(226,48,16)" rx="2" ry="2" />
<text  x="1130.89" y="399.5" ></text>
</g>
<g >
<title>clear_page_erms (1,333,333 samples, 0.05%)</title><rect x="264.8" y="165" width="0.6" height="15.0" fill="rgb(209,87,19)" rx="2" ry="2" />
<text  x="267.85" y="175.5" ></text>
</g>
<g >
<title>__x64_sys_openat (2,666,666 samples, 0.09%)</title><rect x="1127.9" y="517" width="1.1" height="15.0" fill="rgb(249,201,41)" rx="2" ry="2" />
<text  x="1130.89" y="527.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1,333,333 samples, 0.05%)</title><rect x="1161.1" y="485" width="0.5" height="15.0" fill="rgb(251,155,50)" rx="2" ry="2" />
<text  x="1164.09" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (2,666,666 samples, 0.09%)</title><rect x="273.9" y="389" width="1.1" height="15.0" fill="rgb(218,100,5)" rx="2" ry="2" />
<text  x="276.95" y="399.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (6,666,665 samples, 0.23%)</title><rect x="298.0" y="341" width="2.7" height="15.0" fill="rgb(230,213,42)" rx="2" ry="2" />
<text  x="301.04" y="351.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="562.5" y="373" width="0.6" height="15.0" fill="rgb(238,164,49)" rx="2" ry="2" />
<text  x="565.52" y="383.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (5,333,332 samples, 0.18%)</title><rect x="201.1" y="421" width="2.2" height="15.0" fill="rgb(241,203,42)" rx="2" ry="2" />
<text  x="204.13" y="431.5" ></text>
</g>
<g >
<title>__getblk_gfp (1,333,333 samples, 0.05%)</title><rect x="824.3" y="181" width="0.6" height="15.0" fill="rgb(227,36,4)" rx="2" ry="2" />
<text  x="827.33" y="191.5" ></text>
</g>
<g >
<title>__pagevec_release (1,333,333 samples, 0.05%)</title><rect x="11.1" y="309" width="0.5" height="15.0" fill="rgb(211,135,48)" rx="2" ry="2" />
<text  x="14.07" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (2,666,666 samples, 0.09%)</title><rect x="331.2" y="437" width="1.1" height="15.0" fill="rgb(228,211,30)" rx="2" ry="2" />
<text  x="334.23" y="447.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BackgroundCompaction (1,025,333,077 samples, 34.89%)</title><rect x="10.5" y="533" width="411.8" height="15.0" fill="rgb(244,52,32)" rx="2" ry="2" />
<text  x="13.54" y="543.5" >leveldb::DBImpl::BackgroundCompaction</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::allocate (11,999,997 samples, 0.41%)</title><rect x="90.8" y="373" width="4.9" height="15.0" fill="rgb(235,37,43)" rx="2" ry="2" />
<text  x="93.84" y="383.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_deleter (1,333,333 samples, 0.05%)</title><rect x="1186.8" y="709" width="0.5" height="15.0" fill="rgb(233,126,16)" rx="2" ry="2" />
<text  x="1189.79" y="719.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1,333,333 samples, 0.05%)</title><rect x="855.4" y="213" width="0.5" height="15.0" fill="rgb(234,224,18)" rx="2" ry="2" />
<text  x="858.38" y="223.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="321.1" y="357" width="0.5" height="15.0" fill="rgb(239,44,16)" rx="2" ry="2" />
<text  x="324.06" y="367.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::Delete (1,333,333 samples, 0.05%)</title><rect x="1119.9" y="485" width="0.5" height="15.0" fill="rgb(240,39,47)" rx="2" ry="2" />
<text  x="1122.86" y="495.5" ></text>
</g>
<g >
<title>std::__future_base::_Result_base::_Deleter::operator (1,333,333 samples, 0.05%)</title><rect x="1189.5" y="709" width="0.5" height="15.0" fill="rgb(216,19,41)" rx="2" ry="2" />
<text  x="1192.46" y="719.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; &gt;::_M_manager (3,999,999 samples, 0.14%)</title><rect x="1037.9" y="469" width="1.7" height="15.0" fill="rgb(215,46,32)" rx="2" ry="2" />
<text  x="1040.95" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux (6,666,665 samples, 0.23%)</title><rect x="1105.9" y="533" width="2.7" height="15.0" fill="rgb(216,92,0)" rx="2" ry="2" />
<text  x="1108.94" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;leveldb::ParsedInternalKey&gt;::construct&lt;leveldb::ParsedInternalKey, leveldb::ParsedInternalKey const&amp;&gt; (1,333,333 samples, 0.05%)</title><rect x="148.7" y="421" width="0.5" height="15.0" fill="rgb(215,136,52)" rx="2" ry="2" />
<text  x="151.67" y="431.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (3,999,999 samples, 0.14%)</title><rect x="853.8" y="213" width="1.6" height="15.0" fill="rgb(220,203,28)" rx="2" ry="2" />
<text  x="856.77" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (1,333,333 samples, 0.05%)</title><rect x="375.1" y="325" width="0.6" height="15.0" fill="rgb(229,211,54)" rx="2" ry="2" />
<text  x="378.14" y="335.5" ></text>
</g>
<g >
<title>leveldb::Status::~Status (1,333,333 samples, 0.05%)</title><rect x="147.1" y="437" width="0.5" height="15.0" fill="rgb(242,147,12)" rx="2" ry="2" />
<text  x="150.06" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::front (9,333,331 samples, 0.32%)</title><rect x="957.1" y="517" width="3.8" height="15.0" fill="rgb(242,182,32)" rx="2" ry="2" />
<text  x="960.11" y="527.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.05%)</title><rect x="363.4" y="453" width="0.5" height="15.0" fill="rgb(215,186,38)" rx="2" ry="2" />
<text  x="366.36" y="463.5" ></text>
</g>
<g >
<title>alloc_page_buffers (2,666,666 samples, 0.09%)</title><rect x="840.4" y="229" width="1.1" height="15.0" fill="rgb(213,38,25)" rx="2" ry="2" />
<text  x="843.39" y="239.5" ></text>
</g>
<g >
<title>std::atomic&lt;unsigned int&gt;::atomic (1,333,333 samples, 0.05%)</title><rect x="1169.7" y="709" width="0.5" height="15.0" fill="rgb(236,55,16)" rx="2" ry="2" />
<text  x="1172.66" y="719.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (1,333,333 samples, 0.05%)</title><rect x="452.2" y="421" width="0.6" height="15.0" fill="rgb(231,102,7)" rx="2" ry="2" />
<text  x="455.23" y="431.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1,333,333 samples, 0.05%)</title><rect x="343.0" y="453" width="0.5" height="15.0" fill="rgb(224,97,26)" rx="2" ry="2" />
<text  x="346.01" y="463.5" ></text>
</g>
<g >
<title>__wake_up (5,333,332 samples, 0.18%)</title><rect x="853.8" y="229" width="2.1" height="15.0" fill="rgb(250,222,36)" rx="2" ry="2" />
<text  x="856.77" y="239.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (2,666,666 samples, 0.09%)</title><rect x="83.9" y="309" width="1.1" height="15.0" fill="rgb(218,138,12)" rx="2" ry="2" />
<text  x="86.88" y="319.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (1,333,333 samples, 0.05%)</title><rect x="328.6" y="421" width="0.5" height="15.0" fill="rgb(227,96,20)" rx="2" ry="2" />
<text  x="331.56" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (9,333,331 samples, 0.32%)</title><rect x="374.6" y="389" width="3.7" height="15.0" fill="rgb(215,82,10)" rx="2" ry="2" />
<text  x="377.60" y="399.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.05%)</title><rect x="226.8" y="389" width="0.6" height="15.0" fill="rgb(226,174,44)" rx="2" ry="2" />
<text  x="229.83" y="399.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="226.8" y="485" width="0.6" height="15.0" fill="rgb(249,81,11)" rx="2" ry="2" />
<text  x="229.83" y="495.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.05%)</title><rect x="236.5" y="421" width="0.5" height="15.0" fill="rgb(210,10,19)" rx="2" ry="2" />
<text  x="239.47" y="431.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Value (1,333,333 samples, 0.05%)</title><rect x="149.2" y="405" width="0.5" height="15.0" fill="rgb(209,10,32)" rx="2" ry="2" />
<text  x="152.20" y="415.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (3,999,999 samples, 0.14%)</title><rect x="207.0" y="437" width="1.6" height="15.0" fill="rgb(252,71,31)" rx="2" ry="2" />
<text  x="210.02" y="447.5" ></text>
</g>
<g >
<title>down_write_trylock (1,333,333 samples, 0.05%)</title><rect x="909.5" y="309" width="0.5" height="15.0" fill="rgb(247,184,42)" rx="2" ry="2" />
<text  x="912.46" y="319.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (2,666,666 samples, 0.09%)</title><rect x="746.2" y="357" width="1.0" height="15.0" fill="rgb(254,172,24)" rx="2" ry="2" />
<text  x="749.16" y="367.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (2,666,666 samples, 0.09%)</title><rect x="83.9" y="325" width="1.1" height="15.0" fill="rgb(228,196,50)" rx="2" ry="2" />
<text  x="86.88" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (7,999,998 samples, 0.27%)</title><rect x="297.5" y="373" width="3.2" height="15.0" fill="rgb(218,69,33)" rx="2" ry="2" />
<text  x="300.50" y="383.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.05%)</title><rect x="1015.5" y="277" width="0.5" height="15.0" fill="rgb(206,108,28)" rx="2" ry="2" />
<text  x="1018.46" y="287.5" ></text>
</g>
<g >
<title>get_futex_key_refs.isra.16 (1,333,333 samples, 0.05%)</title><rect x="990.8" y="341" width="0.6" height="15.0" fill="rgb(244,181,26)" rx="2" ry="2" />
<text  x="993.83" y="351.5" ></text>
</g>
<g >
<title>__fdget_pos (6,666,665 samples, 0.23%)</title><rect x="799.7" y="357" width="2.7" height="15.0" fill="rgb(226,10,23)" rx="2" ry="2" />
<text  x="802.70" y="367.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::CurrentSizeEstimate (1,333,333 samples, 0.05%)</title><rect x="362.3" y="485" width="0.5" height="15.0" fill="rgb(241,6,4)" rx="2" ry="2" />
<text  x="365.29" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (13,333,330 samples, 0.45%)</title><rect x="256.3" y="373" width="5.3" height="15.0" fill="rgb(223,70,1)" rx="2" ry="2" />
<text  x="259.28" y="383.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (2,666,666 samples, 0.09%)</title><rect x="1031.5" y="469" width="1.1" height="15.0" fill="rgb(211,130,22)" rx="2" ry="2" />
<text  x="1034.52" y="479.5" ></text>
</g>
<g >
<title>vfs_write (1,333,333 samples, 0.05%)</title><rect x="917.0" y="373" width="0.5" height="15.0" fill="rgb(219,17,34)" rx="2" ry="2" />
<text  x="919.95" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::begin (6,666,665 samples, 0.23%)</title><rect x="462.4" y="485" width="2.7" height="15.0" fill="rgb(226,33,49)" rx="2" ry="2" />
<text  x="465.40" y="495.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Valid (1,333,333 samples, 0.05%)</title><rect x="233.8" y="421" width="0.5" height="15.0" fill="rgb(254,85,20)" rx="2" ry="2" />
<text  x="236.79" y="431.5" ></text>
</g>
<g >
<title>__GI_madvise (1,333,333 samples, 0.05%)</title><rect x="160.4" y="277" width="0.6" height="15.0" fill="rgb(229,113,23)" rx="2" ry="2" />
<text  x="163.44" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator[] (1,333,333 samples, 0.05%)</title><rect x="774.5" y="501" width="0.6" height="15.0" fill="rgb(230,224,20)" rx="2" ry="2" />
<text  x="777.54" y="511.5" ></text>
</g>
<g >
<title>leveldb::PutVarint32 (6,666,665 samples, 0.23%)</title><rect x="346.8" y="469" width="2.6" height="15.0" fill="rgb(253,61,14)" rx="2" ry="2" />
<text  x="349.76" y="479.5" ></text>
</g>
<g >
<title>__once_proxy (5,333,332 samples, 0.18%)</title><rect x="969.4" y="437" width="2.2" height="15.0" fill="rgb(244,209,21)" rx="2" ry="2" />
<text  x="972.42" y="447.5" ></text>
</g>
<g >
<title>do_page_fault (17,333,329 samples, 0.59%)</title><rect x="1160.0" y="693" width="7.0" height="15.0" fill="rgb(215,59,54)" rx="2" ry="2" />
<text  x="1163.02" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (47,999,988 samples, 1.63%)</title><rect x="65.7" y="389" width="19.3" height="15.0" fill="rgb(249,28,19)" rx="2" ry="2" />
<text  x="68.68" y="399.5" ></text>
</g>
<g >
<title>file_free_rcu (1,333,333 samples, 0.05%)</title><rect x="482.7" y="437" width="0.6" height="15.0" fill="rgb(249,136,10)" rx="2" ry="2" />
<text  x="485.75" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,333,333 samples, 0.05%)</title><rect x="169.5" y="373" width="0.6" height="15.0" fill="rgb(224,209,44)" rx="2" ry="2" />
<text  x="172.55" y="383.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32 (10,666,664 samples, 0.36%)</title><rect x="759.0" y="469" width="4.3" height="15.0" fill="rgb(250,138,42)" rx="2" ry="2" />
<text  x="762.01" y="479.5" ></text>
</g>
<g >
<title>__ext4_new_inode (1,333,333 samples, 0.05%)</title><rect x="150.3" y="277" width="0.5" height="15.0" fill="rgb(219,125,51)" rx="2" ry="2" />
<text  x="153.27" y="287.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (101,333,308 samples, 3.45%)</title><rect x="61.4" y="421" width="40.7" height="15.0" fill="rgb(227,173,36)" rx="2" ry="2" />
<text  x="64.40" y="431.5" >std..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (6,666,665 samples, 0.23%)</title><rect x="276.1" y="373" width="2.7" height="15.0" fill="rgb(207,144,12)" rx="2" ry="2" />
<text  x="279.09" y="383.5" ></text>
</g>
<g >
<title>unlock_page (2,666,666 samples, 0.09%)</title><rect x="907.8" y="277" width="1.1" height="15.0" fill="rgb(226,135,20)" rx="2" ry="2" />
<text  x="910.85" y="287.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::WriteUnbuffered (321,333,253 samples, 10.93%)</title><rect x="790.1" y="453" width="129.0" height="15.0" fill="rgb(231,145,31)" rx="2" ry="2" />
<text  x="793.06" y="463.5" >leveldb::(anonym..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (3,999,999 samples, 0.14%)</title><rect x="1090.4" y="421" width="1.6" height="15.0" fill="rgb(213,57,52)" rx="2" ry="2" />
<text  x="1093.42" y="431.5" ></text>
</g>
<g >
<title>page_fault (2,666,666 samples, 0.09%)</title><rect x="74.2" y="357" width="1.1" height="15.0" fill="rgb(241,147,7)" rx="2" ry="2" />
<text  x="77.25" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (34,666,658 samples, 1.18%)</title><rect x="1087.2" y="453" width="13.9" height="15.0" fill="rgb(237,127,24)" rx="2" ry="2" />
<text  x="1090.21" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get_deleter (1,333,333 samples, 0.05%)</title><rect x="1017.1" y="293" width="0.5" height="15.0" fill="rgb(252,16,24)" rx="2" ry="2" />
<text  x="1020.07" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (1,333,333 samples, 0.05%)</title><rect x="110.1" y="293" width="0.6" height="15.0" fill="rgb(221,133,40)" rx="2" ry="2" />
<text  x="113.12" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (7,999,998 samples, 0.27%)</title><rect x="108.0" y="341" width="3.2" height="15.0" fill="rgb(254,6,53)" rx="2" ry="2" />
<text  x="110.98" y="351.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (9,333,331 samples, 0.32%)</title><rect x="22.3" y="437" width="3.8" height="15.0" fill="rgb(237,73,8)" rx="2" ry="2" />
<text  x="25.31" y="447.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (22,666,661 samples, 0.77%)</title><rect x="817.9" y="261" width="9.1" height="15.0" fill="rgb(252,140,32)" rx="2" ry="2" />
<text  x="820.90" y="271.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (1,333,333 samples, 0.05%)</title><rect x="1118.8" y="581" width="0.5" height="15.0" fill="rgb(213,155,3)" rx="2" ry="2" />
<text  x="1121.79" y="591.5" ></text>
</g>
<g >
<title>block_page_mkwrite (2,666,666 samples, 0.09%)</title><rect x="1165.4" y="597" width="1.0" height="15.0" fill="rgb(214,86,48)" rx="2" ry="2" />
<text  x="1168.37" y="607.5" ></text>
</g>
<g >
<title>filemap_fault (9,333,331 samples, 0.32%)</title><rect x="1161.1" y="597" width="3.7" height="15.0" fill="rgb(239,175,25)" rx="2" ry="2" />
<text  x="1164.09" y="607.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (257,333,269 samples, 8.76%)</title><rect x="807.7" y="325" width="103.4" height="15.0" fill="rgb(212,144,11)" rx="2" ry="2" />
<text  x="810.73" y="335.5" >ext4_file_wr..</text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (6,666,665 samples, 0.23%)</title><rect x="102.6" y="421" width="2.7" height="15.0" fill="rgb(246,116,52)" rx="2" ry="2" />
<text  x="105.62" y="431.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (2,666,666 samples, 0.09%)</title><rect x="840.4" y="197" width="1.1" height="15.0" fill="rgb(242,36,35)" rx="2" ry="2" />
<text  x="843.39" y="207.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.05%)</title><rect x="452.2" y="453" width="0.6" height="15.0" fill="rgb(231,147,49)" rx="2" ry="2" />
<text  x="455.23" y="463.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::key (1,333,333 samples, 0.05%)</title><rect x="1145.0" y="709" width="0.6" height="15.0" fill="rgb(236,145,29)" rx="2" ry="2" />
<text  x="1148.03" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (1,333,333 samples, 0.05%)</title><rect x="111.2" y="373" width="0.5" height="15.0" fill="rgb(253,108,13)" rx="2" ry="2" />
<text  x="114.19" y="383.5" ></text>
</g>
<g >
<title>__cancel_dirty_page (1,333,333 samples, 0.05%)</title><rect x="1124.7" y="341" width="0.5" height="15.0" fill="rgb(231,34,52)" rx="2" ry="2" />
<text  x="1127.68" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt;::_Deque_iterator (7,999,998 samples, 0.27%)</title><rect x="957.6" y="485" width="3.3" height="15.0" fill="rgb(221,86,49)" rx="2" ry="2" />
<text  x="960.64" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (10,666,664 samples, 0.36%)</title><rect x="269.7" y="373" width="4.2" height="15.0" fill="rgb(213,92,47)" rx="2" ry="2" />
<text  x="272.66" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (2,666,666 samples, 0.09%)</title><rect x="280.4" y="405" width="1.0" height="15.0" fill="rgb(252,79,26)" rx="2" ry="2" />
<text  x="283.37" y="415.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::MergeIntoFreeList (1,333,333 samples, 0.05%)</title><rect x="1119.9" y="469" width="0.5" height="15.0" fill="rgb(215,73,54)" rx="2" ry="2" />
<text  x="1122.86" y="479.5" ></text>
</g>
<g >
<title>ext4_da_write_end (5,333,332 samples, 0.18%)</title><rect x="813.6" y="293" width="2.2" height="15.0" fill="rgb(233,142,17)" rx="2" ry="2" />
<text  x="816.62" y="303.5" ></text>
</g>
<g >
<title>load_balance (1,333,333 samples, 0.05%)</title><rect x="562.5" y="309" width="0.6" height="15.0" fill="rgb(208,11,8)" rx="2" ry="2" />
<text  x="565.52" y="319.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (1,333,333 samples, 0.05%)</title><rect x="485.4" y="501" width="0.6" height="15.0" fill="rgb(211,108,45)" rx="2" ry="2" />
<text  x="488.43" y="511.5" ></text>
</g>
<g >
<title>snappy::internal::CompressFragment (10,666,664 samples, 0.36%)</title><rect x="287.9" y="357" width="4.3" height="15.0" fill="rgb(206,91,34)" rx="2" ry="2" />
<text  x="290.87" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get (3,999,999 samples, 0.14%)</title><rect x="1002.1" y="277" width="1.6" height="15.0" fill="rgb(250,36,15)" rx="2" ry="2" />
<text  x="1005.08" y="287.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.05%)</title><rect x="1012.3" y="229" width="0.5" height="15.0" fill="rgb(242,66,42)" rx="2" ry="2" />
<text  x="1015.25" y="239.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (79,999,980 samples, 2.72%)</title><rect x="996.2" y="373" width="32.1" height="15.0" fill="rgb(236,6,22)" rx="2" ry="2" />
<text  x="999.19" y="383.5" >st..</text>
</g>
<g >
<title>leveldb::ExtractUserKey (7,999,998 samples, 0.27%)</title><rect x="343.5" y="453" width="3.3" height="15.0" fill="rgb(247,79,15)" rx="2" ry="2" />
<text  x="346.55" y="463.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (331,999,917 samples, 11.30%)</title><rect x="785.8" y="485" width="133.3" height="15.0" fill="rgb(205,84,50)" rx="2" ry="2" />
<text  x="788.78" y="495.5" >leveldb::(anonym..</text>
</g>
<g >
<title>ext4_dirty_inode (22,666,661 samples, 0.77%)</title><rect x="817.9" y="245" width="9.1" height="15.0" fill="rgb(216,152,40)" rx="2" ry="2" />
<text  x="820.90" y="255.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (82,666,646 samples, 2.81%)</title><rect x="861.3" y="229" width="33.2" height="15.0" fill="rgb(252,117,24)" rx="2" ry="2" />
<text  x="864.27" y="239.5" >ex..</text>
</g>
<g >
<title>leveldb::Status::ok (3,999,999 samples, 0.14%)</title><rect x="469.9" y="501" width="1.6" height="15.0" fill="rgb(252,157,22)" rx="2" ry="2" />
<text  x="472.90" y="511.5" ></text>
</g>
<g >
<title>std::swap&lt;std::__future_base::_Result_base*&gt; (5,333,332 samples, 0.18%)</title><rect x="1024.6" y="309" width="2.1" height="15.0" fill="rgb(219,196,7)" rx="2" ry="2" />
<text  x="1027.56" y="319.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.05%)</title><rect x="417.4" y="405" width="0.6" height="15.0" fill="rgb(254,208,23)" rx="2" ry="2" />
<text  x="420.43" y="415.5" ></text>
</g>
<g >
<title>leveldb::Status::Status (2,666,666 samples, 0.09%)</title><rect x="1041.7" y="517" width="1.1" height="15.0" fill="rgb(232,201,3)" rx="2" ry="2" />
<text  x="1044.70" y="527.5" ></text>
</g>
<g >
<title>radix_tree_lookup_slot (2,666,666 samples, 0.09%)</title><rect x="844.7" y="213" width="1.0" height="15.0" fill="rgb(239,1,23)" rx="2" ry="2" />
<text  x="847.67" y="223.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="562.5" y="357" width="0.6" height="15.0" fill="rgb(212,50,38)" rx="2" ry="2" />
<text  x="565.52" y="367.5" ></text>
</g>
<g >
<title>map_id_up (1,333,333 samples, 0.05%)</title><rect x="887.0" y="165" width="0.5" height="15.0" fill="rgb(232,210,38)" rx="2" ry="2" />
<text  x="889.97" y="175.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator@plt (1,333,333 samples, 0.05%)</title><rect x="369.8" y="437" width="0.5" height="15.0" fill="rgb(213,129,21)" rx="2" ry="2" />
<text  x="372.78" y="447.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="497.2" y="181" width="0.5" height="15.0" fill="rgb(220,28,13)" rx="2" ry="2" />
<text  x="500.21" y="191.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="497.2" y="213" width="0.5" height="15.0" fill="rgb(212,155,37)" rx="2" ry="2" />
<text  x="500.21" y="223.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (10,666,664 samples, 0.36%)</title><rect x="396.6" y="405" width="4.2" height="15.0" fill="rgb(229,216,13)" rx="2" ry="2" />
<text  x="399.55" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (1,333,333 samples, 0.05%)</title><rect x="277.7" y="277" width="0.5" height="15.0" fill="rgb(217,80,7)" rx="2" ry="2" />
<text  x="280.70" y="287.5" ></text>
</g>
<g >
<title>try_to_free_buffers (1,333,333 samples, 0.05%)</title><rect x="232.2" y="181" width="0.5" height="15.0" fill="rgb(252,208,38)" rx="2" ry="2" />
<text  x="235.19" y="191.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.05%)</title><rect x="1099.5" y="357" width="0.6" height="15.0" fill="rgb(248,171,39)" rx="2" ry="2" />
<text  x="1102.52" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (1,333,333 samples, 0.05%)</title><rect x="305.0" y="325" width="0.5" height="15.0" fill="rgb(223,129,41)" rx="2" ry="2" />
<text  x="308.00" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_Hash_node_value_base (1,333,333 samples, 0.05%)</title><rect x="1173.9" y="725" width="0.6" height="15.0" fill="rgb(253,124,42)" rx="2" ry="2" />
<text  x="1176.94" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (11,999,997 samples, 0.41%)</title><rect x="275.6" y="389" width="4.8" height="15.0" fill="rgb(224,133,19)" rx="2" ry="2" />
<text  x="278.55" y="399.5" ></text>
</g>
<g >
<title>__GI__IO_default_xsputn (1,333,333 samples, 0.05%)</title><rect x="10.0" y="709" width="0.5" height="15.0" fill="rgb(227,177,0)" rx="2" ry="2" />
<text  x="13.00" y="719.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (2,666,666 samples, 0.09%)</title><rect x="172.2" y="341" width="1.1" height="15.0" fill="rgb(228,155,42)" rx="2" ry="2" />
<text  x="175.22" y="351.5" ></text>
</g>
<g >
<title>mnt_want_write (1,333,333 samples, 0.05%)</title><rect x="468.3" y="373" width="0.5" height="15.0" fill="rgb(208,50,20)" rx="2" ry="2" />
<text  x="471.29" y="383.5" ></text>
</g>
<g >
<title>ext4_es_remove_extent (1,333,333 samples, 0.05%)</title><rect x="11.6" y="277" width="0.5" height="15.0" fill="rgb(245,197,31)" rx="2" ry="2" />
<text  x="14.61" y="287.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="312.0" y="405" width="0.5" height="15.0" fill="rgb(232,53,22)" rx="2" ry="2" />
<text  x="314.96" y="415.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (1,333,333 samples, 0.05%)</title><rect x="110.7" y="293" width="0.5" height="15.0" fill="rgb(212,77,38)" rx="2" ry="2" />
<text  x="113.65" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (15,999,996 samples, 0.54%)</title><rect x="105.3" y="405" width="6.4" height="15.0" fill="rgb(251,218,12)" rx="2" ry="2" />
<text  x="108.30" y="415.5" ></text>
</g>
<g >
<title>leveldb::Slice::operator[] (22,666,661 samples, 0.77%)</title><rect x="350.0" y="469" width="9.1" height="15.0" fill="rgb(208,227,25)" rx="2" ry="2" />
<text  x="352.97" y="479.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Flush (118,666,637 samples, 4.04%)</title><rect x="366.6" y="485" width="47.6" height="15.0" fill="rgb(207,17,27)" rx="2" ry="2" />
<text  x="369.57" y="495.5" >leve..</text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (6,666,665 samples, 0.23%)</title><rect x="1146.1" y="725" width="2.7" height="15.0" fill="rgb(220,30,28)" rx="2" ry="2" />
<text  x="1149.10" y="735.5" ></text>
</g>
<g >
<title>__find_get_block (3,999,999 samples, 0.14%)</title><rect x="890.2" y="149" width="1.6" height="15.0" fill="rgb(236,113,42)" rx="2" ry="2" />
<text  x="893.18" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::construct&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&gt; (2,666,666 samples, 0.09%)</title><rect x="962.5" y="485" width="1.0" height="15.0" fill="rgb(208,149,35)" rx="2" ry="2" />
<text  x="965.46" y="495.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;unsigned long, char&gt; (5,333,332 samples, 0.18%)</title><rect x="294.3" y="325" width="2.1" height="15.0" fill="rgb(236,7,26)" rx="2" ry="2" />
<text  x="297.29" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (27,999,993 samples, 0.95%)</title><rect x="318.9" y="469" width="11.3" height="15.0" fill="rgb(251,182,23)" rx="2" ry="2" />
<text  x="321.92" y="479.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::Count (1,333,333 samples, 0.05%)</title><rect x="1115.0" y="533" width="0.6" height="15.0" fill="rgb(224,202,36)" rx="2" ry="2" />
<text  x="1118.05" y="543.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.09%)</title><rect x="1010.6" y="229" width="1.1" height="15.0" fill="rgb(228,127,38)" rx="2" ry="2" />
<text  x="1013.64" y="239.5" ></text>
</g>
<g >
<title>pmem_map_file (1,333,333 samples, 0.05%)</title><rect x="150.3" y="453" width="0.5" height="15.0" fill="rgb(232,58,14)" rx="2" ry="2" />
<text  x="153.27" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (5,333,332 samples, 0.18%)</title><rect x="385.3" y="389" width="2.2" height="15.0" fill="rgb(229,77,22)" rx="2" ry="2" />
<text  x="388.31" y="399.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.05%)</title><rect x="48.5" y="437" width="0.6" height="15.0" fill="rgb(233,174,43)" rx="2" ry="2" />
<text  x="51.55" y="447.5" ></text>
</g>
<g >
<title>_raw_read_lock (3,999,999 samples, 0.14%)</title><rect x="832.4" y="229" width="1.6" height="15.0" fill="rgb(246,79,24)" rx="2" ry="2" />
<text  x="835.36" y="239.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::PrintHeader (3,999,999 samples, 0.14%)</title><rect x="1127.4" y="661" width="1.6" height="15.0" fill="rgb(252,32,16)" rx="2" ry="2" />
<text  x="1130.36" y="671.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (5,333,332 samples, 0.18%)</title><rect x="911.1" y="341" width="2.1" height="15.0" fill="rgb(251,46,26)" rx="2" ry="2" />
<text  x="914.06" y="351.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::LRUCache::Unref (1,333,333 samples, 0.05%)</title><rect x="421.7" y="437" width="0.6" height="15.0" fill="rgb(218,95,14)" rx="2" ry="2" />
<text  x="424.72" y="447.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (1,333,333 samples, 0.05%)</title><rect x="1119.9" y="549" width="0.5" height="15.0" fill="rgb(225,43,15)" rx="2" ry="2" />
<text  x="1122.86" y="559.5" ></text>
</g>
<g >
<title>proc_reg_open (2,666,666 samples, 0.09%)</title><rect x="1127.9" y="421" width="1.1" height="15.0" fill="rgb(249,54,45)" rx="2" ry="2" />
<text  x="1130.89" y="431.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (30,666,659 samples, 1.04%)</title><rect x="173.8" y="485" width="12.3" height="15.0" fill="rgb(218,134,0)" rx="2" ry="2" />
<text  x="176.83" y="495.5" ></text>
</g>
<g >
<title>rcu_all_qs (1,333,333 samples, 0.05%)</title><rect x="822.2" y="181" width="0.5" height="15.0" fill="rgb(240,171,21)" rx="2" ry="2" />
<text  x="825.19" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="260.0" y="341" width="0.6" height="15.0" fill="rgb(249,136,46)" rx="2" ry="2" />
<text  x="263.03" y="351.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,333,333 samples, 0.05%)</title><rect x="1172.9" y="709" width="0.5" height="15.0" fill="rgb(223,79,20)" rx="2" ry="2" />
<text  x="1175.87" y="719.5" ></text>
</g>
<g >
<title>__x64_sys_fdatasync (1,333,333 samples, 0.05%)</title><rect x="1125.8" y="517" width="0.5" height="15.0" fill="rgb(232,204,0)" rx="2" ry="2" />
<text  x="1128.75" y="527.5" ></text>
</g>
<g >
<title>_dl_map_object (1,333,333 samples, 0.05%)</title><rect x="1129.5" y="597" width="0.5" height="15.0" fill="rgb(251,92,46)" rx="2" ry="2" />
<text  x="1132.50" y="607.5" ></text>
</g>
<g >
<title>ext4_inode_csum.isra.59 (2,666,666 samples, 0.09%)</title><rect x="822.7" y="181" width="1.1" height="15.0" fill="rgb(235,104,24)" rx="2" ry="2" />
<text  x="825.72" y="191.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.05%)</title><rect x="452.2" y="485" width="0.6" height="15.0" fill="rgb(239,72,5)" rx="2" ry="2" />
<text  x="455.23" y="495.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::wait (1,333,333 samples, 0.05%)</title><rect x="1046.5" y="485" width="0.6" height="15.0" fill="rgb(231,154,12)" rx="2" ry="2" />
<text  x="1049.52" y="495.5" ></text>
</g>
<g >
<title>leveldb::Slice::empty (3,999,999 samples, 0.14%)</title><rect x="767.0" y="485" width="1.6" height="15.0" fill="rgb(213,205,24)" rx="2" ry="2" />
<text  x="770.04" y="495.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (5,333,332 samples, 0.18%)</title><rect x="191.0" y="469" width="2.1" height="15.0" fill="rgb(241,1,51)" rx="2" ry="2" />
<text  x="193.96" y="479.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (2,666,666 samples, 0.09%)</title><rect x="749.9" y="421" width="1.1" height="15.0" fill="rgb(254,91,5)" rx="2" ry="2" />
<text  x="752.91" y="431.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Update (3,999,999 samples, 0.14%)</title><rect x="218.8" y="469" width="1.6" height="15.0" fill="rgb(226,224,24)" rx="2" ry="2" />
<text  x="221.80" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (2,666,666 samples, 0.09%)</title><rect x="109.0" y="325" width="1.1" height="15.0" fill="rgb(244,214,13)" rx="2" ry="2" />
<text  x="112.05" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="260.0" y="325" width="0.6" height="15.0" fill="rgb(246,84,53)" rx="2" ry="2" />
<text  x="263.03" y="335.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (1,333,333 samples, 0.05%)</title><rect x="1154.7" y="709" width="0.5" height="15.0" fill="rgb(247,172,34)" rx="2" ry="2" />
<text  x="1157.66" y="719.5" ></text>
</g>
<g >
<title>path_openat (1,333,333 samples, 0.05%)</title><rect x="150.3" y="309" width="0.5" height="15.0" fill="rgb(247,70,17)" rx="2" ry="2" />
<text  x="153.27" y="319.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1,333,333 samples, 0.05%)</title><rect x="507.9" y="357" width="0.5" height="15.0" fill="rgb(219,116,48)" rx="2" ry="2" />
<text  x="510.91" y="367.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1,333,333 samples, 0.05%)</title><rect x="158.8" y="197" width="0.6" height="15.0" fill="rgb(216,122,3)" rx="2" ry="2" />
<text  x="161.84" y="207.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt;::_M_initialize_map (1,333,333 samples, 0.05%)</title><rect x="1129.0" y="469" width="0.5" height="15.0" fill="rgb(236,196,44)" rx="2" ry="2" />
<text  x="1131.97" y="479.5" ></text>
</g>
<g >
<title>std::mutex::unlock (3,999,999 samples, 0.14%)</title><rect x="955.5" y="501" width="1.6" height="15.0" fill="rgb(230,21,34)" rx="2" ry="2" />
<text  x="958.50" y="511.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_State_baseV2 (2,666,666 samples, 0.09%)</title><rect x="1177.7" y="725" width="1.1" height="15.0" fill="rgb(240,84,41)" rx="2" ry="2" />
<text  x="1180.69" y="735.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (7,999,998 samples, 0.27%)</title><rect x="496.1" y="373" width="3.2" height="15.0" fill="rgb(252,162,0)" rx="2" ry="2" />
<text  x="499.13" y="383.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (2,666,666 samples, 0.09%)</title><rect x="746.2" y="325" width="1.0" height="15.0" fill="rgb(239,114,2)" rx="2" ry="2" />
<text  x="749.16" y="335.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.05%)</title><rect x="1129.5" y="517" width="0.5" height="15.0" fill="rgb(221,229,54)" rx="2" ry="2" />
<text  x="1132.50" y="527.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_set_result (162,666,626 samples, 5.54%)</title><rect x="964.6" y="501" width="65.3" height="15.0" fill="rgb(250,198,2)" rx="2" ry="2" />
<text  x="967.60" y="511.5" >std::__..</text>
</g>
<g >
<title>__do_softirq (2,666,666 samples, 0.09%)</title><rect x="626.8" y="309" width="1.0" height="15.0" fill="rgb(250,175,3)" rx="2" ry="2" />
<text  x="629.77" y="319.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.05%)</title><rect x="1012.3" y="213" width="0.5" height="15.0" fill="rgb(205,118,19)" rx="2" ry="2" />
<text  x="1015.25" y="223.5" ></text>
</g>
<g >
<title>kmem_cache_free (1,333,333 samples, 0.05%)</title><rect x="321.1" y="277" width="0.5" height="15.0" fill="rgb(210,227,35)" rx="2" ry="2" />
<text  x="324.06" y="287.5" ></text>
</g>
<g >
<title>leveldb::ReadBlock (5,333,332 samples, 0.18%)</title><rect x="209.7" y="405" width="2.1" height="15.0" fill="rgb(206,194,51)" rx="2" ry="2" />
<text  x="212.70" y="415.5" ></text>
</g>
<g >
<title>create_empty_buffers (3,999,999 samples, 0.14%)</title><rect x="839.9" y="245" width="1.6" height="15.0" fill="rgb(254,217,52)" rx="2" ry="2" />
<text  x="842.85" y="255.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,333,333 samples, 0.05%)</title><rect x="452.2" y="437" width="0.6" height="15.0" fill="rgb(225,202,8)" rx="2" ry="2" />
<text  x="455.23" y="447.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2,666,666 samples, 0.09%)</title><rect x="452.8" y="501" width="1.0" height="15.0" fill="rgb(247,205,8)" rx="2" ry="2" />
<text  x="455.77" y="511.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::wait (5,333,332 samples, 0.18%)</title><rect x="1045.4" y="501" width="2.2" height="15.0" fill="rgb(229,219,7)" rx="2" ry="2" />
<text  x="1048.44" y="511.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (5,333,332 samples, 0.18%)</title><rect x="380.0" y="453" width="2.1" height="15.0" fill="rgb(222,80,7)" rx="2" ry="2" />
<text  x="382.95" y="463.5" ></text>
</g>
<g >
<title>__libc_write (315,999,921 samples, 10.75%)</title><rect x="791.1" y="437" width="126.9" height="15.0" fill="rgb(215,182,34)" rx="2" ry="2" />
<text  x="794.13" y="447.5" >__libc_write</text>
</g>
<g >
<title>snappy::internal::WorkingMemory::GetHashTable (2,666,666 samples, 0.09%)</title><rect x="410.5" y="405" width="1.0" height="15.0" fill="rgb(247,133,30)" rx="2" ry="2" />
<text  x="413.47" y="415.5" ></text>
</g>
<g >
<title>iput (5,333,332 samples, 0.18%)</title><rect x="11.1" y="389" width="2.1" height="15.0" fill="rgb(225,95,4)" rx="2" ry="2" />
<text  x="14.07" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1,333,333 samples, 0.05%)</title><rect x="301.3" y="437" width="0.5" height="15.0" fill="rgb(246,176,23)" rx="2" ry="2" />
<text  x="304.25" y="447.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (90,666,644 samples, 3.09%)</title><rect x="652.5" y="357" width="36.4" height="15.0" fill="rgb(247,174,38)" rx="2" ry="2" />
<text  x="655.47" y="367.5" >lev..</text>
</g>
<g >
<title>leveldb::Table::BlockReader (1,333,333 samples, 0.05%)</title><rect x="212.4" y="389" width="0.5" height="15.0" fill="rgb(236,226,51)" rx="2" ry="2" />
<text  x="215.38" y="399.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;char*, unsigned long&gt; (5,333,332 samples, 0.18%)</title><rect x="315.2" y="389" width="2.1" height="15.0" fill="rgb(220,36,39)" rx="2" ry="2" />
<text  x="318.17" y="399.5" ></text>
</g>
<g >
<title>find_busiest_group (1,333,333 samples, 0.05%)</title><rect x="446.3" y="373" width="0.6" height="15.0" fill="rgb(245,41,44)" rx="2" ry="2" />
<text  x="449.34" y="383.5" ></text>
</g>
<g >
<title>__do_sys_madvise (1,333,333 samples, 0.05%)</title><rect x="160.4" y="213" width="0.6" height="15.0" fill="rgb(246,187,16)" rx="2" ry="2" />
<text  x="163.44" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (1,333,333 samples, 0.05%)</title><rect x="377.3" y="325" width="0.5" height="15.0" fill="rgb(234,62,39)" rx="2" ry="2" />
<text  x="380.28" y="335.5" ></text>
</g>
<g >
<title>operator new@plt (1,333,333 samples, 0.05%)</title><rect x="174.9" y="437" width="0.5" height="15.0" fill="rgb(210,158,17)" rx="2" ry="2" />
<text  x="177.90" y="447.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.05%)</title><rect x="312.0" y="357" width="0.5" height="15.0" fill="rgb(211,227,3)" rx="2" ry="2" />
<text  x="314.96" y="367.5" ></text>
</g>
<g >
<title>leveldb::VersionSet::LogAndApply (1,333,333 samples, 0.05%)</title><rect x="1126.8" y="629" width="0.6" height="15.0" fill="rgb(209,65,16)" rx="2" ry="2" />
<text  x="1129.82" y="639.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.05%)</title><rect x="339.8" y="485" width="0.5" height="15.0" fill="rgb(254,84,30)" rx="2" ry="2" />
<text  x="342.80" y="495.5" ></text>
</g>
<g >
<title>__x64_sys_unlink (11,999,997 samples, 0.41%)</title><rect x="1120.9" y="581" width="4.9" height="15.0" fill="rgb(230,19,0)" rx="2" ry="2" />
<text  x="1123.93" y="591.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.05%)</title><rect x="1139.1" y="709" width="0.6" height="15.0" fill="rgb(229,176,22)" rx="2" ry="2" />
<text  x="1142.14" y="719.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (3,999,999 samples, 0.14%)</title><rect x="376.7" y="357" width="1.6" height="15.0" fill="rgb(214,140,22)" rx="2" ry="2" />
<text  x="379.74" y="367.5" ></text>
</g>
<g >
<title>leveldb::MemTable::KeyComparator::operator (405,333,232 samples, 13.79%)</title><rect x="563.1" y="405" width="162.7" height="15.0" fill="rgb(238,214,25)" rx="2" ry="2" />
<text  x="566.06" y="415.5" >leveldb::MemTable::K..</text>
</g>
<g >
<title>leveldb::Slice::remove_prefix (3,999,999 samples, 0.14%)</title><rect x="763.3" y="469" width="1.6" height="15.0" fill="rgb(242,185,11)" rx="2" ry="2" />
<text  x="766.29" y="479.5" ></text>
</g>
<g >
<title>__do_sys_madvise (1,333,333 samples, 0.05%)</title><rect x="194.7" y="229" width="0.5" height="15.0" fill="rgb(227,214,2)" rx="2" ry="2" />
<text  x="197.71" y="239.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (1,333,333 samples, 0.05%)</title><rect x="330.2" y="485" width="0.5" height="15.0" fill="rgb(205,37,34)" rx="2" ry="2" />
<text  x="333.16" y="495.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set (78,666,647 samples, 2.68%)</title><rect x="996.7" y="357" width="31.6" height="15.0" fill="rgb(212,211,30)" rx="2" ry="2" />
<text  x="999.72" y="367.5" >st..</text>
</g>
<g >
<title>leveldb::BlockBuilder::Reset (1,333,333 samples, 0.05%)</title><rect x="281.4" y="405" width="0.6" height="15.0" fill="rgb(240,25,3)" rx="2" ry="2" />
<text  x="284.44" y="415.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::~_Vector_base (1,333,333 samples, 0.05%)</title><rect x="160.4" y="421" width="0.6" height="15.0" fill="rgb(236,211,23)" rx="2" ry="2" />
<text  x="163.44" y="431.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::MergeIntoFreeList (1,333,333 samples, 0.05%)</title><rect x="194.7" y="341" width="0.5" height="15.0" fill="rgb(216,101,40)" rx="2" ry="2" />
<text  x="197.71" y="351.5" ></text>
</g>
<g >
<title>free_page_and_swap_cache (1,333,333 samples, 0.05%)</title><rect x="279.8" y="213" width="0.6" height="15.0" fill="rgb(253,31,49)" rx="2" ry="2" />
<text  x="282.84" y="223.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MergingIterator::Next (59,999,985 samples, 2.04%)</title><rect x="196.3" y="501" width="24.1" height="15.0" fill="rgb(250,221,44)" rx="2" ry="2" />
<text  x="199.32" y="511.5" >l..</text>
</g>
<g >
<title>leveldb::DBImpl::RemoveObsoleteFiles (1,333,333 samples, 0.05%)</title><rect x="1126.3" y="629" width="0.5" height="15.0" fill="rgb(246,155,13)" rx="2" ry="2" />
<text  x="1129.29" y="639.5" ></text>
</g>
<g >
<title>std::move&lt;char const*&amp;&gt; (1,333,333 samples, 0.05%)</title><rect x="778.8" y="469" width="0.6" height="15.0" fill="rgb(254,22,33)" rx="2" ry="2" />
<text  x="781.82" y="479.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (5,333,332 samples, 0.18%)</title><rect x="362.8" y="485" width="2.2" height="15.0" fill="rgb(235,36,40)" rx="2" ry="2" />
<text  x="365.82" y="495.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.05%)</title><rect x="161.0" y="341" width="0.5" height="15.0" fill="rgb(242,192,1)" rx="2" ry="2" />
<text  x="163.98" y="351.5" ></text>
</g>
<g >
<title>leveldb::Arena::Allocate (9,333,331 samples, 0.32%)</title><rect x="495.6" y="453" width="3.7" height="15.0" fill="rgb(208,87,35)" rx="2" ry="2" />
<text  x="498.60" y="463.5" ></text>
</g>
<g >
<title>unmap_region (1,333,333 samples, 0.05%)</title><rect x="421.7" y="277" width="0.6" height="15.0" fill="rgb(214,7,0)" rx="2" ry="2" />
<text  x="424.72" y="287.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::Reset (1,333,333 samples, 0.05%)</title><rect x="114.9" y="421" width="0.6" height="15.0" fill="rgb(238,174,16)" rx="2" ry="2" />
<text  x="117.94" y="431.5" ></text>
</g>
<g >
<title>std::__fill_a&lt;char&gt; (23,999,994 samples, 0.82%)</title><rect x="150.8" y="325" width="9.6" height="15.0" fill="rgb(251,69,21)" rx="2" ry="2" />
<text  x="153.81" y="335.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (3,999,999 samples, 0.14%)</title><rect x="299.1" y="309" width="1.6" height="15.0" fill="rgb(220,53,1)" rx="2" ry="2" />
<text  x="302.11" y="319.5" ></text>
</g>
<g >
<title>leveldb::PutVarint32 (7,999,998 samples, 0.27%)</title><rect x="36.8" y="437" width="3.2" height="15.0" fill="rgb(205,21,52)" rx="2" ry="2" />
<text  x="39.77" y="447.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="400.3" y="341" width="0.5" height="15.0" fill="rgb(226,130,40)" rx="2" ry="2" />
<text  x="403.30" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.05%)</title><rect x="421.7" y="357" width="0.6" height="15.0" fill="rgb(254,128,11)" rx="2" ry="2" />
<text  x="424.72" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (6,666,665 samples, 0.23%)</title><rect x="86.6" y="373" width="2.6" height="15.0" fill="rgb(211,199,18)" rx="2" ry="2" />
<text  x="89.56" y="383.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.05%)</title><rect x="313.6" y="453" width="0.5" height="15.0" fill="rgb(213,93,20)" rx="2" ry="2" />
<text  x="316.57" y="463.5" ></text>
</g>
<g >
<title>__sb_start_write (3,999,999 samples, 0.14%)</title><rect x="805.1" y="341" width="1.6" height="15.0" fill="rgb(240,33,16)" rx="2" ry="2" />
<text  x="808.05" y="351.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (25,333,327 samples, 0.86%)</title><rect x="390.7" y="421" width="10.1" height="15.0" fill="rgb(238,49,24)" rx="2" ry="2" />
<text  x="393.66" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (2,666,666 samples, 0.09%)</title><rect x="323.7" y="389" width="1.1" height="15.0" fill="rgb(205,130,27)" rx="2" ry="2" />
<text  x="326.74" y="399.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="192.6" y="421" width="0.5" height="15.0" fill="rgb(209,57,24)" rx="2" ry="2" />
<text  x="195.57" y="431.5" ></text>
</g>
<g >
<title>leveldb::Block::Iter::Next (6,666,665 samples, 0.23%)</title><rect x="214.5" y="437" width="2.7" height="15.0" fill="rgb(226,226,1)" rx="2" ry="2" />
<text  x="217.52" y="447.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::value (2,666,666 samples, 0.09%)</title><rect x="222.0" y="469" width="1.1" height="15.0" fill="rgb(233,79,54)" rx="2" ry="2" />
<text  x="225.01" y="479.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.05%)</title><rect x="421.2" y="309" width="0.5" height="15.0" fill="rgb(212,21,34)" rx="2" ry="2" />
<text  x="424.18" y="319.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::Sequence (3,999,999 samples, 0.14%)</title><rect x="770.8" y="501" width="1.6" height="15.0" fill="rgb(206,196,9)" rx="2" ry="2" />
<text  x="773.79" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (2,666,666 samples, 0.09%)</title><rect x="1175.5" y="725" width="1.1" height="15.0" fill="rgb(233,145,47)" rx="2" ry="2" />
<text  x="1178.54" y="735.5" ></text>
</g>
<g >
<title>snappy::Compress (26,666,660 samples, 0.91%)</title><rect x="400.8" y="421" width="10.7" height="15.0" fill="rgb(248,35,47)" rx="2" ry="2" />
<text  x="403.83" y="431.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (6,666,665 samples, 0.23%)</title><rect x="58.7" y="421" width="2.7" height="15.0" fill="rgb(241,71,24)" rx="2" ry="2" />
<text  x="61.72" y="431.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, 0ul&gt; (1,333,333 samples, 0.05%)</title><rect x="97.3" y="325" width="0.5" height="15.0" fill="rgb(228,208,27)" rx="2" ry="2" />
<text  x="100.27" y="335.5" ></text>
</g>
<g >
<title>do_page_fault (2,666,666 samples, 0.09%)</title><rect x="452.8" y="469" width="1.0" height="15.0" fill="rgb(221,37,29)" rx="2" ry="2" />
<text  x="455.77" y="479.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.05%)</title><rect x="390.1" y="437" width="0.6" height="15.0" fill="rgb(235,176,41)" rx="2" ry="2" />
<text  x="393.13" y="447.5" ></text>
</g>
<g >
<title>rw_verify_area (5,333,332 samples, 0.18%)</title><rect x="914.8" y="341" width="2.2" height="15.0" fill="rgb(250,161,37)" rx="2" ry="2" />
<text  x="917.81" y="351.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (2,666,666 samples, 0.09%)</title><rect x="363.9" y="453" width="1.1" height="15.0" fill="rgb(233,165,15)" rx="2" ry="2" />
<text  x="366.89" y="463.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,333,333 samples, 0.05%)</title><rect x="385.8" y="357" width="0.6" height="15.0" fill="rgb(229,22,36)" rx="2" ry="2" />
<text  x="388.84" y="367.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed64 (2,666,666 samples, 0.09%)</title><rect x="771.3" y="485" width="1.1" height="15.0" fill="rgb(238,41,53)" rx="2" ry="2" />
<text  x="774.32" y="495.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::LRUCache::FinishErase (1,333,333 samples, 0.05%)</title><rect x="421.7" y="453" width="0.6" height="15.0" fill="rgb(224,97,0)" rx="2" ry="2" />
<text  x="424.72" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (1,333,333 samples, 0.05%)</title><rect x="378.9" y="405" width="0.5" height="15.0" fill="rgb(224,10,28)" rx="2" ry="2" />
<text  x="381.88" y="415.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Rep::Rep (5,333,332 samples, 0.18%)</title><rect x="315.2" y="469" width="2.1" height="15.0" fill="rgb(246,196,41)" rx="2" ry="2" />
<text  x="318.17" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="374.1" y="389" width="0.5" height="15.0" fill="rgb(205,138,6)" rx="2" ry="2" />
<text  x="377.07" y="399.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.05%)</title><rect x="78.0" y="293" width="0.5" height="15.0" fill="rgb(222,70,47)" rx="2" ry="2" />
<text  x="80.99" y="303.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.05%)</title><rect x="264.8" y="277" width="0.6" height="15.0" fill="rgb(246,168,33)" rx="2" ry="2" />
<text  x="267.85" y="287.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="446.3" y="469" width="0.6" height="15.0" fill="rgb(218,168,26)" rx="2" ry="2" />
<text  x="449.34" y="479.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::~allocator (1,333,333 samples, 0.05%)</title><rect x="175.4" y="453" width="0.6" height="15.0" fill="rgb(215,25,51)" rx="2" ry="2" />
<text  x="178.44" y="463.5" ></text>
</g>
<g >
<title>ext4_reserve_inode_write (15,999,996 samples, 0.54%)</title><rect x="887.5" y="197" width="6.4" height="15.0" fill="rgb(230,118,5)" rx="2" ry="2" />
<text  x="890.50" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;leveldb::ParsedInternalKey*, std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt; &gt;::operator++ (1,333,333 samples, 0.05%)</title><rect x="58.2" y="437" width="0.5" height="15.0" fill="rgb(245,79,45)" rx="2" ry="2" />
<text  x="61.19" y="447.5" ></text>
</g>
<g >
<title>leveldb::port::Mutex::Lock (2,666,666 samples, 0.09%)</title><rect x="475.8" y="501" width="1.1" height="15.0" fill="rgb(221,46,39)" rx="2" ry="2" />
<text  x="478.79" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.05%)</title><rect x="108.5" y="325" width="0.5" height="15.0" fill="rgb(212,211,30)" rx="2" ry="2" />
<text  x="111.51" y="335.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::InsertInto (713,333,155 samples, 24.27%)</title><rect x="486.0" y="517" width="286.4" height="15.0" fill="rgb(239,208,34)" rx="2" ry="2" />
<text  x="488.96" y="527.5" >leveldb::WriteBatchInternal::InsertInto</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (3,999,999 samples, 0.14%)</title><rect x="1101.7" y="501" width="1.6" height="15.0" fill="rgb(208,208,30)" rx="2" ry="2" />
<text  x="1104.66" y="511.5" ></text>
</g>
<g >
<title>handle_mm_fault (3,999,999 samples, 0.14%)</title><rect x="294.8" y="229" width="1.6" height="15.0" fill="rgb(205,50,40)" rx="2" ry="2" />
<text  x="297.83" y="239.5" ></text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.05%)</title><rect x="330.7" y="453" width="0.5" height="15.0" fill="rgb(225,210,30)" rx="2" ry="2" />
<text  x="333.70" y="463.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="417.4" y="469" width="0.6" height="15.0" fill="rgb(237,37,17)" rx="2" ry="2" />
<text  x="420.43" y="479.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.05%)</title><rect x="230.6" y="453" width="0.5" height="15.0" fill="rgb(212,115,42)" rx="2" ry="2" />
<text  x="233.58" y="463.5" ></text>
</g>
<g >
<title>generic_update_time (22,666,661 samples, 0.77%)</title><rect x="817.9" y="277" width="9.1" height="15.0" fill="rgb(224,94,8)" rx="2" ry="2" />
<text  x="820.90" y="287.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::NoBarrier_SetNext (2,666,666 samples, 0.09%)</title><rect x="1151.5" y="725" width="1.0" height="15.0" fill="rgb(223,218,35)" rx="2" ry="2" />
<text  x="1154.45" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (9,333,331 samples, 0.32%)</title><rect x="107.4" y="373" width="3.8" height="15.0" fill="rgb(219,121,2)" rx="2" ry="2" />
<text  x="110.44" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;char*, unsigned long&gt; (5,333,332 samples, 0.18%)</title><rect x="294.3" y="373" width="2.1" height="15.0" fill="rgb(210,70,3)" rx="2" ry="2" />
<text  x="297.29" y="383.5" ></text>
</g>
<g >
<title>evict (1,333,333 samples, 0.05%)</title><rect x="421.2" y="389" width="0.5" height="15.0" fill="rgb(217,186,28)" rx="2" ry="2" />
<text  x="424.18" y="399.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::key (11,999,997 samples, 0.41%)</title><rect x="307.7" y="469" width="4.8" height="15.0" fill="rgb(216,109,54)" rx="2" ry="2" />
<text  x="310.68" y="479.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (17,333,329 samples, 0.59%)</title><rect x="121.9" y="373" width="7.0" height="15.0" fill="rgb(211,137,8)" rx="2" ry="2" />
<text  x="124.90" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::push_back (1,333,333 samples, 0.05%)</title><rect x="114.9" y="405" width="0.6" height="15.0" fill="rgb(218,29,7)" rx="2" ry="2" />
<text  x="117.94" y="415.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="44.8" y="373" width="0.5" height="15.0" fill="rgb(245,4,54)" rx="2" ry="2" />
<text  x="47.80" y="383.5" ></text>
</g>
<g >
<title>SbrkSysAllocator::Alloc (1,333,333 samples, 0.05%)</title><rect x="144.4" y="293" width="0.5" height="15.0" fill="rgb(218,198,11)" rx="2" ry="2" />
<text  x="147.38" y="303.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::Valid (1,333,333 samples, 0.05%)</title><rect x="307.1" y="469" width="0.6" height="15.0" fill="rgb(225,95,33)" rx="2" ry="2" />
<text  x="310.14" y="479.5" ></text>
</g>
<g >
<title>common_file_perm (5,333,332 samples, 0.18%)</title><rect x="914.8" y="293" width="2.2" height="15.0" fill="rgb(253,96,0)" rx="2" ry="2" />
<text  x="917.81" y="303.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::__future_base::_Result_base::_Deleter&gt;::_M_head (3,999,999 samples, 0.14%)</title><rect x="1020.8" y="261" width="1.6" height="15.0" fill="rgb(247,161,29)" rx="2" ry="2" />
<text  x="1023.82" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (10,666,664 samples, 0.36%)</title><rect x="177.6" y="405" width="4.3" height="15.0" fill="rgb(232,24,44)" rx="2" ry="2" />
<text  x="180.58" y="415.5" ></text>
</g>
<g >
<title>mark_buffer_dirty (1,333,333 samples, 0.05%)</title><rect x="899.8" y="229" width="0.6" height="15.0" fill="rgb(219,48,22)" rx="2" ry="2" />
<text  x="902.82" y="239.5" ></text>
</g>
<g >
<title>leveldb::EncodeVarint32 (2,666,666 samples, 0.09%)</title><rect x="347.3" y="453" width="1.1" height="15.0" fill="rgb(243,203,30)" rx="2" ry="2" />
<text  x="350.30" y="463.5" ></text>
</g>
<g >
<title>__getdents (1,333,333 samples, 0.05%)</title><rect x="10.5" y="453" width="0.6" height="15.0" fill="rgb(234,63,24)" rx="2" ry="2" />
<text  x="13.54" y="463.5" ></text>
</g>
<g >
<title>security_cred_free (1,333,333 samples, 0.05%)</title><rect x="230.6" y="341" width="0.5" height="15.0" fill="rgb(233,69,26)" rx="2" ry="2" />
<text  x="233.58" y="351.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.05%)</title><rect x="396.0" y="341" width="0.6" height="15.0" fill="rgb(247,53,22)" rx="2" ry="2" />
<text  x="399.02" y="351.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (6,666,665 samples, 0.23%)</title><rect x="309.8" y="437" width="2.7" height="15.0" fill="rgb(212,84,18)" rx="2" ry="2" />
<text  x="312.82" y="447.5" ></text>
</g>
<g >
<title>ext4_block_write_begin (9,333,331 samples, 0.32%)</title><rect x="838.8" y="261" width="3.7" height="15.0" fill="rgb(219,108,12)" rx="2" ry="2" />
<text  x="841.78" y="271.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed64 (1,333,333 samples, 0.05%)</title><rect x="203.3" y="453" width="0.5" height="15.0" fill="rgb(240,127,53)" rx="2" ry="2" />
<text  x="206.28" y="463.5" ></text>
</g>
<g >
<title>file_free_rcu (1,333,333 samples, 0.05%)</title><rect x="400.3" y="293" width="0.5" height="15.0" fill="rgb(244,165,11)" rx="2" ry="2" />
<text  x="403.30" y="303.5" ></text>
</g>
<g >
<title>do_filp_open (1,333,333 samples, 0.05%)</title><rect x="468.3" y="405" width="0.5" height="15.0" fill="rgb(225,105,8)" rx="2" ry="2" />
<text  x="471.29" y="415.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Rep::Rep (23,999,994 samples, 0.82%)</title><rect x="150.8" y="453" width="9.6" height="15.0" fill="rgb(249,78,37)" rx="2" ry="2" />
<text  x="153.81" y="463.5" ></text>
</g>
<g >
<title>_pthread_cleanup_pop (2,666,666 samples, 0.09%)</title><rect x="971.6" y="437" width="1.0" height="15.0" fill="rgb(229,229,12)" rx="2" ry="2" />
<text  x="974.56" y="447.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (3,999,999 samples, 0.14%)</title><rect x="1080.2" y="517" width="1.7" height="15.0" fill="rgb(222,111,4)" rx="2" ry="2" />
<text  x="1083.25" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (2,666,666 samples, 0.09%)</title><rect x="323.7" y="373" width="1.1" height="15.0" fill="rgb(237,182,48)" rx="2" ry="2" />
<text  x="326.74" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (3,999,999 samples, 0.14%)</title><rect x="64.1" y="357" width="1.6" height="15.0" fill="rgb(246,41,0)" rx="2" ry="2" />
<text  x="67.07" y="367.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::~shared_ptr (47,999,988 samples, 1.63%)</title><rect x="1081.9" y="517" width="19.2" height="15.0" fill="rgb(223,10,3)" rx="2" ry="2" />
<text  x="1084.85" y="527.5" ></text>
</g>
<g >
<title>do_syscall_64 (298,666,592 samples, 10.16%)</title><rect x="798.1" y="405" width="119.9" height="15.0" fill="rgb(225,94,37)" rx="2" ry="2" />
<text  x="801.09" y="415.5" >do_syscall_64</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::construct&lt;leveldb::ParsedInternalKey, leveldb::ParsedInternalKey const&amp;&gt; (1,333,333 samples, 0.05%)</title><rect x="148.7" y="437" width="0.5" height="15.0" fill="rgb(214,104,6)" rx="2" ry="2" />
<text  x="151.67" y="447.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="358.5" y="405" width="0.6" height="15.0" fill="rgb(247,46,43)" rx="2" ry="2" />
<text  x="361.54" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (3,999,999 samples, 0.14%)</title><rect x="303.9" y="389" width="1.6" height="15.0" fill="rgb(225,228,42)" rx="2" ry="2" />
<text  x="306.93" y="399.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (2,666,666 samples, 0.09%)</title><rect x="110.1" y="309" width="1.1" height="15.0" fill="rgb(229,29,44)" rx="2" ry="2" />
<text  x="113.12" y="319.5" ></text>
</g>
<g >
<title>do_page_fault (2,666,666 samples, 0.09%)</title><rect x="74.2" y="341" width="1.1" height="15.0" fill="rgb(206,226,0)" rx="2" ry="2" />
<text  x="77.25" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (11,999,997 samples, 0.41%)</title><rect x="95.7" y="373" width="4.8" height="15.0" fill="rgb(208,189,31)" rx="2" ry="2" />
<text  x="98.66" y="383.5" ></text>
</g>
<g >
<title>leveldb::WriteBatch::Clear (6,666,665 samples, 0.23%)</title><rect x="1105.9" y="549" width="2.7" height="15.0" fill="rgb(243,13,36)" rx="2" ry="2" />
<text  x="1108.94" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (2,666,666 samples, 0.09%)</title><rect x="89.2" y="389" width="1.1" height="15.0" fill="rgb(243,157,31)" rx="2" ry="2" />
<text  x="92.24" y="399.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Equal (1,333,333 samples, 0.05%)</title><rect x="1148.8" y="709" width="0.5" height="15.0" fill="rgb(221,111,23)" rx="2" ry="2" />
<text  x="1151.77" y="719.5" ></text>
</g>
<g >
<title>copyin (1,333,333 samples, 0.05%)</title><rect x="906.8" y="261" width="0.5" height="15.0" fill="rgb(244,73,7)" rx="2" ry="2" />
<text  x="909.78" y="271.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1,333,333 samples, 0.05%)</title><rect x="1149.3" y="709" width="0.5" height="15.0" fill="rgb(241,97,32)" rx="2" ry="2" />
<text  x="1152.31" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (2,666,666 samples, 0.09%)</title><rect x="1091.0" y="405" width="1.0" height="15.0" fill="rgb(232,96,45)" rx="2" ry="2" />
<text  x="1093.95" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.05%)</title><rect x="468.3" y="453" width="0.5" height="15.0" fill="rgb(250,121,34)" rx="2" ry="2" />
<text  x="471.29" y="463.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (15,999,996 samples, 0.54%)</title><rect x="948.5" y="453" width="6.5" height="15.0" fill="rgb(220,218,36)" rx="2" ry="2" />
<text  x="951.54" y="463.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1,333,333 samples, 0.05%)</title><rect x="110.7" y="277" width="0.5" height="15.0" fill="rgb(234,213,50)" rx="2" ry="2" />
<text  x="113.65" y="287.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (26,666,660 samples, 0.91%)</title><rect x="379.4" y="469" width="10.7" height="15.0" fill="rgb(233,29,26)" rx="2" ry="2" />
<text  x="382.42" y="479.5" ></text>
</g>
<g >
<title>truncate_inode_pages_range (5,333,332 samples, 0.18%)</title><rect x="11.1" y="325" width="2.1" height="15.0" fill="rgb(208,89,18)" rx="2" ry="2" />
<text  x="14.07" y="335.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed64 (1,333,333 samples, 0.05%)</title><rect x="339.3" y="485" width="0.5" height="15.0" fill="rgb(218,34,47)" rx="2" ry="2" />
<text  x="342.26" y="495.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.05%)</title><rect x="254.1" y="405" width="0.6" height="15.0" fill="rgb(226,123,17)" rx="2" ry="2" />
<text  x="257.14" y="415.5" ></text>
</g>
<g >
<title>__ext4_handle_dirty_metadata (1,333,333 samples, 0.05%)</title><rect x="822.2" y="197" width="0.5" height="15.0" fill="rgb(247,37,26)" rx="2" ry="2" />
<text  x="825.19" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_eq (1,333,333 samples, 0.05%)</title><rect x="386.9" y="373" width="0.6" height="15.0" fill="rgb(250,170,26)" rx="2" ry="2" />
<text  x="389.91" y="383.5" ></text>
</g>
<g >
<title>__unlink (3,999,999 samples, 0.14%)</title><rect x="231.1" y="453" width="1.6" height="15.0" fill="rgb(214,221,38)" rx="2" ry="2" />
<text  x="234.12" y="463.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="497.2" y="165" width="0.5" height="15.0" fill="rgb(235,68,47)" rx="2" ry="2" />
<text  x="500.21" y="175.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::DoCompactionWork (562,666,526 samples, 19.15%)</title><rect x="195.2" y="517" width="226.0" height="15.0" fill="rgb(233,140,35)" rx="2" ry="2" />
<text  x="198.25" y="527.5" >leveldb::DBImpl::DoCompaction..</text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::shared_ptr&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt;&gt; (46,666,655 samples, 1.59%)</title><rect x="1058.8" y="485" width="18.8" height="15.0" fill="rgb(221,190,20)" rx="2" ry="2" />
<text  x="1061.83" y="495.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.05%)</title><rect x="1127.4" y="517" width="0.5" height="15.0" fill="rgb(230,168,10)" rx="2" ry="2" />
<text  x="1130.36" y="527.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (15,999,996 samples, 0.54%)</title><rect x="105.3" y="421" width="6.4" height="15.0" fill="rgb(229,167,54)" rx="2" ry="2" />
<text  x="108.30" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; (1,333,333 samples, 0.05%)</title><rect x="109.6" y="309" width="0.5" height="15.0" fill="rgb(207,62,34)" rx="2" ry="2" />
<text  x="112.58" y="319.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="355.9" y="453" width="0.5" height="15.0" fill="rgb(248,9,9)" rx="2" ry="2" />
<text  x="358.86" y="463.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, false&gt;::_Head_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,333,333 samples, 0.05%)</title><rect x="101.0" y="341" width="0.6" height="15.0" fill="rgb(230,202,14)" rx="2" ry="2" />
<text  x="104.02" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1,333,333 samples, 0.05%)</title><rect x="173.3" y="437" width="0.5" height="15.0" fill="rgb(245,103,49)" rx="2" ry="2" />
<text  x="176.29" y="447.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1,333,333 samples, 0.05%)</title><rect x="50.7" y="437" width="0.5" height="15.0" fill="rgb(206,77,28)" rx="2" ry="2" />
<text  x="53.69" y="447.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Valid (2,666,666 samples, 0.09%)</title><rect x="188.3" y="469" width="1.1" height="15.0" fill="rgb(232,85,1)" rx="2" ry="2" />
<text  x="191.28" y="479.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.05%)</title><rect x="346.2" y="437" width="0.6" height="15.0" fill="rgb(205,137,1)" rx="2" ry="2" />
<text  x="349.23" y="447.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1,333,333 samples, 0.05%)</title><rect x="328.6" y="405" width="0.5" height="15.0" fill="rgb(247,205,5)" rx="2" ry="2" />
<text  x="331.56" y="415.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (27,999,993 samples, 0.95%)</title><rect x="318.9" y="485" width="11.3" height="15.0" fill="rgb(238,208,38)" rx="2" ry="2" />
<text  x="321.92" y="495.5" ></text>
</g>
<g >
<title>leveldb::WriteBatch::Clear (1,333,333 samples, 0.05%)</title><rect x="1154.1" y="725" width="0.6" height="15.0" fill="rgb(228,119,42)" rx="2" ry="2" />
<text  x="1157.13" y="735.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="999.4" y="277" width="0.5" height="15.0" fill="rgb(254,209,27)" rx="2" ry="2" />
<text  x="1002.40" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (15,999,996 samples, 0.54%)</title><rect x="262.2" y="341" width="6.4" height="15.0" fill="rgb(233,49,15)" rx="2" ry="2" />
<text  x="265.17" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.05%)</title><rect x="421.2" y="453" width="0.5" height="15.0" fill="rgb(228,104,48)" rx="2" ry="2" />
<text  x="424.18" y="463.5" ></text>
</g>
<g >
<title>fput (1,333,333 samples, 0.05%)</title><rect x="798.6" y="373" width="0.6" height="15.0" fill="rgb(254,185,28)" rx="2" ry="2" />
<text  x="801.63" y="383.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;leveldb::Status&gt;::_Result (1,333,333 samples, 0.05%)</title><rect x="1057.8" y="517" width="0.5" height="15.0" fill="rgb(223,69,18)" rx="2" ry="2" />
<text  x="1060.76" y="527.5" ></text>
</g>
<g >
<title>__ext4_journal_start_sb (23,999,994 samples, 0.82%)</title><rect x="829.1" y="261" width="9.7" height="15.0" fill="rgb(227,22,51)" rx="2" ry="2" />
<text  x="832.15" y="271.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::~promise (58,666,652 samples, 2.00%)</title><rect x="1079.7" y="533" width="23.6" height="15.0" fill="rgb(249,153,43)" rx="2" ry="2" />
<text  x="1082.71" y="543.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (2,666,666 samples, 0.09%)</title><rect x="415.8" y="485" width="1.1" height="15.0" fill="rgb(243,41,38)" rx="2" ry="2" />
<text  x="418.83" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (5,333,332 samples, 0.18%)</title><rect x="382.1" y="421" width="2.1" height="15.0" fill="rgb(246,81,50)" rx="2" ry="2" />
<text  x="385.10" y="431.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::swap (18,666,662 samples, 0.64%)</title><rect x="1019.7" y="325" width="7.5" height="15.0" fill="rgb(242,200,37)" rx="2" ry="2" />
<text  x="1022.75" y="335.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::ThreadBody (1,731,999,567 samples, 58.94%)</title><rect x="422.3" y="597" width="695.4" height="15.0" fill="rgb(254,173,15)" rx="2" ry="2" />
<text  x="425.25" y="607.5" >leveldb::Benchmark::ThreadBody</text>
</g>
<g >
<title>snappy::RawCompress (1,333,333 samples, 0.05%)</title><rect x="149.7" y="421" width="0.6" height="15.0" fill="rgb(247,71,6)" rx="2" ry="2" />
<text  x="152.74" y="431.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::promise (57,333,319 samples, 1.95%)</title><rect x="1056.7" y="533" width="23.0" height="15.0" fill="rgb(248,163,25)" rx="2" ry="2" />
<text  x="1059.69" y="543.5" >s..</text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (5,333,332 samples, 0.18%)</title><rect x="1167.0" y="725" width="2.1" height="15.0" fill="rgb(247,197,39)" rx="2" ry="2" />
<text  x="1169.98" y="735.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="212.4" y="325" width="0.5" height="15.0" fill="rgb(239,49,33)" rx="2" ry="2" />
<text  x="215.38" y="335.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (22,666,661 samples, 0.77%)</title><rect x="209.7" y="469" width="9.1" height="15.0" fill="rgb(237,106,40)" rx="2" ry="2" />
<text  x="212.70" y="479.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (2,666,666 samples, 0.09%)</title><rect x="253.1" y="405" width="1.0" height="15.0" fill="rgb(206,216,11)" rx="2" ry="2" />
<text  x="256.07" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.05%)</title><rect x="1126.3" y="549" width="0.5" height="15.0" fill="rgb(247,146,42)" rx="2" ry="2" />
<text  x="1129.29" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;leveldb::ParsedInternalKey&gt;::construct&lt;leveldb::ParsedInternalKey, leveldb::ParsedInternalKey const&amp;&gt; (1,333,333 samples, 0.05%)</title><rect x="420.6" y="469" width="0.6" height="15.0" fill="rgb(220,14,27)" rx="2" ry="2" />
<text  x="423.64" y="479.5" ></text>
</g>
<g >
<title>crypto_shash_update (11,999,997 samples, 0.41%)</title><rect x="882.2" y="149" width="4.8" height="15.0" fill="rgb(253,219,14)" rx="2" ry="2" />
<text  x="885.15" y="159.5" ></text>
</g>
<g >
<title>do_lookup_x (1,333,333 samples, 0.05%)</title><rect x="1130.6" y="581" width="0.5" height="15.0" fill="rgb(252,93,43)" rx="2" ry="2" />
<text  x="1133.57" y="591.5" ></text>
</g>
<g >
<title>kmem_cache_free (1,333,333 samples, 0.05%)</title><rect x="1125.2" y="325" width="0.6" height="15.0" fill="rgb(236,130,46)" rx="2" ry="2" />
<text  x="1128.22" y="335.5" ></text>
</g>
<g >
<title>ext4_releasepage (6,666,665 samples, 0.23%)</title><rect x="1123.1" y="389" width="2.7" height="15.0" fill="rgb(254,62,53)" rx="2" ry="2" />
<text  x="1126.08" y="399.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::Next (2,666,666 samples, 0.09%)</title><rect x="233.8" y="453" width="1.1" height="15.0" fill="rgb(229,37,14)" rx="2" ry="2" />
<text  x="236.79" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (5,333,332 samples, 0.18%)</title><rect x="1087.7" y="437" width="2.2" height="15.0" fill="rgb(232,172,39)" rx="2" ry="2" />
<text  x="1090.74" y="447.5" ></text>
</g>
<g >
<title>ext4_da_invalidatepage (3,999,999 samples, 0.14%)</title><rect x="231.1" y="277" width="1.6" height="15.0" fill="rgb(231,14,46)" rx="2" ry="2" />
<text  x="234.12" y="287.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.05%)</title><rect x="284.1" y="293" width="0.6" height="15.0" fill="rgb(252,69,28)" rx="2" ry="2" />
<text  x="287.12" y="303.5" ></text>
</g>
<g >
<title>__handle_mm_fault (2,666,666 samples, 0.09%)</title><rect x="294.8" y="213" width="1.1" height="15.0" fill="rgb(248,42,35)" rx="2" ry="2" />
<text  x="297.83" y="223.5" ></text>
</g>
<g >
<title>block_invalidatepage (6,666,665 samples, 0.23%)</title><rect x="1123.1" y="421" width="2.7" height="15.0" fill="rgb(232,36,40)" rx="2" ry="2" />
<text  x="1126.08" y="431.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (1,333,333 samples, 0.05%)</title><rect x="50.7" y="421" width="0.5" height="15.0" fill="rgb(213,168,46)" rx="2" ry="2" />
<text  x="53.69" y="431.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BackgroundCall (1,025,333,077 samples, 34.89%)</title><rect x="10.5" y="549" width="411.8" height="15.0" fill="rgb(251,51,13)" rx="2" ry="2" />
<text  x="13.54" y="559.5" >leveldb::DBImpl::BackgroundCall</text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="703.9" y="341" width="0.5" height="15.0" fill="rgb(211,29,5)" rx="2" ry="2" />
<text  x="706.87" y="351.5" ></text>
</g>
<g >
<title>leveldb::Random::Next (1,333,333 samples, 0.05%)</title><rect x="451.2" y="485" width="0.5" height="15.0" fill="rgb(251,95,51)" rx="2" ry="2" />
<text  x="454.16" y="495.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::OpenCompactionOutputFile (5,333,332 samples, 0.18%)</title><rect x="315.2" y="501" width="2.1" height="15.0" fill="rgb(254,53,17)" rx="2" ry="2" />
<text  x="318.17" y="511.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (86,666,645 samples, 2.95%)</title><rect x="859.7" y="245" width="34.8" height="15.0" fill="rgb(211,162,7)" rx="2" ry="2" />
<text  x="862.66" y="255.5" >__..</text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_default_append (5,333,332 samples, 0.18%)</title><rect x="294.3" y="405" width="2.1" height="15.0" fill="rgb(239,203,20)" rx="2" ry="2" />
<text  x="297.29" y="415.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (3,999,999 samples, 0.14%)</title><rect x="227.9" y="453" width="1.6" height="15.0" fill="rgb(250,131,1)" rx="2" ry="2" />
<text  x="230.90" y="463.5" ></text>
</g>
<g >
<title>open_path (1,333,333 samples, 0.05%)</title><rect x="1129.5" y="581" width="0.5" height="15.0" fill="rgb(219,138,15)" rx="2" ry="2" />
<text  x="1132.50" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (13,333,330 samples, 0.45%)</title><rect x="373.0" y="405" width="5.3" height="15.0" fill="rgb(208,161,16)" rx="2" ry="2" />
<text  x="375.99" y="415.5" ></text>
</g>
<g >
<title>__unlink (5,333,332 samples, 0.18%)</title><rect x="11.1" y="469" width="2.1" height="15.0" fill="rgb(248,208,7)" rx="2" ry="2" />
<text  x="14.07" y="479.5" ></text>
</g>
<g >
<title>_dl_start (3,999,999 samples, 0.14%)</title><rect x="1129.5" y="709" width="1.6" height="15.0" fill="rgb(237,57,6)" rx="2" ry="2" />
<text  x="1132.50" y="719.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (2,757,332,644 samples, 93.83%)</title><rect x="10.5" y="661" width="1107.2" height="15.0" fill="rgb(206,34,26)" rx="2" ry="2" />
<text  x="13.54" y="671.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::promise (1,333,333 samples, 0.05%)</title><rect x="1185.2" y="725" width="0.5" height="15.0" fill="rgb(253,115,3)" rx="2" ry="2" />
<text  x="1188.18" y="735.5" ></text>
</g>
<g >
<title>leveldb::EncodeFixed64 (3,999,999 samples, 0.14%)</title><rect x="499.3" y="453" width="1.7" height="15.0" fill="rgb(229,227,19)" rx="2" ry="2" />
<text  x="502.35" y="463.5" ></text>
</g>
<g >
<title>leveldb::Log (1,333,333 samples, 0.05%)</title><rect x="161.0" y="485" width="0.5" height="15.0" fill="rgb(251,167,40)" rx="2" ry="2" />
<text  x="163.98" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (6,666,665 samples, 0.23%)</title><rect x="1111.8" y="517" width="2.7" height="15.0" fill="rgb(233,99,42)" rx="2" ry="2" />
<text  x="1114.83" y="527.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2,666,666 samples, 0.09%)</title><rect x="172.2" y="325" width="1.1" height="15.0" fill="rgb(243,28,14)" rx="2" ry="2" />
<text  x="175.22" y="335.5" ></text>
</g>
<g >
<title>should_failslab (1,333,333 samples, 0.05%)</title><rect x="835.0" y="213" width="0.6" height="15.0" fill="rgb(207,193,16)" rx="2" ry="2" />
<text  x="838.04" y="223.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (2,666,666 samples, 0.09%)</title><rect x="1017.6" y="277" width="1.1" height="15.0" fill="rgb(222,124,49)" rx="2" ry="2" />
<text  x="1020.60" y="287.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (22,666,661 samples, 0.77%)</title><rect x="176.0" y="469" width="9.1" height="15.0" fill="rgb(242,23,31)" rx="2" ry="2" />
<text  x="178.97" y="479.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_S_check&lt;std::__future_base::_State_baseV2&gt; (1,333,333 samples, 0.05%)</title><rect x="1044.9" y="501" width="0.5" height="15.0" fill="rgb(226,62,5)" rx="2" ry="2" />
<text  x="1047.91" y="511.5" ></text>
</g>
<g >
<title>snappy::RawCompress (26,666,660 samples, 0.91%)</title><rect x="400.8" y="437" width="10.7" height="15.0" fill="rgb(207,168,8)" rx="2" ry="2" />
<text  x="403.83" y="447.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (3,999,999 samples, 0.14%)</title><rect x="171.7" y="373" width="1.6" height="15.0" fill="rgb(222,116,2)" rx="2" ry="2" />
<text  x="174.69" y="383.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (5,333,332 samples, 0.18%)</title><rect x="33.0" y="421" width="2.2" height="15.0" fill="rgb(229,93,18)" rx="2" ry="2" />
<text  x="36.02" y="431.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (1,333,333 samples, 0.05%)</title><rect x="173.3" y="405" width="0.5" height="15.0" fill="rgb(223,183,37)" rx="2" ry="2" />
<text  x="176.29" y="415.5" ></text>
</g>
<g >
<title>fs_read (1,333,333 samples, 0.05%)</title><rect x="1119.9" y="613" width="0.5" height="15.0" fill="rgb(247,23,30)" rx="2" ry="2" />
<text  x="1122.86" y="623.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,666,666 samples, 0.09%)</title><rect x="1127.9" y="549" width="1.1" height="15.0" fill="rgb(228,221,29)" rx="2" ry="2" />
<text  x="1130.89" y="559.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (5,333,332 samples, 0.18%)</title><rect x="111.7" y="421" width="2.2" height="15.0" fill="rgb(224,172,3)" rx="2" ry="2" />
<text  x="114.72" y="431.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (22,666,661 samples, 0.77%)</title><rect x="716.7" y="357" width="9.1" height="15.0" fill="rgb(245,128,52)" rx="2" ry="2" />
<text  x="719.72" y="367.5" ></text>
</g>
<g >
<title>leveldb::test::CompressibleString (11,999,997 samples, 0.41%)</title><rect x="447.4" y="533" width="4.8" height="15.0" fill="rgb(220,61,32)" rx="2" ry="2" />
<text  x="450.41" y="543.5" ></text>
</g>
<g >
<title>__x64_sys_futex (31,999,992 samples, 1.09%)</title><rect x="981.7" y="389" width="12.9" height="15.0" fill="rgb(254,10,49)" rx="2" ry="2" />
<text  x="984.73" y="399.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.05%)</title><rect x="144.4" y="213" width="0.5" height="15.0" fill="rgb(208,134,7)" rx="2" ry="2" />
<text  x="147.38" y="223.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::Finish (1,333,333 samples, 0.05%)</title><rect x="114.4" y="421" width="0.5" height="15.0" fill="rgb(230,61,6)" rx="2" ry="2" />
<text  x="117.40" y="431.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Value (25,333,327 samples, 0.86%)</title><rect x="390.7" y="437" width="10.1" height="15.0" fill="rgb(205,191,45)" rx="2" ry="2" />
<text  x="393.66" y="447.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="417.4" y="453" width="0.6" height="15.0" fill="rgb(248,165,25)" rx="2" ry="2" />
<text  x="420.43" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (10,666,664 samples, 0.36%)</title><rect x="85.0" y="389" width="4.2" height="15.0" fill="rgb(214,224,13)" rx="2" ry="2" />
<text  x="87.95" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="255.7" y="357" width="0.6" height="15.0" fill="rgb(226,120,32)" rx="2" ry="2" />
<text  x="258.74" y="367.5" ></text>
</g>
<g >
<title>std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (14,666,663 samples, 0.50%)</title><rect x="1069.0" y="437" width="5.9" height="15.0" fill="rgb(231,140,32)" rx="2" ry="2" />
<text  x="1072.00" y="447.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (33,333,325 samples, 1.13%)</title><rect x="115.5" y="389" width="13.4" height="15.0" fill="rgb(224,148,5)" rx="2" ry="2" />
<text  x="118.47" y="399.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::__future_base::_Result_base::_Deleter, true&gt;::_M_head (1,333,333 samples, 0.05%)</title><rect x="1021.9" y="245" width="0.5" height="15.0" fill="rgb(249,117,42)" rx="2" ry="2" />
<text  x="1024.89" y="255.5" ></text>
</g>
<g >
<title>security_cred_free (1,333,333 samples, 0.05%)</title><rect x="355.9" y="357" width="0.5" height="15.0" fill="rgb(206,127,44)" rx="2" ry="2" />
<text  x="358.86" y="367.5" ></text>
</g>
<g >
<title>leveldb::operator== (2,666,666 samples, 0.09%)</title><rect x="359.6" y="469" width="1.1" height="15.0" fill="rgb(215,119,20)" rx="2" ry="2" />
<text  x="362.61" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1,333,333 samples, 0.05%)</title><rect x="300.7" y="421" width="0.6" height="15.0" fill="rgb(227,158,48)" rx="2" ry="2" />
<text  x="303.72" y="431.5" ></text>
</g>
<g >
<title>__gthread_active_p (1,333,333 samples, 0.05%)</title><rect x="477.9" y="453" width="0.6" height="15.0" fill="rgb(225,2,20)" rx="2" ry="2" />
<text  x="480.93" y="463.5" ></text>
</g>
<g >
<title>file_free_rcu (1,333,333 samples, 0.05%)</title><rect x="999.4" y="229" width="0.5" height="15.0" fill="rgb(243,59,10)" rx="2" ry="2" />
<text  x="1002.40" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="107.4" y="357" width="0.6" height="15.0" fill="rgb(245,163,11)" rx="2" ry="2" />
<text  x="110.44" y="367.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::set_value (1,333,333 samples, 0.05%)</title><rect x="1185.7" y="725" width="0.6" height="15.0" fill="rgb(223,224,49)" rx="2" ry="2" />
<text  x="1188.72" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_S_cget (1,333,333 samples, 0.05%)</title><rect x="328.0" y="421" width="0.6" height="15.0" fill="rgb(237,92,22)" rx="2" ry="2" />
<text  x="331.02" y="431.5" ></text>
</g>
<g >
<title>leveldb::MutexLock::~MutexLock (3,999,999 samples, 0.14%)</title><rect x="476.9" y="517" width="1.6" height="15.0" fill="rgb(232,124,30)" rx="2" ry="2" />
<text  x="479.86" y="527.5" ></text>
</g>
<g >
<title>__fget (3,999,999 samples, 0.14%)</title><rect x="799.7" y="325" width="1.6" height="15.0" fill="rgb(220,167,46)" rx="2" ry="2" />
<text  x="802.70" y="335.5" ></text>
</g>
<g >
<title>madvise_free_page_range.isra.16 (1,333,333 samples, 0.05%)</title><rect x="160.4" y="181" width="0.6" height="15.0" fill="rgb(222,77,17)" rx="2" ry="2" />
<text  x="163.44" y="191.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1,333,333 samples, 0.05%)</title><rect x="1161.1" y="501" width="0.5" height="15.0" fill="rgb(246,100,25)" rx="2" ry="2" />
<text  x="1164.09" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1,333,333 samples, 0.05%)</title><rect x="216.1" y="405" width="0.6" height="15.0" fill="rgb(246,39,29)" rx="2" ry="2" />
<text  x="219.13" y="415.5" ></text>
</g>
<g >
<title>crypto_shash_update (2,666,666 samples, 0.09%)</title><rect x="822.7" y="165" width="1.1" height="15.0" fill="rgb(237,198,19)" rx="2" ry="2" />
<text  x="825.72" y="175.5" ></text>
</g>
<g >
<title>TCMalloc_SystemRelease (1,333,333 samples, 0.05%)</title><rect x="194.7" y="309" width="0.5" height="15.0" fill="rgb(253,91,36)" rx="2" ry="2" />
<text  x="197.71" y="319.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::tuple&lt;std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter, true&gt; (2,666,666 samples, 0.09%)</title><rect x="1067.9" y="341" width="1.1" height="15.0" fill="rgb(205,147,17)" rx="2" ry="2" />
<text  x="1070.93" y="351.5" ></text>
</g>
<g >
<title>std::fill_n&lt;char*, unsigned long, char&gt; (5,333,332 samples, 0.18%)</title><rect x="294.3" y="341" width="2.1" height="15.0" fill="rgb(254,40,8)" rx="2" ry="2" />
<text  x="297.29" y="351.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,333,333 samples, 0.05%)</title><rect x="305.0" y="357" width="0.5" height="15.0" fill="rgb(240,95,41)" rx="2" ry="2" />
<text  x="308.00" y="367.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="279.8" y="261" width="0.6" height="15.0" fill="rgb(213,193,5)" rx="2" ry="2" />
<text  x="282.84" y="271.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (1,333,333 samples, 0.05%)</title><rect x="1118.8" y="533" width="0.5" height="15.0" fill="rgb(205,198,11)" rx="2" ry="2" />
<text  x="1121.79" y="543.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_rdx (1,333,333 samples, 0.05%)</title><rect x="229.0" y="373" width="0.5" height="15.0" fill="rgb(208,208,53)" rx="2" ry="2" />
<text  x="231.97" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;char*, unsigned long&gt; (5,333,332 samples, 0.18%)</title><rect x="315.2" y="405" width="2.1" height="15.0" fill="rgb(237,176,8)" rx="2" ry="2" />
<text  x="318.17" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (1,333,333 samples, 0.05%)</title><rect x="108.5" y="309" width="0.5" height="15.0" fill="rgb(248,133,43)" rx="2" ry="2" />
<text  x="111.51" y="319.5" ></text>
</g>
<g >
<title>__ext4_get_inode_loc (15,999,996 samples, 0.54%)</title><rect x="887.5" y="181" width="6.4" height="15.0" fill="rgb(248,67,6)" rx="2" ry="2" />
<text  x="890.50" y="191.5" ></text>
</g>
<g >
<title>security_cred_free (1,333,333 samples, 0.05%)</title><rect x="396.0" y="309" width="0.6" height="15.0" fill="rgb(249,15,37)" rx="2" ry="2" />
<text  x="399.02" y="319.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::RandomGenerator::RandomGenerator (15,999,996 samples, 0.54%)</title><rect x="447.4" y="549" width="6.4" height="15.0" fill="rgb(207,72,12)" rx="2" ry="2" />
<text  x="450.41" y="559.5" ></text>
</g>
<g >
<title>__do_page_fault (3,999,999 samples, 0.14%)</title><rect x="294.8" y="245" width="1.6" height="15.0" fill="rgb(205,59,24)" rx="2" ry="2" />
<text  x="297.83" y="255.5" ></text>
</g>
<g >
<title>balance_dirty_pages_ratelimited (1,333,333 samples, 0.05%)</title><rect x="828.1" y="277" width="0.5" height="15.0" fill="rgb(227,151,44)" rx="2" ry="2" />
<text  x="831.08" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.05%)</title><rect x="1182.0" y="709" width="0.5" height="15.0" fill="rgb(231,143,34)" rx="2" ry="2" />
<text  x="1184.97" y="719.5" ></text>
</g>
<g >
<title>leveldb::MemTable::~MemTable (2,666,666 samples, 0.09%)</title><rect x="194.2" y="485" width="1.0" height="15.0" fill="rgb(215,10,9)" rx="2" ry="2" />
<text  x="197.17" y="495.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="222.0" y="437" width="0.5" height="15.0" fill="rgb(228,130,9)" rx="2" ry="2" />
<text  x="225.01" y="447.5" ></text>
</g>
<g >
<title>std::swap&lt;char const*&gt; (6,666,665 samples, 0.23%)</title><rect x="776.7" y="485" width="2.7" height="15.0" fill="rgb(218,209,8)" rx="2" ry="2" />
<text  x="779.68" y="495.5" ></text>
</g>
<g >
<title>start_this_handle (1,333,333 samples, 0.05%)</title><rect x="838.2" y="245" width="0.6" height="15.0" fill="rgb(206,12,12)" rx="2" ry="2" />
<text  x="841.25" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (1,333,333 samples, 0.05%)</title><rect x="277.7" y="293" width="0.5" height="15.0" fill="rgb(208,229,42)" rx="2" ry="2" />
<text  x="280.70" y="303.5" ></text>
</g>
<g >
<title>pmd_pfn (1,333,333 samples, 0.05%)</title><rect x="159.9" y="213" width="0.5" height="15.0" fill="rgb(232,63,38)" rx="2" ry="2" />
<text  x="162.91" y="223.5" ></text>
</g>
<g >
<title>page_fault (17,333,329 samples, 0.59%)</title><rect x="1160.0" y="709" width="7.0" height="15.0" fill="rgb(208,55,23)" rx="2" ry="2" />
<text  x="1163.02" y="719.5" ></text>
</g>
<g >
<title>std::__future_base::_Result_base::_Deleter::operator (13,333,330 samples, 0.45%)</title><rect x="1094.2" y="373" width="5.3" height="15.0" fill="rgb(212,217,1)" rx="2" ry="2" />
<text  x="1097.17" y="383.5" ></text>
</g>
<g >
<title>leveldb::Block::Iter::Next (3,999,999 samples, 0.14%)</title><rect x="212.9" y="405" width="1.6" height="15.0" fill="rgb(210,78,49)" rx="2" ry="2" />
<text  x="215.91" y="415.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="1118.8" y="389" width="0.5" height="15.0" fill="rgb(251,158,41)" rx="2" ry="2" />
<text  x="1121.79" y="399.5" ></text>
</g>
<g >
<title>leveldb::DB::Open (3,999,999 samples, 0.14%)</title><rect x="1125.8" y="645" width="1.6" height="15.0" fill="rgb(246,113,25)" rx="2" ry="2" />
<text  x="1128.75" y="655.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1,333,333 samples, 0.05%)</title><rect x="187.2" y="437" width="0.5" height="15.0" fill="rgb(219,149,54)" rx="2" ry="2" />
<text  x="190.21" y="447.5" ></text>
</g>
<g >
<title>do_futex (21,333,328 samples, 0.73%)</title><rect x="984.9" y="373" width="8.6" height="15.0" fill="rgb(232,188,13)" rx="2" ry="2" />
<text  x="987.95" y="383.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock (2,666,666 samples, 0.09%)</title><rect x="475.8" y="453" width="1.1" height="15.0" fill="rgb(206,60,34)" rx="2" ry="2" />
<text  x="478.79" y="463.5" ></text>
</g>
<g >
<title>leveldb::Table::BlockReader (5,333,332 samples, 0.18%)</title><rect x="209.7" y="421" width="2.1" height="15.0" fill="rgb(250,125,46)" rx="2" ry="2" />
<text  x="212.70" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (1,333,333 samples, 0.05%)</title><rect x="108.5" y="293" width="0.5" height="15.0" fill="rgb(215,144,33)" rx="2" ry="2" />
<text  x="111.51" y="303.5" ></text>
</g>
<g >
<title>leveldb::port::Snappy_Uncompress (5,333,332 samples, 0.18%)</title><rect x="209.7" y="389" width="2.1" height="15.0" fill="rgb(218,207,1)" rx="2" ry="2" />
<text  x="212.70" y="399.5" ></text>
</g>
<g >
<title>ext4_mark_iloc_dirty (1,333,333 samples, 0.05%)</title><rect x="161.0" y="149" width="0.5" height="15.0" fill="rgb(221,154,17)" rx="2" ry="2" />
<text  x="163.98" y="159.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (5,333,332 samples, 0.18%)</title><rect x="294.3" y="293" width="2.1" height="15.0" fill="rgb(229,178,48)" rx="2" ry="2" />
<text  x="297.29" y="303.5" ></text>
</g>
<g >
<title>jbd2__journal_start (3,999,999 samples, 0.14%)</title><rect x="817.9" y="213" width="1.6" height="15.0" fill="rgb(223,133,33)" rx="2" ry="2" />
<text  x="820.90" y="223.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (3,999,999 samples, 0.14%)</title><rect x="278.8" y="341" width="1.6" height="15.0" fill="rgb(206,67,44)" rx="2" ry="2" />
<text  x="281.77" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_extract (1,333,333 samples, 0.05%)</title><rect x="278.2" y="325" width="0.6" height="15.0" fill="rgb(247,19,8)" rx="2" ry="2" />
<text  x="281.23" y="335.5" ></text>
</g>
<g >
<title>leveldb::Block::Iter::NextEntryOffset (1,333,333 samples, 0.05%)</title><rect x="215.1" y="405" width="0.5" height="15.0" fill="rgb(236,31,30)" rx="2" ry="2" />
<text  x="218.05" y="415.5" ></text>
</g>
<g >
<title>IO_validate_vtable (1,333,333 samples, 0.05%)</title><rect x="437.2" y="485" width="0.6" height="15.0" fill="rgb(244,226,28)" rx="2" ry="2" />
<text  x="440.24" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt; &gt;::destroy&lt;std::__future_base::_State_baseV2&gt; (22,666,661 samples, 0.77%)</title><rect x="1092.0" y="437" width="9.1" height="15.0" fill="rgb(252,208,36)" rx="2" ry="2" />
<text  x="1095.02" y="447.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::status (1,333,333 samples, 0.05%)</title><rect x="415.3" y="469" width="0.5" height="15.0" fill="rgb(219,104,4)" rx="2" ry="2" />
<text  x="418.29" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.05%)</title><rect x="375.1" y="357" width="0.6" height="15.0" fill="rgb(211,58,1)" rx="2" ry="2" />
<text  x="378.14" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::~vector (1,333,333 samples, 0.05%)</title><rect x="160.4" y="437" width="0.6" height="15.0" fill="rgb(246,129,6)" rx="2" ry="2" />
<text  x="163.44" y="447.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.05%)</title><rect x="452.2" y="501" width="0.6" height="15.0" fill="rgb(253,2,20)" rx="2" ry="2" />
<text  x="455.23" y="511.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (5,333,332 samples, 0.18%)</title><rect x="1022.4" y="309" width="2.2" height="15.0" fill="rgb(243,56,48)" rx="2" ry="2" />
<text  x="1025.42" y="319.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::SearchFreeAndLargeLists (1,333,333 samples, 0.05%)</title><rect x="95.1" y="245" width="0.6" height="15.0" fill="rgb(239,67,12)" rx="2" ry="2" />
<text  x="98.13" y="255.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::RandomGenerator::Generate (1,333,333 samples, 0.05%)</title><rect x="446.9" y="549" width="0.5" height="15.0" fill="rgb(237,55,6)" rx="2" ry="2" />
<text  x="449.88" y="559.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,333,333 samples, 0.05%)</title><rect x="269.1" y="357" width="0.6" height="15.0" fill="rgb(231,188,20)" rx="2" ry="2" />
<text  x="272.13" y="367.5" ></text>
</g>
<g >
<title>std::move&lt;char const*&amp;&gt; (1,333,333 samples, 0.05%)</title><rect x="920.7" y="453" width="0.5" height="15.0" fill="rgb(240,26,20)" rx="2" ry="2" />
<text  x="923.70" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.05%)</title><rect x="304.5" y="357" width="0.5" height="15.0" fill="rgb(237,88,2)" rx="2" ry="2" />
<text  x="307.46" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1,333,333 samples, 0.05%)</title><rect x="1153.1" y="709" width="0.5" height="15.0" fill="rgb(239,27,35)" rx="2" ry="2" />
<text  x="1156.06" y="719.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (19,999,995 samples, 0.68%)</title><rect x="1032.6" y="501" width="8.0" height="15.0" fill="rgb(205,224,46)" rx="2" ry="2" />
<text  x="1035.60" y="511.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (9,333,331 samples, 0.32%)</title><rect x="50.7" y="453" width="3.7" height="15.0" fill="rgb(238,139,25)" rx="2" ry="2" />
<text  x="53.69" y="463.5" ></text>
</g>
<g >
<title>do_brk_flags (1,333,333 samples, 0.05%)</title><rect x="144.4" y="181" width="0.5" height="15.0" fill="rgb(205,179,39)" rx="2" ry="2" />
<text  x="147.38" y="191.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Node (2,666,666 samples, 0.09%)</title><rect x="747.2" y="421" width="1.1" height="15.0" fill="rgb(223,91,25)" rx="2" ry="2" />
<text  x="750.23" y="431.5" ></text>
</g>
<g >
<title>irq_exit (2,666,666 samples, 0.09%)</title><rect x="626.8" y="325" width="1.0" height="15.0" fill="rgb(232,159,11)" rx="2" ry="2" />
<text  x="629.77" y="335.5" ></text>
</g>
<g >
<title>pmem2_auto_flush (1,333,333 samples, 0.05%)</title><rect x="1119.9" y="645" width="0.5" height="15.0" fill="rgb(224,103,20)" rx="2" ry="2" />
<text  x="1122.86" y="655.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (1,333,333 samples, 0.05%)</title><rect x="194.7" y="197" width="0.5" height="15.0" fill="rgb(246,71,34)" rx="2" ry="2" />
<text  x="197.71" y="207.5" ></text>
</g>
<g >
<title>rebalance_domains (1,333,333 samples, 0.05%)</title><rect x="446.3" y="405" width="0.6" height="15.0" fill="rgb(240,131,14)" rx="2" ry="2" />
<text  x="449.34" y="415.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::tuple&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter, true&gt; (2,666,666 samples, 0.09%)</title><rect x="1078.6" y="485" width="1.1" height="15.0" fill="rgb(226,205,12)" rx="2" ry="2" />
<text  x="1081.64" y="495.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.05%)</title><rect x="796.0" y="341" width="0.5" height="15.0" fill="rgb(241,217,38)" rx="2" ry="2" />
<text  x="798.95" y="351.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (51,999,987 samples, 1.77%)</title><rect x="828.6" y="277" width="20.9" height="15.0" fill="rgb(232,179,41)" rx="2" ry="2" />
<text  x="831.61" y="287.5" ></text>
</g>
<g >
<title>sbrk (1,333,333 samples, 0.05%)</title><rect x="144.4" y="277" width="0.5" height="15.0" fill="rgb(215,190,35)" rx="2" ry="2" />
<text  x="147.38" y="287.5" ></text>
</g>
<g >
<title>__do_page_fault (2,666,666 samples, 0.09%)</title><rect x="74.2" y="325" width="1.1" height="15.0" fill="rgb(226,98,2)" rx="2" ry="2" />
<text  x="77.25" y="335.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*&amp;, std::__future_base::_Result_base::_Deleter, void&gt; (9,333,331 samples, 0.32%)</title><rect x="1005.3" y="245" width="3.7" height="15.0" fill="rgb(217,101,36)" rx="2" ry="2" />
<text  x="1008.29" y="255.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, false&gt;::_Head_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,333,333 samples, 0.05%)</title><rect x="1169.1" y="709" width="0.6" height="15.0" fill="rgb(251,39,6)" rx="2" ry="2" />
<text  x="1172.12" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (3,999,999 samples, 0.14%)</title><rect x="278.8" y="373" width="1.6" height="15.0" fill="rgb(241,133,47)" rx="2" ry="2" />
<text  x="281.77" y="383.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="229.0" y="421" width="0.5" height="15.0" fill="rgb(245,200,13)" rx="2" ry="2" />
<text  x="231.97" y="431.5" ></text>
</g>
<g >
<title>leveldb::MutexLock::~MutexLock (1,333,333 samples, 0.05%)</title><rect x="1145.6" y="725" width="0.5" height="15.0" fill="rgb(226,51,14)" rx="2" ry="2" />
<text  x="1148.56" y="735.5" ></text>
</g>
<g >
<title>__x64_sys_openat (1,333,333 samples, 0.05%)</title><rect x="468.3" y="437" width="0.5" height="15.0" fill="rgb(219,77,47)" rx="2" ry="2" />
<text  x="471.29" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (1,333,333 samples, 0.05%)</title><rect x="184.5" y="405" width="0.6" height="15.0" fill="rgb(229,151,44)" rx="2" ry="2" />
<text  x="187.54" y="415.5" ></text>
</g>
<g >
<title>futex_wake (54,666,653 samples, 1.86%)</title><rect x="972.6" y="437" width="22.0" height="15.0" fill="rgb(246,179,46)" rx="2" ry="2" />
<text  x="975.63" y="447.5" >f..</text>
</g>
<g >
<title>std::__invoke&lt;void  (81,333,313 samples, 2.77%)</title><rect x="996.2" y="389" width="32.6" height="15.0" fill="rgb(250,39,26)" rx="2" ry="2" />
<text  x="999.19" y="399.5" >st..</text>
</g>
<g >
<title>std::atomic&lt;unsigned int&gt;::atomic (2,666,666 samples, 0.09%)</title><rect x="1064.7" y="357" width="1.1" height="15.0" fill="rgb(246,151,38)" rx="2" ry="2" />
<text  x="1067.72" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (5,333,332 samples, 0.18%)</title><rect x="327.5" y="453" width="2.1" height="15.0" fill="rgb(239,56,23)" rx="2" ry="2" />
<text  x="330.49" y="463.5" ></text>
</g>
<g >
<title>_IO_new_file_write (1,333,333 samples, 0.05%)</title><rect x="161.0" y="389" width="0.5" height="15.0" fill="rgb(242,196,35)" rx="2" ry="2" />
<text  x="163.98" y="399.5" ></text>
</g>
<g >
<title>__slab_alloc (1,333,333 samples, 0.05%)</title><rect x="840.9" y="181" width="0.6" height="15.0" fill="rgb(246,109,11)" rx="2" ry="2" />
<text  x="843.93" y="191.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (5,333,332 samples, 0.18%)</title><rect x="142.8" y="405" width="2.1" height="15.0" fill="rgb(206,57,49)" rx="2" ry="2" />
<text  x="145.78" y="415.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="1118.8" y="421" width="0.5" height="15.0" fill="rgb(244,218,13)" rx="2" ry="2" />
<text  x="1121.79" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result_base::_Deleter, void&gt; (1,333,333 samples, 0.05%)</title><rect x="1185.2" y="709" width="0.5" height="15.0" fill="rgb(227,100,33)" rx="2" ry="2" />
<text  x="1188.18" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (1,333,333 samples, 0.05%)</title><rect x="264.8" y="325" width="0.6" height="15.0" fill="rgb(214,23,1)" rx="2" ry="2" />
<text  x="267.85" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,333,333 samples, 0.05%)</title><rect x="105.8" y="357" width="0.6" height="15.0" fill="rgb(235,201,43)" rx="2" ry="2" />
<text  x="108.83" y="367.5" ></text>
</g>
<g >
<title>load_balance (1,333,333 samples, 0.05%)</title><rect x="446.3" y="389" width="0.6" height="15.0" fill="rgb(245,93,21)" rx="2" ry="2" />
<text  x="449.34" y="399.5" ></text>
</g>
<g >
<title>std::operator==&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt; (1,333,333 samples, 0.05%)</title><rect x="465.6" y="485" width="0.6" height="15.0" fill="rgb(207,65,31)" rx="2" ry="2" />
<text  x="468.62" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr (22,666,661 samples, 0.77%)</title><rect x="1003.7" y="293" width="9.1" height="15.0" fill="rgb(241,152,16)" rx="2" ry="2" />
<text  x="1006.68" y="303.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::GetMaxHeight (1,333,333 samples, 0.05%)</title><rect x="524.5" y="405" width="0.5" height="15.0" fill="rgb(217,189,35)" rx="2" ry="2" />
<text  x="527.51" y="415.5" ></text>
</g>
<g >
<title>leveldb::DestroyDB (13,333,330 samples, 0.45%)</title><rect x="1120.4" y="661" width="5.4" height="15.0" fill="rgb(241,30,32)" rx="2" ry="2" />
<text  x="1123.40" y="671.5" ></text>
</g>
<g >
<title>__handle_mm_fault (14,666,663 samples, 0.50%)</title><rect x="1161.1" y="645" width="5.9" height="15.0" fill="rgb(212,37,31)" rx="2" ry="2" />
<text  x="1164.09" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (23,999,994 samples, 0.82%)</title><rect x="163.7" y="421" width="9.6" height="15.0" fill="rgb(233,9,10)" rx="2" ry="2" />
<text  x="166.66" y="431.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (5,333,332 samples, 0.18%)</title><rect x="1089.9" y="437" width="2.1" height="15.0" fill="rgb(245,205,28)" rx="2" ry="2" />
<text  x="1092.88" y="447.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="226.8" y="469" width="0.6" height="15.0" fill="rgb(223,16,54)" rx="2" ry="2" />
<text  x="229.83" y="479.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (1,333,333 samples, 0.05%)</title><rect x="194.7" y="245" width="0.5" height="15.0" fill="rgb(247,104,52)" rx="2" ry="2" />
<text  x="197.71" y="255.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1,333,333 samples, 0.05%)</title><rect x="173.3" y="389" width="0.5" height="15.0" fill="rgb(238,212,42)" rx="2" ry="2" />
<text  x="176.29" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1,333,333 samples, 0.05%)</title><rect x="411.5" y="469" width="0.6" height="15.0" fill="rgb(252,46,40)" rx="2" ry="2" />
<text  x="414.54" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (2,666,666 samples, 0.09%)</title><rect x="385.3" y="373" width="1.1" height="15.0" fill="rgb(220,102,2)" rx="2" ry="2" />
<text  x="388.31" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,333,333 samples, 0.05%)</title><rect x="388.0" y="405" width="0.5" height="15.0" fill="rgb(217,192,32)" rx="2" ry="2" />
<text  x="390.99" y="415.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.05%)</title><rect x="192.6" y="373" width="0.5" height="15.0" fill="rgb(218,113,7)" rx="2" ry="2" />
<text  x="195.57" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (1,333,333 samples, 0.05%)</title><rect x="261.6" y="357" width="0.6" height="15.0" fill="rgb(209,83,38)" rx="2" ry="2" />
<text  x="264.63" y="367.5" ></text>
</g>
<g >
<title>truncate_inode_pages_final (1,333,333 samples, 0.05%)</title><rect x="421.2" y="357" width="0.5" height="15.0" fill="rgb(236,194,4)" rx="2" ry="2" />
<text  x="424.18" y="367.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::tuple&lt;std::__future_base::_Result_base*&amp;, std::__future_base::_Result_base::_Deleter, true&gt; (2,666,666 samples, 0.09%)</title><rect x="1016.0" y="277" width="1.1" height="15.0" fill="rgb(240,85,25)" rx="2" ry="2" />
<text  x="1019.00" y="287.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::InsertRange (1,333,333 samples, 0.05%)</title><rect x="1119.9" y="533" width="0.5" height="15.0" fill="rgb(238,201,13)" rx="2" ry="2" />
<text  x="1122.86" y="543.5" ></text>
</g>
<g >
<title>ext4_evict_inode (3,999,999 samples, 0.14%)</title><rect x="231.1" y="341" width="1.6" height="15.0" fill="rgb(253,50,5)" rx="2" ry="2" />
<text  x="234.12" y="351.5" ></text>
</g>
<g >
<title>leveldb::port::CondVar::CondVar (3,999,999 samples, 0.14%)</title><rect x="473.1" y="501" width="1.6" height="15.0" fill="rgb(221,2,31)" rx="2" ry="2" />
<text  x="476.11" y="511.5" ></text>
</g>
<g >
<title>__GI___pthread_once (2,666,666 samples, 0.09%)</title><rect x="966.2" y="453" width="1.1" height="15.0" fill="rgb(232,48,36)" rx="2" ry="2" />
<text  x="969.21" y="463.5" ></text>
</g>
<g >
<title>std::move&lt;leveldb::Status&amp;&gt; (1,333,333 samples, 0.05%)</title><rect x="1050.3" y="517" width="0.5" height="15.0" fill="rgb(227,46,28)" rx="2" ry="2" />
<text  x="1053.26" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (2,666,666 samples, 0.09%)</title><rect x="388.5" y="405" width="1.1" height="15.0" fill="rgb(243,155,12)" rx="2" ry="2" />
<text  x="391.52" y="415.5" ></text>
</g>
<g >
<title>leveldb::Status::ok (1,333,333 samples, 0.05%)</title><rect x="919.1" y="485" width="0.5" height="15.0" fill="rgb(235,185,10)" rx="2" ry="2" />
<text  x="922.09" y="495.5" ></text>
</g>
<g >
<title>__vfs_write (259,999,935 samples, 8.85%)</title><rect x="806.7" y="341" width="104.4" height="15.0" fill="rgb(210,57,21)" rx="2" ry="2" />
<text  x="809.66" y="351.5" >__vfs_write</text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (3,999,999 samples, 0.14%)</title><rect x="100.5" y="389" width="1.6" height="15.0" fill="rgb(250,188,11)" rx="2" ry="2" />
<text  x="103.48" y="399.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed64 (1,333,333 samples, 0.05%)</title><rect x="55.5" y="437" width="0.5" height="15.0" fill="rgb(223,122,9)" rx="2" ry="2" />
<text  x="58.51" y="447.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::CompactMemTable (206,666,615 samples, 7.03%)</title><rect x="231.1" y="501" width="83.0" height="15.0" fill="rgb(229,0,47)" rx="2" ry="2" />
<text  x="234.12" y="511.5" >leveldb::..</text>
</g>
<g >
<title>vfs_write (279,999,930 samples, 9.53%)</title><rect x="804.5" y="357" width="112.5" height="15.0" fill="rgb(239,223,25)" rx="2" ry="2" />
<text  x="807.52" y="367.5" >vfs_write</text>
</g>
<g >
<title>pmem_map_fileU (1,333,333 samples, 0.05%)</title><rect x="150.3" y="437" width="0.5" height="15.0" fill="rgb(232,49,43)" rx="2" ry="2" />
<text  x="153.27" y="447.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::RandomHeight (7,999,998 samples, 0.27%)</title><rect x="753.1" y="437" width="3.2" height="15.0" fill="rgb(225,195,1)" rx="2" ry="2" />
<text  x="756.12" y="447.5" ></text>
</g>
<g >
<title>__libc_open64 (1,333,333 samples, 0.05%)</title><rect x="1129.5" y="549" width="0.5" height="15.0" fill="rgb(232,214,54)" rx="2" ry="2" />
<text  x="1132.50" y="559.5" ></text>
</g>
<g >
<title>fsnotify (3,999,999 samples, 0.14%)</title><rect x="913.2" y="341" width="1.6" height="15.0" fill="rgb(214,19,35)" rx="2" ry="2" />
<text  x="916.20" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_S_cget (3,999,999 samples, 0.14%)</title><rect x="182.4" y="405" width="1.6" height="15.0" fill="rgb(213,174,51)" rx="2" ry="2" />
<text  x="185.40" y="415.5" ></text>
</g>
<g >
<title>seq_vprintf (1,333,333 samples, 0.05%)</title><rect x="1127.4" y="373" width="0.5" height="15.0" fill="rgb(222,220,10)" rx="2" ry="2" />
<text  x="1130.36" y="383.5" ></text>
</g>
<g >
<title>operator new[] (3,999,999 samples, 0.14%)</title><rect x="745.6" y="373" width="1.6" height="15.0" fill="rgb(214,111,46)" rx="2" ry="2" />
<text  x="748.63" y="383.5" ></text>
</g>
<g >
<title>__x64_sys_unlink (5,333,332 samples, 0.18%)</title><rect x="11.1" y="421" width="2.1" height="15.0" fill="rgb(249,21,21)" rx="2" ry="2" />
<text  x="14.07" y="431.5" ></text>
</g>
<g >
<title>std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;::queue&lt;std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt;, void&gt; (1,333,333 samples, 0.05%)</title><rect x="1129.0" y="517" width="0.5" height="15.0" fill="rgb(206,177,48)" rx="2" ry="2" />
<text  x="1131.97" y="527.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.05%)</title><rect x="36.2" y="405" width="0.6" height="15.0" fill="rgb(252,221,35)" rx="2" ry="2" />
<text  x="39.23" y="415.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (2,666,666 samples, 0.09%)</title><rect x="956.0" y="485" width="1.1" height="15.0" fill="rgb(205,20,38)" rx="2" ry="2" />
<text  x="959.03" y="495.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1,333,333 samples, 0.05%)</title><rect x="1134.3" y="709" width="0.6" height="15.0" fill="rgb(233,84,12)" rx="2" ry="2" />
<text  x="1137.32" y="719.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (3,999,999 samples, 0.14%)</title><rect x="765.4" y="485" width="1.6" height="15.0" fill="rgb(245,58,7)" rx="2" ry="2" />
<text  x="768.44" y="495.5" ></text>
</g>
<g >
<title>std::operator&amp; (7,999,998 samples, 0.27%)</title><rect x="740.8" y="373" width="3.2" height="15.0" fill="rgb(250,50,10)" rx="2" ry="2" />
<text  x="743.81" y="383.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteRawBlock (1,333,333 samples, 0.05%)</title><rect x="149.2" y="421" width="0.5" height="15.0" fill="rgb(228,5,26)" rx="2" ry="2" />
<text  x="152.20" y="431.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::Count (2,666,666 samples, 0.09%)</title><rect x="484.9" y="517" width="1.1" height="15.0" fill="rgb(238,65,33)" rx="2" ry="2" />
<text  x="487.89" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (47,999,988 samples, 1.63%)</title><rect x="65.7" y="373" width="19.3" height="15.0" fill="rgb(246,170,43)" rx="2" ry="2" />
<text  x="68.68" y="383.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseListToSpans (1,333,333 samples, 0.05%)</title><rect x="1119.9" y="517" width="0.5" height="15.0" fill="rgb(240,111,25)" rx="2" ry="2" />
<text  x="1122.86" y="527.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (3,999,999 samples, 0.14%)</title><rect x="508.4" y="389" width="1.7" height="15.0" fill="rgb(218,117,21)" rx="2" ry="2" />
<text  x="511.45" y="399.5" ></text>
</g>
<g >
<title>_IO_new_file_underflow (1,333,333 samples, 0.05%)</title><rect x="1118.8" y="645" width="0.5" height="15.0" fill="rgb(248,132,34)" rx="2" ry="2" />
<text  x="1121.79" y="655.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (1,333,333 samples, 0.05%)</title><rect x="1118.8" y="549" width="0.5" height="15.0" fill="rgb(235,54,48)" rx="2" ry="2" />
<text  x="1121.79" y="559.5" ></text>
</g>
<g >
<title>kmem_cache_free (1,333,333 samples, 0.05%)</title><rect x="400.3" y="277" width="0.5" height="15.0" fill="rgb(216,56,50)" rx="2" ry="2" />
<text  x="403.30" y="287.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.05%)</title><rect x="78.0" y="325" width="0.5" height="15.0" fill="rgb(213,114,31)" rx="2" ry="2" />
<text  x="80.99" y="335.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.05%)</title><rect x="194.7" y="261" width="0.5" height="15.0" fill="rgb(236,5,2)" rx="2" ry="2" />
<text  x="197.71" y="271.5" ></text>
</g>
<g >
<title>account_page_cleaned (1,333,333 samples, 0.05%)</title><rect x="232.2" y="149" width="0.5" height="15.0" fill="rgb(244,73,48)" rx="2" ry="2" />
<text  x="235.19" y="159.5" ></text>
</g>
<g >
<title>__x64_sys_write (3,999,999 samples, 0.14%)</title><rect x="796.5" y="405" width="1.6" height="15.0" fill="rgb(229,40,3)" rx="2" ry="2" />
<text  x="799.49" y="415.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="222.0" y="405" width="0.5" height="15.0" fill="rgb(252,84,8)" rx="2" ry="2" />
<text  x="225.01" y="415.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed64 (2,666,666 samples, 0.09%)</title><rect x="365.0" y="469" width="1.0" height="15.0" fill="rgb(236,161,37)" rx="2" ry="2" />
<text  x="367.96" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (2,666,666 samples, 0.09%)</title><rect x="388.5" y="389" width="1.1" height="15.0" fill="rgb(239,196,41)" rx="2" ry="2" />
<text  x="391.52" y="399.5" ></text>
</g>
<g >
<title>evict (5,333,332 samples, 0.18%)</title><rect x="11.1" y="373" width="2.1" height="15.0" fill="rgb(212,43,14)" rx="2" ry="2" />
<text  x="14.07" y="383.5" ></text>
</g>
<g >
<title>TCMalloc_SystemRelease (1,333,333 samples, 0.05%)</title><rect x="1119.9" y="437" width="0.5" height="15.0" fill="rgb(226,147,12)" rx="2" ry="2" />
<text  x="1122.86" y="447.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::NoBarrier_Next (1,333,333 samples, 0.05%)</title><rect x="749.4" y="437" width="0.5" height="15.0" fill="rgb(243,137,30)" rx="2" ry="2" />
<text  x="752.37" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (6,666,665 samples, 0.23%)</title><rect x="86.6" y="357" width="2.6" height="15.0" fill="rgb(222,228,38)" rx="2" ry="2" />
<text  x="89.56" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (10,666,664 samples, 0.36%)</title><rect x="75.3" y="341" width="4.3" height="15.0" fill="rgb(235,80,43)" rx="2" ry="2" />
<text  x="78.32" y="351.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (1,333,333 samples, 0.05%)</title><rect x="160.4" y="357" width="0.6" height="15.0" fill="rgb(207,27,37)" rx="2" ry="2" />
<text  x="163.44" y="367.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="212.4" y="309" width="0.5" height="15.0" fill="rgb(247,1,41)" rx="2" ry="2" />
<text  x="215.38" y="319.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (3,999,999 samples, 0.14%)</title><rect x="33.6" y="405" width="1.6" height="15.0" fill="rgb(227,113,11)" rx="2" ry="2" />
<text  x="36.56" y="415.5" ></text>
</g>
<g >
<title>std::__fill_a&lt;char&gt; (5,333,332 samples, 0.18%)</title><rect x="315.2" y="341" width="2.1" height="15.0" fill="rgb(222,202,21)" rx="2" ry="2" />
<text  x="318.17" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_addr (1,333,333 samples, 0.05%)</title><rect x="389.1" y="373" width="0.5" height="15.0" fill="rgb(245,133,23)" rx="2" ry="2" />
<text  x="392.06" y="383.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::RemoveFile (1,333,333 samples, 0.05%)</title><rect x="421.2" y="501" width="0.5" height="15.0" fill="rgb(228,99,5)" rx="2" ry="2" />
<text  x="424.18" y="511.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1,333,333 samples, 0.05%)</title><rect x="292.2" y="341" width="0.5" height="15.0" fill="rgb(225,165,22)" rx="2" ry="2" />
<text  x="295.15" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1,333,333 samples, 0.05%)</title><rect x="216.7" y="405" width="0.5" height="15.0" fill="rgb(216,95,34)" rx="2" ry="2" />
<text  x="219.66" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::push_back (2,666,666 samples, 0.09%)</title><rect x="416.9" y="485" width="1.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="419.90" y="495.5" ></text>
</g>
<g >
<title>jbd2_journal_grab_journal_head (1,333,333 samples, 0.05%)</title><rect x="231.7" y="181" width="0.5" height="15.0" fill="rgb(220,210,53)" rx="2" ry="2" />
<text  x="234.65" y="191.5" ></text>
</g>
<g >
<title>std::_Sp_ebo_helper&lt;0, std::allocator&lt;std::__future_base::_State_baseV2&gt;, true&gt;::~_Sp_ebo_helper (1,333,333 samples, 0.05%)</title><rect x="1089.3" y="405" width="0.6" height="15.0" fill="rgb(241,7,13)" rx="2" ry="2" />
<text  x="1092.35" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_default_append (23,999,994 samples, 0.82%)</title><rect x="150.8" y="421" width="9.6" height="15.0" fill="rgb(220,30,3)" rx="2" ry="2" />
<text  x="153.81" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.05%)</title><rect x="277.7" y="309" width="0.5" height="15.0" fill="rgb(228,22,46)" rx="2" ry="2" />
<text  x="280.70" y="319.5" ></text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.05%)</title><rect x="270.2" y="325" width="0.5" height="15.0" fill="rgb(237,57,53)" rx="2" ry="2" />
<text  x="273.20" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get_deleter (1,333,333 samples, 0.05%)</title><rect x="1009.6" y="277" width="0.5" height="15.0" fill="rgb(251,124,51)" rx="2" ry="2" />
<text  x="1012.57" y="287.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.05%)</title><rect x="94.6" y="261" width="0.5" height="15.0" fill="rgb(238,71,45)" rx="2" ry="2" />
<text  x="97.59" y="271.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (2,666,666 samples, 0.09%)</title><rect x="410.5" y="389" width="1.0" height="15.0" fill="rgb(231,174,31)" rx="2" ry="2" />
<text  x="413.47" y="399.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (53,333,320 samples, 1.81%)</title><rect x="998.3" y="325" width="21.4" height="15.0" fill="rgb(228,21,21)" rx="2" ry="2" />
<text  x="1001.33" y="335.5" >s..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.05%)</title><rect x="10.5" y="437" width="0.6" height="15.0" fill="rgb(245,85,34)" rx="2" ry="2" />
<text  x="13.54" y="447.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="796.0" y="389" width="0.5" height="15.0" fill="rgb(238,139,9)" rx="2" ry="2" />
<text  x="798.95" y="399.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;&gt; &gt; (1,333,333 samples, 0.05%)</title><rect x="378.9" y="389" width="0.5" height="15.0" fill="rgb(206,147,6)" rx="2" ry="2" />
<text  x="381.88" y="399.5" ></text>
</g>
<g >
<title>__GI__IO_default_uflow (1,333,333 samples, 0.05%)</title><rect x="1127.4" y="581" width="0.5" height="15.0" fill="rgb(208,96,52)" rx="2" ry="2" />
<text  x="1130.36" y="591.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.05%)</title><rect x="1008.5" y="197" width="0.5" height="15.0" fill="rgb(222,153,45)" rx="2" ry="2" />
<text  x="1011.50" y="207.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (9,333,331 samples, 0.32%)</title><rect x="343.0" y="469" width="3.8" height="15.0" fill="rgb(225,82,7)" rx="2" ry="2" />
<text  x="346.01" y="479.5" ></text>
</g>
<g >
<title>std::operator&amp; (1,333,333 samples, 0.05%)</title><rect x="749.4" y="389" width="0.5" height="15.0" fill="rgb(244,176,25)" rx="2" ry="2" />
<text  x="752.37" y="399.5" ></text>
</g>
<g >
<title>operator new (1,333,333 samples, 0.05%)</title><rect x="269.7" y="357" width="0.5" height="15.0" fill="rgb(205,155,5)" rx="2" ry="2" />
<text  x="272.66" y="367.5" ></text>
</g>
<g >
<title>mem_cgroup_from_task (1,333,333 samples, 0.05%)</title><rect x="498.8" y="277" width="0.5" height="15.0" fill="rgb(228,26,39)" rx="2" ry="2" />
<text  x="501.81" y="287.5" ></text>
</g>
<g >
<title>vfs_open (1,333,333 samples, 0.05%)</title><rect x="1126.3" y="469" width="0.5" height="15.0" fill="rgb(209,84,27)" rx="2" ry="2" />
<text  x="1129.29" y="479.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.05%)</title><rect x="44.8" y="357" width="0.5" height="15.0" fill="rgb(219,211,12)" rx="2" ry="2" />
<text  x="47.80" y="367.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.05%)</title><rect x="468.3" y="469" width="0.5" height="15.0" fill="rgb(247,123,39)" rx="2" ry="2" />
<text  x="471.29" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (11,999,997 samples, 0.41%)</title><rect x="106.4" y="389" width="4.8" height="15.0" fill="rgb(243,79,39)" rx="2" ry="2" />
<text  x="109.37" y="399.5" ></text>
</g>
<g >
<title>leveldb::DescriptorFileName (1,333,333 samples, 0.05%)</title><rect x="1126.8" y="597" width="0.6" height="15.0" fill="rgb(205,85,24)" rx="2" ry="2" />
<text  x="1129.82" y="607.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (3,999,999 samples, 0.14%)</title><rect x="227.9" y="469" width="1.6" height="15.0" fill="rgb(226,165,38)" rx="2" ry="2" />
<text  x="230.90" y="479.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1,333,333 samples, 0.05%)</title><rect x="295.9" y="213" width="0.5" height="15.0" fill="rgb(248,215,40)" rx="2" ry="2" />
<text  x="298.90" y="223.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::PosixEnv (1,333,333 samples, 0.05%)</title><rect x="1129.0" y="629" width="0.5" height="15.0" fill="rgb(250,52,10)" rx="2" ry="2" />
<text  x="1131.97" y="639.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (77,333,314 samples, 2.63%)</title><rect x="923.9" y="485" width="31.1" height="15.0" fill="rgb(222,19,41)" rx="2" ry="2" />
<text  x="926.91" y="495.5" >le..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt;::allocate (1,333,333 samples, 0.05%)</title><rect x="270.2" y="341" width="0.5" height="15.0" fill="rgb(211,159,8)" rx="2" ry="2" />
<text  x="273.20" y="351.5" ></text>
</g>
<g >
<title>std::future&lt;leveldb::Status&gt;::~future (5,333,332 samples, 0.18%)</title><rect x="1050.8" y="533" width="2.1" height="15.0" fill="rgb(223,26,17)" rx="2" ry="2" />
<text  x="1053.80" y="543.5" ></text>
</g>
<g >
<title>truncate_inode_pages_range (1,333,333 samples, 0.05%)</title><rect x="421.2" y="341" width="0.5" height="15.0" fill="rgb(246,111,7)" rx="2" ry="2" />
<text  x="424.18" y="351.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (2,666,666 samples, 0.09%)</title><rect x="89.2" y="357" width="1.1" height="15.0" fill="rgb(215,118,5)" rx="2" ry="2" />
<text  x="92.24" y="367.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (6,666,665 samples, 0.23%)</title><rect x="1146.1" y="709" width="2.7" height="15.0" fill="rgb(207,192,13)" rx="2" ry="2" />
<text  x="1149.10" y="719.5" ></text>
</g>
<g >
<title>_IO_fgets (1,333,333 samples, 0.05%)</title><rect x="1127.4" y="629" width="0.5" height="15.0" fill="rgb(227,179,4)" rx="2" ry="2" />
<text  x="1130.36" y="639.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (2,666,666 samples, 0.09%)</title><rect x="746.2" y="341" width="1.0" height="15.0" fill="rgb(249,66,52)" rx="2" ry="2" />
<text  x="749.16" y="351.5" ></text>
</g>
<g >
<title>dl_main (3,999,999 samples, 0.14%)</title><rect x="1129.5" y="661" width="1.6" height="15.0" fill="rgb(243,22,14)" rx="2" ry="2" />
<text  x="1132.50" y="671.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2,666,666 samples, 0.09%)</title><rect x="626.8" y="229" width="1.0" height="15.0" fill="rgb(220,130,0)" rx="2" ry="2" />
<text  x="629.77" y="239.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::ok (1,333,333 samples, 0.05%)</title><rect x="142.2" y="437" width="0.6" height="15.0" fill="rgb(245,45,28)" rx="2" ry="2" />
<text  x="145.24" y="447.5" ></text>
</g>
<g >
<title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::__atomic_futex_unsigned (3,999,999 samples, 0.14%)</title><rect x="1064.2" y="373" width="1.6" height="15.0" fill="rgb(232,75,52)" rx="2" ry="2" />
<text  x="1067.18" y="383.5" ></text>
</g>
<g >
<title>snappy::internal::CompressFragment (29,333,326 samples, 1.00%)</title><rect x="128.9" y="373" width="11.7" height="15.0" fill="rgb(214,81,5)" rx="2" ry="2" />
<text  x="131.86" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="302.3" y="405" width="0.6" height="15.0" fill="rgb(244,7,19)" rx="2" ry="2" />
<text  x="305.32" y="415.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (2,666,666 samples, 0.09%)</title><rect x="1142.9" y="709" width="1.1" height="15.0" fill="rgb(231,215,15)" rx="2" ry="2" />
<text  x="1145.89" y="719.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::iter (1,333,333 samples, 0.05%)</title><rect x="211.8" y="437" width="0.6" height="15.0" fill="rgb(252,175,31)" rx="2" ry="2" />
<text  x="214.84" y="447.5" ></text>
</g>
<g >
<title>file_update_time (1,333,333 samples, 0.05%)</title><rect x="910.0" y="309" width="0.5" height="15.0" fill="rgb(254,6,54)" rx="2" ry="2" />
<text  x="912.99" y="319.5" ></text>
</g>
<g >
<title>try_to_release_page (2,666,666 samples, 0.09%)</title><rect x="231.7" y="229" width="1.0" height="15.0" fill="rgb(228,208,43)" rx="2" ry="2" />
<text  x="234.65" y="239.5" ></text>
</g>
<g >
<title>open_verify (1,333,333 samples, 0.05%)</title><rect x="1129.5" y="565" width="0.5" height="15.0" fill="rgb(232,177,31)" rx="2" ry="2" />
<text  x="1132.50" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (2,666,666 samples, 0.09%)</title><rect x="260.6" y="341" width="1.0" height="15.0" fill="rgb(215,7,2)" rx="2" ry="2" />
<text  x="263.56" y="351.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Flush (1,333,333 samples, 0.05%)</title><rect x="293.8" y="437" width="0.5" height="15.0" fill="rgb(229,205,30)" rx="2" ry="2" />
<text  x="296.76" y="447.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,333,333 samples, 0.05%)</title><rect x="184.0" y="421" width="0.5" height="15.0" fill="rgb(222,84,48)" rx="2" ry="2" />
<text  x="187.00" y="431.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.05%)</title><rect x="1009.0" y="277" width="0.6" height="15.0" fill="rgb(247,23,43)" rx="2" ry="2" />
<text  x="1012.04" y="287.5" ></text>
</g>
<g >
<title>snappy::internal::CompressFragment (1,333,333 samples, 0.05%)</title><rect x="149.7" y="389" width="0.6" height="15.0" fill="rgb(251,119,44)" rx="2" ry="2" />
<text  x="152.74" y="399.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (1,333,333 samples, 0.05%)</title><rect x="270.2" y="277" width="0.5" height="15.0" fill="rgb(249,129,43)" rx="2" ry="2" />
<text  x="273.20" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (1,333,333 samples, 0.05%)</title><rect x="245.6" y="405" width="0.5" height="15.0" fill="rgb(228,113,15)" rx="2" ry="2" />
<text  x="248.57" y="415.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::New (1,333,333 samples, 0.05%)</title><rect x="95.1" y="261" width="0.6" height="15.0" fill="rgb(237,203,4)" rx="2" ry="2" />
<text  x="98.13" y="271.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::~shared_ptr (3,999,999 samples, 0.14%)</title><rect x="1051.3" y="501" width="1.6" height="15.0" fill="rgb(240,38,9)" rx="2" ry="2" />
<text  x="1054.33" y="511.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::Write (1,617,332,929 samples, 55.04%)</title><rect x="453.8" y="549" width="649.5" height="15.0" fill="rgb(235,23,53)" rx="2" ry="2" />
<text  x="456.84" y="559.5" >leveldb::DBImpl::Write</text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (7,999,998 samples, 0.27%)</title><rect x="1084.0" y="453" width="3.2" height="15.0" fill="rgb(230,53,0)" rx="2" ry="2" />
<text  x="1086.99" y="463.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator (1,333,333 samples, 0.05%)</title><rect x="318.4" y="469" width="0.5" height="15.0" fill="rgb(232,184,0)" rx="2" ry="2" />
<text  x="321.38" y="479.5" ></text>
</g>
<g >
<title>ext4_has_free_clusters (1,333,333 samples, 0.05%)</title><rect x="842.0" y="213" width="0.5" height="15.0" fill="rgb(248,135,27)" rx="2" ry="2" />
<text  x="845.00" y="223.5" ></text>
</g>
<g >
<title>do_unlinkat (5,333,332 samples, 0.18%)</title><rect x="11.1" y="405" width="2.1" height="15.0" fill="rgb(217,32,49)" rx="2" ry="2" />
<text  x="14.07" y="415.5" ></text>
</g>
<g >
<title>__strchrnul_avx2 (1,333,333 samples, 0.05%)</title><rect x="441.5" y="469" width="0.6" height="15.0" fill="rgb(225,106,28)" rx="2" ry="2" />
<text  x="444.52" y="479.5" ></text>
</g>
<g >
<title>leveldb::Slice::remove_prefix (1,333,333 samples, 0.05%)</title><rect x="1138.6" y="709" width="0.5" height="15.0" fill="rgb(225,162,35)" rx="2" ry="2" />
<text  x="1141.60" y="719.5" ></text>
</g>
<g >
<title>std::mutex::lock (2,666,666 samples, 0.09%)</title><rect x="475.8" y="485" width="1.1" height="15.0" fill="rgb(230,194,4)" rx="2" ry="2" />
<text  x="478.79" y="495.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1,333,333 samples, 0.05%)</title><rect x="279.8" y="325" width="0.6" height="15.0" fill="rgb(208,77,52)" rx="2" ry="2" />
<text  x="282.84" y="335.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::MakeRoomForWrite (1,333,333 samples, 0.05%)</title><rect x="1135.4" y="725" width="0.5" height="15.0" fill="rgb(237,6,12)" rx="2" ry="2" />
<text  x="1138.39" y="735.5" ></text>
</g>
<g >
<title>_IO_new_fopen (2,666,666 samples, 0.09%)</title><rect x="1127.9" y="629" width="1.1" height="15.0" fill="rgb(219,112,31)" rx="2" ry="2" />
<text  x="1130.89" y="639.5" ></text>
</g>
<g >
<title>leveldb::MemTable::KeyComparator::operator (15,999,996 samples, 0.54%)</title><rect x="503.6" y="421" width="6.5" height="15.0" fill="rgb(245,181,2)" rx="2" ry="2" />
<text  x="506.63" y="431.5" ></text>
</g>
<g >
<title>ext4_sync_file (1,333,333 samples, 0.05%)</title><rect x="1125.8" y="469" width="0.5" height="15.0" fill="rgb(245,3,7)" rx="2" ry="2" />
<text  x="1128.75" y="479.5" ></text>
</g>
<g >
<title>__do_page_fault (2,666,666 samples, 0.09%)</title><rect x="82.8" y="293" width="1.1" height="15.0" fill="rgb(249,183,5)" rx="2" ry="2" />
<text  x="85.81" y="303.5" ></text>
</g>
<g >
<title>tc_malloc (1,333,333 samples, 0.05%)</title><rect x="1118.8" y="597" width="0.5" height="15.0" fill="rgb(221,212,49)" rx="2" ry="2" />
<text  x="1121.79" y="607.5" ></text>
</g>
<g >
<title>__find_get_block (1,333,333 samples, 0.05%)</title><rect x="824.3" y="165" width="0.6" height="15.0" fill="rgb(233,19,43)" rx="2" ry="2" />
<text  x="827.33" y="175.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.05%)</title><rect x="56.0" y="437" width="0.6" height="15.0" fill="rgb(205,135,39)" rx="2" ry="2" />
<text  x="59.04" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (1,333,333 samples, 0.05%)</title><rect x="378.9" y="421" width="0.5" height="15.0" fill="rgb(221,107,50)" rx="2" ry="2" />
<text  x="381.88" y="431.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.05%)</title><rect x="358.5" y="373" width="0.6" height="15.0" fill="rgb(224,220,51)" rx="2" ry="2" />
<text  x="361.54" y="383.5" ></text>
</g>
<g >
<title>do_munmap (1,333,333 samples, 0.05%)</title><rect x="421.7" y="293" width="0.6" height="15.0" fill="rgb(208,142,20)" rx="2" ry="2" />
<text  x="424.72" y="303.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Update (3,999,999 samples, 0.14%)</title><rect x="217.2" y="437" width="1.6" height="15.0" fill="rgb(246,195,52)" rx="2" ry="2" />
<text  x="220.20" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,333,333 samples, 0.05%)</title><rect x="107.4" y="325" width="0.6" height="15.0" fill="rgb(226,30,4)" rx="2" ry="2" />
<text  x="110.44" y="335.5" ></text>
</g>
<g >
<title>_dl_protect_relro (1,333,333 samples, 0.05%)</title><rect x="1130.0" y="629" width="0.6" height="15.0" fill="rgb(245,106,42)" rx="2" ry="2" />
<text  x="1133.04" y="639.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; &gt;::_M_init_functor (7,999,998 samples, 0.27%)</title><rect x="1034.7" y="485" width="3.2" height="15.0" fill="rgb(223,184,41)" rx="2" ry="2" />
<text  x="1037.74" y="495.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="482.7" y="469" width="0.6" height="15.0" fill="rgb(217,5,10)" rx="2" ry="2" />
<text  x="485.75" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (2,666,666 samples, 0.09%)</title><rect x="327.5" y="437" width="1.1" height="15.0" fill="rgb(239,216,36)" rx="2" ry="2" />
<text  x="330.49" y="447.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (1,333,333 samples, 0.05%)</title><rect x="336.1" y="485" width="0.5" height="15.0" fill="rgb(236,25,24)" rx="2" ry="2" />
<text  x="339.05" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (27,999,993 samples, 0.95%)</title><rect x="162.6" y="453" width="11.2" height="15.0" fill="rgb(234,96,26)" rx="2" ry="2" />
<text  x="165.59" y="463.5" ></text>
</g>
<g >
<title>leveldb::TableCache::Evict (1,333,333 samples, 0.05%)</title><rect x="421.7" y="501" width="0.6" height="15.0" fill="rgb(222,114,4)" rx="2" ry="2" />
<text  x="424.72" y="511.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="400.3" y="373" width="0.5" height="15.0" fill="rgb(248,207,15)" rx="2" ry="2" />
<text  x="403.30" y="383.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_set_retrieved_flag (3,999,999 samples, 0.14%)</title><rect x="1054.0" y="485" width="1.6" height="15.0" fill="rgb(225,179,8)" rx="2" ry="2" />
<text  x="1057.01" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (1,333,333 samples, 0.05%)</title><rect x="268.6" y="357" width="0.5" height="15.0" fill="rgb(218,126,37)" rx="2" ry="2" />
<text  x="271.59" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (5,333,332 samples, 0.18%)</title><rect x="380.0" y="437" width="2.1" height="15.0" fill="rgb(213,115,13)" rx="2" ry="2" />
<text  x="382.95" y="447.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (3,999,999 samples, 0.14%)</title><rect x="898.2" y="181" width="1.6" height="15.0" fill="rgb(236,45,50)" rx="2" ry="2" />
<text  x="901.21" y="191.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2,666,666 samples, 0.09%)</title><rect x="250.4" y="405" width="1.1" height="15.0" fill="rgb(252,219,27)" rx="2" ry="2" />
<text  x="253.39" y="415.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.05%)</title><rect x="227.4" y="469" width="0.5" height="15.0" fill="rgb(207,107,12)" rx="2" ry="2" />
<text  x="230.37" y="479.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (11,999,997 samples, 0.41%)</title><rect x="296.4" y="469" width="4.9" height="15.0" fill="rgb(216,225,4)" rx="2" ry="2" />
<text  x="299.43" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (6,666,665 samples, 0.23%)</title><rect x="384.8" y="405" width="2.7" height="15.0" fill="rgb(244,109,15)" rx="2" ry="2" />
<text  x="387.77" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (3,999,999 samples, 0.14%)</title><rect x="173.8" y="453" width="1.6" height="15.0" fill="rgb(229,181,41)" rx="2" ry="2" />
<text  x="176.83" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (1,333,333 samples, 0.05%)</title><rect x="335.5" y="437" width="0.6" height="15.0" fill="rgb(240,211,54)" rx="2" ry="2" />
<text  x="338.52" y="447.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Next (15,999,996 samples, 0.54%)</title><rect x="212.4" y="453" width="6.4" height="15.0" fill="rgb(240,210,19)" rx="2" ry="2" />
<text  x="215.38" y="463.5" ></text>
</g>
<g >
<title>snappy::Compress (33,333,325 samples, 1.13%)</title><rect x="128.9" y="389" width="13.3" height="15.0" fill="rgb(251,63,20)" rx="2" ry="2" />
<text  x="131.86" y="399.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (31,999,992 samples, 1.09%)</title><rect x="317.8" y="501" width="12.9" height="15.0" fill="rgb(205,183,17)" rx="2" ry="2" />
<text  x="320.85" y="511.5" ></text>
</g>
<g >
<title>leveldb::EncodeVarint32 (1,333,333 samples, 0.05%)</title><rect x="37.8" y="421" width="0.6" height="15.0" fill="rgb(240,51,4)" rx="2" ry="2" />
<text  x="40.84" y="431.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (2,666,666 samples, 0.09%)</title><rect x="235.9" y="437" width="1.1" height="15.0" fill="rgb(208,185,43)" rx="2" ry="2" />
<text  x="238.93" y="447.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Rep::~Rep (1,333,333 samples, 0.05%)</title><rect x="160.4" y="453" width="0.6" height="15.0" fill="rgb(205,217,41)" rx="2" ry="2" />
<text  x="163.44" y="463.5" ></text>
</g>
<g >
<title>fsnotify (1,333,333 samples, 0.05%)</title><rect x="10.5" y="389" width="0.6" height="15.0" fill="rgb(213,226,7)" rx="2" ry="2" />
<text  x="13.54" y="399.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (1,333,333 samples, 0.05%)</title><rect x="161.0" y="261" width="0.5" height="15.0" fill="rgb(223,33,31)" rx="2" ry="2" />
<text  x="163.98" y="271.5" ></text>
</g>
<g >
<title>truncate_inode_pages_range (3,999,999 samples, 0.14%)</title><rect x="231.1" y="309" width="1.6" height="15.0" fill="rgb(234,65,16)" rx="2" ry="2" />
<text  x="234.12" y="319.5" ></text>
</g>
<g >
<title>handle_mm_fault (15,999,996 samples, 0.54%)</title><rect x="1160.6" y="661" width="6.4" height="15.0" fill="rgb(230,220,6)" rx="2" ry="2" />
<text  x="1163.55" y="671.5" ></text>
</g>
<g >
<title>__pagevec_release (2,666,666 samples, 0.09%)</title><rect x="1120.9" y="469" width="1.1" height="15.0" fill="rgb(227,126,48)" rx="2" ry="2" />
<text  x="1123.93" y="479.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="355.9" y="421" width="0.5" height="15.0" fill="rgb(221,110,31)" rx="2" ry="2" />
<text  x="358.86" y="431.5" ></text>
</g>
<g >
<title>kmem_cache_free (7,999,998 samples, 0.27%)</title><rect x="855.9" y="229" width="3.2" height="15.0" fill="rgb(213,206,44)" rx="2" ry="2" />
<text  x="858.92" y="239.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (9,333,331 samples, 0.32%)</title><rect x="903.0" y="261" width="3.8" height="15.0" fill="rgb(241,31,24)" rx="2" ry="2" />
<text  x="906.03" y="271.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (3,999,999 samples, 0.14%)</title><rect x="35.2" y="421" width="1.6" height="15.0" fill="rgb(213,56,24)" rx="2" ry="2" />
<text  x="38.16" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (2,666,666 samples, 0.09%)</title><rect x="331.2" y="453" width="1.1" height="15.0" fill="rgb(206,36,18)" rx="2" ry="2" />
<text  x="334.23" y="463.5" ></text>
</g>
<g >
<title>__gthread_once (158,666,627 samples, 5.40%)</title><rect x="966.2" y="469" width="63.7" height="15.0" fill="rgb(206,33,54)" rx="2" ry="2" />
<text  x="969.21" y="479.5" >__gthr..</text>
</g>
<g >
<title>leveldb::DBImpl::WriteLevel0Table (202,666,616 samples, 6.90%)</title><rect x="232.7" y="485" width="81.4" height="15.0" fill="rgb(224,24,14)" rx="2" ry="2" />
<text  x="235.72" y="495.5" >leveldb::..</text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::RemoveFile (5,333,332 samples, 0.18%)</title><rect x="11.1" y="485" width="2.1" height="15.0" fill="rgb(212,102,35)" rx="2" ry="2" />
<text  x="14.07" y="495.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.05%)</title><rect x="1183.6" y="725" width="0.5" height="15.0" fill="rgb(230,186,34)" rx="2" ry="2" />
<text  x="1186.58" y="735.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::GetMaxHeight (1,333,333 samples, 0.05%)</title><rect x="524.5" y="421" width="0.5" height="15.0" fill="rgb(208,42,19)" rx="2" ry="2" />
<text  x="527.51" y="431.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="321.1" y="341" width="0.5" height="15.0" fill="rgb(238,191,28)" rx="2" ry="2" />
<text  x="324.06" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (1,333,333 samples, 0.05%)</title><rect x="305.5" y="405" width="0.6" height="15.0" fill="rgb(254,115,6)" rx="2" ry="2" />
<text  x="308.54" y="415.5" ></text>
</g>
<g >
<title>truncate_inode_pages_range (11,999,997 samples, 0.41%)</title><rect x="1120.9" y="485" width="4.9" height="15.0" fill="rgb(233,8,51)" rx="2" ry="2" />
<text  x="1123.93" y="495.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_S_check&lt;std::__future_base::_State_baseV2&gt; (1,333,333 samples, 0.05%)</title><rect x="1031.0" y="485" width="0.5" height="15.0" fill="rgb(240,164,33)" rx="2" ry="2" />
<text  x="1033.99" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (2,666,666 samples, 0.09%)</title><rect x="324.8" y="389" width="1.1" height="15.0" fill="rgb(215,216,12)" rx="2" ry="2" />
<text  x="327.81" y="399.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (3,999,999 samples, 0.14%)</title><rect x="252.5" y="421" width="1.6" height="15.0" fill="rgb(225,144,9)" rx="2" ry="2" />
<text  x="255.53" y="431.5" ></text>
</g>
<g >
<title>iov_iter_advance (1,333,333 samples, 0.05%)</title><rect x="908.9" y="293" width="0.6" height="15.0" fill="rgb(223,18,48)" rx="2" ry="2" />
<text  x="911.92" y="303.5" ></text>
</g>
<g >
<title>_start (26,666,660 samples, 0.91%)</title><rect x="1120.4" y="725" width="10.7" height="15.0" fill="rgb(221,165,6)" rx="2" ry="2" />
<text  x="1123.40" y="735.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Rep::Rep (5,333,332 samples, 0.18%)</title><rect x="294.3" y="437" width="2.1" height="15.0" fill="rgb(219,159,11)" rx="2" ry="2" />
<text  x="297.29" y="447.5" ></text>
</g>
<g >
<title>ext4_inode_csum_set (33,333,325 samples, 1.13%)</title><rect x="873.6" y="181" width="13.4" height="15.0" fill="rgb(210,147,5)" rx="2" ry="2" />
<text  x="876.58" y="191.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (2,666,666 samples, 0.09%)</title><rect x="475.8" y="469" width="1.1" height="15.0" fill="rgb(252,56,49)" rx="2" ry="2" />
<text  x="478.79" y="479.5" ></text>
</g>
<g >
<title>jbd2_journal_grab_journal_head (2,666,666 samples, 0.09%)</title><rect x="1123.6" y="357" width="1.1" height="15.0" fill="rgb(253,141,54)" rx="2" ry="2" />
<text  x="1126.61" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::_M_erase_at_end (1,333,333 samples, 0.05%)</title><rect x="281.4" y="373" width="0.6" height="15.0" fill="rgb(226,226,6)" rx="2" ry="2" />
<text  x="284.44" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1,333,333 samples, 0.05%)</title><rect x="317.8" y="469" width="0.6" height="15.0" fill="rgb(214,114,40)" rx="2" ry="2" />
<text  x="320.85" y="479.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::Recover (1,333,333 samples, 0.05%)</title><rect x="1125.8" y="629" width="0.5" height="15.0" fill="rgb(205,68,24)" rx="2" ry="2" />
<text  x="1128.75" y="639.5" ></text>
</g>
<g >
<title>new_inode (1,333,333 samples, 0.05%)</title><rect x="150.3" y="261" width="0.5" height="15.0" fill="rgb(210,138,32)" rx="2" ry="2" />
<text  x="153.27" y="271.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="999.4" y="309" width="0.5" height="15.0" fill="rgb(238,15,47)" rx="2" ry="2" />
<text  x="1002.40" y="319.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,333,333 samples, 0.05%)</title><rect x="261.1" y="309" width="0.5" height="15.0" fill="rgb(224,179,3)" rx="2" ry="2" />
<text  x="264.10" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::deallocate (1,333,333 samples, 0.05%)</title><rect x="160.4" y="389" width="0.6" height="15.0" fill="rgb(254,185,4)" rx="2" ry="2" />
<text  x="163.44" y="399.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;::_Tuple_impl (3,999,999 samples, 0.14%)</title><rect x="271.8" y="309" width="1.6" height="15.0" fill="rgb(217,91,43)" rx="2" ry="2" />
<text  x="274.81" y="319.5" ></text>
</g>
<g >
<title>leveldb::Status::operator= (3,999,999 samples, 0.14%)</title><rect x="919.6" y="485" width="1.6" height="15.0" fill="rgb(235,97,41)" rx="2" ry="2" />
<text  x="922.63" y="495.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (1,333,333 samples, 0.05%)</title><rect x="159.4" y="213" width="0.5" height="15.0" fill="rgb(237,42,18)" rx="2" ry="2" />
<text  x="162.37" y="223.5" ></text>
</g>
<g >
<title>__x64_sys_unlink (1,333,333 samples, 0.05%)</title><rect x="421.2" y="437" width="0.5" height="15.0" fill="rgb(222,128,34)" rx="2" ry="2" />
<text  x="424.18" y="447.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (3,999,999 samples, 0.14%)</title><rect x="1148.8" y="725" width="1.6" height="15.0" fill="rgb(238,147,20)" rx="2" ry="2" />
<text  x="1151.77" y="735.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteBlock (69,333,316 samples, 2.36%)</title><rect x="114.4" y="437" width="27.8" height="15.0" fill="rgb(217,201,0)" rx="2" ry="2" />
<text  x="117.40" y="447.5" >l..</text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::key (1,333,333 samples, 0.05%)</title><rect x="26.1" y="453" width="0.5" height="15.0" fill="rgb(218,127,29)" rx="2" ry="2" />
<text  x="29.06" y="463.5" ></text>
</g>
<g >
<title>leveldb::port::Snappy_Compress (1,333,333 samples, 0.05%)</title><rect x="149.7" y="437" width="0.6" height="15.0" fill="rgb(238,220,48)" rx="2" ry="2" />
<text  x="152.74" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (2,666,666 samples, 0.09%)</title><rect x="323.7" y="357" width="1.1" height="15.0" fill="rgb(245,76,6)" rx="2" ry="2" />
<text  x="326.74" y="367.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.05%)</title><rect x="756.9" y="453" width="0.5" height="15.0" fill="rgb(224,177,39)" rx="2" ry="2" />
<text  x="759.87" y="463.5" ></text>
</g>
<g >
<title>__brk (1,333,333 samples, 0.05%)</title><rect x="144.4" y="245" width="0.5" height="15.0" fill="rgb(213,13,0)" rx="2" ry="2" />
<text  x="147.38" y="255.5" ></text>
</g>
<g >
<title>current_time (1,333,333 samples, 0.05%)</title><rect x="811.5" y="293" width="0.5" height="15.0" fill="rgb(230,40,38)" rx="2" ry="2" />
<text  x="814.48" y="303.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1,333,333 samples, 0.05%)</title><rect x="15.9" y="421" width="0.5" height="15.0" fill="rgb(239,146,26)" rx="2" ry="2" />
<text  x="18.89" y="431.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (5,333,332 samples, 0.18%)</title><rect x="18.6" y="453" width="2.1" height="15.0" fill="rgb(216,207,32)" rx="2" ry="2" />
<text  x="21.57" y="463.5" ></text>
</g>
<g >
<title>__radix_tree_lookup (2,666,666 samples, 0.09%)</title><rect x="844.7" y="197" width="1.0" height="15.0" fill="rgb(244,210,3)" rx="2" ry="2" />
<text  x="847.67" y="207.5" ></text>
</g>
<g >
<title>__libc_open64 (1,333,333 samples, 0.05%)</title><rect x="468.3" y="485" width="0.5" height="15.0" fill="rgb(248,116,2)" rx="2" ry="2" />
<text  x="471.29" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl (2,666,666 samples, 0.09%)</title><rect x="1067.9" y="357" width="1.1" height="15.0" fill="rgb(228,199,25)" rx="2" ry="2" />
<text  x="1070.93" y="367.5" ></text>
</g>
<g >
<title>ext4_da_get_block_prep (1,333,333 samples, 0.05%)</title><rect x="1165.9" y="565" width="0.5" height="15.0" fill="rgb(236,52,5)" rx="2" ry="2" />
<text  x="1168.91" y="575.5" ></text>
</g>
<g >
<title>madvise_free_single_vma (1,333,333 samples, 0.05%)</title><rect x="1119.9" y="341" width="0.5" height="15.0" fill="rgb(220,212,52)" rx="2" ry="2" />
<text  x="1122.86" y="351.5" ></text>
</g>
<g >
<title>do_filp_open (1,333,333 samples, 0.05%)</title><rect x="1129.5" y="469" width="0.5" height="15.0" fill="rgb(251,112,6)" rx="2" ry="2" />
<text  x="1132.50" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (2,666,666 samples, 0.09%)</title><rect x="1180.4" y="725" width="1.0" height="15.0" fill="rgb(248,119,53)" rx="2" ry="2" />
<text  x="1183.36" y="735.5" ></text>
</g>
<g >
<title>do_syscall_64 (3,999,999 samples, 0.14%)</title><rect x="231.1" y="421" width="1.6" height="15.0" fill="rgb(246,62,19)" rx="2" ry="2" />
<text  x="234.12" y="431.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.05%)</title><rect x="355.9" y="389" width="0.5" height="15.0" fill="rgb(249,141,40)" rx="2" ry="2" />
<text  x="358.86" y="399.5" ></text>
</g>
<g >
<title>do_syscall_64 (11,999,997 samples, 0.41%)</title><rect x="1120.9" y="597" width="4.9" height="15.0" fill="rgb(214,79,10)" rx="2" ry="2" />
<text  x="1123.93" y="607.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="446.3" y="453" width="0.6" height="15.0" fill="rgb(206,49,6)" rx="2" ry="2" />
<text  x="449.34" y="463.5" ></text>
</g>
<g >
<title>page_fault (2,666,666 samples, 0.09%)</title><rect x="452.8" y="485" width="1.0" height="15.0" fill="rgb(254,140,32)" rx="2" ry="2" />
<text  x="455.77" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (17,333,329 samples, 0.59%)</title><rect x="320.5" y="453" width="7.0" height="15.0" fill="rgb(248,44,21)" rx="2" ry="2" />
<text  x="323.53" y="463.5" ></text>
</g>
<g >
<title>memmove_movnt_avx512f_clwb (25,333,327 samples, 0.86%)</title><rect x="1156.8" y="725" width="10.2" height="15.0" fill="rgb(224,47,28)" rx="2" ry="2" />
<text  x="1159.81" y="735.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,333,333 samples, 0.05%)</title><rect x="1118.8" y="453" width="0.5" height="15.0" fill="rgb(218,82,18)" rx="2" ry="2" />
<text  x="1121.79" y="463.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::LRUCache::Erase (1,333,333 samples, 0.05%)</title><rect x="421.7" y="469" width="0.6" height="15.0" fill="rgb(228,93,12)" rx="2" ry="2" />
<text  x="424.72" y="479.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;::tuple (3,999,999 samples, 0.14%)</title><rect x="271.8" y="325" width="1.6" height="15.0" fill="rgb(211,171,33)" rx="2" ry="2" />
<text  x="274.81" y="335.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1,333,333 samples, 0.05%)</title><rect x="158.8" y="213" width="0.6" height="15.0" fill="rgb(252,73,11)" rx="2" ry="2" />
<text  x="161.84" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (6,666,665 samples, 0.23%)</title><rect x="302.9" y="421" width="2.6" height="15.0" fill="rgb(229,22,10)" rx="2" ry="2" />
<text  x="305.86" y="431.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="230.6" y="389" width="0.5" height="15.0" fill="rgb(231,174,31)" rx="2" ry="2" />
<text  x="233.58" y="399.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (2,666,666 samples, 0.09%)</title><rect x="1070.1" y="421" width="1.0" height="15.0" fill="rgb(206,66,22)" rx="2" ry="2" />
<text  x="1073.07" y="431.5" ></text>
</g>
<g >
<title>ext4_page_mkwrite (3,999,999 samples, 0.14%)</title><rect x="1164.8" y="613" width="1.6" height="15.0" fill="rgb(210,85,33)" rx="2" ry="2" />
<text  x="1167.84" y="623.5" ></text>
</g>
<g >
<title>run_timer_softirq (1,333,333 samples, 0.05%)</title><rect x="497.2" y="149" width="0.5" height="15.0" fill="rgb(221,33,47)" rx="2" ry="2" />
<text  x="500.21" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::push_back (2,666,666 samples, 0.09%)</title><rect x="420.1" y="501" width="1.1" height="15.0" fill="rgb(247,172,45)" rx="2" ry="2" />
<text  x="423.11" y="511.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpans (1,333,333 samples, 0.05%)</title><rect x="496.1" y="357" width="0.6" height="15.0" fill="rgb(251,84,34)" rx="2" ry="2" />
<text  x="499.13" y="367.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, false&gt;::_Head_base&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*&amp;&gt; (3,999,999 samples, 0.14%)</title><rect x="1005.3" y="229" width="1.6" height="15.0" fill="rgb(223,190,24)" rx="2" ry="2" />
<text  x="1008.29" y="239.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (1,333,333 samples, 0.05%)</title><rect x="15.9" y="437" width="0.5" height="15.0" fill="rgb(221,88,37)" rx="2" ry="2" />
<text  x="18.89" y="447.5" ></text>
</g>
<g >
<title>leveldb::Block::Iter::ParseNextKey (3,999,999 samples, 0.14%)</title><rect x="212.9" y="389" width="1.6" height="15.0" fill="rgb(241,47,3)" rx="2" ry="2" />
<text  x="215.91" y="399.5" ></text>
</g>
<g >
<title>__wake_up (1,333,333 samples, 0.05%)</title><rect x="820.6" y="197" width="0.5" height="15.0" fill="rgb(238,96,39)" rx="2" ry="2" />
<text  x="823.58" y="207.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (1,333,333 samples, 0.05%)</title><rect x="254.1" y="421" width="0.6" height="15.0" fill="rgb(243,108,16)" rx="2" ry="2" />
<text  x="257.14" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (2,666,666 samples, 0.09%)</title><rect x="89.2" y="373" width="1.1" height="15.0" fill="rgb(244,167,33)" rx="2" ry="2" />
<text  x="92.24" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::operator* (1,333,333 samples, 0.05%)</title><rect x="1047.1" y="485" width="0.5" height="15.0" fill="rgb(246,91,16)" rx="2" ry="2" />
<text  x="1050.05" y="495.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="192.6" y="437" width="0.5" height="15.0" fill="rgb(251,179,11)" rx="2" ry="2" />
<text  x="195.57" y="447.5" ></text>
</g>
<g >
<title>__add_to_page_cache_locked (1,333,333 samples, 0.05%)</title><rect x="1163.8" y="469" width="0.5" height="15.0" fill="rgb(217,22,40)" rx="2" ry="2" />
<text  x="1166.77" y="479.5" ></text>
</g>
<g >
<title>DefaultSysAllocator::Alloc (1,333,333 samples, 0.05%)</title><rect x="144.4" y="309" width="0.5" height="15.0" fill="rgb(254,154,5)" rx="2" ry="2" />
<text  x="147.38" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data@plt (1,333,333 samples, 0.05%)</title><rect x="261.1" y="277" width="0.5" height="15.0" fill="rgb(237,81,28)" rx="2" ry="2" />
<text  x="264.10" y="287.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1,333,333 samples, 0.05%)</title><rect x="143.8" y="293" width="0.6" height="15.0" fill="rgb(254,211,4)" rx="2" ry="2" />
<text  x="146.85" y="303.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::Append (6,666,665 samples, 0.23%)</title><rect x="783.1" y="485" width="2.7" height="15.0" fill="rgb(222,49,28)" rx="2" ry="2" />
<text  x="786.10" y="495.5" ></text>
</g>
<g >
<title>leveldb::Slice::operator[] (19,999,995 samples, 0.68%)</title><rect x="40.5" y="437" width="8.0" height="15.0" fill="rgb(249,227,46)" rx="2" ry="2" />
<text  x="43.52" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (1,333,333 samples, 0.05%)</title><rect x="178.1" y="357" width="0.5" height="15.0" fill="rgb(252,50,27)" rx="2" ry="2" />
<text  x="181.11" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.05%)</title><rect x="1117.7" y="725" width="0.6" height="15.0" fill="rgb(251,188,49)" rx="2" ry="2" />
<text  x="1120.72" y="735.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::SetCount (3,999,999 samples, 0.14%)</title><rect x="1115.6" y="533" width="1.6" height="15.0" fill="rgb(238,50,19)" rx="2" ry="2" />
<text  x="1118.58" y="543.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (2,666,666 samples, 0.09%)</title><rect x="328.6" y="437" width="1.0" height="15.0" fill="rgb(248,57,47)" rx="2" ry="2" />
<text  x="331.56" y="447.5" ></text>
</g>
<g >
<title>_IO_vsnprintf (54,666,653 samples, 1.86%)</title><rect x="424.9" y="517" width="22.0" height="15.0" fill="rgb(240,171,29)" rx="2" ry="2" />
<text  x="427.93" y="527.5" >_..</text>
</g>
<g >
<title>std::tuple&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::tuple&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*&amp;, std::__future_base::_Result_base::_Deleter, true&gt; (9,333,331 samples, 0.32%)</title><rect x="1005.3" y="261" width="3.7" height="15.0" fill="rgb(214,113,21)" rx="2" ry="2" />
<text  x="1008.29" y="271.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Equal (15,999,996 samples, 0.54%)</title><rect x="503.6" y="437" width="6.5" height="15.0" fill="rgb(234,5,24)" rx="2" ry="2" />
<text  x="506.63" y="447.5" ></text>
</g>
<g >
<title>perf_output_begin (1,333,333 samples, 0.05%)</title><rect x="144.4" y="101" width="0.5" height="15.0" fill="rgb(211,83,38)" rx="2" ry="2" />
<text  x="147.38" y="111.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (2,666,666 samples, 0.09%)</title><rect x="1055.6" y="437" width="1.1" height="15.0" fill="rgb(231,107,41)" rx="2" ry="2" />
<text  x="1058.62" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::empty (1,333,333 samples, 0.05%)</title><rect x="472.6" y="501" width="0.5" height="15.0" fill="rgb(223,47,38)" rx="2" ry="2" />
<text  x="475.58" y="511.5" ></text>
</g>
<g >
<title>unmap_single_vma (1,333,333 samples, 0.05%)</title><rect x="421.7" y="245" width="0.6" height="15.0" fill="rgb(237,154,18)" rx="2" ry="2" />
<text  x="424.72" y="255.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__future_base::_Result_base*, false&gt;::_Head_base&lt;std::__future_base::_Result_base*&amp;&gt; (1,333,333 samples, 0.05%)</title><rect x="1016.5" y="245" width="0.6" height="15.0" fill="rgb(206,200,26)" rx="2" ry="2" />
<text  x="1019.53" y="255.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::key (10,666,664 samples, 0.36%)</title><rect x="16.4" y="469" width="4.3" height="15.0" fill="rgb(250,212,22)" rx="2" ry="2" />
<text  x="19.42" y="479.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixMmapReadableFile::~PosixMmapReadableFile (1,333,333 samples, 0.05%)</title><rect x="421.7" y="405" width="0.6" height="15.0" fill="rgb(218,207,21)" rx="2" ry="2" />
<text  x="424.72" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (3,999,999 samples, 0.14%)</title><rect x="277.2" y="341" width="1.6" height="15.0" fill="rgb(219,34,28)" rx="2" ry="2" />
<text  x="280.16" y="351.5" ></text>
</g>
<g >
<title>leveldb::Status::~Status (1,333,333 samples, 0.05%)</title><rect x="414.8" y="469" width="0.5" height="15.0" fill="rgb(216,62,25)" rx="2" ry="2" />
<text  x="417.75" y="479.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (45,333,322 samples, 1.54%)</title><rect x="1059.4" y="469" width="18.2" height="15.0" fill="rgb(238,119,48)" rx="2" ry="2" />
<text  x="1062.36" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (1,333,333 samples, 0.05%)</title><rect x="331.2" y="421" width="0.6" height="15.0" fill="rgb(214,13,16)" rx="2" ry="2" />
<text  x="334.23" y="431.5" ></text>
</g>
<g >
<title>__x64_sys_write (1,333,333 samples, 0.05%)</title><rect x="161.0" y="325" width="0.5" height="15.0" fill="rgb(247,223,22)" rx="2" ry="2" />
<text  x="163.98" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="321.1" y="405" width="0.5" height="15.0" fill="rgb(234,186,30)" rx="2" ry="2" />
<text  x="324.06" y="415.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (1,333,333 samples, 0.05%)</title><rect x="1144.0" y="709" width="0.5" height="15.0" fill="rgb(237,18,11)" rx="2" ry="2" />
<text  x="1146.96" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (9,333,331 samples, 0.32%)</title><rect x="96.7" y="357" width="3.8" height="15.0" fill="rgb(209,225,54)" rx="2" ry="2" />
<text  x="99.73" y="367.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="229.0" y="389" width="0.5" height="15.0" fill="rgb(253,175,15)" rx="2" ry="2" />
<text  x="231.97" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1,333,333 samples, 0.05%)</title><rect x="251.5" y="421" width="0.5" height="15.0" fill="rgb(215,170,26)" rx="2" ry="2" />
<text  x="254.46" y="431.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (1,333,333 samples, 0.05%)</title><rect x="820.6" y="181" width="0.5" height="15.0" fill="rgb(236,113,25)" rx="2" ry="2" />
<text  x="823.58" y="191.5" ></text>
</g>
<g >
<title>_itoa_word (10,666,664 samples, 0.36%)</title><rect x="442.1" y="485" width="4.2" height="15.0" fill="rgb(219,114,23)" rx="2" ry="2" />
<text  x="445.06" y="495.5" ></text>
</g>
<g >
<title>ext4_create (1,333,333 samples, 0.05%)</title><rect x="150.3" y="293" width="0.5" height="15.0" fill="rgb(219,171,54)" rx="2" ry="2" />
<text  x="153.27" y="303.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (23,999,994 samples, 0.82%)</title><rect x="150.8" y="309" width="9.6" height="15.0" fill="rgb(234,96,30)" rx="2" ry="2" />
<text  x="153.81" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (1,333,333 samples, 0.05%)</title><rect x="375.1" y="341" width="0.6" height="15.0" fill="rgb(212,35,27)" rx="2" ry="2" />
<text  x="378.14" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10,666,664 samples, 0.36%)</title><rect x="296.4" y="405" width="4.3" height="15.0" fill="rgb(206,64,10)" rx="2" ry="2" />
<text  x="299.43" y="415.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1,333,333 samples, 0.05%)</title><rect x="453.3" y="389" width="0.5" height="15.0" fill="rgb(228,68,53)" rx="2" ry="2" />
<text  x="456.30" y="399.5" ></text>
</g>
<g >
<title>_IO_vfprintf_internal (46,666,655 samples, 1.59%)</title><rect x="428.1" y="501" width="18.8" height="15.0" fill="rgb(226,141,53)" rx="2" ry="2" />
<text  x="431.14" y="511.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1,333,333 samples, 0.05%)</title><rect x="113.9" y="405" width="0.5" height="15.0" fill="rgb(237,102,6)" rx="2" ry="2" />
<text  x="116.87" y="415.5" ></text>
</g>
<g >
<title>leveldb::Status::ok (1,333,333 samples, 0.05%)</title><rect x="146.5" y="437" width="0.6" height="15.0" fill="rgb(210,119,42)" rx="2" ry="2" />
<text  x="149.52" y="447.5" ></text>
</g>
<g >
<title>ext4_mark_iloc_dirty (5,333,332 samples, 0.18%)</title><rect x="821.7" y="213" width="2.1" height="15.0" fill="rgb(237,77,13)" rx="2" ry="2" />
<text  x="824.65" y="223.5" ></text>
</g>
<g >
<title>do_sys_open (1,333,333 samples, 0.05%)</title><rect x="1129.5" y="485" width="0.5" height="15.0" fill="rgb(251,10,17)" rx="2" ry="2" />
<text  x="1132.50" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_deleter (1,333,333 samples, 0.05%)</title><rect x="1179.8" y="725" width="0.6" height="15.0" fill="rgb(205,14,35)" rx="2" ry="2" />
<text  x="1182.83" y="735.5" ></text>
</g>
<g >
<title>leveldb::Status::~Status (1,333,333 samples, 0.05%)</title><rect x="1095.8" y="309" width="0.5" height="15.0" fill="rgb(246,37,32)" rx="2" ry="2" />
<text  x="1098.77" y="319.5" ></text>
</g>
<g >
<title>seq_read (1,333,333 samples, 0.05%)</title><rect x="1127.4" y="421" width="0.5" height="15.0" fill="rgb(241,105,42)" rx="2" ry="2" />
<text  x="1130.36" y="431.5" ></text>
</g>
<g >
<title>truncate_cleanup_page (7,999,998 samples, 0.27%)</title><rect x="1122.5" y="469" width="3.3" height="15.0" fill="rgb(254,38,12)" rx="2" ry="2" />
<text  x="1125.54" y="479.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1,333,333 samples, 0.05%)</title><rect x="865.6" y="197" width="0.5" height="15.0" fill="rgb(226,71,33)" rx="2" ry="2" />
<text  x="868.55" y="207.5" ></text>
</g>
<g >
<title>__set_page_dirty (3,999,999 samples, 0.14%)</title><rect x="898.2" y="197" width="1.6" height="15.0" fill="rgb(230,72,10)" rx="2" ry="2" />
<text  x="901.21" y="207.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1,333,333 samples, 0.05%)</title><rect x="749.4" y="421" width="0.5" height="15.0" fill="rgb(227,165,35)" rx="2" ry="2" />
<text  x="752.37" y="431.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (7,999,998 samples, 0.27%)</title><rect x="1135.9" y="725" width="3.2" height="15.0" fill="rgb(215,166,12)" rx="2" ry="2" />
<text  x="1138.93" y="735.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.05%)</title><rect x="226.8" y="421" width="0.6" height="15.0" fill="rgb(217,172,3)" rx="2" ry="2" />
<text  x="229.83" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (6,666,665 samples, 0.23%)</title><rect x="102.6" y="405" width="2.7" height="15.0" fill="rgb(214,154,25)" rx="2" ry="2" />
<text  x="105.62" y="415.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.05%)</title><rect x="1129.5" y="533" width="0.5" height="15.0" fill="rgb(220,108,3)" rx="2" ry="2" />
<text  x="1132.50" y="543.5" ></text>
</g>
<g >
<title>leveldb::Arena::AllocateAligned (3,999,999 samples, 0.14%)</title><rect x="745.6" y="421" width="1.6" height="15.0" fill="rgb(235,165,21)" rx="2" ry="2" />
<text  x="748.63" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr (2,666,666 samples, 0.09%)</title><rect x="1187.9" y="725" width="1.0" height="15.0" fill="rgb(224,76,24)" rx="2" ry="2" />
<text  x="1190.86" y="735.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="999.4" y="293" width="0.5" height="15.0" fill="rgb(224,170,10)" rx="2" ry="2" />
<text  x="1002.40" y="303.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.05%)</title><rect x="264.8" y="229" width="0.6" height="15.0" fill="rgb(243,39,12)" rx="2" ry="2" />
<text  x="267.85" y="239.5" ></text>
</g>
<g >
<title>leveldb::ParseInternalKey (2,666,666 samples, 0.09%)</title><rect x="193.1" y="485" width="1.1" height="15.0" fill="rgb(238,66,31)" rx="2" ry="2" />
<text  x="196.10" y="495.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;std::__future_base::_State_baseV2,  (1,333,333 samples, 0.05%)</title><rect x="1170.2" y="709" width="0.5" height="15.0" fill="rgb(230,29,51)" rx="2" ry="2" />
<text  x="1173.19" y="719.5" ></text>
</g>
<g >
<title>wait_for_stable_page (2,666,666 samples, 0.09%)</title><rect x="846.3" y="245" width="1.1" height="15.0" fill="rgb(216,85,44)" rx="2" ry="2" />
<text  x="849.28" y="255.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="388.0" y="341" width="0.5" height="15.0" fill="rgb(234,5,25)" rx="2" ry="2" />
<text  x="390.99" y="351.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1,333,333 samples, 0.05%)</title><rect x="385.8" y="309" width="0.6" height="15.0" fill="rgb(212,12,9)" rx="2" ry="2" />
<text  x="388.84" y="319.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.05%)</title><rect x="230.6" y="373" width="0.5" height="15.0" fill="rgb(226,118,37)" rx="2" ry="2" />
<text  x="233.58" y="383.5" ></text>
</g>
<g >
<title>__ext4_handle_dirty_metadata (2,666,666 samples, 0.09%)</title><rect x="864.5" y="197" width="1.1" height="15.0" fill="rgb(241,154,25)" rx="2" ry="2" />
<text  x="867.48" y="207.5" ></text>
</g>
<g >
<title>alloc_buffer_head (2,666,666 samples, 0.09%)</title><rect x="840.4" y="213" width="1.1" height="15.0" fill="rgb(236,180,38)" rx="2" ry="2" />
<text  x="843.39" y="223.5" ></text>
</g>
<g >
<title>try_to_free_buffers (1,333,333 samples, 0.05%)</title><rect x="12.7" y="197" width="0.5" height="15.0" fill="rgb(249,176,41)" rx="2" ry="2" />
<text  x="15.68" y="207.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::__setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; (3,999,999 samples, 0.14%)</title><rect x="1029.9" y="501" width="1.6" height="15.0" fill="rgb(229,105,47)" rx="2" ry="2" />
<text  x="1032.92" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::__future_base::_State_baseV2&gt;::_M_ptr (1,333,333 samples, 0.05%)</title><rect x="1062.0" y="421" width="0.6" height="15.0" fill="rgb(234,229,31)" rx="2" ry="2" />
<text  x="1065.04" y="431.5" ></text>
</g>
<g >
<title>leveldb::operator== (1,333,333 samples, 0.05%)</title><rect x="49.1" y="437" width="0.5" height="15.0" fill="rgb(212,98,16)" rx="2" ry="2" />
<text  x="52.08" y="447.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (5,333,332 samples, 0.18%)</title><rect x="751.0" y="405" width="2.1" height="15.0" fill="rgb(251,168,48)" rx="2" ry="2" />
<text  x="753.98" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1,333,333 samples, 0.05%)</title><rect x="419.0" y="501" width="0.6" height="15.0" fill="rgb(251,144,30)" rx="2" ry="2" />
<text  x="422.04" y="511.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="396.0" y="373" width="0.6" height="15.0" fill="rgb(216,183,46)" rx="2" ry="2" />
<text  x="399.02" y="383.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.05%)</title><rect x="1167.0" y="709" width="0.5" height="15.0" fill="rgb(230,125,47)" rx="2" ry="2" />
<text  x="1169.98" y="719.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1,333,333 samples, 0.05%)</title><rect x="562.5" y="341" width="0.6" height="15.0" fill="rgb(248,223,46)" rx="2" ry="2" />
<text  x="565.52" y="351.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (3,999,999 samples, 0.14%)</title><rect x="1129.5" y="677" width="1.6" height="15.0" fill="rgb(219,121,26)" rx="2" ry="2" />
<text  x="1132.50" y="687.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (2,666,666 samples, 0.09%)</title><rect x="746.2" y="309" width="1.0" height="15.0" fill="rgb(243,162,49)" rx="2" ry="2" />
<text  x="749.16" y="319.5" ></text>
</g>
<g >
<title>leveldb::Status::~Status (1,333,333 samples, 0.05%)</title><rect x="1152.5" y="709" width="0.6" height="15.0" fill="rgb(240,121,34)" rx="2" ry="2" />
<text  x="1155.52" y="719.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (5,333,332 samples, 0.18%)</title><rect x="1135.9" y="709" width="2.2" height="15.0" fill="rgb(250,94,43)" rx="2" ry="2" />
<text  x="1138.93" y="719.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::_M_head (1,333,333 samples, 0.05%)</title><rect x="1014.4" y="245" width="0.5" height="15.0" fill="rgb(239,131,45)" rx="2" ry="2" />
<text  x="1017.39" y="255.5" ></text>
</g>
<g >
<title>ksys_write (1,333,333 samples, 0.05%)</title><rect x="917.5" y="389" width="0.5" height="15.0" fill="rgb(242,150,21)" rx="2" ry="2" />
<text  x="920.49" y="399.5" ></text>
</g>
<g >
<title>try_to_free_buffers (2,666,666 samples, 0.09%)</title><rect x="1124.7" y="357" width="1.1" height="15.0" fill="rgb(214,32,19)" rx="2" ry="2" />
<text  x="1127.68" y="367.5" ></text>
</g>
<g >
<title>do_page_fault (5,333,332 samples, 0.18%)</title><rect x="497.2" y="309" width="2.1" height="15.0" fill="rgb(253,229,14)" rx="2" ry="2" />
<text  x="500.21" y="319.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (1,333,333 samples, 0.05%)</title><rect x="20.2" y="437" width="0.5" height="15.0" fill="rgb(232,207,6)" rx="2" ry="2" />
<text  x="23.17" y="447.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="229.0" y="405" width="0.5" height="15.0" fill="rgb(212,151,22)" rx="2" ry="2" />
<text  x="231.97" y="415.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (3,999,999 samples, 0.14%)</title><rect x="1023.0" y="293" width="1.6" height="15.0" fill="rgb(250,170,25)" rx="2" ry="2" />
<text  x="1025.96" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.05%)</title><rect x="329.6" y="453" width="0.6" height="15.0" fill="rgb(205,70,0)" rx="2" ry="2" />
<text  x="332.63" y="463.5" ></text>
</g>
<g >
<title>__walk_page_range (1,333,333 samples, 0.05%)</title><rect x="160.4" y="149" width="0.6" height="15.0" fill="rgb(249,82,16)" rx="2" ry="2" />
<text  x="163.44" y="159.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.05%)</title><rect x="1178.8" y="709" width="0.5" height="15.0" fill="rgb(242,143,30)" rx="2" ry="2" />
<text  x="1181.76" y="719.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::RemoveFile (3,999,999 samples, 0.14%)</title><rect x="231.1" y="469" width="1.6" height="15.0" fill="rgb(243,113,24)" rx="2" ry="2" />
<text  x="234.12" y="479.5" ></text>
</g>
<g >
<title>vfs_write (1,333,333 samples, 0.05%)</title><rect x="161.0" y="293" width="0.5" height="15.0" fill="rgb(208,25,46)" rx="2" ry="2" />
<text  x="163.98" y="303.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (2,666,666 samples, 0.09%)</title><rect x="1010.6" y="261" width="1.1" height="15.0" fill="rgb(251,184,19)" rx="2" ry="2" />
<text  x="1013.64" y="271.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="312.0" y="421" width="0.5" height="15.0" fill="rgb(222,176,31)" rx="2" ry="2" />
<text  x="314.96" y="431.5" ></text>
</g>
<g >
<title>apparmor_file_permission (5,333,332 samples, 0.18%)</title><rect x="914.8" y="309" width="2.2" height="15.0" fill="rgb(253,121,34)" rx="2" ry="2" />
<text  x="917.81" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1,333,333 samples, 0.05%)</title><rect x="54.4" y="437" width="0.6" height="15.0" fill="rgb(231,113,47)" rx="2" ry="2" />
<text  x="57.44" y="447.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.05%)</title><rect x="94.6" y="245" width="0.5" height="15.0" fill="rgb(241,143,13)" rx="2" ry="2" />
<text  x="97.59" y="255.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="482.7" y="501" width="0.6" height="15.0" fill="rgb(213,19,31)" rx="2" ry="2" />
<text  x="485.75" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__future_base::_State_baseV2&gt;::destroy&lt;std::__future_base::_State_baseV2&gt; (22,666,661 samples, 0.77%)</title><rect x="1092.0" y="421" width="9.1" height="15.0" fill="rgb(222,32,37)" rx="2" ry="2" />
<text  x="1095.02" y="431.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="482.7" y="485" width="0.6" height="15.0" fill="rgb(245,214,39)" rx="2" ry="2" />
<text  x="485.75" y="495.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="355.9" y="405" width="0.5" height="15.0" fill="rgb(215,99,44)" rx="2" ry="2" />
<text  x="358.86" y="415.5" ></text>
</g>
<g >
<title>std::__exception_ptr::exception_ptr::~exception_ptr@plt (1,333,333 samples, 0.05%)</title><rect x="1044.4" y="501" width="0.5" height="15.0" fill="rgb(210,148,10)" rx="2" ry="2" />
<text  x="1047.37" y="511.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::Writer::~Writer (2,666,666 samples, 0.09%)</title><rect x="474.7" y="517" width="1.1" height="15.0" fill="rgb(241,131,18)" rx="2" ry="2" />
<text  x="477.72" y="527.5" ></text>
</g>
<g >
<title>iput (3,999,999 samples, 0.14%)</title><rect x="231.1" y="373" width="1.6" height="15.0" fill="rgb(219,118,19)" rx="2" ry="2" />
<text  x="234.12" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::get_deleter (1,333,333 samples, 0.05%)</title><rect x="1100.6" y="373" width="0.5" height="15.0" fill="rgb(222,113,36)" rx="2" ry="2" />
<text  x="1103.59" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (2,666,666 samples, 0.09%)</title><rect x="85.5" y="373" width="1.1" height="15.0" fill="rgb(220,229,27)" rx="2" ry="2" />
<text  x="88.49" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5,333,332 samples, 0.18%)</title><rect x="11.1" y="453" width="2.1" height="15.0" fill="rgb(212,102,44)" rx="2" ry="2" />
<text  x="14.07" y="463.5" ></text>
</g>
<g >
<title>iov_iter_copy_from_user_atomic (11,999,997 samples, 0.41%)</title><rect x="902.5" y="277" width="4.8" height="15.0" fill="rgb(225,100,13)" rx="2" ry="2" />
<text  x="905.50" y="287.5" ></text>
</g>
<g >
<title>all (2,938,665,932 samples, 100%)</title><rect x="10.0" y="757" width="1180.0" height="15.0" fill="rgb(233,92,52)" rx="2" ry="2" />
<text  x="13.00" y="767.5" ></text>
</g>
<g >
<title>memset_erms (1,333,333 samples, 0.05%)</title><rect x="836.1" y="229" width="0.5" height="15.0" fill="rgb(248,205,6)" rx="2" ry="2" />
<text  x="839.11" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.05%)</title><rect x="1174.5" y="725" width="0.5" height="15.0" fill="rgb(237,142,50)" rx="2" ry="2" />
<text  x="1177.47" y="735.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl (2,666,666 samples, 0.09%)</title><rect x="1067.9" y="325" width="1.1" height="15.0" fill="rgb(250,18,27)" rx="2" ry="2" />
<text  x="1070.93" y="335.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::DoWrite (1,731,999,567 samples, 58.94%)</title><rect x="422.3" y="565" width="695.4" height="15.0" fill="rgb(213,172,45)" rx="2" ry="2" />
<text  x="425.25" y="575.5" >leveldb::Benchmark::DoWrite</text>
</g>
<g >
<title>leveldb::DBImpl::DoCompactionWork (2,666,666 samples, 0.09%)</title><rect x="1134.3" y="725" width="1.1" height="15.0" fill="rgb(215,219,32)" rx="2" ry="2" />
<text  x="1137.32" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_S_cget (1,333,333 samples, 0.05%)</title><rect x="305.5" y="389" width="0.6" height="15.0" fill="rgb(235,170,3)" rx="2" ry="2" />
<text  x="308.54" y="399.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.05%)</title><rect x="215.6" y="405" width="0.5" height="15.0" fill="rgb(219,60,1)" rx="2" ry="2" />
<text  x="218.59" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;, std::allocator&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt; &gt; &gt;::_M_default_append (1,333,333 samples, 0.05%)</title><rect x="1129.0" y="597" width="0.5" height="15.0" fill="rgb(242,118,37)" rx="2" ry="2" />
<text  x="1131.97" y="607.5" ></text>
</g>
<g >
<title>__pthread_enable_asynccancel (3,999,999 samples, 0.14%)</title><rect x="794.9" y="421" width="1.6" height="15.0" fill="rgb(234,103,45)" rx="2" ry="2" />
<text  x="797.88" y="431.5" ></text>
</g>
<g >
<title>snappy::internal::WorkingMemory::GetHashTable (1,333,333 samples, 0.05%)</title><rect x="292.2" y="357" width="0.5" height="15.0" fill="rgb(207,196,19)" rx="2" ry="2" />
<text  x="295.15" y="367.5" ></text>
</g>
<g >
<title>std::fill_n&lt;char*, unsigned long, char&gt; (23,999,994 samples, 0.82%)</title><rect x="150.8" y="357" width="9.6" height="15.0" fill="rgb(240,13,36)" rx="2" ry="2" />
<text  x="153.81" y="367.5" ></text>
</g>
<g >
<title>__GI__IO_file_doallocate (1,333,333 samples, 0.05%)</title><rect x="1118.8" y="613" width="0.5" height="15.0" fill="rgb(239,125,15)" rx="2" ry="2" />
<text  x="1121.79" y="623.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseToSpans (2,666,666 samples, 0.09%)</title><rect x="194.2" y="373" width="1.0" height="15.0" fill="rgb(234,203,40)" rx="2" ry="2" />
<text  x="197.17" y="383.5" ></text>
</g>
<g >
<title>futex_wake (2,666,666 samples, 0.09%)</title><rect x="993.5" y="373" width="1.1" height="15.0" fill="rgb(239,54,5)" rx="2" ry="2" />
<text  x="996.51" y="383.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_tlbonly (1,333,333 samples, 0.05%)</title><rect x="194.7" y="165" width="0.5" height="15.0" fill="rgb(219,19,35)" rx="2" ry="2" />
<text  x="197.71" y="175.5" ></text>
</g>
<g >
<title>leveldb::port::Mutex::Unlock (3,999,999 samples, 0.14%)</title><rect x="476.9" y="501" width="1.6" height="15.0" fill="rgb(206,119,25)" rx="2" ry="2" />
<text  x="479.86" y="511.5" ></text>
</g>
<g >
<title>pagecache_get_page (9,333,331 samples, 0.32%)</title><rect x="842.5" y="245" width="3.8" height="15.0" fill="rgb(238,217,6)" rx="2" ry="2" />
<text  x="845.53" y="255.5" ></text>
</g>
<g >
<title>add_to_page_cache_lru (2,666,666 samples, 0.09%)</title><rect x="843.1" y="229" width="1.0" height="15.0" fill="rgb(231,102,14)" rx="2" ry="2" />
<text  x="846.07" y="239.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (3,999,999 samples, 0.14%)</title><rect x="171.7" y="357" width="1.6" height="15.0" fill="rgb(217,193,54)" rx="2" ry="2" />
<text  x="174.69" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2,666,666 samples, 0.09%)</title><rect x="89.2" y="341" width="1.1" height="15.0" fill="rgb(230,121,43)" rx="2" ry="2" />
<text  x="92.24" y="351.5" ></text>
</g>
<g >
<title>std::operator==&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt; (1,333,333 samples, 0.05%)</title><rect x="472.6" y="485" width="0.5" height="15.0" fill="rgb(253,123,48)" rx="2" ry="2" />
<text  x="475.58" y="495.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (47,999,988 samples, 1.63%)</title><rect x="975.3" y="421" width="19.3" height="15.0" fill="rgb(210,137,35)" rx="2" ry="2" />
<text  x="978.31" y="431.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (1,333,333 samples, 0.05%)</title><rect x="750.4" y="405" width="0.6" height="15.0" fill="rgb(239,158,51)" rx="2" ry="2" />
<text  x="753.44" y="415.5" ></text>
</g>
<g >
<title>std::operator!=&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt; (2,666,666 samples, 0.09%)</title><rect x="465.1" y="501" width="1.1" height="15.0" fill="rgb(220,90,49)" rx="2" ry="2" />
<text  x="468.08" y="511.5" ></text>
</g>
<g >
<title>__GI___snprintf (55,999,986 samples, 1.91%)</title><rect x="424.4" y="533" width="22.5" height="15.0" fill="rgb(208,168,52)" rx="2" ry="2" />
<text  x="427.39" y="543.5" >_..</text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;char*, unsigned long&gt; (23,999,994 samples, 0.82%)</title><rect x="150.8" y="373" width="9.6" height="15.0" fill="rgb(220,146,16)" rx="2" ry="2" />
<text  x="153.81" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.05%)</title><rect x="421.2" y="469" width="0.5" height="15.0" fill="rgb(213,120,40)" rx="2" ry="2" />
<text  x="424.18" y="479.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="886.4" y="101" width="0.6" height="15.0" fill="rgb(222,214,33)" rx="2" ry="2" />
<text  x="889.43" y="111.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BGWork (1,025,333,077 samples, 34.89%)</title><rect x="10.5" y="565" width="411.8" height="15.0" fill="rgb(222,87,16)" rx="2" ry="2" />
<text  x="13.54" y="575.5" >leveldb::DBImpl::BGWork</text>
</g>
<g >
<title>__handle_mm_fault (1,333,333 samples, 0.05%)</title><rect x="453.3" y="421" width="0.5" height="15.0" fill="rgb(228,172,6)" rx="2" ry="2" />
<text  x="456.30" y="431.5" ></text>
</g>
<g >
<title>_dl_lookup_symbol_x (1,333,333 samples, 0.05%)</title><rect x="1130.6" y="597" width="0.5" height="15.0" fill="rgb(225,25,5)" rx="2" ry="2" />
<text  x="1133.57" y="607.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::user_comparator (1,333,333 samples, 0.05%)</title><rect x="1134.9" y="709" width="0.5" height="15.0" fill="rgb(248,133,13)" rx="2" ry="2" />
<text  x="1137.85" y="719.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (11,999,997 samples, 0.41%)</title><rect x="627.8" y="373" width="4.9" height="15.0" fill="rgb(248,167,50)" rx="2" ry="2" />
<text  x="630.84" y="383.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (2,666,666 samples, 0.09%)</title><rect x="626.8" y="341" width="1.0" height="15.0" fill="rgb(240,99,1)" rx="2" ry="2" />
<text  x="629.77" y="351.5" ></text>
</g>
<g >
<title>__strlen_avx2 (2,666,666 samples, 0.09%)</title><rect x="280.4" y="389" width="1.0" height="15.0" fill="rgb(234,152,53)" rx="2" ry="2" />
<text  x="283.37" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (9,333,331 samples, 0.32%)</title><rect x="323.2" y="405" width="3.8" height="15.0" fill="rgb(212,44,33)" rx="2" ry="2" />
<text  x="326.20" y="415.5" ></text>
</g>
<g >
<title>__slab_free (1,333,333 samples, 0.05%)</title><rect x="1125.2" y="309" width="0.6" height="15.0" fill="rgb(247,102,10)" rx="2" ry="2" />
<text  x="1128.22" y="319.5" ></text>
</g>
<g >
<title>mutex_lock (2,666,666 samples, 0.09%)</title><rect x="801.3" y="341" width="1.1" height="15.0" fill="rgb(207,131,36)" rx="2" ry="2" />
<text  x="804.31" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2,666,666 samples, 0.09%)</title><rect x="250.4" y="421" width="1.1" height="15.0" fill="rgb(217,187,7)" rx="2" ry="2" />
<text  x="253.39" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1,333,333 samples, 0.05%)</title><rect x="330.7" y="469" width="0.5" height="15.0" fill="rgb(247,2,9)" rx="2" ry="2" />
<text  x="333.70" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,333,333 samples, 0.05%)</title><rect x="371.9" y="389" width="0.6" height="15.0" fill="rgb(222,26,17)" rx="2" ry="2" />
<text  x="374.92" y="399.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__future_base::_Result_base*&amp;&gt; (1,333,333 samples, 0.05%)</title><rect x="1016.5" y="229" width="0.6" height="15.0" fill="rgb(241,160,43)" rx="2" ry="2" />
<text  x="1019.53" y="239.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="446.3" y="485" width="0.6" height="15.0" fill="rgb(214,129,21)" rx="2" ry="2" />
<text  x="449.34" y="495.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseListToSpans (2,666,666 samples, 0.09%)</title><rect x="194.2" y="389" width="1.0" height="15.0" fill="rgb(205,223,41)" rx="2" ry="2" />
<text  x="197.17" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__future_base::_State_baseV2&gt;::~new_allocator (1,333,333 samples, 0.05%)</title><rect x="1089.3" y="373" width="0.6" height="15.0" fill="rgb(218,118,6)" rx="2" ry="2" />
<text  x="1092.35" y="383.5" ></text>
</g>
<g >
<title>ktime_get_coarse_real_ts64 (2,666,666 samples, 0.09%)</title><rect x="816.8" y="261" width="1.1" height="15.0" fill="rgb(238,125,19)" rx="2" ry="2" />
<text  x="819.83" y="271.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; (3,999,999 samples, 0.14%)</title><rect x="100.5" y="373" width="1.6" height="15.0" fill="rgb(247,99,5)" rx="2" ry="2" />
<text  x="103.48" y="383.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="1118.8" y="437" width="0.5" height="15.0" fill="rgb(237,215,8)" rx="2" ry="2" />
<text  x="1121.79" y="447.5" ></text>
</g>
<g >
<title>std::__to_address&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; (1,333,333 samples, 0.05%)</title><rect x="90.3" y="373" width="0.5" height="15.0" fill="rgb(211,121,27)" rx="2" ry="2" />
<text  x="93.31" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="169.5" y="389" width="0.6" height="15.0" fill="rgb(235,10,34)" rx="2" ry="2" />
<text  x="172.55" y="399.5" ></text>
</g>
<g >
<title>leveldb::test::RandomString (11,999,997 samples, 0.41%)</title><rect x="447.4" y="517" width="4.8" height="15.0" fill="rgb(242,4,21)" rx="2" ry="2" />
<text  x="450.41" y="527.5" ></text>
</g>
<g >
<title>perf_event_mmap (1,333,333 samples, 0.05%)</title><rect x="144.4" y="165" width="0.5" height="15.0" fill="rgb(217,156,5)" rx="2" ry="2" />
<text  x="147.38" y="175.5" ></text>
</g>
<g >
<title>__fget_light (3,999,999 samples, 0.14%)</title><rect x="799.7" y="341" width="1.6" height="15.0" fill="rgb(253,21,3)" rx="2" ry="2" />
<text  x="802.70" y="351.5" ></text>
</g>
<g >
<title>__pthread_once_slow (154,666,628 samples, 5.26%)</title><rect x="967.8" y="453" width="62.1" height="15.0" fill="rgb(229,148,38)" rx="2" ry="2" />
<text  x="970.81" y="463.5" >__pthr..</text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt;::_M_next (7,999,998 samples, 0.27%)</title><rect x="265.4" y="325" width="3.2" height="15.0" fill="rgb(240,170,44)" rx="2" ry="2" />
<text  x="268.38" y="335.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (55,999,986 samples, 1.91%)</title><rect x="997.3" y="341" width="22.4" height="15.0" fill="rgb(241,114,4)" rx="2" ry="2" />
<text  x="1000.26" y="351.5" >s..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.05%)</title><rect x="150.3" y="389" width="0.5" height="15.0" fill="rgb(215,138,39)" rx="2" ry="2" />
<text  x="153.27" y="399.5" ></text>
</g>
<g >
<title>ext4_releasepage (1,333,333 samples, 0.05%)</title><rect x="12.7" y="229" width="0.5" height="15.0" fill="rgb(245,142,40)" rx="2" ry="2" />
<text  x="15.68" y="239.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (2,666,666 samples, 0.09%)</title><rect x="1013.9" y="293" width="1.0" height="15.0" fill="rgb(205,62,13)" rx="2" ry="2" />
<text  x="1016.86" y="303.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3,999,999 samples, 0.14%)</title><rect x="231.1" y="437" width="1.6" height="15.0" fill="rgb(242,109,19)" rx="2" ry="2" />
<text  x="234.12" y="447.5" ></text>
</g>
<g >
<title>_dl_init (3,999,999 samples, 0.14%)</title><rect x="1118.8" y="709" width="1.6" height="15.0" fill="rgb(230,129,21)" rx="2" ry="2" />
<text  x="1121.79" y="719.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (1,333,333 samples, 0.05%)</title><rect x="234.3" y="405" width="0.6" height="15.0" fill="rgb(216,14,54)" rx="2" ry="2" />
<text  x="237.33" y="415.5" ></text>
</g>
<g >
<title>std::swap&lt;char const*&gt; (1,333,333 samples, 0.05%)</title><rect x="1186.3" y="725" width="0.5" height="15.0" fill="rgb(253,190,50)" rx="2" ry="2" />
<text  x="1189.25" y="735.5" ></text>
</g>
<g >
<title>blk_flush_plug_list (1,333,333 samples, 0.05%)</title><rect x="1125.8" y="373" width="0.5" height="15.0" fill="rgb(233,160,19)" rx="2" ry="2" />
<text  x="1128.75" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::resize (5,333,332 samples, 0.18%)</title><rect x="315.2" y="453" width="2.1" height="15.0" fill="rgb(214,84,26)" rx="2" ry="2" />
<text  x="318.17" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1,333,333 samples, 0.05%)</title><rect x="413.7" y="469" width="0.5" height="15.0" fill="rgb(252,78,29)" rx="2" ry="2" />
<text  x="416.68" y="479.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::SetNext (5,333,332 samples, 0.18%)</title><rect x="751.0" y="437" width="2.1" height="15.0" fill="rgb(253,160,14)" rx="2" ry="2" />
<text  x="753.98" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (1,333,333 samples, 0.05%)</title><rect x="1181.4" y="709" width="0.6" height="15.0" fill="rgb(216,86,35)" rx="2" ry="2" />
<text  x="1184.43" y="719.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1,333,333 samples, 0.05%)</title><rect x="294.8" y="197" width="0.6" height="15.0" fill="rgb(210,75,43)" rx="2" ry="2" />
<text  x="297.83" y="207.5" ></text>
</g>
<g >
<title>_IO_no_init (2,666,666 samples, 0.09%)</title><rect x="426.5" y="501" width="1.1" height="15.0" fill="rgb(209,86,35)" rx="2" ry="2" />
<text  x="429.53" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (3,999,999 samples, 0.14%)</title><rect x="368.2" y="437" width="1.6" height="15.0" fill="rgb(222,65,21)" rx="2" ry="2" />
<text  x="371.18" y="447.5" ></text>
</g>
<g >
<title>_IO_vsnprintf (1,333,333 samples, 0.05%)</title><rect x="1126.8" y="565" width="0.6" height="15.0" fill="rgb(239,136,39)" rx="2" ry="2" />
<text  x="1129.82" y="575.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.05%)</title><rect x="215.1" y="389" width="0.5" height="15.0" fill="rgb(208,101,9)" rx="2" ry="2" />
<text  x="218.05" y="399.5" ></text>
</g>
<g >
<title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::__atomic_futex_unsigned (1,333,333 samples, 0.05%)</title><rect x="1169.7" y="725" width="0.5" height="15.0" fill="rgb(208,204,29)" rx="2" ry="2" />
<text  x="1172.66" y="735.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::Valid (3,999,999 samples, 0.14%)</title><rect x="187.7" y="485" width="1.7" height="15.0" fill="rgb(207,33,23)" rx="2" ry="2" />
<text  x="190.75" y="495.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.05%)</title><rect x="785.2" y="469" width="0.6" height="15.0" fill="rgb(224,79,16)" rx="2" ry="2" />
<text  x="788.25" y="479.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (1,333,333 samples, 0.05%)</title><rect x="1118.8" y="565" width="0.5" height="15.0" fill="rgb(243,164,51)" rx="2" ry="2" />
<text  x="1121.79" y="575.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (6,666,665 samples, 0.23%)</title><rect x="298.0" y="357" width="2.7" height="15.0" fill="rgb(216,54,29)" rx="2" ry="2" />
<text  x="301.04" y="367.5" ></text>
</g>
<g >
<title>__GI__IO_padn (5,333,332 samples, 0.18%)</title><rect x="439.4" y="485" width="2.1" height="15.0" fill="rgb(242,30,37)" rx="2" ry="2" />
<text  x="442.38" y="495.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (14,666,663 samples, 0.50%)</title><rect x="330.7" y="501" width="5.9" height="15.0" fill="rgb(240,179,20)" rx="2" ry="2" />
<text  x="333.70" y="511.5" ></text>
</g>
<g >
<title>__x64_sys_openat (1,333,333 samples, 0.05%)</title><rect x="1129.5" y="501" width="0.5" height="15.0" fill="rgb(235,218,19)" rx="2" ry="2" />
<text  x="1132.50" y="511.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (1,333,333 samples, 0.05%)</title><rect x="235.9" y="421" width="0.6" height="15.0" fill="rgb(232,14,24)" rx="2" ry="2" />
<text  x="238.93" y="431.5" ></text>
</g>
<g >
<title>ext4_evict_inode (5,333,332 samples, 0.18%)</title><rect x="11.1" y="357" width="2.1" height="15.0" fill="rgb(221,96,53)" rx="2" ry="2" />
<text  x="14.07" y="367.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="230.6" y="421" width="0.5" height="15.0" fill="rgb(245,100,40)" rx="2" ry="2" />
<text  x="233.58" y="431.5" ></text>
</g>
<g >
<title>leveldb::VersionSet::SetLastSequence (2,666,666 samples, 0.09%)</title><rect x="483.8" y="517" width="1.1" height="15.0" fill="rgb(206,36,47)" rx="2" ry="2" />
<text  x="486.82" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (2,666,666 samples, 0.09%)</title><rect x="178.6" y="373" width="1.1" height="15.0" fill="rgb(239,99,34)" rx="2" ry="2" />
<text  x="181.65" y="383.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.05%)</title><rect x="1118.8" y="405" width="0.5" height="15.0" fill="rgb(230,210,20)" rx="2" ry="2" />
<text  x="1121.79" y="415.5" ></text>
</g>
<g >
<title>file_write_and_wait_range (1,333,333 samples, 0.05%)</title><rect x="1125.8" y="453" width="0.5" height="15.0" fill="rgb(240,210,50)" rx="2" ry="2" />
<text  x="1128.75" y="463.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (2,666,666 samples, 0.09%)</title><rect x="273.9" y="405" width="1.1" height="15.0" fill="rgb(240,99,29)" rx="2" ry="2" />
<text  x="276.95" y="415.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (3,999,999 samples, 0.14%)</title><rect x="376.7" y="341" width="1.6" height="15.0" fill="rgb(251,188,26)" rx="2" ry="2" />
<text  x="379.74" y="351.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Next (3,999,999 samples, 0.14%)</title><rect x="186.1" y="469" width="1.6" height="15.0" fill="rgb(216,80,17)" rx="2" ry="2" />
<text  x="189.14" y="479.5" ></text>
</g>
<g >
<title>__cancel_dirty_page (1,333,333 samples, 0.05%)</title><rect x="232.2" y="165" width="0.5" height="15.0" fill="rgb(238,150,54)" rx="2" ry="2" />
<text  x="235.19" y="175.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::New (1,333,333 samples, 0.05%)</title><rect x="144.4" y="357" width="0.5" height="15.0" fill="rgb(243,46,35)" rx="2" ry="2" />
<text  x="147.38" y="367.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2,666,666 samples, 0.09%)</title><rect x="83.9" y="277" width="1.1" height="15.0" fill="rgb(214,144,35)" rx="2" ry="2" />
<text  x="86.88" y="287.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="44.8" y="405" width="0.5" height="15.0" fill="rgb(239,177,34)" rx="2" ry="2" />
<text  x="47.80" y="415.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (2,666,666 samples, 0.09%)</title><rect x="325.9" y="389" width="1.1" height="15.0" fill="rgb(220,129,10)" rx="2" ry="2" />
<text  x="328.88" y="399.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.05%)</title><rect x="349.4" y="469" width="0.6" height="15.0" fill="rgb(209,104,14)" rx="2" ry="2" />
<text  x="352.44" y="479.5" ></text>
</g>
<g >
<title>leveldb::MemTable::KeyComparator::operator (2,666,666 samples, 0.09%)</title><rect x="1150.4" y="709" width="1.1" height="15.0" fill="rgb(224,144,22)" rx="2" ry="2" />
<text  x="1153.38" y="719.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (1,333,333 samples, 0.05%)</title><rect x="1131.1" y="709" width="0.5" height="15.0" fill="rgb(241,61,1)" rx="2" ry="2" />
<text  x="1134.11" y="719.5" ></text>
</g>
<g >
<title>add_to_page_cache_lru (2,666,666 samples, 0.09%)</title><rect x="1163.8" y="485" width="1.0" height="15.0" fill="rgb(254,197,26)" rx="2" ry="2" />
<text  x="1166.77" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (13,333,330 samples, 0.45%)</title><rect x="79.6" y="341" width="5.4" height="15.0" fill="rgb(235,201,52)" rx="2" ry="2" />
<text  x="82.60" y="351.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.09%)</title><rect x="1018.7" y="245" width="1.0" height="15.0" fill="rgb(229,205,0)" rx="2" ry="2" />
<text  x="1021.68" y="255.5" ></text>
</g>
<g >
<title>_IO_vfprintf_internal (1,333,333 samples, 0.05%)</title><rect x="1126.8" y="549" width="0.6" height="15.0" fill="rgb(237,189,12)" rx="2" ry="2" />
<text  x="1129.82" y="559.5" ></text>
</g>
<g >
<title>grab_cache_page_write_begin (11,999,997 samples, 0.41%)</title><rect x="842.5" y="261" width="4.9" height="15.0" fill="rgb(229,209,41)" rx="2" ry="2" />
<text  x="845.53" y="271.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (3,999,999 samples, 0.14%)</title><rect x="1037.9" y="485" width="1.7" height="15.0" fill="rgb(232,6,4)" rx="2" ry="2" />
<text  x="1040.95" y="495.5" ></text>
</g>
<g >
<title>lru_add_drain_cpu (1,333,333 samples, 0.05%)</title><rect x="1119.9" y="309" width="0.5" height="15.0" fill="rgb(207,64,17)" rx="2" ry="2" />
<text  x="1122.86" y="319.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (6,666,665 samples, 0.23%)</title><rect x="492.9" y="453" width="2.7" height="15.0" fill="rgb(247,65,36)" rx="2" ry="2" />
<text  x="495.92" y="463.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2,666,666 samples, 0.09%)</title><rect x="49.6" y="421" width="1.1" height="15.0" fill="rgb(210,18,19)" rx="2" ry="2" />
<text  x="52.62" y="431.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="355.9" y="437" width="0.5" height="15.0" fill="rgb(248,56,26)" rx="2" ry="2" />
<text  x="358.86" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (1,333,333 samples, 0.05%)</title><rect x="1173.4" y="709" width="0.5" height="15.0" fill="rgb(228,84,22)" rx="2" ry="2" />
<text  x="1176.40" y="719.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;*, unsigned long&gt; (1,333,333 samples, 0.05%)</title><rect x="1129.0" y="549" width="0.5" height="15.0" fill="rgb(212,60,26)" rx="2" ry="2" />
<text  x="1131.97" y="559.5" ></text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.05%)</title><rect x="141.2" y="357" width="0.5" height="15.0" fill="rgb(241,172,38)" rx="2" ry="2" />
<text  x="144.17" y="367.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt; (1,333,333 samples, 0.05%)</title><rect x="1184.6" y="709" width="0.6" height="15.0" fill="rgb(228,130,47)" rx="2" ry="2" />
<text  x="1187.65" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,333,333 samples, 0.05%)</title><rect x="302.3" y="389" width="0.6" height="15.0" fill="rgb(222,157,1)" rx="2" ry="2" />
<text  x="305.32" y="399.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (1,333,333 samples, 0.05%)</title><rect x="293.8" y="373" width="0.5" height="15.0" fill="rgb(249,203,8)" rx="2" ry="2" />
<text  x="296.76" y="383.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::ok (3,999,999 samples, 0.14%)</title><rect x="146.5" y="453" width="1.6" height="15.0" fill="rgb(230,173,44)" rx="2" ry="2" />
<text  x="149.52" y="463.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, false&gt;::_Head_base (1,333,333 samples, 0.05%)</title><rect x="1078.6" y="453" width="0.6" height="15.0" fill="rgb(210,225,46)" rx="2" ry="2" />
<text  x="1081.64" y="463.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.05%)</title><rect x="35.7" y="405" width="0.5" height="15.0" fill="rgb(235,61,41)" rx="2" ry="2" />
<text  x="38.70" y="415.5" ></text>
</g>
<g >
<title>__x64_sys_brk (1,333,333 samples, 0.05%)</title><rect x="144.4" y="197" width="0.5" height="15.0" fill="rgb(214,169,4)" rx="2" ry="2" />
<text  x="147.38" y="207.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::Next (1,333,333 samples, 0.05%)</title><rect x="306.6" y="469" width="0.5" height="15.0" fill="rgb(210,200,50)" rx="2" ry="2" />
<text  x="309.61" y="479.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="284.1" y="309" width="0.6" height="15.0" fill="rgb(245,171,33)" rx="2" ry="2" />
<text  x="287.12" y="319.5" ></text>
</g>
<g >
<title>free_unref_page_list (1,333,333 samples, 0.05%)</title><rect x="1120.9" y="437" width="0.6" height="15.0" fill="rgb(244,123,28)" rx="2" ry="2" />
<text  x="1123.93" y="447.5" ></text>
</g>
<g >
<title>rebalance_domains (1,333,333 samples, 0.05%)</title><rect x="843.6" y="101" width="0.5" height="15.0" fill="rgb(252,125,4)" rx="2" ry="2" />
<text  x="846.60" y="111.5" ></text>
</g>
<g >
<title>tlb_remove_table_rcu (1,333,333 samples, 0.05%)</title><rect x="279.8" y="229" width="0.6" height="15.0" fill="rgb(251,162,0)" rx="2" ry="2" />
<text  x="282.84" y="239.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (2,666,666 samples, 0.09%)</title><rect x="507.4" y="373" width="1.0" height="15.0" fill="rgb(247,96,50)" rx="2" ry="2" />
<text  x="510.38" y="383.5" ></text>
</g>
<g >
<title>generic_write_end (102,666,641 samples, 3.49%)</title><rect x="859.1" y="261" width="41.3" height="15.0" fill="rgb(214,129,11)" rx="2" ry="2" />
<text  x="862.13" y="271.5" >gen..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_extract (1,333,333 samples, 0.05%)</title><rect x="327.0" y="405" width="0.5" height="15.0" fill="rgb(211,77,37)" rx="2" ry="2" />
<text  x="329.95" y="415.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;::_Tuple_impl&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (2,666,666 samples, 0.09%)</title><rect x="100.5" y="357" width="1.1" height="15.0" fill="rgb(212,83,0)" rx="2" ry="2" />
<text  x="103.48" y="367.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="140.1" y="309" width="0.5" height="15.0" fill="rgb(235,100,10)" rx="2" ry="2" />
<text  x="143.10" y="319.5" ></text>
</g>
<g >
<title>__mnt_want_write_file (1,333,333 samples, 0.05%)</title><rect x="816.3" y="277" width="0.5" height="15.0" fill="rgb(220,28,11)" rx="2" ry="2" />
<text  x="819.30" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (5,333,332 samples, 0.18%)</title><rect x="181.9" y="421" width="2.1" height="15.0" fill="rgb(241,201,16)" rx="2" ry="2" />
<text  x="184.86" y="431.5" ></text>
</g>
<g >
<title>operator new[] (6,666,665 samples, 0.23%)</title><rect x="1072.2" y="389" width="2.7" height="15.0" fill="rgb(227,119,9)" rx="2" ry="2" />
<text  x="1075.21" y="399.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (21,333,328 samples, 0.73%)</title><rect x="946.4" y="469" width="8.6" height="15.0" fill="rgb(214,158,50)" rx="2" ry="2" />
<text  x="949.40" y="479.5" ></text>
</g>
<g >
<title>vfs_fsync_range (1,333,333 samples, 0.05%)</title><rect x="1125.8" y="485" width="0.5" height="15.0" fill="rgb(206,108,15)" rx="2" ry="2" />
<text  x="1128.75" y="495.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.05%)</title><rect x="44.8" y="421" width="0.5" height="15.0" fill="rgb(209,91,29)" rx="2" ry="2" />
<text  x="47.80" y="431.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (19,999,995 samples, 0.68%)</title><rect x="757.4" y="485" width="8.0" height="15.0" fill="rgb(213,91,19)" rx="2" ry="2" />
<text  x="760.40" y="495.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (3,999,999 samples, 0.14%)</title><rect x="1142.9" y="725" width="1.6" height="15.0" fill="rgb(213,150,10)" rx="2" ry="2" />
<text  x="1145.89" y="735.5" ></text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.05%)</title><rect x="60.9" y="389" width="0.5" height="15.0" fill="rgb(244,171,16)" rx="2" ry="2" />
<text  x="63.86" y="399.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::Writer::Writer (3,999,999 samples, 0.14%)</title><rect x="473.1" y="517" width="1.6" height="15.0" fill="rgb(219,195,37)" rx="2" ry="2" />
<text  x="476.11" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::emplace_back&lt;unsigned int&gt; (1,333,333 samples, 0.05%)</title><rect x="114.9" y="389" width="0.6" height="15.0" fill="rgb(211,118,9)" rx="2" ry="2" />
<text  x="117.94" y="399.5" ></text>
</g>
<g >
<title>mprotect_fixup (1,333,333 samples, 0.05%)</title><rect x="1130.0" y="533" width="0.6" height="15.0" fill="rgb(214,70,22)" rx="2" ry="2" />
<text  x="1133.04" y="543.5" ></text>
</g>
<g >
<title>ksys_read (1,333,333 samples, 0.05%)</title><rect x="1127.4" y="485" width="0.5" height="15.0" fill="rgb(209,222,47)" rx="2" ry="2" />
<text  x="1130.36" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (7,999,998 samples, 0.27%)</title><rect x="1071.7" y="405" width="3.2" height="15.0" fill="rgb(236,180,7)" rx="2" ry="2" />
<text  x="1074.68" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,333,333 samples, 0.05%)</title><rect x="87.6" y="325" width="0.6" height="15.0" fill="rgb(216,211,3)" rx="2" ry="2" />
<text  x="90.63" y="335.5" ></text>
</g>
<g >
<title>operator new[] (2,666,666 samples, 0.09%)</title><rect x="273.9" y="373" width="1.1" height="15.0" fill="rgb(221,114,15)" rx="2" ry="2" />
<text  x="276.95" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::swap (1,333,333 samples, 0.05%)</title><rect x="1176.6" y="709" width="0.6" height="15.0" fill="rgb(238,163,49)" rx="2" ry="2" />
<text  x="1179.62" y="719.5" ></text>
</g>
<g >
<title>std::move&lt;std::__future_base::_Result_base::_Deleter&amp;&gt; (1,333,333 samples, 0.05%)</title><rect x="1026.7" y="293" width="0.5" height="15.0" fill="rgb(220,203,51)" rx="2" ry="2" />
<text  x="1029.71" y="303.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (87,999,978 samples, 2.99%)</title><rect x="994.6" y="437" width="35.3" height="15.0" fill="rgb(208,187,28)" rx="2" ry="2" />
<text  x="997.58" y="447.5" >st..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::construct&lt;leveldb::ParsedInternalKey, leveldb::ParsedInternalKey const&amp;&gt; (1,333,333 samples, 0.05%)</title><rect x="420.6" y="485" width="0.6" height="15.0" fill="rgb(245,0,0)" rx="2" ry="2" />
<text  x="423.64" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,333,333 samples, 0.05%)</title><rect x="320.0" y="421" width="0.5" height="15.0" fill="rgb(222,50,40)" rx="2" ry="2" />
<text  x="322.99" y="431.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.05%)</title><rect x="144.4" y="229" width="0.5" height="15.0" fill="rgb(223,187,41)" rx="2" ry="2" />
<text  x="147.38" y="239.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1,333,333 samples, 0.05%)</title><rect x="1081.3" y="501" width="0.6" height="15.0" fill="rgb(237,35,9)" rx="2" ry="2" />
<text  x="1084.32" y="511.5" ></text>
</g>
<g >
<title>leveldb::BuildTable (155,999,961 samples, 5.31%)</title><rect x="233.8" y="469" width="62.6" height="15.0" fill="rgb(228,8,28)" rx="2" ry="2" />
<text  x="236.79" y="479.5" >leveld..</text>
</g>
<g >
<title>leveldb::PutLengthPrefixedSlice (14,666,663 samples, 0.50%)</title><rect x="1109.2" y="533" width="5.8" height="15.0" fill="rgb(228,187,33)" rx="2" ry="2" />
<text  x="1112.16" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;leveldb::ParsedInternalKey*, std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt; &gt; (1,333,333 samples, 0.05%)</title><rect x="1118.3" y="725" width="0.5" height="15.0" fill="rgb(216,121,54)" rx="2" ry="2" />
<text  x="1121.26" y="735.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt;::operator (31,999,992 samples, 1.09%)</title><rect x="999.9" y="309" width="12.9" height="15.0" fill="rgb(241,33,19)" rx="2" ry="2" />
<text  x="1002.94" y="319.5" ></text>
</g>
<g >
<title>truncate_inode_pages_final (3,999,999 samples, 0.14%)</title><rect x="231.1" y="325" width="1.6" height="15.0" fill="rgb(238,116,54)" rx="2" ry="2" />
<text  x="234.12" y="335.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (7,999,998 samples, 0.27%)</title><rect x="200.1" y="453" width="3.2" height="15.0" fill="rgb(248,229,38)" rx="2" ry="2" />
<text  x="203.06" y="463.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.05%)</title><rect x="1125.8" y="549" width="0.5" height="15.0" fill="rgb(217,52,33)" rx="2" ry="2" />
<text  x="1128.75" y="559.5" ></text>
</g>
<g >
<title>leveldb::ParseInternalKey (2,666,666 samples, 0.09%)</title><rect x="254.7" y="437" width="1.0" height="15.0" fill="rgb(209,46,43)" rx="2" ry="2" />
<text  x="257.67" y="447.5" ></text>
</g>
<g >
<title>read_pages (7,999,998 samples, 0.27%)</title><rect x="1161.6" y="533" width="3.2" height="15.0" fill="rgb(209,63,14)" rx="2" ry="2" />
<text  x="1164.62" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (3,999,999 samples, 0.14%)</title><rect x="412.1" y="469" width="1.6" height="15.0" fill="rgb(234,170,43)" rx="2" ry="2" />
<text  x="415.08" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::clear (1,333,333 samples, 0.05%)</title><rect x="1153.6" y="709" width="0.5" height="15.0" fill="rgb(246,58,35)" rx="2" ry="2" />
<text  x="1156.59" y="719.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; (1,333,333 samples, 0.05%)</title><rect x="376.2" y="341" width="0.5" height="15.0" fill="rgb(214,121,14)" rx="2" ry="2" />
<text  x="379.21" y="351.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (13,333,330 samples, 0.45%)</title><rect x="282.5" y="373" width="5.4" height="15.0" fill="rgb(210,122,49)" rx="2" ry="2" />
<text  x="285.51" y="383.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;unsigned int*, unsigned int&gt; (1,333,333 samples, 0.05%)</title><rect x="281.4" y="357" width="0.6" height="15.0" fill="rgb(241,121,21)" rx="2" ry="2" />
<text  x="284.44" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (1,333,333 samples, 0.05%)</title><rect x="329.6" y="437" width="0.6" height="15.0" fill="rgb(236,157,42)" rx="2" ry="2" />
<text  x="332.63" y="447.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (1,333,333 samples, 0.05%)</title><rect x="212.4" y="405" width="0.5" height="15.0" fill="rgb(212,186,33)" rx="2" ry="2" />
<text  x="215.38" y="415.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::value (14,666,663 samples, 0.50%)</title><rect x="20.7" y="469" width="5.9" height="15.0" fill="rgb(253,111,21)" rx="2" ry="2" />
<text  x="23.71" y="479.5" ></text>
</g>
<g >
<title>clear_page_erms (1,333,333 samples, 0.05%)</title><rect x="497.7" y="213" width="0.6" height="15.0" fill="rgb(224,171,31)" rx="2" ry="2" />
<text  x="500.74" y="223.5" ></text>
</g>
<g >
<title>madvise_free_single_vma (1,333,333 samples, 0.05%)</title><rect x="194.7" y="213" width="0.5" height="15.0" fill="rgb(232,137,51)" rx="2" ry="2" />
<text  x="197.71" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt;::_M_next (2,666,666 samples, 0.09%)</title><rect x="88.2" y="341" width="1.0" height="15.0" fill="rgb(237,163,34)" rx="2" ry="2" />
<text  x="91.17" y="351.5" ></text>
</g>
<g >
<title>iput (1,333,333 samples, 0.05%)</title><rect x="421.2" y="405" width="0.5" height="15.0" fill="rgb(233,97,11)" rx="2" ry="2" />
<text  x="424.18" y="415.5" ></text>
</g>
<g >
<title>account_page_cleaned (1,333,333 samples, 0.05%)</title><rect x="1124.7" y="325" width="0.5" height="15.0" fill="rgb(229,113,40)" rx="2" ry="2" />
<text  x="1127.68" y="335.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_deleter (1,333,333 samples, 0.05%)</title><rect x="1017.1" y="277" width="0.5" height="15.0" fill="rgb(232,77,43)" rx="2" ry="2" />
<text  x="1020.07" y="287.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (3,999,999 samples, 0.14%)</title><rect x="94.1" y="293" width="1.6" height="15.0" fill="rgb(227,57,48)" rx="2" ry="2" />
<text  x="97.06" y="303.5" ></text>
</g>
<g >
<title>swake_up (2,666,666 samples, 0.09%)</title><rect x="626.8" y="245" width="1.0" height="15.0" fill="rgb(225,146,11)" rx="2" ry="2" />
<text  x="629.77" y="255.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.05%)</title><rect x="1118.8" y="341" width="0.5" height="15.0" fill="rgb(221,80,52)" rx="2" ry="2" />
<text  x="1121.79" y="351.5" ></text>
</g>
<g >
<title>block_invalidatepage (2,666,666 samples, 0.09%)</title><rect x="12.1" y="261" width="1.1" height="15.0" fill="rgb(226,71,51)" rx="2" ry="2" />
<text  x="15.14" y="271.5" ></text>
</g>
<g >
<title>leveldb::log::Writer::AddRecord (447,999,888 samples, 15.25%)</title><rect x="775.1" y="517" width="179.9" height="15.0" fill="rgb(236,45,50)" rx="2" ry="2" />
<text  x="778.07" y="527.5" >leveldb::log::Writer::A..</text>
</g>
<g >
<title>leveldb::Benchmark::Run (7,999,998 samples, 0.27%)</title><rect x="1125.8" y="677" width="3.2" height="15.0" fill="rgb(237,140,35)" rx="2" ry="2" />
<text  x="1128.75" y="687.5" ></text>
</g>
<g >
<title>__handle_mm_fault (3,999,999 samples, 0.14%)</title><rect x="497.2" y="261" width="1.6" height="15.0" fill="rgb(253,71,34)" rx="2" ry="2" />
<text  x="500.21" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_insert_&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Alloc_node&gt; (1,333,333 samples, 0.05%)</title><rect x="1120.4" y="581" width="0.5" height="15.0" fill="rgb(241,141,33)" rx="2" ry="2" />
<text  x="1123.40" y="591.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (1,333,333 samples, 0.05%)</title><rect x="243.4" y="421" width="0.6" height="15.0" fill="rgb(216,122,47)" rx="2" ry="2" />
<text  x="246.43" y="431.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::_M_head (2,666,666 samples, 0.09%)</title><rect x="1010.6" y="213" width="1.1" height="15.0" fill="rgb(227,218,10)" rx="2" ry="2" />
<text  x="1013.64" y="223.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (43,999,989 samples, 1.50%)</title><rect x="1059.9" y="453" width="17.7" height="15.0" fill="rgb(216,155,51)" rx="2" ry="2" />
<text  x="1062.90" y="463.5" ></text>
</g>
<g >
<title>ext4_filemap_fault (9,333,331 samples, 0.32%)</title><rect x="1161.1" y="613" width="3.7" height="15.0" fill="rgb(239,131,15)" rx="2" ry="2" />
<text  x="1164.09" y="623.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::Next (2,666,666 samples, 0.09%)</title><rect x="15.4" y="469" width="1.0" height="15.0" fill="rgb(245,164,17)" rx="2" ry="2" />
<text  x="18.35" y="479.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::shared_ptr (2,666,666 samples, 0.09%)</title><rect x="1055.6" y="485" width="1.1" height="15.0" fill="rgb(214,84,42)" rx="2" ry="2" />
<text  x="1058.62" y="495.5" ></text>
</g>
<g >
<title>__vfs_write (1,333,333 samples, 0.05%)</title><rect x="161.0" y="277" width="0.5" height="15.0" fill="rgb(222,164,3)" rx="2" ry="2" />
<text  x="163.98" y="287.5" ></text>
</g>
<g >
<title>do_writepages (1,333,333 samples, 0.05%)</title><rect x="1125.8" y="421" width="0.5" height="15.0" fill="rgb(213,66,6)" rx="2" ry="2" />
<text  x="1128.75" y="431.5" ></text>
</g>
<g >
<title>ext4_evict_inode (11,999,997 samples, 0.41%)</title><rect x="1120.9" y="517" width="4.9" height="15.0" fill="rgb(247,95,33)" rx="2" ry="2" />
<text  x="1123.93" y="527.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (5,333,332 samples, 0.18%)</title><rect x="209.7" y="437" width="2.1" height="15.0" fill="rgb(213,31,29)" rx="2" ry="2" />
<text  x="212.70" y="447.5" ></text>
</g>
<g >
<title>file_update_time (1,333,333 samples, 0.05%)</title><rect x="161.0" y="229" width="0.5" height="15.0" fill="rgb(229,93,2)" rx="2" ry="2" />
<text  x="163.98" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (5,333,332 samples, 0.18%)</title><rect x="382.1" y="405" width="2.1" height="15.0" fill="rgb(208,128,46)" rx="2" ry="2" />
<text  x="385.10" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (9,333,331 samples, 0.32%)</title><rect x="178.1" y="389" width="3.8" height="15.0" fill="rgb(225,121,35)" rx="2" ry="2" />
<text  x="181.11" y="399.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (29,333,326 samples, 1.00%)</title><rect x="102.1" y="437" width="11.8" height="15.0" fill="rgb(248,81,26)" rx="2" ry="2" />
<text  x="105.09" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (1,333,333 samples, 0.05%)</title><rect x="333.4" y="405" width="0.5" height="15.0" fill="rgb(247,71,30)" rx="2" ry="2" />
<text  x="336.38" y="415.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::status (1,333,333 samples, 0.05%)</title><rect x="147.6" y="437" width="0.5" height="15.0" fill="rgb(234,12,38)" rx="2" ry="2" />
<text  x="150.60" y="447.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (3,999,999 samples, 0.14%)</title><rect x="1139.7" y="709" width="1.6" height="15.0" fill="rgb(211,92,38)" rx="2" ry="2" />
<text  x="1142.67" y="719.5" ></text>
</g>
<g >
<title>note_gp_changes (1,333,333 samples, 0.05%)</title><rect x="1118.8" y="357" width="0.5" height="15.0" fill="rgb(213,138,45)" rx="2" ry="2" />
<text  x="1121.79" y="367.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1,333,333 samples, 0.05%)</title><rect x="294.8" y="181" width="0.6" height="15.0" fill="rgb(220,31,54)" rx="2" ry="2" />
<text  x="297.83" y="191.5" ></text>
</g>
<g >
<title>jbd2_journal_try_to_free_buffers (2,666,666 samples, 0.09%)</title><rect x="231.7" y="197" width="1.0" height="15.0" fill="rgb(249,111,30)" rx="2" ry="2" />
<text  x="234.65" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_addr (1,333,333 samples, 0.05%)</title><rect x="375.1" y="309" width="0.6" height="15.0" fill="rgb(230,94,18)" rx="2" ry="2" />
<text  x="378.14" y="319.5" ></text>
</g>
<g >
<title>fts_read (1,333,333 samples, 0.05%)</title><rect x="1119.9" y="597" width="0.5" height="15.0" fill="rgb(227,194,47)" rx="2" ry="2" />
<text  x="1122.86" y="607.5" ></text>
</g>
<g >
<title>vfs_read (1,333,333 samples, 0.05%)</title><rect x="1127.4" y="469" width="0.5" height="15.0" fill="rgb(246,118,14)" rx="2" ry="2" />
<text  x="1130.36" y="479.5" ></text>
</g>
<g >
<title>__handle_mm_fault (3,999,999 samples, 0.14%)</title><rect x="158.8" y="229" width="1.6" height="15.0" fill="rgb(215,105,21)" rx="2" ry="2" />
<text  x="161.84" y="239.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (2,666,666 samples, 0.09%)</title><rect x="248.8" y="405" width="1.1" height="15.0" fill="rgb(253,142,20)" rx="2" ry="2" />
<text  x="251.78" y="415.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (1,333,333 samples, 0.05%)</title><rect x="234.3" y="421" width="0.6" height="15.0" fill="rgb(254,85,16)" rx="2" ry="2" />
<text  x="237.33" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (3,999,999 samples, 0.14%)</title><rect x="303.9" y="373" width="1.6" height="15.0" fill="rgb(211,31,10)" rx="2" ry="2" />
<text  x="306.93" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::allocate (1,333,333 samples, 0.05%)</title><rect x="270.2" y="357" width="0.5" height="15.0" fill="rgb(229,104,38)" rx="2" ry="2" />
<text  x="273.20" y="367.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (1,333,333 samples, 0.05%)</title><rect x="1119.9" y="373" width="0.5" height="15.0" fill="rgb(244,226,21)" rx="2" ry="2" />
<text  x="1122.86" y="383.5" ></text>
</g>
<g >
<title>leveldb::Block::Iter::ParseNextKey (6,666,665 samples, 0.23%)</title><rect x="214.5" y="421" width="2.7" height="15.0" fill="rgb(234,171,4)" rx="2" ry="2" />
<text  x="217.52" y="431.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::TableBuilder (5,333,332 samples, 0.18%)</title><rect x="294.3" y="453" width="2.1" height="15.0" fill="rgb(240,175,9)" rx="2" ry="2" />
<text  x="297.29" y="463.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (2,666,666 samples, 0.09%)</title><rect x="477.4" y="469" width="1.1" height="15.0" fill="rgb(233,8,32)" rx="2" ry="2" />
<text  x="480.40" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="169.5" y="405" width="0.6" height="15.0" fill="rgb(205,138,20)" rx="2" ry="2" />
<text  x="172.55" y="415.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::InsertRange (2,666,666 samples, 0.09%)</title><rect x="194.2" y="405" width="1.0" height="15.0" fill="rgb(226,115,2)" rx="2" ry="2" />
<text  x="197.17" y="415.5" ></text>
</g>
<g >
<title>madvise_free_single_vma (1,333,333 samples, 0.05%)</title><rect x="160.4" y="197" width="0.6" height="15.0" fill="rgb(240,90,28)" rx="2" ry="2" />
<text  x="163.44" y="207.5" ></text>
</g>
<g >
<title>jbd2_journal_get_write_access (5,333,332 samples, 0.18%)</title><rect x="824.9" y="181" width="2.1" height="15.0" fill="rgb(230,184,49)" rx="2" ry="2" />
<text  x="827.86" y="191.5" ></text>
</g>
<g >
<title>crc32c_pcl_intel_update (1,333,333 samples, 0.05%)</title><rect x="161.0" y="85" width="0.5" height="15.0" fill="rgb(205,37,19)" rx="2" ry="2" />
<text  x="163.98" y="95.5" ></text>
</g>
<g >
<title>leveldb::port::Snappy_Compress (26,666,660 samples, 0.91%)</title><rect x="400.8" y="453" width="10.7" height="15.0" fill="rgb(236,47,1)" rx="2" ry="2" />
<text  x="403.83" y="463.5" ></text>
</g>
<g >
<title>__GI__IO_fflush (1,333,333 samples, 0.05%)</title><rect x="161.0" y="453" width="0.5" height="15.0" fill="rgb(217,165,18)" rx="2" ry="2" />
<text  x="163.98" y="463.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteBlock (1,333,333 samples, 0.05%)</title><rect x="149.2" y="437" width="0.5" height="15.0" fill="rgb(250,128,43)" rx="2" ry="2" />
<text  x="152.20" y="447.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (2,666,666 samples, 0.09%)</title><rect x="1055.6" y="453" width="1.1" height="15.0" fill="rgb(208,43,3)" rx="2" ry="2" />
<text  x="1058.62" y="463.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__future_base::_State_baseV2&gt;::~allocator (1,333,333 samples, 0.05%)</title><rect x="1184.1" y="709" width="0.5" height="15.0" fill="rgb(229,117,15)" rx="2" ry="2" />
<text  x="1187.11" y="719.5" ></text>
</g>
<g >
<title>page_fault (2,666,666 samples, 0.09%)</title><rect x="82.8" y="325" width="1.1" height="15.0" fill="rgb(213,199,5)" rx="2" ry="2" />
<text  x="85.81" y="335.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Next (2,666,666 samples, 0.09%)</title><rect x="15.4" y="453" width="1.0" height="15.0" fill="rgb(210,110,50)" rx="2" ry="2" />
<text  x="18.35" y="463.5" ></text>
</g>
<g >
<title>_dl_start_user (3,999,999 samples, 0.14%)</title><rect x="1118.8" y="725" width="1.6" height="15.0" fill="rgb(230,135,0)" rx="2" ry="2" />
<text  x="1121.79" y="735.5" ></text>
</g>
<g >
<title>leveldb::Status::~Status (1,333,333 samples, 0.05%)</title><rect x="474.7" y="501" width="0.6" height="15.0" fill="rgb(247,203,25)" rx="2" ry="2" />
<text  x="477.72" y="511.5" ></text>
</g>
<g >
<title>release_pages (1,333,333 samples, 0.05%)</title><rect x="11.1" y="293" width="0.5" height="15.0" fill="rgb(223,127,1)" rx="2" ry="2" />
<text  x="14.07" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1,333,333 samples, 0.05%)</title><rect x="245.0" y="405" width="0.6" height="15.0" fill="rgb(244,36,9)" rx="2" ry="2" />
<text  x="248.04" y="415.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (3,999,999 samples, 0.14%)</title><rect x="94.1" y="309" width="1.6" height="15.0" fill="rgb(223,69,12)" rx="2" ry="2" />
<text  x="97.06" y="319.5" ></text>
</g>
<g >
<title>operator new[] (5,333,332 samples, 0.18%)</title><rect x="142.8" y="437" width="2.1" height="15.0" fill="rgb(216,78,33)" rx="2" ry="2" />
<text  x="145.78" y="447.5" ></text>
</g>
<g >
<title>leveldb::Status::ok (1,333,333 samples, 0.05%)</title><rect x="478.5" y="517" width="0.5" height="15.0" fill="rgb(220,174,48)" rx="2" ry="2" />
<text  x="481.47" y="527.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (1,333,333 samples, 0.05%)</title><rect x="160.4" y="229" width="0.6" height="15.0" fill="rgb(215,49,1)" rx="2" ry="2" />
<text  x="163.44" y="239.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Value (13,333,330 samples, 0.45%)</title><rect x="282.5" y="389" width="5.4" height="15.0" fill="rgb(252,128,37)" rx="2" ry="2" />
<text  x="285.51" y="399.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.05%)</title><rect x="1138.1" y="709" width="0.5" height="15.0" fill="rgb(234,205,40)" rx="2" ry="2" />
<text  x="1141.07" y="719.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (150,666,629 samples, 5.13%)</title><rect x="572.2" y="389" width="60.5" height="15.0" fill="rgb(212,15,24)" rx="2" ry="2" />
<text  x="575.16" y="399.5" >leveld..</text>
</g>
<g >
<title>start_this_handle (3,999,999 samples, 0.14%)</title><rect x="817.9" y="197" width="1.6" height="15.0" fill="rgb(248,192,15)" rx="2" ry="2" />
<text  x="820.90" y="207.5" ></text>
</g>
<g >
<title>__GI___libc_write (1,333,333 samples, 0.05%)</title><rect x="161.0" y="373" width="0.5" height="15.0" fill="rgb(228,205,13)" rx="2" ry="2" />
<text  x="163.98" y="383.5" ></text>
</g>
<g >
<title>__generic_file_write_iter (1,333,333 samples, 0.05%)</title><rect x="161.0" y="245" width="0.5" height="15.0" fill="rgb(221,106,43)" rx="2" ry="2" />
<text  x="163.98" y="255.5" ></text>
</g>
<g >
<title>operator new[] (2,666,666 samples, 0.09%)</title><rect x="368.7" y="421" width="1.1" height="15.0" fill="rgb(215,123,40)" rx="2" ry="2" />
<text  x="371.71" y="431.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (2,666,666 samples, 0.09%)</title><rect x="843.1" y="197" width="1.0" height="15.0" fill="rgb(216,149,8)" rx="2" ry="2" />
<text  x="846.07" y="207.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::release (1,333,333 samples, 0.05%)</title><rect x="1187.3" y="725" width="0.6" height="15.0" fill="rgb(237,93,13)" rx="2" ry="2" />
<text  x="1190.32" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,333,333 samples, 0.05%)</title><rect x="303.4" y="389" width="0.5" height="15.0" fill="rgb(225,210,34)" rx="2" ry="2" />
<text  x="306.39" y="399.5" ></text>
</g>
<g >
<title>__GI__IO_default_xsputn (3,999,999 samples, 0.14%)</title><rect x="437.8" y="485" width="1.6" height="15.0" fill="rgb(230,196,16)" rx="2" ry="2" />
<text  x="440.78" y="495.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (11,999,997 samples, 0.41%)</title><rect x="296.4" y="453" width="4.9" height="15.0" fill="rgb(246,86,34)" rx="2" ry="2" />
<text  x="299.43" y="463.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.05%)</title><rect x="226.8" y="437" width="0.6" height="15.0" fill="rgb(238,125,2)" rx="2" ry="2" />
<text  x="229.83" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt;::deque (1,333,333 samples, 0.05%)</title><rect x="1129.0" y="501" width="0.5" height="15.0" fill="rgb(227,209,0)" rx="2" ry="2" />
<text  x="1131.97" y="511.5" ></text>
</g>
<g >
<title>operator new[] (5,333,332 samples, 0.18%)</title><rect x="103.2" y="389" width="2.1" height="15.0" fill="rgb(237,67,28)" rx="2" ry="2" />
<text  x="106.16" y="399.5" ></text>
</g>
<g >
<title>__opendir (1,333,333 samples, 0.05%)</title><rect x="1126.3" y="597" width="0.5" height="15.0" fill="rgb(205,106,6)" rx="2" ry="2" />
<text  x="1129.29" y="607.5" ></text>
</g>
<g >
<title>std::operator&amp; (2,666,666 samples, 0.09%)</title><rect x="744.0" y="405" width="1.1" height="15.0" fill="rgb(209,98,31)" rx="2" ry="2" />
<text  x="747.02" y="415.5" ></text>
</g>
<g >
<title>std::__fill_a&lt;char&gt; (5,333,332 samples, 0.18%)</title><rect x="294.3" y="309" width="2.1" height="15.0" fill="rgb(207,229,24)" rx="2" ry="2" />
<text  x="297.29" y="319.5" ></text>
</g>
<g >
<title>__GI__IO_doallocbuf (1,333,333 samples, 0.05%)</title><rect x="1118.8" y="629" width="0.5" height="15.0" fill="rgb(248,67,35)" rx="2" ry="2" />
<text  x="1121.79" y="639.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::value (7,999,998 samples, 0.27%)</title><rect x="237.0" y="453" width="3.2" height="15.0" fill="rgb(216,3,8)" rx="2" ry="2" />
<text  x="240.01" y="463.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;&gt; &gt; (1,333,333 samples, 0.05%)</title><rect x="273.4" y="357" width="0.5" height="15.0" fill="rgb(245,0,44)" rx="2" ry="2" />
<text  x="276.41" y="367.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt;::operator (1,333,333 samples, 0.05%)</title><rect x="1177.2" y="725" width="0.5" height="15.0" fill="rgb(254,59,44)" rx="2" ry="2" />
<text  x="1180.15" y="735.5" ></text>
</g>
<g >
<title>find_busiest_group (1,333,333 samples, 0.05%)</title><rect x="843.6" y="69" width="0.5" height="15.0" fill="rgb(249,212,32)" rx="2" ry="2" />
<text  x="846.60" y="79.5" ></text>
</g>
<g >
<title>do_sys_open (1,333,333 samples, 0.05%)</title><rect x="1126.3" y="517" width="0.5" height="15.0" fill="rgb(208,180,40)" rx="2" ry="2" />
<text  x="1129.29" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (10,666,664 samples, 0.36%)</title><rect x="75.3" y="357" width="4.3" height="15.0" fill="rgb(246,86,12)" rx="2" ry="2" />
<text  x="78.32" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_S_cget (1,333,333 samples, 0.05%)</title><rect x="386.9" y="357" width="0.6" height="15.0" fill="rgb(241,91,47)" rx="2" ry="2" />
<text  x="389.91" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size@plt (1,333,333 samples, 0.05%)</title><rect x="298.6" y="325" width="0.5" height="15.0" fill="rgb(219,89,53)" rx="2" ry="2" />
<text  x="301.58" y="335.5" ></text>
</g>
<g >
<title>leveldb::EncodeFixed64 (2,666,666 samples, 0.09%)</title><rect x="773.5" y="501" width="1.0" height="15.0" fill="rgb(250,139,44)" rx="2" ry="2" />
<text  x="776.47" y="511.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, false&gt;::_M_head (2,666,666 samples, 0.09%)</title><rect x="99.4" y="293" width="1.1" height="15.0" fill="rgb(246,129,0)" rx="2" ry="2" />
<text  x="102.41" y="303.5" ></text>
</g>
<g >
<title>__gthread_once (1,333,333 samples, 0.05%)</title><rect x="1182.5" y="709" width="0.5" height="15.0" fill="rgb(215,214,45)" rx="2" ry="2" />
<text  x="1185.50" y="719.5" ></text>
</g>
<g >
<title>__unlink (11,999,997 samples, 0.41%)</title><rect x="1120.9" y="629" width="4.9" height="15.0" fill="rgb(250,72,6)" rx="2" ry="2" />
<text  x="1123.93" y="639.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_set_retrieved_flag (2,666,666 samples, 0.09%)</title><rect x="1054.5" y="469" width="1.1" height="15.0" fill="rgb(213,147,38)" rx="2" ry="2" />
<text  x="1057.55" y="479.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (6,666,665 samples, 0.23%)</title><rect x="309.8" y="453" width="2.7" height="15.0" fill="rgb(221,223,8)" rx="2" ry="2" />
<text  x="312.82" y="463.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.05%)</title><rect x="11.1" y="277" width="0.5" height="15.0" fill="rgb(242,206,26)" rx="2" ry="2" />
<text  x="14.07" y="287.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::_M_get_result (11,999,997 samples, 0.41%)</title><rect x="1042.8" y="517" width="4.8" height="15.0" fill="rgb(220,52,6)" rx="2" ry="2" />
<text  x="1045.77" y="527.5" ></text>
</g>
<g >
<title>__libc_open64 (1,333,333 samples, 0.05%)</title><rect x="150.3" y="405" width="0.5" height="15.0" fill="rgb(236,225,5)" rx="2" ry="2" />
<text  x="153.27" y="415.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.09%)</title><rect x="1010.6" y="245" width="1.1" height="15.0" fill="rgb(237,134,31)" rx="2" ry="2" />
<text  x="1013.64" y="255.5" ></text>
</g>
<g >
<title>mark_buffer_dirty (6,666,665 samples, 0.23%)</title><rect x="897.1" y="213" width="2.7" height="15.0" fill="rgb(254,151,24)" rx="2" ry="2" />
<text  x="900.14" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (17,333,329 samples, 0.59%)</title><rect x="320.5" y="437" width="7.0" height="15.0" fill="rgb(238,151,35)" rx="2" ry="2" />
<text  x="323.53" y="447.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (6,666,665 samples, 0.23%)</title><rect x="714.0" y="357" width="2.7" height="15.0" fill="rgb(231,14,24)" rx="2" ry="2" />
<text  x="717.04" y="367.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.05%)</title><rect x="1110.2" y="517" width="0.6" height="15.0" fill="rgb(251,97,17)" rx="2" ry="2" />
<text  x="1113.23" y="527.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteBlock (53,333,320 samples, 1.81%)</title><rect x="390.1" y="469" width="21.4" height="15.0" fill="rgb(220,11,19)" rx="2" ry="2" />
<text  x="393.13" y="479.5" >l..</text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (10,666,664 samples, 0.36%)</title><rect x="301.8" y="453" width="4.3" height="15.0" fill="rgb(251,194,34)" rx="2" ry="2" />
<text  x="304.79" y="463.5" ></text>
</g>
<g >
<title>try_to_release_page (1,333,333 samples, 0.05%)</title><rect x="12.7" y="245" width="0.5" height="15.0" fill="rgb(216,26,14)" rx="2" ry="2" />
<text  x="15.68" y="255.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; &gt;::_M_destroy (1,333,333 samples, 0.05%)</title><rect x="1039.0" y="453" width="0.6" height="15.0" fill="rgb(225,79,32)" rx="2" ry="2" />
<text  x="1042.02" y="463.5" ></text>
</g>
<g >
<title>path_init (1,333,333 samples, 0.05%)</title><rect x="1129.5" y="437" width="0.5" height="15.0" fill="rgb(232,104,32)" rx="2" ry="2" />
<text  x="1132.50" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get (1,333,333 samples, 0.05%)</title><rect x="1187.3" y="709" width="0.6" height="15.0" fill="rgb(248,128,28)" rx="2" ry="2" />
<text  x="1190.32" y="719.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (6,666,665 samples, 0.23%)</title><rect x="209.7" y="453" width="2.7" height="15.0" fill="rgb(232,174,29)" rx="2" ry="2" />
<text  x="212.70" y="463.5" ></text>
</g>
<g >
<title>__unlink (1,333,333 samples, 0.05%)</title><rect x="421.2" y="485" width="0.5" height="15.0" fill="rgb(214,151,19)" rx="2" ry="2" />
<text  x="424.18" y="495.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1,333,333 samples, 0.05%)</title><rect x="326.4" y="341" width="0.6" height="15.0" fill="rgb(232,40,13)" rx="2" ry="2" />
<text  x="329.42" y="351.5" ></text>
</g>
<g >
<title>leveldb::Arena::AllocateFallback (7,999,998 samples, 0.27%)</title><rect x="496.1" y="437" width="3.2" height="15.0" fill="rgb(245,221,40)" rx="2" ry="2" />
<text  x="499.13" y="447.5" ></text>
</g>
<g >
<title>snappy::Compress (11,999,997 samples, 0.41%)</title><rect x="287.9" y="373" width="4.8" height="15.0" fill="rgb(248,133,20)" rx="2" ry="2" />
<text  x="290.87" y="383.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::ok (3,999,999 samples, 0.14%)</title><rect x="414.2" y="485" width="1.6" height="15.0" fill="rgb(226,74,1)" rx="2" ry="2" />
<text  x="417.22" y="495.5" ></text>
</g>
<g >
<title>leveldb::InternalKey::Encode (1,333,333 samples, 0.05%)</title><rect x="1139.1" y="725" width="0.6" height="15.0" fill="rgb(242,26,19)" rx="2" ry="2" />
<text  x="1142.14" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_S_cget (1,333,333 samples, 0.05%)</title><rect x="378.3" y="389" width="0.6" height="15.0" fill="rgb(254,120,15)" rx="2" ry="2" />
<text  x="381.35" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::pop_front (2,666,666 samples, 0.09%)</title><rect x="960.9" y="517" width="1.0" height="15.0" fill="rgb(233,173,53)" rx="2" ry="2" />
<text  x="963.85" y="527.5" ></text>
</g>
<g >
<title>crc32c_pcl_intel_update (11,999,997 samples, 0.41%)</title><rect x="882.2" y="133" width="4.8" height="15.0" fill="rgb(237,14,8)" rx="2" ry="2" />
<text  x="885.15" y="143.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::key (1,333,333 samples, 0.05%)</title><rect x="208.6" y="469" width="0.6" height="15.0" fill="rgb(238,22,20)" rx="2" ry="2" />
<text  x="211.63" y="479.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (2,666,666 samples, 0.09%)</title><rect x="83.9" y="293" width="1.1" height="15.0" fill="rgb(214,33,49)" rx="2" ry="2" />
<text  x="86.88" y="303.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1,333,333 samples, 0.05%)</title><rect x="453.3" y="405" width="0.5" height="15.0" fill="rgb(234,59,26)" rx="2" ry="2" />
<text  x="456.30" y="415.5" ></text>
</g>
<g >
<title>main (22,666,661 samples, 0.77%)</title><rect x="1120.4" y="693" width="9.1" height="15.0" fill="rgb(243,87,11)" rx="2" ry="2" />
<text  x="1123.40" y="703.5" ></text>
</g>
</g>
</svg>
