<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="742.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="725" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="725" > </text>
<g id="frames">
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.26%)</title><rect x="19.2" y="373" width="3.1" height="15.0" fill="rgb(221,133,2)" rx="2" ry="2" />
<text  x="22.19" y="383.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (2,666,666 samples, 0.52%)</title><rect x="1110.3" y="437" width="6.1" height="15.0" fill="rgb(235,105,9)" rx="2" ry="2" />
<text  x="1113.31" y="447.5" ></text>
</g>
<g >
<title>std::operator==&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt; (1,333,333 samples, 0.26%)</title><rect x="908.0" y="437" width="3.1" height="15.0" fill="rgb(234,97,50)" rx="2" ry="2" />
<text  x="911.03" y="447.5" ></text>
</g>
<g >
<title>leveldb::Random::Next (5,333,332 samples, 1.04%)</title><rect x="175.5" y="421" width="12.3" height="15.0" fill="rgb(243,100,26)" rx="2" ry="2" />
<text  x="178.51" y="431.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (1,333,333 samples, 0.26%)</title><rect x="785.4" y="133" width="3.1" height="15.0" fill="rgb(216,42,26)" rx="2" ry="2" />
<text  x="788.43" y="143.5" ></text>
</g>
<g >
<title>smp_call_function_single (2,666,666 samples, 0.52%)</title><rect x="1079.7" y="293" width="6.1" height="15.0" fill="rgb(236,143,22)" rx="2" ry="2" />
<text  x="1082.66" y="303.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (1,333,333 samples, 0.26%)</title><rect x="246.0" y="325" width="3.1" height="15.0" fill="rgb(250,227,47)" rx="2" ry="2" />
<text  x="249.00" y="335.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2,666,666 samples, 0.52%)</title><rect x="791.6" y="37" width="6.1" height="15.0" fill="rgb(208,193,31)" rx="2" ry="2" />
<text  x="794.56" y="47.5" ></text>
</g>
<g >
<title>_IO_getdelim (1,333,333 samples, 0.26%)</title><rect x="1055.1" y="597" width="3.1" height="15.0" fill="rgb(237,103,16)" rx="2" ry="2" />
<text  x="1058.14" y="607.5" ></text>
</g>
<g >
<title>__GI__IO_getline_info (7,999,998 samples, 1.56%)</title><rect x="1073.5" y="533" width="18.4" height="15.0" fill="rgb(232,131,16)" rx="2" ry="2" />
<text  x="1076.53" y="543.5" ></text>
</g>
<g >
<title>_dl_init (3,999,999 samples, 0.78%)</title><rect x="1055.1" y="645" width="9.2" height="15.0" fill="rgb(245,117,25)" rx="2" ry="2" />
<text  x="1058.14" y="655.5" ></text>
</g>
<g >
<title>__x64_sys_openat (2,666,666 samples, 0.52%)</title><rect x="1091.9" y="453" width="6.2" height="15.0" fill="rgb(251,57,14)" rx="2" ry="2" />
<text  x="1094.92" y="463.5" ></text>
</g>
<g >
<title>path_openat (2,666,666 samples, 0.52%)</title><rect x="1091.9" y="405" width="6.2" height="15.0" fill="rgb(248,52,21)" rx="2" ry="2" />
<text  x="1094.92" y="415.5" ></text>
</g>
<g >
<title>__tls_get_addr (1,333,333 samples, 0.26%)</title><rect x="929.5" y="357" width="3.0" height="15.0" fill="rgb(224,31,45)" rx="2" ry="2" />
<text  x="932.48" y="367.5" ></text>
</g>
<g >
<title>up_write (1,333,333 samples, 0.26%)</title><rect x="871.2" y="245" width="3.1" height="15.0" fill="rgb(248,195,30)" rx="2" ry="2" />
<text  x="874.25" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get (1,333,333 samples, 0.26%)</title><rect x="947.9" y="213" width="3.0" height="15.0" fill="rgb(221,162,23)" rx="2" ry="2" />
<text  x="950.87" y="223.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.26%)</title><rect x="993.8" y="373" width="3.1" height="15.0" fill="rgb(244,12,51)" rx="2" ry="2" />
<text  x="996.84" y="383.5" ></text>
</g>
<g >
<title>ext4_mb_new_blocks (1,333,333 samples, 0.26%)</title><rect x="785.4" y="165" width="3.1" height="15.0" fill="rgb(221,79,33)" rx="2" ry="2" />
<text  x="788.43" y="175.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.26%)</title><rect x="1171.6" y="661" width="3.1" height="15.0" fill="rgb(239,103,9)" rx="2" ry="2" />
<text  x="1174.61" y="671.5" ></text>
</g>
<g >
<title>__vfs_read (1,333,333 samples, 0.26%)</title><rect x="1055.1" y="469" width="3.1" height="15.0" fill="rgb(234,4,39)" rx="2" ry="2" />
<text  x="1058.14" y="479.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::shared_ptr&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt;&gt; (3,999,999 samples, 0.78%)</title><rect x="1003.0" y="421" width="9.2" height="15.0" fill="rgb(254,101,2)" rx="2" ry="2" />
<text  x="1006.04" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,333,333 samples, 0.26%)</title><rect x="62.1" y="261" width="3.1" height="15.0" fill="rgb(222,123,22)" rx="2" ry="2" />
<text  x="65.10" y="271.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::Run (14,666,663 samples, 2.86%)</title><rect x="1067.4" y="613" width="33.7" height="15.0" fill="rgb(230,137,3)" rx="2" ry="2" />
<text  x="1070.40" y="623.5" >le..</text>
</g>
<g >
<title>seq_read (1,333,333 samples, 0.26%)</title><rect x="1055.1" y="453" width="3.1" height="15.0" fill="rgb(248,5,22)" rx="2" ry="2" />
<text  x="1058.14" y="463.5" ></text>
</g>
<g >
<title>std::__fill_a&lt;char&gt; (5,333,332 samples, 1.04%)</title><rect x="105.0" y="261" width="12.3" height="15.0" fill="rgb(240,124,30)" rx="2" ry="2" />
<text  x="108.01" y="271.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (2,666,666 samples, 0.52%)</title><rect x="1141.0" y="661" width="6.1" height="15.0" fill="rgb(248,18,44)" rx="2" ry="2" />
<text  x="1143.96" y="671.5" ></text>
</g>
<g >
<title>strcmp (1,333,333 samples, 0.26%)</title><rect x="1134.8" y="485" width="3.1" height="15.0" fill="rgb(222,91,40)" rx="2" ry="2" />
<text  x="1137.83" y="495.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (1,333,333 samples, 0.26%)</title><rect x="1058.2" y="581" width="3.1" height="15.0" fill="rgb(209,59,13)" rx="2" ry="2" />
<text  x="1061.21" y="591.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::promise (3,999,999 samples, 0.78%)</title><rect x="1003.0" y="469" width="9.2" height="15.0" fill="rgb(246,127,21)" rx="2" ry="2" />
<text  x="1006.04" y="479.5" ></text>
</g>
<g >
<title>__vfs_write (173,333,290 samples, 33.77%)</title><rect x="475.9" y="277" width="398.4" height="15.0" fill="rgb(236,182,36)" rx="2" ry="2" />
<text  x="478.87" y="287.5" >__vfs_write</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (1,333,333 samples, 0.26%)</title><rect x="993.8" y="389" width="3.1" height="15.0" fill="rgb(210,211,47)" rx="2" ry="2" />
<text  x="996.84" y="399.5" ></text>
</g>
<g >
<title>ksys_read (1,333,333 samples, 0.26%)</title><rect x="1055.1" y="501" width="3.1" height="15.0" fill="rgb(244,86,32)" rx="2" ry="2" />
<text  x="1058.14" y="511.5" ></text>
</g>
<g >
<title>ext4_mark_iloc_dirty (1,333,333 samples, 0.26%)</title><rect x="1064.3" y="357" width="3.1" height="15.0" fill="rgb(205,152,33)" rx="2" ry="2" />
<text  x="1067.34" y="367.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Valid (1,333,333 samples, 0.26%)</title><rect x="16.1" y="373" width="3.1" height="15.0" fill="rgb(217,30,19)" rx="2" ry="2" />
<text  x="19.13" y="383.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::~Benchmark (9,333,331 samples, 1.82%)</title><rect x="1101.1" y="613" width="21.5" height="15.0" fill="rgb(216,73,12)" rx="2" ry="2" />
<text  x="1104.12" y="623.5" >l..</text>
</g>
<g >
<title>leveldb::DecodeFixed32 (2,666,666 samples, 0.52%)</title><rect x="83.6" y="293" width="6.1" height="15.0" fill="rgb(237,161,34)" rx="2" ry="2" />
<text  x="86.56" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt; &gt;::construct&lt;std::__future_base::_State_baseV2&gt; (1,333,333 samples, 0.26%)</title><rect x="1003.0" y="357" width="3.1" height="15.0" fill="rgb(226,198,24)" rx="2" ry="2" />
<text  x="1006.04" y="367.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (2,666,666 samples, 0.52%)</title><rect x="393.1" y="293" width="6.1" height="15.0" fill="rgb(253,78,44)" rx="2" ry="2" />
<text  x="396.12" y="303.5" ></text>
</g>
<g >
<title>leveldb::Status::ok (1,333,333 samples, 0.26%)</title><rect x="212.3" y="437" width="3.1" height="15.0" fill="rgb(250,50,5)" rx="2" ry="2" />
<text  x="215.29" y="447.5" ></text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.26%)</title><rect x="1125.6" y="325" width="3.1" height="15.0" fill="rgb(207,151,38)" rx="2" ry="2" />
<text  x="1128.64" y="335.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::InitModule (1,333,333 samples, 0.26%)</title><rect x="1061.3" y="581" width="3.0" height="15.0" fill="rgb(234,23,23)" rx="2" ry="2" />
<text  x="1064.27" y="591.5" ></text>
</g>
<g >
<title>aperfmperf_snapshot_cpu (2,666,666 samples, 0.52%)</title><rect x="1091.9" y="309" width="6.2" height="15.0" fill="rgb(215,214,32)" rx="2" ry="2" />
<text  x="1094.92" y="319.5" ></text>
</g>
<g >
<title>leveldb::MemTable::Unref (1,333,333 samples, 0.26%)</title><rect x="1116.4" y="565" width="3.1" height="15.0" fill="rgb(241,106,34)" rx="2" ry="2" />
<text  x="1119.44" y="575.5" ></text>
</g>
<g >
<title>ext4_mark_iloc_dirty (7,999,998 samples, 1.56%)</title><rect x="846.7" y="181" width="18.4" height="15.0" fill="rgb(212,33,49)" rx="2" ry="2" />
<text  x="849.73" y="191.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (453,333,220 samples, 88.31%)</title><rect x="10.0" y="597" width="1042.1" height="15.0" fill="rgb(206,210,2)" rx="2" ry="2" />
<text  x="13.00" y="607.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>leveldb::Options::Options (2,666,666 samples, 0.52%)</title><rect x="1122.6" y="613" width="6.1" height="15.0" fill="rgb(216,3,20)" rx="2" ry="2" />
<text  x="1125.57" y="623.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (1,333,333 samples, 0.26%)</title><rect x="785.4" y="149" width="3.1" height="15.0" fill="rgb(247,102,23)" rx="2" ry="2" />
<text  x="788.43" y="159.5" ></text>
</g>
<g >
<title>std::fill_n&lt;char*, unsigned long, char&gt; (5,333,332 samples, 1.04%)</title><rect x="105.0" y="293" width="12.3" height="15.0" fill="rgb(227,112,24)" rx="2" ry="2" />
<text  x="108.01" y="303.5" ></text>
</g>
<g >
<title>leveldb::MemTable::Add (79,999,980 samples, 15.58%)</title><rect x="236.8" y="405" width="183.9" height="15.0" fill="rgb(213,215,8)" rx="2" ry="2" />
<text  x="239.81" y="415.5" >leveldb::MemTable::Add</text>
</g>
<g >
<title>dax_finish_sync_fault (1,333,333 samples, 0.26%)</title><rect x="1168.5" y="517" width="3.1" height="15.0" fill="rgb(223,7,20)" rx="2" ry="2" />
<text  x="1171.55" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (1,333,333 samples, 0.26%)</title><rect x="135.7" y="389" width="3.0" height="15.0" fill="rgb(205,8,54)" rx="2" ry="2" />
<text  x="138.66" y="399.5" ></text>
</g>
<g >
<title>__check_heap_object (1,333,333 samples, 0.26%)</title><rect x="1055.1" y="421" width="3.1" height="15.0" fill="rgb(244,203,51)" rx="2" ry="2" />
<text  x="1058.14" y="431.5" ></text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.26%)</title><rect x="239.9" y="341" width="3.0" height="15.0" fill="rgb(247,208,38)" rx="2" ry="2" />
<text  x="242.87" y="351.5" ></text>
</g>
<g >
<title>__srcu_read_lock (1,333,333 samples, 0.26%)</title><rect x="482.0" y="197" width="3.1" height="15.0" fill="rgb(208,13,38)" rx="2" ry="2" />
<text  x="485.00" y="207.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ReleaseToCentralCache (1,333,333 samples, 0.26%)</title><rect x="1119.5" y="501" width="3.1" height="15.0" fill="rgb(219,11,50)" rx="2" ry="2" />
<text  x="1122.51" y="511.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (5,333,332 samples, 1.04%)</title><rect x="68.2" y="373" width="12.3" height="15.0" fill="rgb(223,224,36)" rx="2" ry="2" />
<text  x="71.23" y="383.5" ></text>
</g>
<g >
<title>leveldb::Arena::AllocateNewBlock (1,333,333 samples, 0.26%)</title><rect x="239.9" y="357" width="3.0" height="15.0" fill="rgb(231,216,18)" rx="2" ry="2" />
<text  x="242.87" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; (3,999,999 samples, 0.78%)</title><rect x="1107.2" y="469" width="9.2" height="15.0" fill="rgb(225,209,13)" rx="2" ry="2" />
<text  x="1110.25" y="479.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.26%)</title><rect x="239.9" y="229" width="3.0" height="15.0" fill="rgb(238,84,26)" rx="2" ry="2" />
<text  x="242.87" y="239.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,333,333 samples, 0.26%)</title><rect x="132.6" y="357" width="3.1" height="15.0" fill="rgb(244,37,46)" rx="2" ry="2" />
<text  x="135.60" y="367.5" ></text>
</g>
<g >
<title>dax_copy_from_iter (1,333,333 samples, 0.26%)</title><rect x="1067.4" y="277" width="3.1" height="15.0" fill="rgb(222,111,30)" rx="2" ry="2" />
<text  x="1070.40" y="287.5" ></text>
</g>
<g >
<title>all (513,333,205 samples, 100%)</title><rect x="10.0" y="693" width="1180.0" height="15.0" fill="rgb(241,186,37)" rx="2" ry="2" />
<text  x="13.00" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (6,666,665 samples, 1.30%)</title><rect x="117.3" y="325" width="15.3" height="15.0" fill="rgb(238,179,3)" rx="2" ry="2" />
<text  x="120.27" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr (3,999,999 samples, 0.78%)</title><rect x="950.9" y="229" width="9.2" height="15.0" fill="rgb(233,195,43)" rx="2" ry="2" />
<text  x="953.94" y="239.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::front (1,333,333 samples, 0.26%)</title><rect x="911.1" y="453" width="3.1" height="15.0" fill="rgb(252,37,31)" rx="2" ry="2" />
<text  x="914.09" y="463.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::DoWrite (394,666,568 samples, 76.88%)</title><rect x="144.9" y="501" width="907.2" height="15.0" fill="rgb(228,78,37)" rx="2" ry="2" />
<text  x="147.86" y="511.5" >leveldb::Benchmark::DoWrite</text>
</g>
<g >
<title>__x64_sys_unlink (1,333,333 samples, 0.26%)</title><rect x="1064.3" y="517" width="3.1" height="15.0" fill="rgb(219,43,26)" rx="2" ry="2" />
<text  x="1067.34" y="527.5" ></text>
</g>
<g >
<title>memmove_movnt_avx512f_clwb (5,333,332 samples, 1.04%)</title><rect x="1159.4" y="661" width="12.2" height="15.0" fill="rgb(251,74,30)" rx="2" ry="2" />
<text  x="1162.35" y="671.5" ></text>
</g>
<g >
<title>ext4_reserve_inode_write (2,666,666 samples, 0.52%)</title><rect x="865.1" y="181" width="6.1" height="15.0" fill="rgb(250,168,1)" rx="2" ry="2" />
<text  x="868.12" y="191.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::_Reset::~_Reset (1,333,333 samples, 0.26%)</title><rect x="996.9" y="453" width="3.1" height="15.0" fill="rgb(219,119,52)" rx="2" ry="2" />
<text  x="999.91" y="463.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.26%)</title><rect x="1055.1" y="549" width="3.1" height="15.0" fill="rgb(222,227,36)" rx="2" ry="2" />
<text  x="1058.14" y="559.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::InsertRange (1,333,333 samples, 0.26%)</title><rect x="1119.5" y="485" width="3.1" height="15.0" fill="rgb(253,111,5)" rx="2" ry="2" />
<text  x="1122.51" y="495.5" ></text>
</g>
<g >
<title>blkdev_issue_zeroout (13,333,330 samples, 2.60%)</title><rect x="788.5" y="165" width="30.6" height="15.0" fill="rgb(247,40,17)" rx="2" ry="2" />
<text  x="791.49" y="175.5" >bl..</text>
</g>
<g >
<title>ext4_mark_inode_dirty (11,999,997 samples, 2.34%)</title><rect x="843.7" y="197" width="27.5" height="15.0" fill="rgb(215,206,43)" rx="2" ry="2" />
<text  x="846.66" y="207.5" >e..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::_M_head (1,333,333 samples, 0.26%)</title><rect x="966.3" y="197" width="3.0" height="15.0" fill="rgb(220,99,12)" rx="2" ry="2" />
<text  x="969.26" y="207.5" ></text>
</g>
<g >
<title>__ext4_journal_stop (2,666,666 samples, 0.52%)</title><rect x="837.5" y="197" width="6.2" height="15.0" fill="rgb(227,65,27)" rx="2" ry="2" />
<text  x="840.53" y="207.5" ></text>
</g>
<g >
<title>__strchrnul_avx2 (1,333,333 samples, 0.26%)</title><rect x="157.1" y="405" width="3.1" height="15.0" fill="rgb(240,50,26)" rx="2" ry="2" />
<text  x="160.12" y="415.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (453,333,220 samples, 88.31%)</title><rect x="10.0" y="549" width="1042.1" height="15.0" fill="rgb(212,132,1)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >std::__invoke_impl&lt;void, void </text>
</g>
<g >
<title>futex_wake (5,333,332 samples, 1.04%)</title><rect x="932.5" y="373" width="12.3" height="15.0" fill="rgb(245,9,28)" rx="2" ry="2" />
<text  x="935.55" y="383.5" ></text>
</g>
<g >
<title>mem_cgroup_uncharge_list (1,333,333 samples, 0.26%)</title><rect x="1137.9" y="469" width="3.1" height="15.0" fill="rgb(208,9,51)" rx="2" ry="2" />
<text  x="1140.90" y="479.5" ></text>
</g>
<g >
<title>kmem_cache_free (2,666,666 samples, 0.52%)</title><rect x="837.5" y="165" width="6.2" height="15.0" fill="rgb(235,173,54)" rx="2" ry="2" />
<text  x="840.53" y="175.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt;::_M_initialize_map (1,333,333 samples, 0.26%)</title><rect x="1125.6" y="405" width="3.1" height="15.0" fill="rgb(245,95,6)" rx="2" ry="2" />
<text  x="1128.64" y="415.5" ></text>
</g>
<g >
<title>_start (31,999,992 samples, 6.23%)</title><rect x="1064.3" y="661" width="73.6" height="15.0" fill="rgb(207,105,3)" rx="2" ry="2" />
<text  x="1067.34" y="671.5" >_start</text>
</g>
<g >
<title>__GI___strerror_r (1,333,333 samples, 0.26%)</title><rect x="1098.1" y="533" width="3.0" height="15.0" fill="rgb(248,205,21)" rx="2" ry="2" />
<text  x="1101.05" y="543.5" ></text>
</g>
<g >
<title>leveldb::WriteBatch::Iterate (86,666,645 samples, 16.88%)</title><rect x="233.7" y="437" width="199.3" height="15.0" fill="rgb(218,173,18)" rx="2" ry="2" />
<text  x="236.74" y="447.5" >leveldb::WriteBatch::Iterate</text>
</g>
<g >
<title>tlb_finish_mmu (1,333,333 samples, 0.26%)</title><rect x="1116.4" y="261" width="3.1" height="15.0" fill="rgb(233,109,32)" rx="2" ry="2" />
<text  x="1119.44" y="271.5" ></text>
</g>
<g >
<title>leveldb::MemTable::KeyComparator::operator (51,999,987 samples, 10.13%)</title><rect x="279.7" y="341" width="119.5" height="15.0" fill="rgb(244,109,47)" rx="2" ry="2" />
<text  x="282.71" y="351.5" >leveldb::MemTa..</text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::get (1,333,333 samples, 0.26%)</title><rect x="993.8" y="405" width="3.1" height="15.0" fill="rgb(237,49,16)" rx="2" ry="2" />
<text  x="996.84" y="415.5" ></text>
</g>
<g >
<title>do_lookup_x (2,666,666 samples, 0.52%)</title><rect x="1131.8" y="517" width="6.1" height="15.0" fill="rgb(233,35,14)" rx="2" ry="2" />
<text  x="1134.77" y="527.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Flush (22,666,661 samples, 4.42%)</title><rect x="49.8" y="389" width="52.1" height="15.0" fill="rgb(235,32,13)" rx="2" ry="2" />
<text  x="52.84" y="399.5" >level..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_deallocate_node_ptr (1,333,333 samples, 0.26%)</title><rect x="1104.2" y="485" width="3.0" height="15.0" fill="rgb(213,41,1)" rx="2" ry="2" />
<text  x="1107.18" y="495.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (1,333,333 samples, 0.26%)</title><rect x="1125.6" y="293" width="3.1" height="15.0" fill="rgb(210,91,16)" rx="2" ry="2" />
<text  x="1128.64" y="303.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.26%)</title><rect x="1128.7" y="469" width="3.1" height="15.0" fill="rgb(249,177,44)" rx="2" ry="2" />
<text  x="1131.70" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::operator* (1,333,333 samples, 0.26%)</title><rect x="993.8" y="421" width="3.1" height="15.0" fill="rgb(246,188,37)" rx="2" ry="2" />
<text  x="996.84" y="431.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseToSpans (1,333,333 samples, 0.26%)</title><rect x="1113.4" y="357" width="3.0" height="15.0" fill="rgb(243,78,41)" rx="2" ry="2" />
<text  x="1116.38" y="367.5" ></text>
</g>
<g >
<title>seq_printf (2,666,666 samples, 0.52%)</title><rect x="1085.8" y="325" width="6.1" height="15.0" fill="rgb(214,141,46)" rx="2" ry="2" />
<text  x="1088.79" y="335.5" ></text>
</g>
<g >
<title>leveldb::PosixLogger::Logv (1,333,333 samples, 0.26%)</title><rect x="1067.4" y="549" width="3.1" height="15.0" fill="rgb(221,167,9)" rx="2" ry="2" />
<text  x="1070.40" y="559.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::~DBImpl (9,333,331 samples, 1.82%)</title><rect x="1101.1" y="581" width="21.5" height="15.0" fill="rgb(210,199,23)" rx="2" ry="2" />
<text  x="1104.12" y="591.5" >l..</text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (1,333,333 samples, 0.26%)</title><rect x="13.1" y="389" width="3.0" height="15.0" fill="rgb(213,14,38)" rx="2" ry="2" />
<text  x="16.06" y="399.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Rep::Rep (5,333,332 samples, 1.04%)</title><rect x="105.0" y="389" width="12.3" height="15.0" fill="rgb(250,165,35)" rx="2" ry="2" />
<text  x="108.01" y="399.5" ></text>
</g>
<g >
<title>leveldb::Status::~Status (1,333,333 samples, 0.26%)</title><rect x="227.6" y="453" width="3.1" height="15.0" fill="rgb(237,149,30)" rx="2" ry="2" />
<text  x="230.61" y="463.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (11,999,997 samples, 2.34%)</title><rect x="371.7" y="309" width="27.5" height="15.0" fill="rgb(216,209,50)" rx="2" ry="2" />
<text  x="374.66" y="319.5" >l..</text>
</g>
<g >
<title>crc32c_pcl_intel_update (1,333,333 samples, 0.26%)</title><rect x="1064.3" y="309" width="3.1" height="15.0" fill="rgb(247,22,42)" rx="2" ry="2" />
<text  x="1067.34" y="319.5" ></text>
</g>
<g >
<title>ext4_evict_inode (1,333,333 samples, 0.26%)</title><rect x="1064.3" y="453" width="3.1" height="15.0" fill="rgb(230,100,11)" rx="2" ry="2" />
<text  x="1067.34" y="463.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (1,333,333 samples, 0.26%)</title><rect x="1058.2" y="309" width="3.1" height="15.0" fill="rgb(243,168,47)" rx="2" ry="2" />
<text  x="1061.21" y="319.5" ></text>
</g>
<g >
<title>_copy_from_iter_flushcache (1,333,333 samples, 0.26%)</title><rect x="1067.4" y="245" width="3.1" height="15.0" fill="rgb(249,66,24)" rx="2" ry="2" />
<text  x="1070.40" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::begin (1,333,333 samples, 0.26%)</title><rect x="911.1" y="437" width="3.1" height="15.0" fill="rgb(232,113,21)" rx="2" ry="2" />
<text  x="914.09" y="447.5" ></text>
</g>
<g >
<title>ext4_iomap_end (18,666,662 samples, 3.64%)</title><rect x="828.3" y="213" width="42.9" height="15.0" fill="rgb(249,191,42)" rx="2" ry="2" />
<text  x="831.34" y="223.5" >ext4..</text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.26%)</title><rect x="408.4" y="213" width="3.1" height="15.0" fill="rgb(238,222,54)" rx="2" ry="2" />
<text  x="411.44" y="223.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::TableBuilder (5,333,332 samples, 1.04%)</title><rect x="105.0" y="405" width="12.3" height="15.0" fill="rgb(229,162,30)" rx="2" ry="2" />
<text  x="108.01" y="415.5" ></text>
</g>
<g >
<title>snappy::UncheckedByteArraySink::Append (1,333,333 samples, 0.26%)</title><rect x="89.7" y="309" width="3.1" height="15.0" fill="rgb(243,52,10)" rx="2" ry="2" />
<text  x="92.69" y="319.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::Delete (1,333,333 samples, 0.26%)</title><rect x="1116.4" y="421" width="3.1" height="15.0" fill="rgb(216,125,15)" rx="2" ry="2" />
<text  x="1119.44" y="431.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (1,333,333 samples, 0.26%)</title><rect x="28.4" y="373" width="3.1" height="15.0" fill="rgb(225,15,3)" rx="2" ry="2" />
<text  x="31.39" y="383.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.26%)</title><rect x="408.4" y="197" width="3.1" height="15.0" fill="rgb(230,152,24)" rx="2" ry="2" />
<text  x="411.44" y="207.5" ></text>
</g>
<g >
<title>ext4_map_blocks (15,999,996 samples, 3.12%)</title><rect x="782.4" y="197" width="36.7" height="15.0" fill="rgb(217,86,37)" rx="2" ry="2" />
<text  x="785.36" y="207.5" >ext..</text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.26%)</title><rect x="1058.2" y="389" width="3.1" height="15.0" fill="rgb(237,122,49)" rx="2" ry="2" />
<text  x="1061.21" y="399.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Equal (6,666,665 samples, 1.30%)</title><rect x="246.0" y="373" width="15.3" height="15.0" fill="rgb(232,81,20)" rx="2" ry="2" />
<text  x="249.00" y="383.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.26%)</title><rect x="37.6" y="373" width="3.0" height="15.0" fill="rgb(210,62,53)" rx="2" ry="2" />
<text  x="40.58" y="383.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl&lt;std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.52%)</title><rect x="960.1" y="229" width="6.2" height="15.0" fill="rgb(253,139,40)" rx="2" ry="2" />
<text  x="963.13" y="239.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadNodeMain (58,666,652 samples, 11.43%)</title><rect x="10.0" y="517" width="134.9" height="15.0" fill="rgb(207,100,8)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >leveldb::(anonymo..</text>
</g>
<g >
<title>__stpcpy_sse2_unaligned (1,333,333 samples, 0.26%)</title><rect x="1098.1" y="501" width="3.0" height="15.0" fill="rgb(205,41,6)" rx="2" ry="2" />
<text  x="1101.05" y="511.5" ></text>
</g>
<g >
<title>iomap_apply (169,333,291 samples, 32.99%)</title><rect x="482.0" y="229" width="389.2" height="15.0" fill="rgb(248,5,1)" rx="2" ry="2" />
<text  x="485.00" y="239.5" >iomap_apply</text>
</g>
<g >
<title>leveldb::MemTable::KeyComparator::operator (1,333,333 samples, 0.26%)</title><rect x="1147.1" y="661" width="3.1" height="15.0" fill="rgb(205,74,13)" rx="2" ry="2" />
<text  x="1150.09" y="671.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,666,666 samples, 0.52%)</title><rect x="1091.9" y="469" width="6.2" height="15.0" fill="rgb(235,28,28)" rx="2" ry="2" />
<text  x="1094.92" y="479.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1,333,333 samples, 0.26%)</title><rect x="252.1" y="293" width="3.1" height="15.0" fill="rgb(242,228,31)" rx="2" ry="2" />
<text  x="255.13" y="303.5" ></text>
</g>
<g >
<title>_dl_start_final (3,999,999 samples, 0.78%)</title><rect x="1128.7" y="629" width="9.2" height="15.0" fill="rgb(217,62,1)" rx="2" ry="2" />
<text  x="1131.70" y="639.5" ></text>
</g>
<g >
<title>__find_specmb (1,333,333 samples, 0.26%)</title><rect x="157.1" y="421" width="3.1" height="15.0" fill="rgb(208,93,7)" rx="2" ry="2" />
<text  x="160.12" y="431.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.26%)</title><rect x="1009.2" y="373" width="3.0" height="15.0" fill="rgb(246,106,30)" rx="2" ry="2" />
<text  x="1012.17" y="383.5" ></text>
</g>
<g >
<title>release_pages (1,333,333 samples, 0.26%)</title><rect x="1137.9" y="485" width="3.1" height="15.0" fill="rgb(230,197,12)" rx="2" ry="2" />
<text  x="1140.90" y="495.5" ></text>
</g>
<g >
<title>do_page_fault (2,666,666 samples, 0.52%)</title><rect x="1165.5" y="629" width="6.1" height="15.0" fill="rgb(217,19,3)" rx="2" ry="2" />
<text  x="1168.48" y="639.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__future_base::_Result_base*, false&gt;::_M_head (1,333,333 samples, 0.26%)</title><rect x="993.8" y="325" width="3.1" height="15.0" fill="rgb(208,40,34)" rx="2" ry="2" />
<text  x="996.84" y="335.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl&lt;std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.26%)</title><rect x="950.9" y="213" width="3.1" height="15.0" fill="rgb(211,98,10)" rx="2" ry="2" />
<text  x="953.94" y="223.5" ></text>
</g>
<g >
<title>leveldb::Arena::AllocateFallback (1,333,333 samples, 0.26%)</title><rect x="408.4" y="341" width="3.1" height="15.0" fill="rgb(252,169,16)" rx="2" ry="2" />
<text  x="411.44" y="351.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;*, unsigned long&gt; (1,333,333 samples, 0.26%)</title><rect x="1125.6" y="501" width="3.1" height="15.0" fill="rgb(211,160,40)" rx="2" ry="2" />
<text  x="1128.64" y="511.5" ></text>
</g>
<g >
<title>call_init (3,999,999 samples, 0.78%)</title><rect x="1055.1" y="629" width="9.2" height="15.0" fill="rgb(228,3,46)" rx="2" ry="2" />
<text  x="1058.14" y="639.5" ></text>
</g>
<g >
<title>__ext4_ext_dirty (1,333,333 samples, 0.26%)</title><rect x="1064.3" y="389" width="3.1" height="15.0" fill="rgb(207,224,6)" rx="2" ry="2" />
<text  x="1067.34" y="399.5" ></text>
</g>
<g >
<title>vfs_statx (1,333,333 samples, 0.26%)</title><rect x="1128.7" y="421" width="3.1" height="15.0" fill="rgb(222,81,42)" rx="2" ry="2" />
<text  x="1131.70" y="431.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (1,333,333 samples, 0.26%)</title><rect x="98.9" y="181" width="3.0" height="15.0" fill="rgb(243,107,13)" rx="2" ry="2" />
<text  x="101.88" y="191.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (1,333,333 samples, 0.26%)</title><rect x="28.4" y="357" width="3.1" height="15.0" fill="rgb(210,206,46)" rx="2" ry="2" />
<text  x="31.39" y="367.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::WriteRandom (394,666,568 samples, 76.88%)</title><rect x="144.9" y="517" width="907.2" height="15.0" fill="rgb(245,68,50)" rx="2" ry="2" />
<text  x="147.86" y="527.5" >leveldb::Benchmark::WriteRandom</text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set (13,333,330 samples, 2.60%)</title><rect x="944.8" y="293" width="30.7" height="15.0" fill="rgb(230,141,17)" rx="2" ry="2" />
<text  x="947.81" y="303.5" >st..</text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixError (1,333,333 samples, 0.26%)</title><rect x="1098.1" y="565" width="3.0" height="15.0" fill="rgb(246,110,3)" rx="2" ry="2" />
<text  x="1101.05" y="575.5" ></text>
</g>
<g >
<title>__ext4_get_inode_loc (1,333,333 samples, 0.26%)</title><rect x="865.1" y="165" width="3.1" height="15.0" fill="rgb(229,59,39)" rx="2" ry="2" />
<text  x="868.12" y="175.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,666,666 samples, 0.52%)</title><rect x="1091.9" y="485" width="6.2" height="15.0" fill="rgb(208,128,37)" rx="2" ry="2" />
<text  x="1094.92" y="495.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;*, unsigned long, std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt; &gt; (1,333,333 samples, 0.26%)</title><rect x="1125.6" y="517" width="3.1" height="15.0" fill="rgb(253,95,53)" rx="2" ry="2" />
<text  x="1128.64" y="527.5" ></text>
</g>
<g >
<title>GetStackTrace (1,333,333 samples, 0.26%)</title><rect x="1058.2" y="485" width="3.1" height="15.0" fill="rgb(235,203,21)" rx="2" ry="2" />
<text  x="1061.21" y="495.5" ></text>
</g>
<g >
<title>strerror (1,333,333 samples, 0.26%)</title><rect x="1098.1" y="549" width="3.0" height="15.0" fill="rgb(217,54,24)" rx="2" ry="2" />
<text  x="1101.05" y="559.5" ></text>
</g>
<g >
<title>mempool_alloc (1,333,333 samples, 0.26%)</title><rect x="788.5" y="101" width="3.1" height="15.0" fill="rgb(215,81,10)" rx="2" ry="2" />
<text  x="791.49" y="111.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::WriteWrapper (345,333,247 samples, 67.27%)</title><rect x="200.0" y="469" width="793.8" height="15.0" fill="rgb(231,9,54)" rx="2" ry="2" />
<text  x="203.03" y="479.5" >leveldb::DBImpl::WriteWrapper</text>
</g>
<g >
<title>pmem_flush (1,333,333 samples, 0.26%)</title><rect x="101.9" y="373" width="3.1" height="15.0" fill="rgb(219,124,26)" rx="2" ry="2" />
<text  x="104.95" y="383.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.26%)</title><rect x="239.9" y="245" width="3.0" height="15.0" fill="rgb(235,198,28)" rx="2" ry="2" />
<text  x="242.87" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1,333,333 samples, 0.26%)</title><rect x="52.9" y="325" width="3.1" height="15.0" fill="rgb(213,90,5)" rx="2" ry="2" />
<text  x="55.91" y="335.5" ></text>
</g>
<g >
<title>leveldb::EncodeVarint32 (1,333,333 samples, 0.26%)</title><rect x="31.5" y="357" width="3.0" height="15.0" fill="rgb(205,194,26)" rx="2" ry="2" />
<text  x="34.45" y="367.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (1,333,333 samples, 0.26%)</title><rect x="408.4" y="277" width="3.1" height="15.0" fill="rgb(241,146,20)" rx="2" ry="2" />
<text  x="411.44" y="287.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;char*, unsigned long, char&gt; (5,333,332 samples, 1.04%)</title><rect x="105.0" y="341" width="12.3" height="15.0" fill="rgb(209,211,41)" rx="2" ry="2" />
<text  x="108.01" y="351.5" ></text>
</g>
<g >
<title>_dl_map_object (1,333,333 samples, 0.26%)</title><rect x="1128.7" y="533" width="3.1" height="15.0" fill="rgb(250,60,54)" rx="2" ry="2" />
<text  x="1131.70" y="543.5" ></text>
</g>
<g >
<title>try_charge (1,333,333 samples, 0.26%)</title><rect x="1058.2" y="293" width="3.1" height="15.0" fill="rgb(205,18,51)" rx="2" ry="2" />
<text  x="1061.21" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append@plt (1,333,333 samples, 0.26%)</title><rect x="1045.9" y="437" width="3.1" height="15.0" fill="rgb(213,130,2)" rx="2" ry="2" />
<text  x="1048.95" y="447.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (1,333,333 samples, 0.26%)</title><rect x="996.9" y="421" width="3.1" height="15.0" fill="rgb(230,157,53)" rx="2" ry="2" />
<text  x="999.91" y="431.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::KeyBuffer::Set (5,333,332 samples, 1.04%)</title><rect x="147.9" y="485" width="12.3" height="15.0" fill="rgb(223,45,7)" rx="2" ry="2" />
<text  x="150.92" y="495.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (1,333,333 samples, 0.26%)</title><rect x="74.4" y="357" width="3.0" height="15.0" fill="rgb(207,175,28)" rx="2" ry="2" />
<text  x="77.36" y="367.5" ></text>
</g>
<g >
<title>__GI__IO_default_uflow (7,999,998 samples, 1.56%)</title><rect x="1073.5" y="517" width="18.4" height="15.0" fill="rgb(220,219,2)" rx="2" ry="2" />
<text  x="1076.53" y="527.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,333,333 samples, 0.26%)</title><rect x="1058.2" y="325" width="3.1" height="15.0" fill="rgb(205,52,30)" rx="2" ry="2" />
<text  x="1061.21" y="335.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (1,333,333 samples, 0.26%)</title><rect x="135.7" y="405" width="3.0" height="15.0" fill="rgb(235,5,35)" rx="2" ry="2" />
<text  x="138.66" y="415.5" ></text>
</g>
<g >
<title>leveldb::Arena::Allocate (1,333,333 samples, 0.26%)</title><rect x="239.9" y="389" width="3.0" height="15.0" fill="rgb(221,51,20)" rx="2" ry="2" />
<text  x="242.87" y="399.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (1,333,333 samples, 0.26%)</title><rect x="757.8" y="165" width="3.1" height="15.0" fill="rgb(244,159,49)" rx="2" ry="2" />
<text  x="760.84" y="175.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (3,999,999 samples, 0.78%)</title><rect x="123.4" y="309" width="9.2" height="15.0" fill="rgb(250,217,14)" rx="2" ry="2" />
<text  x="126.40" y="319.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.52%)</title><rect x="1030.6" y="277" width="6.2" height="15.0" fill="rgb(249,127,12)" rx="2" ry="2" />
<text  x="1033.62" y="287.5" ></text>
</g>
<g >
<title>__copy_user_flushcache (1,333,333 samples, 0.26%)</title><rect x="1067.4" y="229" width="3.1" height="15.0" fill="rgb(241,62,27)" rx="2" ry="2" />
<text  x="1070.40" y="239.5" ></text>
</g>
<g >
<title>leveldb::MemTable::~MemTable (1,333,333 samples, 0.26%)</title><rect x="1116.4" y="549" width="3.1" height="15.0" fill="rgb(242,132,31)" rx="2" ry="2" />
<text  x="1119.44" y="559.5" ></text>
</g>
<g >
<title>jbd2_journal_get_write_access (1,333,333 samples, 0.26%)</title><rect x="868.2" y="149" width="3.0" height="15.0" fill="rgb(236,58,38)" rx="2" ry="2" />
<text  x="871.18" y="159.5" ></text>
</g>
<g >
<title>leveldb::DestroyDB (1,333,333 samples, 0.26%)</title><rect x="1064.3" y="597" width="3.1" height="15.0" fill="rgb(238,221,41)" rx="2" ry="2" />
<text  x="1067.34" y="607.5" ></text>
</g>
<g >
<title>jbd2__journal_start (9,333,331 samples, 1.82%)</title><rect x="754.8" y="181" width="21.4" height="15.0" fill="rgb(220,129,10)" rx="2" ry="2" />
<text  x="757.78" y="191.5" >j..</text>
</g>
<g >
<title>std::__invoke&lt;void  (13,333,330 samples, 2.60%)</title><rect x="944.8" y="325" width="30.7" height="15.0" fill="rgb(224,77,16)" rx="2" ry="2" />
<text  x="947.81" y="335.5" >st..</text>
</g>
<g >
<title>leveldb::WriteBatch::Put (2,666,666 samples, 0.52%)</title><rect x="1045.9" y="485" width="6.2" height="15.0" fill="rgb(240,68,42)" rx="2" ry="2" />
<text  x="1048.95" y="495.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseToSpans (1,333,333 samples, 0.26%)</title><rect x="1116.4" y="437" width="3.1" height="15.0" fill="rgb(208,134,25)" rx="2" ry="2" />
<text  x="1119.44" y="447.5" ></text>
</g>
<g >
<title>page_fault (2,666,666 samples, 0.52%)</title><rect x="190.8" y="421" width="6.2" height="15.0" fill="rgb(236,58,46)" rx="2" ry="2" />
<text  x="193.83" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (1,333,333 samples, 0.26%)</title><rect x="135.7" y="341" width="3.0" height="15.0" fill="rgb(208,93,41)" rx="2" ry="2" />
<text  x="138.66" y="351.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::~promise (10,666,664 samples, 2.08%)</title><rect x="1012.2" y="469" width="24.6" height="15.0" fill="rgb(211,32,46)" rx="2" ry="2" />
<text  x="1015.23" y="479.5" >s..</text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (1,333,333 samples, 0.26%)</title><rect x="239.9" y="325" width="3.0" height="15.0" fill="rgb(212,24,3)" rx="2" ry="2" />
<text  x="242.87" y="335.5" ></text>
</g>
<g >
<title>start_this_handle (2,666,666 samples, 0.52%)</title><rect x="831.4" y="165" width="6.1" height="15.0" fill="rgb(250,179,39)" rx="2" ry="2" />
<text  x="834.40" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (6,666,665 samples, 1.30%)</title><rect x="117.3" y="357" width="15.3" height="15.0" fill="rgb(253,123,46)" rx="2" ry="2" />
<text  x="120.27" y="367.5" ></text>
</g>
<g >
<title>__x64_sys_write (1,333,333 samples, 0.26%)</title><rect x="1067.4" y="405" width="3.1" height="15.0" fill="rgb(223,223,23)" rx="2" ry="2" />
<text  x="1070.40" y="415.5" ></text>
</g>
<g >
<title>__jbd2_log_start_commit (1,333,333 samples, 0.26%)</title><rect x="1168.5" y="453" width="3.1" height="15.0" fill="rgb(208,23,44)" rx="2" ry="2" />
<text  x="1171.55" y="463.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::get_future (1,333,333 samples, 0.26%)</title><rect x="1000.0" y="469" width="3.0" height="15.0" fill="rgb(222,211,52)" rx="2" ry="2" />
<text  x="1002.97" y="479.5" ></text>
</g>
<g >
<title>seq_read (7,999,998 samples, 1.56%)</title><rect x="1073.5" y="357" width="18.4" height="15.0" fill="rgb(241,16,33)" rx="2" ry="2" />
<text  x="1076.53" y="367.5" ></text>
</g>
<g >
<title>tcmalloc::Static::InitStaticVars (1,333,333 samples, 0.26%)</title><rect x="1061.3" y="565" width="3.0" height="15.0" fill="rgb(237,217,21)" rx="2" ry="2" />
<text  x="1064.27" y="575.5" ></text>
</g>
<g >
<title>leveldb::Status::operator= (1,333,333 samples, 0.26%)</title><rect x="224.5" y="453" width="3.1" height="15.0" fill="rgb(251,87,5)" rx="2" ry="2" />
<text  x="227.55" y="463.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (13,333,330 samples, 2.60%)</title><rect x="944.8" y="341" width="30.7" height="15.0" fill="rgb(217,66,36)" rx="2" ry="2" />
<text  x="947.81" y="351.5" >st..</text>
</g>
<g >
<title>leveldb::port::Mutex::Unlock (1,333,333 samples, 0.26%)</title><rect x="905.0" y="453" width="3.0" height="15.0" fill="rgb(229,62,6)" rx="2" ry="2" />
<text  x="907.96" y="463.5" ></text>
</g>
<g >
<title>jbd2__journal_start (3,999,999 samples, 0.78%)</title><rect x="828.3" y="181" width="9.2" height="15.0" fill="rgb(236,5,5)" rx="2" ry="2" />
<text  x="831.34" y="191.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (1,333,333 samples, 0.26%)</title><rect x="776.2" y="149" width="3.1" height="15.0" fill="rgb(212,2,13)" rx="2" ry="2" />
<text  x="779.23" y="159.5" ></text>
</g>
<g >
<title>__do_page_fault (3,999,999 samples, 0.78%)</title><rect x="108.1" y="197" width="9.2" height="15.0" fill="rgb(227,41,44)" rx="2" ry="2" />
<text  x="111.08" y="207.5" ></text>
</g>
<g >
<title>__once_proxy (1,333,333 samples, 0.26%)</title><rect x="929.5" y="373" width="3.0" height="15.0" fill="rgb(231,209,28)" rx="2" ry="2" />
<text  x="932.48" y="383.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (1,333,333 samples, 0.26%)</title><rect x="408.4" y="293" width="3.1" height="15.0" fill="rgb(214,164,48)" rx="2" ry="2" />
<text  x="411.44" y="303.5" ></text>
</g>
<g >
<title>__do_sys_newstat (1,333,333 samples, 0.26%)</title><rect x="1128.7" y="437" width="3.1" height="15.0" fill="rgb(215,193,16)" rx="2" ry="2" />
<text  x="1131.70" y="447.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (6,666,665 samples, 1.30%)</title><rect x="978.5" y="437" width="15.3" height="15.0" fill="rgb(215,175,9)" rx="2" ry="2" />
<text  x="981.52" y="447.5" ></text>
</g>
<g >
<title>vfs_fsync_range (1,333,333 samples, 0.26%)</title><rect x="1168.5" y="501" width="3.1" height="15.0" fill="rgb(211,134,16)" rx="2" ry="2" />
<text  x="1171.55" y="511.5" ></text>
</g>
<g >
<title>_dl_map_object_deps (1,333,333 samples, 0.26%)</title><rect x="1128.7" y="581" width="3.1" height="15.0" fill="rgb(238,219,8)" rx="2" ry="2" />
<text  x="1131.70" y="591.5" ></text>
</g>
<g >
<title>jbd2_journal_get_write_access (1,333,333 samples, 0.26%)</title><rect x="819.1" y="181" width="3.1" height="15.0" fill="rgb(239,164,6)" rx="2" ry="2" />
<text  x="822.14" y="191.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::set_value (34,666,658 samples, 6.75%)</title><rect x="914.2" y="453" width="79.6" height="15.0" fill="rgb(209,85,16)" rx="2" ry="2" />
<text  x="917.16" y="463.5" >std::prom..</text>
</g>
<g >
<title>release_pages (1,333,333 samples, 0.26%)</title><rect x="98.9" y="165" width="3.0" height="15.0" fill="rgb(246,225,44)" rx="2" ry="2" />
<text  x="101.88" y="175.5" ></text>
</g>
<g >
<title>_raw_read_lock (1,333,333 samples, 0.26%)</title><rect x="754.8" y="165" width="3.0" height="15.0" fill="rgb(234,163,41)" rx="2" ry="2" />
<text  x="757.78" y="175.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.26%)</title><rect x="993.8" y="357" width="3.1" height="15.0" fill="rgb(219,138,53)" rx="2" ry="2" />
<text  x="996.84" y="367.5" ></text>
</g>
<g >
<title>leveldb::Status::~Status (1,333,333 samples, 0.26%)</title><rect x="1042.9" y="485" width="3.0" height="15.0" fill="rgb(213,160,25)" rx="2" ry="2" />
<text  x="1045.88" y="495.5" ></text>
</g>
<g >
<title>leveldb::Status::operator= (1,333,333 samples, 0.26%)</title><rect x="874.3" y="421" width="3.1" height="15.0" fill="rgb(238,168,0)" rx="2" ry="2" />
<text  x="877.31" y="431.5" ></text>
</g>
<g >
<title>__do_sys_madvise (1,333,333 samples, 0.26%)</title><rect x="1116.4" y="293" width="3.1" height="15.0" fill="rgb(214,130,22)" rx="2" ry="2" />
<text  x="1119.44" y="303.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (29,333,326 samples, 5.71%)</title><rect x="331.8" y="325" width="67.4" height="15.0" fill="rgb(231,137,34)" rx="2" ry="2" />
<text  x="334.82" y="335.5" >leveldb..</text>
</g>
<g >
<title>leveldb::port::Snappy_Compress (3,999,999 samples, 0.78%)</title><rect x="89.7" y="357" width="9.2" height="15.0" fill="rgb(216,134,27)" rx="2" ry="2" />
<text  x="92.69" y="367.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3,999,999 samples, 0.78%)</title><rect x="935.6" y="357" width="9.2" height="15.0" fill="rgb(221,146,1)" rx="2" ry="2" />
<text  x="938.61" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (1,333,333 samples, 0.26%)</title><rect x="74.4" y="341" width="3.0" height="15.0" fill="rgb(205,123,22)" rx="2" ry="2" />
<text  x="77.36" y="351.5" ></text>
</g>
<g >
<title>std::future&lt;leveldb::Status&gt;::get (2,666,666 samples, 0.52%)</title><rect x="993.8" y="469" width="6.2" height="15.0" fill="rgb(221,106,23)" rx="2" ry="2" />
<text  x="996.84" y="479.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (9,333,331 samples, 1.82%)</title><rect x="1015.3" y="437" width="21.5" height="15.0" fill="rgb(206,225,54)" rx="2" ry="2" />
<text  x="1018.30" y="447.5" >s..</text>
</g>
<g >
<title>std::allocate_shared&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;&gt; (3,999,999 samples, 0.78%)</title><rect x="1003.0" y="437" width="9.2" height="15.0" fill="rgb(214,4,13)" rx="2" ry="2" />
<text  x="1006.04" y="447.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (1,333,333 samples, 0.26%)</title><rect x="98.9" y="213" width="3.0" height="15.0" fill="rgb(252,93,52)" rx="2" ry="2" />
<text  x="101.88" y="223.5" ></text>
</g>
<g >
<title>__do_page_fault (2,666,666 samples, 0.52%)</title><rect x="190.8" y="389" width="6.2" height="15.0" fill="rgb(218,67,42)" rx="2" ry="2" />
<text  x="193.83" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (1,333,333 samples, 0.26%)</title><rect x="135.7" y="325" width="3.0" height="15.0" fill="rgb(233,201,16)" rx="2" ry="2" />
<text  x="138.66" y="335.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::ShardedLRUCache::~ShardedLRUCache (1,333,333 samples, 0.26%)</title><rect x="1119.5" y="549" width="3.1" height="15.0" fill="rgb(224,131,2)" rx="2" ry="2" />
<text  x="1122.51" y="559.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (1,333,333 samples, 0.26%)</title><rect x="239.9" y="277" width="3.0" height="15.0" fill="rgb(213,43,34)" rx="2" ry="2" />
<text  x="242.87" y="287.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.26%)</title><rect x="236.8" y="389" width="3.1" height="15.0" fill="rgb(223,120,19)" rx="2" ry="2" />
<text  x="239.81" y="399.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1,333,333 samples, 0.26%)</title><rect x="239.9" y="181" width="3.0" height="15.0" fill="rgb(227,57,48)" rx="2" ry="2" />
<text  x="242.87" y="191.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_set_retrieved_flag (1,333,333 samples, 0.26%)</title><rect x="1000.0" y="405" width="3.0" height="15.0" fill="rgb(241,123,13)" rx="2" ry="2" />
<text  x="1002.97" y="415.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (5,333,332 samples, 1.04%)</title><rect x="105.0" y="245" width="12.3" height="15.0" fill="rgb(221,82,17)" rx="2" ry="2" />
<text  x="108.01" y="255.5" ></text>
</g>
<g >
<title>ext4_mark_inode_dirty (1,333,333 samples, 0.26%)</title><rect x="785.4" y="117" width="3.1" height="15.0" fill="rgb(245,112,50)" rx="2" ry="2" />
<text  x="788.43" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::port::CondVar*, std::allocator&lt;leveldb::port::CondVar*&gt; &gt;::push_back (1,333,333 samples, 0.26%)</title><rect x="1122.6" y="549" width="3.0" height="15.0" fill="rgb(212,165,19)" rx="2" ry="2" />
<text  x="1125.57" y="559.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (1,333,333 samples, 0.26%)</title><rect x="1174.7" y="645" width="3.0" height="15.0" fill="rgb(216,32,12)" rx="2" ry="2" />
<text  x="1177.68" y="655.5" ></text>
</g>
<g >
<title>snappy::RawCompress (3,999,999 samples, 0.78%)</title><rect x="89.7" y="341" width="9.2" height="15.0" fill="rgb(238,198,13)" rx="2" ry="2" />
<text  x="92.69" y="351.5" ></text>
</g>
<g >
<title>__libc_open64 (2,666,666 samples, 0.52%)</title><rect x="1091.9" y="501" width="6.2" height="15.0" fill="rgb(226,15,50)" rx="2" ry="2" />
<text  x="1094.92" y="511.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (25,333,327 samples, 4.94%)</title><rect x="917.2" y="421" width="58.3" height="15.0" fill="rgb(238,150,33)" rx="2" ry="2" />
<text  x="920.22" y="431.5" >std::c..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt;::allocate (1,333,333 samples, 0.26%)</title><rect x="1125.6" y="357" width="3.1" height="15.0" fill="rgb(225,178,52)" rx="2" ry="2" />
<text  x="1128.64" y="367.5" ></text>
</g>
<g >
<title>aperfmperf_snapshot_cpu (3,999,999 samples, 0.78%)</title><rect x="1076.6" y="309" width="9.2" height="15.0" fill="rgb(240,126,50)" rx="2" ry="2" />
<text  x="1079.60" y="319.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,333,333 samples, 0.26%)</title><rect x="239.9" y="197" width="3.0" height="15.0" fill="rgb(242,67,15)" rx="2" ry="2" />
<text  x="242.87" y="207.5" ></text>
</g>
<g >
<title>__check_block_validity.constprop.81 (1,333,333 samples, 0.26%)</title><rect x="782.4" y="181" width="3.0" height="15.0" fill="rgb(242,128,44)" rx="2" ry="2" />
<text  x="785.36" y="191.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access (1,333,333 samples, 0.26%)</title><rect x="987.7" y="389" width="3.1" height="15.0" fill="rgb(253,112,41)" rx="2" ry="2" />
<text  x="990.71" y="399.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::__basic_future (1,333,333 samples, 0.26%)</title><rect x="1000.0" y="437" width="3.0" height="15.0" fill="rgb(208,129,30)" rx="2" ry="2" />
<text  x="1002.97" y="447.5" ></text>
</g>
<g >
<title>jbd2_transaction_committed (2,666,666 samples, 0.52%)</title><rect x="822.2" y="197" width="6.1" height="15.0" fill="rgb(243,198,15)" rx="2" ry="2" />
<text  x="825.21" y="207.5" ></text>
</g>
<g >
<title>_IO_new_fopen (2,666,666 samples, 0.52%)</title><rect x="1091.9" y="565" width="6.2" height="15.0" fill="rgb(230,182,33)" rx="2" ry="2" />
<text  x="1094.92" y="575.5" ></text>
</g>
<g >
<title>__pthread_once_slow (22,666,661 samples, 4.42%)</title><rect x="923.4" y="389" width="52.1" height="15.0" fill="rgb(209,162,49)" rx="2" ry="2" />
<text  x="926.35" y="399.5" >__pth..</text>
</g>
<g >
<title>leveldb::DBImpl::BackgroundCompaction (58,666,652 samples, 11.43%)</title><rect x="10.0" y="469" width="134.9" height="15.0" fill="rgb(220,209,1)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >leveldb::DBImpl::..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1,333,333 samples, 0.26%)</title><rect x="135.7" y="373" width="3.0" height="15.0" fill="rgb(221,218,9)" rx="2" ry="2" />
<text  x="138.66" y="383.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (1,333,333 samples, 0.26%)</title><rect x="98.9" y="309" width="3.0" height="15.0" fill="rgb(228,190,16)" rx="2" ry="2" />
<text  x="101.88" y="319.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (1,333,333 samples, 0.26%)</title><rect x="1125.6" y="309" width="3.1" height="15.0" fill="rgb(232,22,8)" rx="2" ry="2" />
<text  x="1128.64" y="319.5" ></text>
</g>
<g >
<title>_dl_catch_exception (1,333,333 samples, 0.26%)</title><rect x="1128.7" y="565" width="3.1" height="15.0" fill="rgb(236,57,3)" rx="2" ry="2" />
<text  x="1131.70" y="575.5" ></text>
</g>
<g >
<title>__x64_sys_write (175,999,956 samples, 34.29%)</title><rect x="469.7" y="325" width="404.6" height="15.0" fill="rgb(211,192,15)" rx="2" ry="2" />
<text  x="472.74" y="335.5" >__x64_sys_write</text>
</g>
<g >
<title>dax_copy_from_iter (3,999,999 samples, 0.78%)</title><rect x="485.1" y="197" width="9.2" height="15.0" fill="rgb(243,228,24)" rx="2" ry="2" />
<text  x="488.06" y="207.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (1,333,333 samples, 0.26%)</title><rect x="65.2" y="357" width="3.0" height="15.0" fill="rgb(254,209,1)" rx="2" ry="2" />
<text  x="68.17" y="367.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_set_retrieved_flag (1,333,333 samples, 0.26%)</title><rect x="1000.0" y="421" width="3.0" height="15.0" fill="rgb(223,19,6)" rx="2" ry="2" />
<text  x="1002.97" y="431.5" ></text>
</g>
<g >
<title>openaux (1,333,333 samples, 0.26%)</title><rect x="1128.7" y="549" width="3.1" height="15.0" fill="rgb(228,155,34)" rx="2" ry="2" />
<text  x="1131.70" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (1,333,333 samples, 0.26%)</title><rect x="52.9" y="277" width="3.1" height="15.0" fill="rgb(254,171,53)" rx="2" ry="2" />
<text  x="55.91" y="287.5" ></text>
</g>
<g >
<title>ext4_ext_map_blocks (1,333,333 samples, 0.26%)</title><rect x="785.4" y="181" width="3.1" height="15.0" fill="rgb(224,40,14)" rx="2" ry="2" />
<text  x="788.43" y="191.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::Write (365,333,242 samples, 71.17%)</title><rect x="197.0" y="485" width="839.8" height="15.0" fill="rgb(208,93,34)" rx="2" ry="2" />
<text  x="199.96" y="495.5" >leveldb::DBImpl::Write</text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::_M_get_result (1,333,333 samples, 0.26%)</title><rect x="993.8" y="453" width="3.1" height="15.0" fill="rgb(240,134,9)" rx="2" ry="2" />
<text  x="996.84" y="463.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::value (2,666,666 samples, 0.52%)</title><rect x="19.2" y="405" width="6.1" height="15.0" fill="rgb(246,128,48)" rx="2" ry="2" />
<text  x="22.19" y="415.5" ></text>
</g>
<g >
<title>do_sys_open (2,666,666 samples, 0.52%)</title><rect x="1091.9" y="437" width="6.2" height="15.0" fill="rgb(232,46,12)" rx="2" ry="2" />
<text  x="1094.92" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (2,666,666 samples, 0.52%)</title><rect x="1024.5" y="357" width="6.1" height="15.0" fill="rgb(207,167,46)" rx="2" ry="2" />
<text  x="1027.49" y="367.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (3,999,999 samples, 0.78%)</title><rect x="362.5" y="277" width="9.2" height="15.0" fill="rgb(213,186,53)" rx="2" ry="2" />
<text  x="365.47" y="287.5" ></text>
</g>
<g >
<title>ksys_write (175,999,956 samples, 34.29%)</title><rect x="469.7" y="309" width="404.6" height="15.0" fill="rgb(220,36,43)" rx="2" ry="2" />
<text  x="472.74" y="319.5" >ksys_write</text>
</g>
<g >
<title>leveldb::Slice::remove_prefix (1,333,333 samples, 0.26%)</title><rect x="429.9" y="421" width="3.1" height="15.0" fill="rgb(219,161,14)" rx="2" ry="2" />
<text  x="432.90" y="431.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (1,333,333 samples, 0.26%)</title><rect x="996.9" y="437" width="3.1" height="15.0" fill="rgb(238,142,30)" rx="2" ry="2" />
<text  x="999.91" y="447.5" ></text>
</g>
<g >
<title>__ext4_journal_start_sb (1,333,333 samples, 0.26%)</title><rect x="1165.5" y="517" width="3.0" height="15.0" fill="rgb(216,157,35)" rx="2" ry="2" />
<text  x="1168.48" y="527.5" ></text>
</g>
<g >
<title>std::swap&lt;std::__future_base::_Result_base*&gt; (1,333,333 samples, 0.26%)</title><rect x="969.3" y="245" width="3.1" height="15.0" fill="rgb(212,111,44)" rx="2" ry="2" />
<text  x="972.32" y="255.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.26%)</title><rect x="947.9" y="181" width="3.0" height="15.0" fill="rgb(225,60,39)" rx="2" ry="2" />
<text  x="950.87" y="191.5" ></text>
</g>
<g >
<title>__GI__IO_getline (7,999,998 samples, 1.56%)</title><rect x="1073.5" y="549" width="18.4" height="15.0" fill="rgb(220,79,45)" rx="2" ry="2" />
<text  x="1076.53" y="559.5" ></text>
</g>
<g >
<title>__srcu_read_unlock (110,666,639 samples, 21.56%)</title><rect x="494.3" y="181" width="254.3" height="15.0" fill="rgb(212,26,14)" rx="2" ry="2" />
<text  x="497.26" y="191.5" >__srcu_read_unlock</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (6,666,665 samples, 1.30%)</title><rect x="117.3" y="373" width="15.3" height="15.0" fill="rgb(207,228,45)" rx="2" ry="2" />
<text  x="120.27" y="383.5" ></text>
</g>
<g >
<title>iput (1,333,333 samples, 0.26%)</title><rect x="1064.3" y="485" width="3.1" height="15.0" fill="rgb(243,194,42)" rx="2" ry="2" />
<text  x="1067.34" y="495.5" ></text>
</g>
<g >
<title>add_transaction_credits (1,333,333 samples, 0.26%)</title><rect x="773.2" y="149" width="3.0" height="15.0" fill="rgb(209,186,43)" rx="2" ry="2" />
<text  x="776.17" y="159.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (1,333,333 samples, 0.26%)</title><rect x="1125.6" y="261" width="3.1" height="15.0" fill="rgb(208,212,42)" rx="2" ry="2" />
<text  x="1128.64" y="271.5" ></text>
</g>
<g >
<title>std::make_shared&lt;std::__future_base::_State_baseV2&gt; (3,999,999 samples, 0.78%)</title><rect x="1003.0" y="453" width="9.2" height="15.0" fill="rgb(215,42,2)" rx="2" ry="2" />
<text  x="1006.04" y="463.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::Add (6,666,665 samples, 1.30%)</title><rect x="25.3" y="389" width="15.3" height="15.0" fill="rgb(240,205,43)" rx="2" ry="2" />
<text  x="28.32" y="399.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.26%)</title><rect x="408.4" y="229" width="3.1" height="15.0" fill="rgb(228,43,50)" rx="2" ry="2" />
<text  x="411.44" y="239.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (7,999,998 samples, 1.56%)</title><rect x="117.3" y="405" width="18.4" height="15.0" fill="rgb(212,47,25)" rx="2" ry="2" />
<text  x="120.27" y="415.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ListTooLong (1,333,333 samples, 0.26%)</title><rect x="1113.4" y="421" width="3.0" height="15.0" fill="rgb(250,102,39)" rx="2" ry="2" />
<text  x="1116.38" y="431.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (2,666,666 samples, 0.52%)</title><rect x="399.2" y="357" width="6.2" height="15.0" fill="rgb(242,16,7)" rx="2" ry="2" />
<text  x="402.25" y="367.5" ></text>
</g>
<g >
<title>_raw_read_lock (1,333,333 samples, 0.26%)</title><rect x="834.5" y="149" width="3.0" height="15.0" fill="rgb(209,74,10)" rx="2" ry="2" />
<text  x="837.47" y="159.5" ></text>
</g>
<g >
<title>bio_alloc_bioset (1,333,333 samples, 0.26%)</title><rect x="788.5" y="117" width="3.1" height="15.0" fill="rgb(217,187,33)" rx="2" ry="2" />
<text  x="791.49" y="127.5" ></text>
</g>
<g >
<title>__GI___libc_write (1,333,333 samples, 0.26%)</title><rect x="1067.4" y="453" width="3.1" height="15.0" fill="rgb(235,185,25)" rx="2" ry="2" />
<text  x="1070.40" y="463.5" ></text>
</g>
<g >
<title>ext4_data_block_valid (1,333,333 samples, 0.26%)</title><rect x="782.4" y="165" width="3.0" height="15.0" fill="rgb(214,184,35)" rx="2" ry="2" />
<text  x="785.36" y="175.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; (3,999,999 samples, 0.78%)</title><rect x="1107.2" y="485" width="9.2" height="15.0" fill="rgb(254,184,41)" rx="2" ry="2" />
<text  x="1110.25" y="495.5" ></text>
</g>
<g >
<title>__GI___xstat (1,333,333 samples, 0.26%)</title><rect x="1128.7" y="501" width="3.1" height="15.0" fill="rgb(250,109,46)" rx="2" ry="2" />
<text  x="1131.70" y="511.5" ></text>
</g>
<g >
<title>clear_page_erms (1,333,333 samples, 0.26%)</title><rect x="239.9" y="149" width="3.0" height="15.0" fill="rgb(207,138,21)" rx="2" ry="2" />
<text  x="242.87" y="159.5" ></text>
</g>
<g >
<title>ext4_mark_inode_dirty (1,333,333 samples, 0.26%)</title><rect x="1064.3" y="373" width="3.1" height="15.0" fill="rgb(253,94,53)" rx="2" ry="2" />
<text  x="1067.34" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::swap (2,666,666 samples, 0.52%)</title><rect x="966.3" y="277" width="6.1" height="15.0" fill="rgb(228,41,15)" rx="2" ry="2" />
<text  x="969.26" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (2,666,666 samples, 0.52%)</title><rect x="1024.5" y="341" width="6.1" height="15.0" fill="rgb(227,135,43)" rx="2" ry="2" />
<text  x="1027.49" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (6,666,665 samples, 1.30%)</title><rect x="117.3" y="341" width="15.3" height="15.0" fill="rgb(205,93,10)" rx="2" ry="2" />
<text  x="120.27" y="351.5" ></text>
</g>
<g >
<title>[libunwind.so.8.0.1] (1,333,333 samples, 0.26%)</title><rect x="1058.2" y="421" width="3.1" height="15.0" fill="rgb(226,23,39)" rx="2" ry="2" />
<text  x="1061.21" y="431.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (7,999,998 samples, 1.56%)</title><rect x="117.3" y="421" width="18.4" height="15.0" fill="rgb(227,229,9)" rx="2" ry="2" />
<text  x="120.27" y="431.5" ></text>
</g>
<g >
<title>__vfs_write (1,333,333 samples, 0.26%)</title><rect x="1067.4" y="357" width="3.1" height="15.0" fill="rgb(216,134,25)" rx="2" ry="2" />
<text  x="1070.40" y="367.5" ></text>
</g>
<g >
<title>leveldb::PutLengthPrefixedSlice (1,333,333 samples, 0.26%)</title><rect x="1045.9" y="469" width="3.1" height="15.0" fill="rgb(247,56,27)" rx="2" ry="2" />
<text  x="1048.95" y="479.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseListToSpans (1,333,333 samples, 0.26%)</title><rect x="1116.4" y="453" width="3.1" height="15.0" fill="rgb(226,16,7)" rx="2" ry="2" />
<text  x="1119.44" y="463.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::key (1,333,333 samples, 0.26%)</title><rect x="16.1" y="389" width="3.1" height="15.0" fill="rgb(244,60,23)" rx="2" ry="2" />
<text  x="19.13" y="399.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (3,999,999 samples, 0.78%)</title><rect x="80.5" y="325" width="9.2" height="15.0" fill="rgb(226,170,48)" rx="2" ry="2" />
<text  x="83.49" y="335.5" ></text>
</g>
<g >
<title>aperfmperf_get_khz (3,999,999 samples, 0.78%)</title><rect x="1076.6" y="325" width="9.2" height="15.0" fill="rgb(210,165,41)" rx="2" ry="2" />
<text  x="1079.60" y="335.5" ></text>
</g>
<g >
<title>std::swap&lt;char const*&gt; (1,333,333 samples, 0.26%)</title><rect x="224.5" y="437" width="3.1" height="15.0" fill="rgb(253,20,2)" rx="2" ry="2" />
<text  x="227.55" y="447.5" ></text>
</g>
<g >
<title>ext4_issue_zeroout (13,333,330 samples, 2.60%)</title><rect x="788.5" y="181" width="30.6" height="15.0" fill="rgb(222,48,12)" rx="2" ry="2" />
<text  x="791.49" y="191.5" >ex..</text>
</g>
<g >
<title>do_syscall_64 (7,999,998 samples, 1.56%)</title><rect x="1073.5" y="453" width="18.4" height="15.0" fill="rgb(252,168,28)" rx="2" ry="2" />
<text  x="1076.53" y="463.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (1,333,333 samples, 0.26%)</title><rect x="98.9" y="357" width="3.0" height="15.0" fill="rgb(212,157,32)" rx="2" ry="2" />
<text  x="101.88" y="367.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (453,333,220 samples, 88.31%)</title><rect x="10.0" y="613" width="1042.1" height="15.0" fill="rgb(207,213,2)" rx="2" ry="2" />
<text  x="13.00" y="623.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>__memcmp_avx2_movbe (2,666,666 samples, 0.52%)</title><rect x="126.5" y="261" width="6.1" height="15.0" fill="rgb(251,49,27)" rx="2" ry="2" />
<text  x="129.47" y="271.5" ></text>
</g>
<g >
<title>tc_malloc (2,666,666 samples, 0.52%)</title><rect x="1058.2" y="597" width="6.1" height="15.0" fill="rgb(216,191,2)" rx="2" ry="2" />
<text  x="1061.21" y="607.5" ></text>
</g>
<g >
<title>__GI__IO_fflush (1,333,333 samples, 0.26%)</title><rect x="1067.4" y="533" width="3.1" height="15.0" fill="rgb(236,54,37)" rx="2" ry="2" />
<text  x="1070.40" y="543.5" ></text>
</g>
<g >
<title>jbd2_journal_stop (2,666,666 samples, 0.52%)</title><rect x="837.5" y="181" width="6.2" height="15.0" fill="rgb(211,109,15)" rx="2" ry="2" />
<text  x="840.53" y="191.5" ></text>
</g>
<g >
<title>ext4_truncate (1,333,333 samples, 0.26%)</title><rect x="1064.3" y="437" width="3.1" height="15.0" fill="rgb(207,38,39)" rx="2" ry="2" />
<text  x="1067.34" y="447.5" ></text>
</g>
<g >
<title>dax_iomap_actor (1,333,333 samples, 0.26%)</title><rect x="1067.4" y="293" width="3.1" height="15.0" fill="rgb(242,86,25)" rx="2" ry="2" />
<text  x="1070.40" y="303.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; &gt;::_M_get_pointer (1,333,333 samples, 0.26%)</title><rect x="944.8" y="245" width="3.1" height="15.0" fill="rgb(254,186,43)" rx="2" ry="2" />
<text  x="947.81" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result_base::_Deleter, void&gt; (1,333,333 samples, 0.26%)</title><rect x="1183.9" y="645" width="3.0" height="15.0" fill="rgb(236,82,24)" rx="2" ry="2" />
<text  x="1186.87" y="655.5" ></text>
</g>
<g >
<title>_raw_read_lock (1,333,333 samples, 0.26%)</title><rect x="770.1" y="149" width="3.1" height="15.0" fill="rgb(236,56,53)" rx="2" ry="2" />
<text  x="773.10" y="159.5" ></text>
</g>
<g >
<title>uncharge_page (1,333,333 samples, 0.26%)</title><rect x="1137.9" y="453" width="3.1" height="15.0" fill="rgb(250,156,2)" rx="2" ry="2" />
<text  x="1140.90" y="463.5" ></text>
</g>
<g >
<title>pmem_copy_from_iter (3,999,999 samples, 0.78%)</title><rect x="485.1" y="181" width="9.2" height="15.0" fill="rgb(251,82,11)" rx="2" ry="2" />
<text  x="488.06" y="191.5" ></text>
</g>
<g >
<title>leveldb::Slice::operator[] (1,333,333 samples, 0.26%)</title><rect x="34.5" y="373" width="3.1" height="15.0" fill="rgb(222,170,48)" rx="2" ry="2" />
<text  x="37.52" y="383.5" ></text>
</g>
<g >
<title>leveldb::Log (1,333,333 samples, 0.26%)</title><rect x="1067.4" y="565" width="3.1" height="15.0" fill="rgb(206,223,6)" rx="2" ry="2" />
<text  x="1070.40" y="575.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.26%)</title><rect x="779.3" y="149" width="3.1" height="15.0" fill="rgb(223,174,42)" rx="2" ry="2" />
<text  x="782.30" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1,333,333 samples, 0.26%)</title><rect x="52.9" y="309" width="3.1" height="15.0" fill="rgb(240,30,37)" rx="2" ry="2" />
<text  x="55.91" y="319.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.26%)</title><rect x="426.8" y="421" width="3.1" height="15.0" fill="rgb(220,99,32)" rx="2" ry="2" />
<text  x="429.83" y="431.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::tuple&lt;std::__future_base::_Result_base*&amp;, std::__future_base::_Result_base::_Deleter, true&gt; (1,333,333 samples, 0.26%)</title><rect x="963.2" y="213" width="3.1" height="15.0" fill="rgb(248,1,0)" rx="2" ry="2" />
<text  x="966.19" y="223.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (1,333,333 samples, 0.26%)</title><rect x="1058.2" y="549" width="3.1" height="15.0" fill="rgb(249,109,26)" rx="2" ry="2" />
<text  x="1061.21" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt;::_M_allocate_node (1,333,333 samples, 0.26%)</title><rect x="1125.6" y="373" width="3.1" height="15.0" fill="rgb(249,181,54)" rx="2" ry="2" />
<text  x="1128.64" y="383.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.26%)</title><rect x="1064.3" y="533" width="3.1" height="15.0" fill="rgb(244,9,20)" rx="2" ry="2" />
<text  x="1067.34" y="543.5" ></text>
</g>
<g >
<title>leveldb::VersionSet::NumLevelFiles (3,999,999 samples, 0.78%)</title><rect x="215.4" y="437" width="9.1" height="15.0" fill="rgb(218,156,33)" rx="2" ry="2" />
<text  x="218.35" y="447.5" ></text>
</g>
<g >
<title>__gthread_once (1,333,333 samples, 0.26%)</title><rect x="1052.1" y="661" width="3.0" height="15.0" fill="rgb(214,197,24)" rx="2" ry="2" />
<text  x="1055.08" y="671.5" ></text>
</g>
<g >
<title>do_filp_open (2,666,666 samples, 0.52%)</title><rect x="1091.9" y="421" width="6.2" height="15.0" fill="rgb(219,112,34)" rx="2" ry="2" />
<text  x="1094.92" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (3,999,999 samples, 0.78%)</title><rect x="56.0" y="325" width="9.2" height="15.0" fill="rgb(248,122,32)" rx="2" ry="2" />
<text  x="58.97" y="335.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (1,333,333 samples, 0.26%)</title><rect x="98.9" y="341" width="3.0" height="15.0" fill="rgb(208,11,37)" rx="2" ry="2" />
<text  x="101.88" y="351.5" ></text>
</g>
<g >
<title>mmput (1,333,333 samples, 0.26%)</title><rect x="1137.9" y="581" width="3.1" height="15.0" fill="rgb(250,113,35)" rx="2" ry="2" />
<text  x="1140.90" y="591.5" ></text>
</g>
<g >
<title>std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;::queue&lt;std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt;, void&gt; (1,333,333 samples, 0.26%)</title><rect x="1125.6" y="453" width="3.1" height="15.0" fill="rgb(232,157,11)" rx="2" ry="2" />
<text  x="1128.64" y="463.5" ></text>
</g>
<g >
<title>filename_lookup (1,333,333 samples, 0.26%)</title><rect x="1128.7" y="389" width="3.1" height="15.0" fill="rgb(242,202,39)" rx="2" ry="2" />
<text  x="1131.70" y="399.5" ></text>
</g>
<g >
<title>page_fault (3,999,999 samples, 0.78%)</title><rect x="108.1" y="229" width="9.2" height="15.0" fill="rgb(239,99,50)" rx="2" ry="2" />
<text  x="111.08" y="239.5" ></text>
</g>
<g >
<title>exit_mmap (1,333,333 samples, 0.26%)</title><rect x="1137.9" y="565" width="3.1" height="15.0" fill="rgb(219,166,39)" rx="2" ry="2" />
<text  x="1140.90" y="575.5" ></text>
</g>
<g >
<title>rcu_all_qs (1,333,333 samples, 0.26%)</title><rect x="751.7" y="165" width="3.1" height="15.0" fill="rgb(234,217,9)" rx="2" ry="2" />
<text  x="754.71" y="175.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_free (1,333,333 samples, 0.26%)</title><rect x="1137.9" y="517" width="3.1" height="15.0" fill="rgb(224,58,30)" rx="2" ry="2" />
<text  x="1140.90" y="527.5" ></text>
</g>
<g >
<title>do_syscall_64 (178,666,622 samples, 34.81%)</title><rect x="463.6" y="341" width="410.7" height="15.0" fill="rgb(249,60,26)" rx="2" ry="2" />
<text  x="466.61" y="351.5" >do_syscall_64</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.26%)</title><rect x="135.7" y="309" width="3.0" height="15.0" fill="rgb(208,18,32)" rx="2" ry="2" />
<text  x="138.66" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get_deleter (1,333,333 samples, 0.26%)</title><rect x="1186.9" y="661" width="3.1" height="15.0" fill="rgb(225,30,10)" rx="2" ry="2" />
<text  x="1189.94" y="671.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (5,333,332 samples, 1.04%)</title><rect x="52.9" y="357" width="12.3" height="15.0" fill="rgb(228,140,33)" rx="2" ry="2" />
<text  x="55.91" y="367.5" ></text>
</g>
<g >
<title>std::future&lt;leveldb::Status&gt;::future (1,333,333 samples, 0.26%)</title><rect x="1000.0" y="453" width="3.0" height="15.0" fill="rgb(211,44,22)" rx="2" ry="2" />
<text  x="1002.97" y="463.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::SetCount (1,333,333 samples, 0.26%)</title><rect x="1049.0" y="469" width="3.1" height="15.0" fill="rgb(250,14,3)" rx="2" ry="2" />
<text  x="1052.01" y="479.5" ></text>
</g>
<g >
<title>__handle_mm_fault (2,666,666 samples, 0.52%)</title><rect x="1165.5" y="581" width="6.1" height="15.0" fill="rgb(232,178,0)" rx="2" ry="2" />
<text  x="1168.48" y="591.5" ></text>
</g>
<g >
<title>ext4_inode_csum.isra.59 (1,333,333 samples, 0.26%)</title><rect x="1064.3" y="325" width="3.1" height="15.0" fill="rgb(222,161,8)" rx="2" ry="2" />
<text  x="1067.34" y="335.5" ></text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.26%)</title><rect x="408.4" y="309" width="3.1" height="15.0" fill="rgb(241,214,11)" rx="2" ry="2" />
<text  x="411.44" y="319.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1,333,333 samples, 0.26%)</title><rect x="43.7" y="373" width="3.1" height="15.0" fill="rgb(242,115,34)" rx="2" ry="2" />
<text  x="46.71" y="383.5" ></text>
</g>
<g >
<title>leveldb::EncodeVarint32 (1,333,333 samples, 0.26%)</title><rect x="242.9" y="389" width="3.1" height="15.0" fill="rgb(234,25,51)" rx="2" ry="2" />
<text  x="245.94" y="399.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32 (1,333,333 samples, 0.26%)</title><rect x="423.8" y="405" width="3.0" height="15.0" fill="rgb(224,198,4)" rx="2" ry="2" />
<text  x="426.77" y="415.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.26%)</title><rect x="1125.6" y="213" width="3.1" height="15.0" fill="rgb(241,32,18)" rx="2" ry="2" />
<text  x="1128.64" y="223.5" ></text>
</g>
<g >
<title>leveldb::MemTable::KeyComparator::operator (6,666,665 samples, 1.30%)</title><rect x="246.0" y="357" width="15.3" height="15.0" fill="rgb(207,8,50)" rx="2" ry="2" />
<text  x="249.00" y="367.5" ></text>
</g>
<g >
<title>ext4_ext_truncate (1,333,333 samples, 0.26%)</title><rect x="1064.3" y="421" width="3.1" height="15.0" fill="rgb(207,197,7)" rx="2" ry="2" />
<text  x="1067.34" y="431.5" ></text>
</g>
<g >
<title>__x64_sys_futex (3,999,999 samples, 0.78%)</title><rect x="935.6" y="325" width="9.2" height="15.0" fill="rgb(221,46,24)" rx="2" ry="2" />
<text  x="938.61" y="335.5" ></text>
</g>
<g >
<title>user_path_at_empty (1,333,333 samples, 0.26%)</title><rect x="1128.7" y="405" width="3.1" height="15.0" fill="rgb(250,11,19)" rx="2" ry="2" />
<text  x="1131.70" y="415.5" ></text>
</g>
<g >
<title>smp_call_function_single (2,666,666 samples, 0.52%)</title><rect x="1091.9" y="293" width="6.2" height="15.0" fill="rgb(209,194,53)" rx="2" ry="2" />
<text  x="1094.92" y="303.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (1,333,333 samples, 0.26%)</title><rect x="98.9" y="325" width="3.0" height="15.0" fill="rgb(209,169,42)" rx="2" ry="2" />
<text  x="101.88" y="335.5" ></text>
</g>
<g >
<title>[libunwind.so.8.0.1] (1,333,333 samples, 0.26%)</title><rect x="1058.2" y="437" width="3.1" height="15.0" fill="rgb(224,0,14)" rx="2" ry="2" />
<text  x="1061.21" y="447.5" ></text>
</g>
<g >
<title>ext4_inode_csum_set (5,333,332 samples, 1.04%)</title><rect x="852.9" y="165" width="12.2" height="15.0" fill="rgb(206,104,6)" rx="2" ry="2" />
<text  x="855.86" y="175.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.26%)</title><rect x="966.3" y="213" width="3.0" height="15.0" fill="rgb(232,181,41)" rx="2" ry="2" />
<text  x="969.26" y="223.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::SetNext (2,666,666 samples, 0.52%)</title><rect x="1150.2" y="661" width="6.1" height="15.0" fill="rgb(246,103,12)" rx="2" ry="2" />
<text  x="1153.16" y="671.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (2,666,666 samples, 0.52%)</title><rect x="1058.2" y="613" width="6.1" height="15.0" fill="rgb(237,217,41)" rx="2" ry="2" />
<text  x="1061.21" y="623.5" ></text>
</g>
<g >
<title>proc_reg_read (7,999,998 samples, 1.56%)</title><rect x="1073.5" y="373" width="18.4" height="15.0" fill="rgb(253,110,8)" rx="2" ry="2" />
<text  x="1076.53" y="383.5" ></text>
</g>
<g >
<title>new_do_write (1,333,333 samples, 0.26%)</title><rect x="1067.4" y="485" width="3.1" height="15.0" fill="rgb(234,200,31)" rx="2" ry="2" />
<text  x="1070.40" y="495.5" ></text>
</g>
<g >
<title>leveldb::PutVarint32 (1,333,333 samples, 0.26%)</title><rect x="1045.9" y="453" width="3.1" height="15.0" fill="rgb(239,119,40)" rx="2" ry="2" />
<text  x="1048.95" y="463.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.26%)</title><rect x="1116.4" y="325" width="3.1" height="15.0" fill="rgb(210,210,28)" rx="2" ry="2" />
<text  x="1119.44" y="335.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadNodeEntryPoint (58,666,652 samples, 11.43%)</title><rect x="10.0" y="533" width="134.9" height="15.0" fill="rgb(209,98,8)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >leveldb::(anonymo..</text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.26%)</title><rect x="1055.1" y="533" width="3.1" height="15.0" fill="rgb(224,229,41)" rx="2" ry="2" />
<text  x="1058.14" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::empty (1,333,333 samples, 0.26%)</title><rect x="908.0" y="453" width="3.1" height="15.0" fill="rgb(209,48,29)" rx="2" ry="2" />
<text  x="911.03" y="463.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (2,666,666 samples, 0.52%)</title><rect x="420.7" y="421" width="6.1" height="15.0" fill="rgb(234,43,14)" rx="2" ry="2" />
<text  x="423.70" y="431.5" ></text>
</g>
<g >
<title>__blkdev_issue_zero_pages (1,333,333 samples, 0.26%)</title><rect x="788.5" y="149" width="3.1" height="15.0" fill="rgb(206,141,43)" rx="2" ry="2" />
<text  x="791.49" y="159.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Value (3,999,999 samples, 0.78%)</title><rect x="80.5" y="341" width="9.2" height="15.0" fill="rgb(246,211,3)" rx="2" ry="2" />
<text  x="83.49" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt; &gt;::destroy&lt;std::__future_base::_State_baseV2&gt; (2,666,666 samples, 0.52%)</title><rect x="1030.6" y="373" width="6.2" height="15.0" fill="rgb(214,104,42)" rx="2" ry="2" />
<text  x="1033.62" y="383.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (2,666,666 samples, 0.52%)</title><rect x="411.5" y="341" width="6.1" height="15.0" fill="rgb(221,166,6)" rx="2" ry="2" />
<text  x="414.51" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.26%)</title><rect x="1128.7" y="485" width="3.1" height="15.0" fill="rgb(244,82,20)" rx="2" ry="2" />
<text  x="1131.70" y="495.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (2,666,666 samples, 0.52%)</title><rect x="387.0" y="293" width="6.1" height="15.0" fill="rgb(219,7,13)" rx="2" ry="2" />
<text  x="389.99" y="303.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (9,333,331 samples, 1.82%)</title><rect x="944.8" y="277" width="21.5" height="15.0" fill="rgb(219,123,14)" rx="2" ry="2" />
<text  x="947.81" y="287.5" >s..</text>
</g>
<g >
<title>leveldb::MemTableIterator::key (1,333,333 samples, 0.26%)</title><rect x="138.7" y="421" width="3.1" height="15.0" fill="rgb(245,69,53)" rx="2" ry="2" />
<text  x="141.73" y="431.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.26%)</title><rect x="1067.4" y="421" width="3.1" height="15.0" fill="rgb(252,25,33)" rx="2" ry="2" />
<text  x="1070.40" y="431.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::Scavenge (1,333,333 samples, 0.26%)</title><rect x="1119.5" y="517" width="3.1" height="15.0" fill="rgb(251,88,13)" rx="2" ry="2" />
<text  x="1122.51" y="527.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::key (3,999,999 samples, 0.78%)</title><rect x="10.0" y="405" width="9.2" height="15.0" fill="rgb(232,49,49)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>ext4_orphan_add (1,333,333 samples, 0.26%)</title><rect x="819.1" y="197" width="3.1" height="15.0" fill="rgb(226,71,0)" rx="2" ry="2" />
<text  x="822.14" y="207.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_set_result (26,666,660 samples, 5.19%)</title><rect x="914.2" y="437" width="61.3" height="15.0" fill="rgb(248,166,17)" rx="2" ry="2" />
<text  x="917.16" y="447.5" >std::_..</text>
</g>
<g >
<title>free_pages_and_swap_cache (1,333,333 samples, 0.26%)</title><rect x="1137.9" y="501" width="3.1" height="15.0" fill="rgb(247,155,42)" rx="2" ry="2" />
<text  x="1140.90" y="511.5" ></text>
</g>
<g >
<title>[vmlinux] (1,333,333 samples, 0.26%)</title><rect x="1137.9" y="629" width="3.1" height="15.0" fill="rgb(250,101,7)" rx="2" ry="2" />
<text  x="1140.90" y="639.5" ></text>
</g>
<g >
<title>vsnprintf (2,666,666 samples, 0.52%)</title><rect x="1085.8" y="293" width="6.1" height="15.0" fill="rgb(225,38,46)" rx="2" ry="2" />
<text  x="1088.79" y="303.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (1,333,333 samples, 0.26%)</title><rect x="966.3" y="245" width="3.0" height="15.0" fill="rgb(208,32,20)" rx="2" ry="2" />
<text  x="969.26" y="255.5" ></text>
</g>
<g >
<title>leveldb::Status::operator= (2,666,666 samples, 0.52%)</title><rect x="1036.8" y="485" width="6.1" height="15.0" fill="rgb(228,46,18)" rx="2" ry="2" />
<text  x="1039.75" y="495.5" ></text>
</g>
<g >
<title>vfs_read (7,999,998 samples, 1.56%)</title><rect x="1073.5" y="405" width="18.4" height="15.0" fill="rgb(250,25,18)" rx="2" ry="2" />
<text  x="1076.53" y="415.5" ></text>
</g>
<g >
<title>__GI___snprintf (5,333,332 samples, 1.04%)</title><rect x="147.9" y="469" width="12.3" height="15.0" fill="rgb(214,228,13)" rx="2" ry="2" />
<text  x="150.92" y="479.5" ></text>
</g>
<g >
<title>_IO_vfprintf_internal (3,999,999 samples, 0.78%)</title><rect x="151.0" y="437" width="9.2" height="15.0" fill="rgb(238,176,49)" rx="2" ry="2" />
<text  x="153.99" y="447.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MemTableInserter::Put (81,333,313 samples, 15.84%)</title><rect x="233.7" y="421" width="187.0" height="15.0" fill="rgb(214,104,17)" rx="2" ry="2" />
<text  x="236.74" y="431.5" >leveldb::(anonymous name..</text>
</g>
<g >
<title>_dl_lookup_symbol_x (2,666,666 samples, 0.52%)</title><rect x="1131.8" y="533" width="6.1" height="15.0" fill="rgb(216,223,16)" rx="2" ry="2" />
<text  x="1134.77" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__future_base::_State_baseV2&gt;::destroy&lt;std::__future_base::_State_baseV2&gt; (2,666,666 samples, 0.52%)</title><rect x="1030.6" y="357" width="6.2" height="15.0" fill="rgb(218,98,6)" rx="2" ry="2" />
<text  x="1033.62" y="367.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (2,666,666 samples, 0.52%)</title><rect x="255.2" y="325" width="6.1" height="15.0" fill="rgb(212,142,25)" rx="2" ry="2" />
<text  x="258.19" y="335.5" ></text>
</g>
<g >
<title>__ext4_journal_start_sb (10,666,664 samples, 2.08%)</title><rect x="751.7" y="197" width="24.5" height="15.0" fill="rgb(213,188,32)" rx="2" ry="2" />
<text  x="754.71" y="207.5" >_..</text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (1,333,333 samples, 0.26%)</title><rect x="19.2" y="389" width="3.1" height="15.0" fill="rgb(220,114,53)" rx="2" ry="2" />
<text  x="22.19" y="399.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (453,333,220 samples, 88.31%)</title><rect x="10.0" y="581" width="1042.1" height="15.0" fill="rgb(221,69,1)" rx="2" ry="2" />
<text  x="13.00" y="591.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>leveldb::DBImpl::MakeRoomForWrite (6,666,665 samples, 1.30%)</title><rect x="209.2" y="453" width="15.3" height="15.0" fill="rgb(214,105,38)" rx="2" ry="2" />
<text  x="212.22" y="463.5" ></text>
</g>
<g >
<title>ext4_iomap_begin (1,333,333 samples, 0.26%)</title><rect x="478.9" y="229" width="3.1" height="15.0" fill="rgb(235,147,9)" rx="2" ry="2" />
<text  x="481.94" y="239.5" ></text>
</g>
<g >
<title>ext4_inode_csum_set (1,333,333 samples, 0.26%)</title><rect x="785.4" y="85" width="3.1" height="15.0" fill="rgb(245,167,38)" rx="2" ry="2" />
<text  x="788.43" y="95.5" ></text>
</g>
<g >
<title>leveldb::log::Writer::AddRecord (205,333,282 samples, 40.00%)</title><rect x="433.0" y="453" width="472.0" height="15.0" fill="rgb(253,106,48)" rx="2" ry="2" />
<text  x="435.96" y="463.5" >leveldb::log::Writer::AddRecord</text>
</g>
<g >
<title>next_bio (1,333,333 samples, 0.26%)</title><rect x="788.5" y="133" width="3.1" height="15.0" fill="rgb(231,119,13)" rx="2" ry="2" />
<text  x="791.49" y="143.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.26%)</title><rect x="1006.1" y="357" width="3.1" height="15.0" fill="rgb(208,199,32)" rx="2" ry="2" />
<text  x="1009.10" y="367.5" ></text>
</g>
<g >
<title>start_this_handle (5,333,332 samples, 1.04%)</title><rect x="764.0" y="165" width="12.2" height="15.0" fill="rgb(252,15,24)" rx="2" ry="2" />
<text  x="766.97" y="175.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_tlbonly (1,333,333 samples, 0.26%)</title><rect x="1116.4" y="229" width="3.1" height="15.0" fill="rgb(206,77,42)" rx="2" ry="2" />
<text  x="1119.44" y="239.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt;::deque (1,333,333 samples, 0.26%)</title><rect x="1125.6" y="437" width="3.1" height="15.0" fill="rgb(218,112,45)" rx="2" ry="2" />
<text  x="1128.64" y="447.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (1,333,333 samples, 0.26%)</title><rect x="1137.9" y="549" width="3.1" height="15.0" fill="rgb(207,151,14)" rx="2" ry="2" />
<text  x="1140.90" y="559.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (1,333,333 samples, 0.26%)</title><rect x="71.3" y="261" width="3.1" height="15.0" fill="rgb(252,40,8)" rx="2" ry="2" />
<text  x="74.30" y="271.5" ></text>
</g>
<g >
<title>dl_main (3,999,999 samples, 0.78%)</title><rect x="1128.7" y="597" width="9.2" height="15.0" fill="rgb(210,226,53)" rx="2" ry="2" />
<text  x="1131.70" y="607.5" ></text>
</g>
<g >
<title>madvise_free_single_vma (1,333,333 samples, 0.26%)</title><rect x="1116.4" y="277" width="3.1" height="15.0" fill="rgb(222,113,27)" rx="2" ry="2" />
<text  x="1119.44" y="287.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.26%)</title><rect x="1141.0" y="645" width="3.0" height="15.0" fill="rgb(207,59,7)" rx="2" ry="2" />
<text  x="1143.96" y="655.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (1,333,333 samples, 0.26%)</title><rect x="901.9" y="405" width="3.1" height="15.0" fill="rgb(250,208,28)" rx="2" ry="2" />
<text  x="904.90" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;char*, unsigned long&gt; (5,333,332 samples, 1.04%)</title><rect x="105.0" y="325" width="12.3" height="15.0" fill="rgb(227,227,31)" rx="2" ry="2" />
<text  x="108.01" y="335.5" ></text>
</g>
<g >
<title>leveldb::Env::Default (2,666,666 samples, 0.52%)</title><rect x="1122.6" y="597" width="6.1" height="15.0" fill="rgb(212,131,26)" rx="2" ry="2" />
<text  x="1125.57" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::operator (1,333,333 samples, 0.26%)</title><rect x="947.9" y="229" width="3.0" height="15.0" fill="rgb(238,127,34)" rx="2" ry="2" />
<text  x="950.87" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (1,333,333 samples, 0.26%)</title><rect x="972.4" y="277" width="3.1" height="15.0" fill="rgb(247,139,50)" rx="2" ry="2" />
<text  x="975.39" y="287.5" ></text>
</g>
<g >
<title>ext4_journal_check_start (1,333,333 samples, 0.26%)</title><rect x="1165.5" y="501" width="3.0" height="15.0" fill="rgb(226,211,23)" rx="2" ry="2" />
<text  x="1168.48" y="511.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (7,999,998 samples, 1.56%)</title><rect x="353.3" y="309" width="18.4" height="15.0" fill="rgb(223,109,52)" rx="2" ry="2" />
<text  x="356.27" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (1,333,333 samples, 0.26%)</title><rect x="135.7" y="293" width="3.0" height="15.0" fill="rgb(227,26,46)" rx="2" ry="2" />
<text  x="138.66" y="303.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (1,333,333 samples, 0.26%)</title><rect x="71.3" y="277" width="3.1" height="15.0" fill="rgb(251,103,2)" rx="2" ry="2" />
<text  x="74.30" y="287.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::NewNode (2,666,666 samples, 0.52%)</title><rect x="405.4" y="373" width="6.1" height="15.0" fill="rgb(227,28,29)" rx="2" ry="2" />
<text  x="408.38" y="383.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.26%)</title><rect x="1058.2" y="357" width="3.1" height="15.0" fill="rgb(209,27,7)" rx="2" ry="2" />
<text  x="1061.21" y="367.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (13,333,330 samples, 2.60%)</title><rect x="944.8" y="309" width="30.7" height="15.0" fill="rgb(245,82,19)" rx="2" ry="2" />
<text  x="947.81" y="319.5" >st..</text>
</g>
<g >
<title>leveldb::Arena::AllocateAligned (1,333,333 samples, 0.26%)</title><rect x="408.4" y="357" width="3.1" height="15.0" fill="rgb(246,222,49)" rx="2" ry="2" />
<text  x="411.44" y="367.5" ></text>
</g>
<g >
<title>std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.26%)</title><rect x="1006.1" y="373" width="3.1" height="15.0" fill="rgb(213,86,41)" rx="2" ry="2" />
<text  x="1009.10" y="383.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::RemoveFile (1,333,333 samples, 0.26%)</title><rect x="1064.3" y="581" width="3.1" height="15.0" fill="rgb(217,5,19)" rx="2" ry="2" />
<text  x="1067.34" y="591.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.26%)</title><rect x="98.9" y="261" width="3.0" height="15.0" fill="rgb(230,222,17)" rx="2" ry="2" />
<text  x="101.88" y="271.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__future_base::_Result_base*, false&gt;::_M_head (1,333,333 samples, 0.26%)</title><rect x="966.3" y="181" width="3.0" height="15.0" fill="rgb(224,77,47)" rx="2" ry="2" />
<text  x="969.26" y="191.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.26%)</title><rect x="1058.2" y="341" width="3.1" height="15.0" fill="rgb(254,158,8)" rx="2" ry="2" />
<text  x="1061.21" y="351.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt;::operator (5,333,332 samples, 1.04%)</title><rect x="947.9" y="245" width="12.2" height="15.0" fill="rgb(209,196,36)" rx="2" ry="2" />
<text  x="950.87" y="255.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Add (33,333,325 samples, 6.49%)</title><rect x="25.3" y="405" width="76.6" height="15.0" fill="rgb(216,183,27)" rx="2" ry="2" />
<text  x="28.32" y="415.5" >leveldb:..</text>
</g>
<g >
<title>std::__shared_count&lt; (3,999,999 samples, 0.78%)</title><rect x="1003.0" y="389" width="9.2" height="15.0" fill="rgb(249,137,16)" rx="2" ry="2" />
<text  x="1006.04" y="399.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (1,333,333 samples, 0.26%)</title><rect x="1067.4" y="341" width="3.1" height="15.0" fill="rgb(234,87,47)" rx="2" ry="2" />
<text  x="1070.40" y="351.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::PrintHeader (11,999,997 samples, 2.34%)</title><rect x="1070.5" y="597" width="27.6" height="15.0" fill="rgb(244,151,52)" rx="2" ry="2" />
<text  x="1073.47" y="607.5" >l..</text>
</g>
<g >
<title>__x64_sys_read (1,333,333 samples, 0.26%)</title><rect x="1055.1" y="517" width="3.1" height="15.0" fill="rgb(229,219,7)" rx="2" ry="2" />
<text  x="1058.14" y="527.5" ></text>
</g>
<g >
<title>leveldb::EncodeFixed32 (1,333,333 samples, 0.26%)</title><rect x="1049.0" y="453" width="3.1" height="15.0" fill="rgb(230,183,48)" rx="2" ry="2" />
<text  x="1052.01" y="463.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.26%)</title><rect x="1168.5" y="405" width="3.1" height="15.0" fill="rgb(245,173,16)" rx="2" ry="2" />
<text  x="1171.55" y="415.5" ></text>
</g>
<g >
<title>do_page_fault (2,666,666 samples, 0.52%)</title><rect x="190.8" y="405" width="6.2" height="15.0" fill="rgb(229,129,22)" rx="2" ry="2" />
<text  x="193.83" y="415.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (2,666,666 samples, 0.52%)</title><rect x="126.5" y="277" width="6.1" height="15.0" fill="rgb(221,188,38)" rx="2" ry="2" />
<text  x="129.47" y="287.5" ></text>
</g>
<g >
<title>__GI___libc_read (7,999,998 samples, 1.56%)</title><rect x="1073.5" y="485" width="18.4" height="15.0" fill="rgb(217,114,20)" rx="2" ry="2" />
<text  x="1076.53" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (6,666,665 samples, 1.30%)</title><rect x="1101.1" y="533" width="15.3" height="15.0" fill="rgb(221,111,12)" rx="2" ry="2" />
<text  x="1104.12" y="543.5" ></text>
</g>
<g >
<title>__brelse (1,333,333 samples, 0.26%)</title><rect x="843.7" y="181" width="3.0" height="15.0" fill="rgb(233,70,50)" rx="2" ry="2" />
<text  x="846.66" y="191.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (11,999,997 samples, 2.34%)</title><rect x="877.4" y="421" width="27.6" height="15.0" fill="rgb(224,182,11)" rx="2" ry="2" />
<text  x="880.38" y="431.5" >l..</text>
</g>
<g >
<title>open_path (1,333,333 samples, 0.26%)</title><rect x="1128.7" y="517" width="3.1" height="15.0" fill="rgb(251,129,3)" rx="2" ry="2" />
<text  x="1131.70" y="527.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::Open (1,333,333 samples, 0.26%)</title><rect x="1067.4" y="597" width="3.1" height="15.0" fill="rgb(208,147,4)" rx="2" ry="2" />
<text  x="1070.40" y="607.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (13,333,330 samples, 2.60%)</title><rect x="944.8" y="373" width="30.7" height="15.0" fill="rgb(237,172,47)" rx="2" ry="2" />
<text  x="947.81" y="383.5" >st..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (1,333,333 samples, 0.26%)</title><rect x="52.9" y="293" width="3.1" height="15.0" fill="rgb(212,127,6)" rx="2" ry="2" />
<text  x="55.91" y="303.5" ></text>
</g>
<g >
<title>pmem_do_bvec (9,333,331 samples, 1.82%)</title><rect x="797.7" y="85" width="21.4" height="15.0" fill="rgb(206,42,29)" rx="2" ry="2" />
<text  x="800.69" y="95.5" >p..</text>
</g>
<g >
<title>leveldb::Benchmark::PrintEnvironment (11,999,997 samples, 2.34%)</title><rect x="1070.5" y="581" width="27.6" height="15.0" fill="rgb(246,93,35)" rx="2" ry="2" />
<text  x="1073.47" y="591.5" >l..</text>
</g>
<g >
<title>__vfs_read (7,999,998 samples, 1.56%)</title><rect x="1073.5" y="389" width="18.4" height="15.0" fill="rgb(253,113,41)" rx="2" ry="2" />
<text  x="1076.53" y="399.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::~_State_baseV2 (2,666,666 samples, 0.52%)</title><rect x="1030.6" y="341" width="6.2" height="15.0" fill="rgb(248,213,21)" rx="2" ry="2" />
<text  x="1033.62" y="351.5" ></text>
</g>
<g >
<title>_IO_new_file_fopen (2,666,666 samples, 0.52%)</title><rect x="1091.9" y="533" width="6.2" height="15.0" fill="rgb(220,85,13)" rx="2" ry="2" />
<text  x="1094.92" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1,333,333 samples, 0.26%)</title><rect x="74.4" y="309" width="3.0" height="15.0" fill="rgb(214,83,22)" rx="2" ry="2" />
<text  x="77.36" y="319.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (7,999,998 samples, 1.56%)</title><rect x="1073.5" y="469" width="18.4" height="15.0" fill="rgb(239,113,38)" rx="2" ry="2" />
<text  x="1076.53" y="479.5" ></text>
</g>
<g >
<title>pmem_copy_from_iter (1,333,333 samples, 0.26%)</title><rect x="1067.4" y="261" width="3.1" height="15.0" fill="rgb(254,12,52)" rx="2" ry="2" />
<text  x="1070.40" y="271.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::~MemHashTable (6,666,665 samples, 1.30%)</title><rect x="1101.1" y="565" width="15.3" height="15.0" fill="rgb(235,33,3)" rx="2" ry="2" />
<text  x="1104.12" y="575.5" ></text>
</g>
<g >
<title>dax_read_unlock (110,666,639 samples, 21.56%)</title><rect x="494.3" y="197" width="254.3" height="15.0" fill="rgb(226,91,20)" rx="2" ry="2" />
<text  x="497.26" y="207.5" >dax_read_unlock</text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (1,333,333 samples, 0.26%)</title><rect x="239.9" y="309" width="3.0" height="15.0" fill="rgb(215,169,40)" rx="2" ry="2" />
<text  x="242.87" y="319.5" ></text>
</g>
<g >
<title>[libnuma.so.1.0.0] (1,333,333 samples, 0.26%)</title><rect x="1055.1" y="613" width="3.1" height="15.0" fill="rgb(206,30,48)" rx="2" ry="2" />
<text  x="1058.14" y="623.5" ></text>
</g>
<g >
<title>start_thread (453,333,220 samples, 88.31%)</title><rect x="10.0" y="645" width="1042.1" height="15.0" fill="rgb(225,204,18)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >start_thread</text>
</g>
<g >
<title>jbd2_journal_stop (2,666,666 samples, 0.52%)</title><rect x="776.2" y="181" width="6.2" height="15.0" fill="rgb(234,9,54)" rx="2" ry="2" />
<text  x="779.23" y="191.5" ></text>
</g>
<g >
<title>iomap_apply (1,333,333 samples, 0.26%)</title><rect x="1067.4" y="309" width="3.1" height="15.0" fill="rgb(246,61,19)" rx="2" ry="2" />
<text  x="1070.40" y="319.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl&lt;std::__future_base::_Result_base*&amp;, std::__future_base::_Result_base::_Deleter, void&gt; (1,333,333 samples, 0.26%)</title><rect x="963.2" y="197" width="3.1" height="15.0" fill="rgb(228,25,35)" rx="2" ry="2" />
<text  x="966.19" y="207.5" ></text>
</g>
<g >
<title>leveldb::log::Writer::EmitPhysicalRecord (201,333,283 samples, 39.22%)</title><rect x="442.2" y="437" width="462.8" height="15.0" fill="rgb(230,157,29)" rx="2" ry="2" />
<text  x="445.16" y="447.5" >leveldb::log::Writer::EmitPhysicalRecord</text>
</g>
<g >
<title>__dcigettext (1,333,333 samples, 0.26%)</title><rect x="1098.1" y="517" width="3.0" height="15.0" fill="rgb(228,80,8)" rx="2" ry="2" />
<text  x="1101.05" y="527.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (1,333,333 samples, 0.26%)</title><rect x="252.1" y="309" width="3.1" height="15.0" fill="rgb(221,220,2)" rx="2" ry="2" />
<text  x="255.13" y="319.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.26%)</title><rect x="960.1" y="213" width="3.1" height="15.0" fill="rgb(213,46,47)" rx="2" ry="2" />
<text  x="963.13" y="223.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (1,333,333 samples, 0.26%)</title><rect x="1177.7" y="661" width="3.1" height="15.0" fill="rgb(229,94,41)" rx="2" ry="2" />
<text  x="1180.74" y="671.5" ></text>
</g>
<g >
<title>dax_iomap_rw (1,333,333 samples, 0.26%)</title><rect x="1067.4" y="325" width="3.1" height="15.0" fill="rgb(214,58,31)" rx="2" ry="2" />
<text  x="1070.40" y="335.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (3,999,999 samples, 0.78%)</title><rect x="1128.7" y="613" width="9.2" height="15.0" fill="rgb(237,6,8)" rx="2" ry="2" />
<text  x="1131.70" y="623.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Finish (1,333,333 samples, 0.26%)</title><rect x="101.9" y="405" width="3.1" height="15.0" fill="rgb(227,157,38)" rx="2" ry="2" />
<text  x="104.95" y="415.5" ></text>
</g>
<g >
<title>crc32c_pcl_intel_update (1,333,333 samples, 0.26%)</title><rect x="859.0" y="133" width="3.1" height="15.0" fill="rgb(234,127,31)" rx="2" ry="2" />
<text  x="861.99" y="143.5" ></text>
</g>
<g >
<title>submit_bio (11,999,997 samples, 2.34%)</title><rect x="791.6" y="133" width="27.5" height="15.0" fill="rgb(231,87,9)" rx="2" ry="2" />
<text  x="794.56" y="143.5" >s..</text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.26%)</title><rect x="1144.0" y="645" width="3.1" height="15.0" fill="rgb(228,142,17)" rx="2" ry="2" />
<text  x="1147.03" y="655.5" ></text>
</g>
<g >
<title>queued_read_lock_slowpath (1,333,333 samples, 0.26%)</title><rect x="834.5" y="133" width="3.0" height="15.0" fill="rgb(240,209,12)" rx="2" ry="2" />
<text  x="837.47" y="143.5" ></text>
</g>
<g >
<title>_IO_new_file_underflow (1,333,333 samples, 0.26%)</title><rect x="1055.1" y="581" width="3.1" height="15.0" fill="rgb(230,212,34)" rx="2" ry="2" />
<text  x="1058.14" y="591.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (13,333,330 samples, 2.60%)</title><rect x="944.8" y="357" width="30.7" height="15.0" fill="rgb(208,166,21)" rx="2" ry="2" />
<text  x="947.81" y="367.5" >st..</text>
</g>
<g >
<title>vfs_open (2,666,666 samples, 0.52%)</title><rect x="1091.9" y="389" width="6.2" height="15.0" fill="rgb(226,33,8)" rx="2" ry="2" />
<text  x="1094.92" y="399.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (1,333,333 samples, 0.26%)</title><rect x="975.5" y="405" width="3.0" height="15.0" fill="rgb(213,65,38)" rx="2" ry="2" />
<text  x="978.45" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter, void&gt; (2,666,666 samples, 0.52%)</title><rect x="960.1" y="245" width="6.2" height="15.0" fill="rgb(229,180,48)" rx="2" ry="2" />
<text  x="963.13" y="255.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (1,333,333 samples, 0.26%)</title><rect x="1116.4" y="517" width="3.1" height="15.0" fill="rgb(206,20,33)" rx="2" ry="2" />
<text  x="1119.44" y="527.5" ></text>
</g>
<g >
<title>do_unlinkat (1,333,333 samples, 0.26%)</title><rect x="1064.3" y="501" width="3.1" height="15.0" fill="rgb(205,116,13)" rx="2" ry="2" />
<text  x="1067.34" y="511.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ListTooLong (1,333,333 samples, 0.26%)</title><rect x="1116.4" y="501" width="3.1" height="15.0" fill="rgb(224,84,51)" rx="2" ry="2" />
<text  x="1119.44" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.26%)</title><rect x="1137.9" y="661" width="3.1" height="15.0" fill="rgb(218,0,14)" rx="2" ry="2" />
<text  x="1140.90" y="671.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (1,333,333 samples, 0.26%)</title><rect x="13.1" y="373" width="3.0" height="15.0" fill="rgb(206,109,50)" rx="2" ry="2" />
<text  x="16.06" y="383.5" ></text>
</g>
<g >
<title>__gthread_once (23,999,994 samples, 4.68%)</title><rect x="920.3" y="405" width="55.2" height="15.0" fill="rgb(239,94,45)" rx="2" ry="2" />
<text  x="923.29" y="415.5" >__gth..</text>
</g>
<g >
<title>__libc_write (181,333,288 samples, 35.32%)</title><rect x="457.5" y="373" width="416.8" height="15.0" fill="rgb(240,108,43)" rx="2" ry="2" />
<text  x="460.48" y="383.5" >__libc_write</text>
</g>
<g >
<title>elf_dynamic_do_Rela (2,666,666 samples, 0.52%)</title><rect x="1131.8" y="565" width="6.1" height="15.0" fill="rgb(216,54,50)" rx="2" ry="2" />
<text  x="1134.77" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.26%)</title><rect x="62.1" y="277" width="3.1" height="15.0" fill="rgb(221,133,36)" rx="2" ry="2" />
<text  x="65.10" y="287.5" ></text>
</g>
<g >
<title>vfs_write (1,333,333 samples, 0.26%)</title><rect x="1067.4" y="373" width="3.1" height="15.0" fill="rgb(252,199,26)" rx="2" ry="2" />
<text  x="1070.40" y="383.5" ></text>
</g>
<g >
<title>queued_read_lock_slowpath (1,333,333 samples, 0.26%)</title><rect x="770.1" y="133" width="3.1" height="15.0" fill="rgb(226,48,40)" rx="2" ry="2" />
<text  x="773.10" y="143.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::WriteUnbuffered (182,666,621 samples, 35.58%)</title><rect x="454.4" y="389" width="419.9" height="15.0" fill="rgb(247,175,50)" rx="2" ry="2" />
<text  x="457.42" y="399.5" >leveldb::(anonymous namespace)::PosixWritableFile::WriteU..</text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::FlushBuffer (186,666,620 samples, 36.36%)</title><rect x="445.2" y="405" width="429.1" height="15.0" fill="rgb(226,5,17)" rx="2" ry="2" />
<text  x="448.22" y="415.5" >leveldb::(anonymous namespace)::PosixWritableFile::FlushBu..</text>
</g>
<g >
<title>submit_bio_wait_endio (2,666,666 samples, 0.52%)</title><rect x="791.6" y="69" width="6.1" height="15.0" fill="rgb(234,105,37)" rx="2" ry="2" />
<text  x="794.56" y="79.5" ></text>
</g>
<g >
<title>_IO_fgets (7,999,998 samples, 1.56%)</title><rect x="1073.5" y="565" width="18.4" height="15.0" fill="rgb(214,36,27)" rx="2" ry="2" />
<text  x="1076.53" y="575.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; &gt;::_M_not_empty_function&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; &gt; (1,333,333 samples, 0.26%)</title><rect x="990.8" y="421" width="3.0" height="15.0" fill="rgb(219,206,28)" rx="2" ry="2" />
<text  x="993.78" y="431.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseToSpans (1,333,333 samples, 0.26%)</title><rect x="1119.5" y="453" width="3.1" height="15.0" fill="rgb(236,22,51)" rx="2" ry="2" />
<text  x="1122.51" y="463.5" ></text>
</g>
<g >
<title>TCMalloc_SystemRelease (1,333,333 samples, 0.26%)</title><rect x="1116.4" y="373" width="3.1" height="15.0" fill="rgb(224,202,20)" rx="2" ry="2" />
<text  x="1119.44" y="383.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.26%)</title><rect x="1125.6" y="245" width="3.1" height="15.0" fill="rgb(237,186,24)" rx="2" ry="2" />
<text  x="1128.64" y="255.5" ></text>
</g>
<g >
<title>vfs_read (1,333,333 samples, 0.26%)</title><rect x="1055.1" y="485" width="3.1" height="15.0" fill="rgb(230,93,32)" rx="2" ry="2" />
<text  x="1058.14" y="495.5" ></text>
</g>
<g >
<title>complete (2,666,666 samples, 0.52%)</title><rect x="791.6" y="53" width="6.1" height="15.0" fill="rgb(226,39,23)" rx="2" ry="2" />
<text  x="794.56" y="63.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1,333,333 samples, 0.26%)</title><rect x="71.3" y="341" width="3.1" height="15.0" fill="rgb(211,110,28)" rx="2" ry="2" />
<text  x="74.30" y="351.5" ></text>
</g>
<g >
<title>generic_make_request (11,999,997 samples, 2.34%)</title><rect x="791.6" y="117" width="27.5" height="15.0" fill="rgb(209,208,43)" rx="2" ry="2" />
<text  x="794.56" y="127.5" >g..</text>
</g>
<g >
<title>leveldb::Slice::compare (1,333,333 samples, 0.26%)</title><rect x="43.7" y="357" width="3.1" height="15.0" fill="rgb(235,101,2)" rx="2" ry="2" />
<text  x="46.71" y="367.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::clear (6,666,665 samples, 1.30%)</title><rect x="1101.1" y="549" width="15.3" height="15.0" fill="rgb(215,28,45)" rx="2" ry="2" />
<text  x="1104.12" y="559.5" ></text>
</g>
<g >
<title>__check_object_size (1,333,333 samples, 0.26%)</title><rect x="485.1" y="165" width="3.0" height="15.0" fill="rgb(223,13,24)" rx="2" ry="2" />
<text  x="488.06" y="175.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (5,333,332 samples, 1.04%)</title><rect x="1018.4" y="373" width="12.2" height="15.0" fill="rgb(228,90,54)" rx="2" ry="2" />
<text  x="1021.36" y="383.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (5,333,332 samples, 1.04%)</title><rect x="249.1" y="341" width="12.2" height="15.0" fill="rgb(233,0,37)" rx="2" ry="2" />
<text  x="252.06" y="351.5" ></text>
</g>
<g >
<title>_IO_new_file_sync (1,333,333 samples, 0.26%)</title><rect x="1067.4" y="517" width="3.1" height="15.0" fill="rgb(216,142,42)" rx="2" ry="2" />
<text  x="1070.40" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;, std::allocator&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt; &gt; &gt;::_M_default_append (1,333,333 samples, 0.26%)</title><rect x="1125.6" y="533" width="3.1" height="15.0" fill="rgb(210,64,1)" rx="2" ry="2" />
<text  x="1128.64" y="543.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (1,333,333 samples, 0.26%)</title><rect x="1119.5" y="533" width="3.1" height="15.0" fill="rgb(211,146,46)" rx="2" ry="2" />
<text  x="1122.51" y="543.5" ></text>
</g>
<g >
<title>__wake_up (1,333,333 samples, 0.26%)</title><rect x="1168.5" y="437" width="3.1" height="15.0" fill="rgb(218,121,49)" rx="2" ry="2" />
<text  x="1171.55" y="447.5" ></text>
</g>
<g >
<title>std::_Construct&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;&gt; (1,333,333 samples, 0.26%)</title><rect x="1125.6" y="469" width="3.1" height="15.0" fill="rgb(241,146,42)" rx="2" ry="2" />
<text  x="1128.64" y="479.5" ></text>
</g>
<g >
<title>do_group_exit (1,333,333 samples, 0.26%)</title><rect x="1137.9" y="613" width="3.1" height="15.0" fill="rgb(207,113,12)" rx="2" ry="2" />
<text  x="1140.90" y="623.5" ></text>
</g>
<g >
<title>evict (1,333,333 samples, 0.26%)</title><rect x="1064.3" y="469" width="3.1" height="15.0" fill="rgb(232,153,25)" rx="2" ry="2" />
<text  x="1067.34" y="479.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::PosixEnv (2,666,666 samples, 0.52%)</title><rect x="1122.6" y="565" width="6.1" height="15.0" fill="rgb(241,227,20)" rx="2" ry="2" />
<text  x="1125.57" y="575.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (18,666,662 samples, 3.64%)</title><rect x="288.9" y="325" width="42.9" height="15.0" fill="rgb(227,155,44)" rx="2" ry="2" />
<text  x="291.91" y="335.5" >leve..</text>
</g>
<g >
<title>leveldb::DB::Open (1,333,333 samples, 0.26%)</title><rect x="1067.4" y="581" width="3.1" height="15.0" fill="rgb(234,33,46)" rx="2" ry="2" />
<text  x="1070.40" y="591.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::MergeIntoFreeList (1,333,333 samples, 0.26%)</title><rect x="1116.4" y="405" width="3.1" height="15.0" fill="rgb(241,84,8)" rx="2" ry="2" />
<text  x="1119.44" y="415.5" ></text>
</g>
<g >
<title>bio_endio (2,666,666 samples, 0.52%)</title><rect x="791.6" y="85" width="6.1" height="15.0" fill="rgb(207,50,27)" rx="2" ry="2" />
<text  x="794.56" y="95.5" ></text>
</g>
<g >
<title>should_failslab (1,333,333 samples, 0.26%)</title><rect x="788.5" y="69" width="3.1" height="15.0" fill="rgb(208,158,25)" rx="2" ry="2" />
<text  x="791.49" y="79.5" ></text>
</g>
<g >
<title>snappy::internal::CompressFragment (2,666,666 samples, 0.52%)</title><rect x="92.8" y="309" width="6.1" height="15.0" fill="rgb(222,57,45)" rx="2" ry="2" />
<text  x="95.75" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1,333,333 samples, 0.26%)</title><rect x="74.4" y="325" width="3.0" height="15.0" fill="rgb(240,205,37)" rx="2" ry="2" />
<text  x="77.36" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (453,333,220 samples, 88.31%)</title><rect x="10.0" y="629" width="1042.1" height="15.0" fill="rgb(224,93,30)" rx="2" ry="2" />
<text  x="13.00" y="639.5" >[libstdc++.so.6.0.29]</text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.26%)</title><rect x="966.3" y="229" width="3.0" height="15.0" fill="rgb(234,90,22)" rx="2" ry="2" />
<text  x="969.26" y="239.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (178,666,622 samples, 34.81%)</title><rect x="463.6" y="357" width="410.7" height="15.0" fill="rgb(248,17,53)" rx="2" ry="2" />
<text  x="466.61" y="367.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (2,666,666 samples, 0.52%)</title><rect x="59.0" y="293" width="6.2" height="15.0" fill="rgb(239,102,29)" rx="2" ry="2" />
<text  x="62.04" y="303.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::swap (2,666,666 samples, 0.52%)</title><rect x="966.3" y="261" width="6.1" height="15.0" fill="rgb(209,72,43)" rx="2" ry="2" />
<text  x="969.26" y="271.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.26%)</title><rect x="423.8" y="389" width="3.0" height="15.0" fill="rgb(205,48,12)" rx="2" ry="2" />
<text  x="426.77" y="399.5" ></text>
</g>
<g >
<title>ext4_sync_file (1,333,333 samples, 0.26%)</title><rect x="1168.5" y="485" width="3.1" height="15.0" fill="rgb(215,143,14)" rx="2" ry="2" />
<text  x="1171.55" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (2,666,666 samples, 0.52%)</title><rect x="190.8" y="453" width="6.2" height="15.0" fill="rgb(223,128,32)" rx="2" ry="2" />
<text  x="193.83" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;, std::allocator&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt; &gt; &gt;::resize (1,333,333 samples, 0.26%)</title><rect x="1125.6" y="549" width="3.1" height="15.0" fill="rgb(243,22,20)" rx="2" ry="2" />
<text  x="1128.64" y="559.5" ></text>
</g>
<g >
<title>std::swap&lt;char const*&gt; (1,333,333 samples, 0.26%)</title><rect x="874.3" y="405" width="3.1" height="15.0" fill="rgb(207,107,38)" rx="2" ry="2" />
<text  x="877.31" y="415.5" ></text>
</g>
<g >
<title>jbd2_complete_transaction (1,333,333 samples, 0.26%)</title><rect x="1168.5" y="469" width="3.1" height="15.0" fill="rgb(222,63,50)" rx="2" ry="2" />
<text  x="1171.55" y="479.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::RemoveDir (1,333,333 samples, 0.26%)</title><rect x="1098.1" y="581" width="3.0" height="15.0" fill="rgb(209,167,4)" rx="2" ry="2" />
<text  x="1101.05" y="591.5" ></text>
</g>
<g >
<title>__do_page_fault (2,666,666 samples, 0.52%)</title><rect x="1165.5" y="613" width="6.1" height="15.0" fill="rgb(221,191,3)" rx="2" ry="2" />
<text  x="1168.48" y="623.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (453,333,220 samples, 88.31%)</title><rect x="10.0" y="565" width="1042.1" height="15.0" fill="rgb(245,164,39)" rx="2" ry="2" />
<text  x="13.00" y="575.5" >std::__invoke&lt;void </text>
</g>
<g >
<title>std::_Deque_base&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt;::_M_create_nodes (1,333,333 samples, 0.26%)</title><rect x="1125.6" y="389" width="3.1" height="15.0" fill="rgb(252,69,54)" rx="2" ry="2" />
<text  x="1128.64" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (6,666,665 samples, 1.30%)</title><rect x="1101.1" y="517" width="15.3" height="15.0" fill="rgb(243,15,17)" rx="2" ry="2" />
<text  x="1104.12" y="527.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (1,333,333 samples, 0.26%)</title><rect x="77.4" y="357" width="3.1" height="15.0" fill="rgb(254,38,44)" rx="2" ry="2" />
<text  x="80.43" y="367.5" ></text>
</g>
<g >
<title>__lru_cache_add (1,333,333 samples, 0.26%)</title><rect x="98.9" y="197" width="3.0" height="15.0" fill="rgb(242,144,29)" rx="2" ry="2" />
<text  x="101.88" y="207.5" ></text>
</g>
<g >
<title>__GI___pthread_once (1,333,333 samples, 0.26%)</title><rect x="920.3" y="389" width="3.1" height="15.0" fill="rgb(228,219,25)" rx="2" ry="2" />
<text  x="923.29" y="399.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; &gt;::_M_init_functor (2,666,666 samples, 0.52%)</title><rect x="984.6" y="405" width="6.2" height="15.0" fill="rgb(245,137,14)" rx="2" ry="2" />
<text  x="987.65" y="415.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseListToSpans (1,333,333 samples, 0.26%)</title><rect x="1113.4" y="373" width="3.0" height="15.0" fill="rgb(208,107,38)" rx="2" ry="2" />
<text  x="1116.38" y="383.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::SingletonEnv&lt;leveldb::(anonymous namespace)::PosixEnv&gt;::SingletonEnv (2,666,666 samples, 0.52%)</title><rect x="1122.6" y="581" width="6.1" height="15.0" fill="rgb(242,146,5)" rx="2" ry="2" />
<text  x="1125.57" y="591.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;std::queue&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::deque&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt; &gt;*, unsigned long&gt; (1,333,333 samples, 0.26%)</title><rect x="1125.6" y="485" width="3.1" height="15.0" fill="rgb(250,144,25)" rx="2" ry="2" />
<text  x="1128.64" y="495.5" ></text>
</g>
<g >
<title>handle_mm_fault (2,666,666 samples, 0.52%)</title><rect x="1165.5" y="597" width="6.1" height="15.0" fill="rgb(208,154,52)" rx="2" ry="2" />
<text  x="1168.48" y="607.5" ></text>
</g>
<g >
<title>page_fault (2,666,666 samples, 0.52%)</title><rect x="1165.5" y="645" width="6.1" height="15.0" fill="rgb(253,123,13)" rx="2" ry="2" />
<text  x="1168.48" y="655.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (2,666,666 samples, 0.52%)</title><rect x="255.2" y="309" width="6.1" height="15.0" fill="rgb(213,103,28)" rx="2" ry="2" />
<text  x="258.19" y="319.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (6,666,665 samples, 1.30%)</title><rect x="356.3" y="293" width="15.4" height="15.0" fill="rgb(220,134,52)" rx="2" ry="2" />
<text  x="359.34" y="303.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (1,333,333 samples, 0.26%)</title><rect x="71.3" y="309" width="3.1" height="15.0" fill="rgb(210,105,0)" rx="2" ry="2" />
<text  x="74.30" y="319.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::ThreadBody (394,666,568 samples, 76.88%)</title><rect x="144.9" y="533" width="907.2" height="15.0" fill="rgb(216,5,45)" rx="2" ry="2" />
<text  x="147.86" y="543.5" >leveldb::Benchmark::ThreadBody</text>
</g>
<g >
<title>dax_iomap_actor (115,999,971 samples, 22.60%)</title><rect x="482.0" y="213" width="266.6" height="15.0" fill="rgb(225,166,11)" rx="2" ry="2" />
<text  x="485.00" y="223.5" >dax_iomap_actor</text>
</g>
<g >
<title>leveldb::DBImpl::WriteLevel0Table (58,666,652 samples, 11.43%)</title><rect x="10.0" y="437" width="134.9" height="15.0" fill="rgb(235,157,27)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >leveldb::DBImpl::..</text>
</g>
<g >
<title>snappy::Compress (3,999,999 samples, 0.78%)</title><rect x="89.7" y="325" width="9.2" height="15.0" fill="rgb(225,163,54)" rx="2" ry="2" />
<text  x="92.69" y="335.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (7,999,998 samples, 1.56%)</title><rect x="1018.4" y="405" width="18.4" height="15.0" fill="rgb(222,12,35)" rx="2" ry="2" />
<text  x="1021.36" y="415.5" ></text>
</g>
<g >
<title>__ext4_journal_get_write_access (1,333,333 samples, 0.26%)</title><rect x="868.2" y="165" width="3.0" height="15.0" fill="rgb(218,1,28)" rx="2" ry="2" />
<text  x="871.18" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (5,333,332 samples, 1.04%)</title><rect x="52.9" y="341" width="12.3" height="15.0" fill="rgb(213,224,2)" rx="2" ry="2" />
<text  x="55.91" y="351.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BuildBatchGroup (1,333,333 samples, 0.26%)</title><rect x="206.2" y="453" width="3.0" height="15.0" fill="rgb(219,102,22)" rx="2" ry="2" />
<text  x="209.16" y="463.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::RandomGenerator::RandomGenerator (15,999,996 samples, 3.12%)</title><rect x="160.2" y="485" width="36.8" height="15.0" fill="rgb(214,162,21)" rx="2" ry="2" />
<text  x="163.18" y="495.5" >lev..</text>
</g>
<g >
<title>write_pmem (9,333,331 samples, 1.82%)</title><rect x="797.7" y="69" width="21.4" height="15.0" fill="rgb(230,81,28)" rx="2" ry="2" />
<text  x="800.69" y="79.5" >w..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1,333,333 samples, 0.26%)</title><rect x="135.7" y="357" width="3.0" height="15.0" fill="rgb(215,193,20)" rx="2" ry="2" />
<text  x="138.66" y="367.5" ></text>
</g>
<g >
<title>handle_mm_fault (2,666,666 samples, 0.52%)</title><rect x="111.1" y="181" width="6.2" height="15.0" fill="rgb(208,218,20)" rx="2" ry="2" />
<text  x="114.14" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (2,666,666 samples, 0.52%)</title><rect x="59.0" y="309" width="6.2" height="15.0" fill="rgb(249,113,15)" rx="2" ry="2" />
<text  x="62.04" y="319.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (1,333,333 samples, 0.26%)</title><rect x="135.7" y="421" width="3.0" height="15.0" fill="rgb(227,45,46)" rx="2" ry="2" />
<text  x="138.66" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt; &gt;::destroy&lt;std::__future_base::_State_baseV2&gt; (1,333,333 samples, 0.26%)</title><rect x="1171.6" y="645" width="3.1" height="15.0" fill="rgb(209,119,12)" rx="2" ry="2" />
<text  x="1174.61" y="655.5" ></text>
</g>
<g >
<title>_IO_vsnprintf (5,333,332 samples, 1.04%)</title><rect x="147.9" y="453" width="12.3" height="15.0" fill="rgb(218,119,4)" rx="2" ry="2" />
<text  x="150.92" y="463.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (1,333,333 samples, 0.26%)</title><rect x="1125.6" y="277" width="3.1" height="15.0" fill="rgb(220,166,4)" rx="2" ry="2" />
<text  x="1128.64" y="287.5" ></text>
</g>
<g >
<title>std::future&lt;leveldb::Status&gt;::get (1,333,333 samples, 0.26%)</title><rect x="1180.8" y="661" width="3.1" height="15.0" fill="rgb(242,122,41)" rx="2" ry="2" />
<text  x="1183.81" y="671.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.26%)</title><rect x="1067.4" y="437" width="3.1" height="15.0" fill="rgb(243,213,20)" rx="2" ry="2" />
<text  x="1070.40" y="447.5" ></text>
</g>
<g >
<title>path_lookupat (1,333,333 samples, 0.26%)</title><rect x="1128.7" y="373" width="3.1" height="15.0" fill="rgb(230,31,50)" rx="2" ry="2" />
<text  x="1131.70" y="383.5" ></text>
</g>
<g >
<title>leveldb::Arena::AllocateFallback (1,333,333 samples, 0.26%)</title><rect x="239.9" y="373" width="3.0" height="15.0" fill="rgb(224,205,7)" rx="2" ry="2" />
<text  x="242.87" y="383.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (2,666,666 samples, 0.52%)</title><rect x="1150.2" y="645" width="6.1" height="15.0" fill="rgb(254,75,10)" rx="2" ry="2" />
<text  x="1153.16" y="655.5" ></text>
</g>
<g >
<title>arch_tlb_finish_mmu (1,333,333 samples, 0.26%)</title><rect x="1116.4" y="245" width="3.1" height="15.0" fill="rgb(217,25,18)" rx="2" ry="2" />
<text  x="1119.44" y="255.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.26%)</title><rect x="1003.0" y="373" width="3.1" height="15.0" fill="rgb(252,197,35)" rx="2" ry="2" />
<text  x="1006.04" y="383.5" ></text>
</g>
<g >
<title>_IO_new_file_write (1,333,333 samples, 0.26%)</title><rect x="1067.4" y="469" width="3.1" height="15.0" fill="rgb(235,10,3)" rx="2" ry="2" />
<text  x="1070.40" y="479.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (1,333,333 samples, 0.26%)</title><rect x="1156.3" y="661" width="3.1" height="15.0" fill="rgb(233,177,14)" rx="2" ry="2" />
<text  x="1159.29" y="671.5" ></text>
</g>
<g >
<title>crypto_shash_update (1,333,333 samples, 0.26%)</title><rect x="862.1" y="133" width="3.0" height="15.0" fill="rgb(214,1,50)" rx="2" ry="2" />
<text  x="865.05" y="143.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.26%)</title><rect x="98.9" y="277" width="3.0" height="15.0" fill="rgb(240,84,45)" rx="2" ry="2" />
<text  x="101.88" y="287.5" ></text>
</g>
<g >
<title>ext4_dax_fault (2,666,666 samples, 0.52%)</title><rect x="1165.5" y="549" width="6.1" height="15.0" fill="rgb(223,3,33)" rx="2" ry="2" />
<text  x="1168.48" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt;::_Deque_iterator (1,333,333 samples, 0.26%)</title><rect x="911.1" y="421" width="3.1" height="15.0" fill="rgb(212,17,18)" rx="2" ry="2" />
<text  x="914.09" y="431.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::DecommitSpan (1,333,333 samples, 0.26%)</title><rect x="1116.4" y="389" width="3.1" height="15.0" fill="rgb(231,48,43)" rx="2" ry="2" />
<text  x="1119.44" y="399.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (3,999,999 samples, 0.78%)</title><rect x="1003.0" y="405" width="9.2" height="15.0" fill="rgb(238,162,23)" rx="2" ry="2" />
<text  x="1006.04" y="415.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;std::__future_base::_State_baseV2,  (1,333,333 samples, 0.26%)</title><rect x="975.5" y="421" width="3.0" height="15.0" fill="rgb(246,51,40)" rx="2" ry="2" />
<text  x="978.45" y="431.5" ></text>
</g>
<g >
<title>leveldb::Random::Uniform (9,333,331 samples, 1.82%)</title><rect x="166.3" y="437" width="21.5" height="15.0" fill="rgb(232,74,9)" rx="2" ry="2" />
<text  x="169.31" y="447.5" >l..</text>
</g>
<g >
<title>memcpy_erms (1,333,333 samples, 0.26%)</title><rect x="868.2" y="133" width="3.0" height="15.0" fill="rgb(210,61,34)" rx="2" ry="2" />
<text  x="871.18" y="143.5" ></text>
</g>
<g >
<title>_dl_start (3,999,999 samples, 0.78%)</title><rect x="1128.7" y="645" width="9.2" height="15.0" fill="rgb(206,223,39)" rx="2" ry="2" />
<text  x="1131.70" y="655.5" ></text>
</g>
<g >
<title>__do_fault (2,666,666 samples, 0.52%)</title><rect x="1165.5" y="565" width="6.1" height="15.0" fill="rgb(246,37,16)" rx="2" ry="2" />
<text  x="1168.48" y="575.5" ></text>
</g>
<g >
<title>check_match (1,333,333 samples, 0.26%)</title><rect x="1134.8" y="501" width="3.1" height="15.0" fill="rgb(220,197,35)" rx="2" ry="2" />
<text  x="1137.83" y="511.5" ></text>
</g>
<g >
<title>leveldb::Arena::AllocateNewBlock (1,333,333 samples, 0.26%)</title><rect x="408.4" y="325" width="3.1" height="15.0" fill="rgb(246,126,40)" rx="2" ry="2" />
<text  x="411.44" y="335.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,333,333 samples, 0.26%)</title><rect x="111.1" y="165" width="3.1" height="15.0" fill="rgb(211,32,48)" rx="2" ry="2" />
<text  x="114.14" y="175.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ReleaseToCentralCache (1,333,333 samples, 0.26%)</title><rect x="1113.4" y="405" width="3.0" height="15.0" fill="rgb(250,200,6)" rx="2" ry="2" />
<text  x="1116.38" y="415.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.26%)</title><rect x="98.9" y="245" width="3.0" height="15.0" fill="rgb(234,188,13)" rx="2" ry="2" />
<text  x="101.88" y="255.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.26%)</title><rect x="98.9" y="293" width="3.0" height="15.0" fill="rgb(239,59,38)" rx="2" ry="2" />
<text  x="101.88" y="303.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (58,666,652 samples, 11.43%)</title><rect x="264.4" y="357" width="134.8" height="15.0" fill="rgb(228,132,38)" rx="2" ry="2" />
<text  x="267.39" y="367.5" >leveldb::SkipList..</text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::promise (1,333,333 samples, 0.26%)</title><rect x="1183.9" y="661" width="3.0" height="15.0" fill="rgb(216,111,19)" rx="2" ry="2" />
<text  x="1186.87" y="671.5" ></text>
</g>
<g >
<title>ext4_dax_huge_fault (2,666,666 samples, 0.52%)</title><rect x="1165.5" y="533" width="6.1" height="15.0" fill="rgb(238,103,35)" rx="2" ry="2" />
<text  x="1168.48" y="543.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (1,333,333 samples, 0.26%)</title><rect x="408.4" y="245" width="3.1" height="15.0" fill="rgb(236,215,48)" rx="2" ry="2" />
<text  x="411.44" y="255.5" ></text>
</g>
<g >
<title>__fopen_internal (2,666,666 samples, 0.52%)</title><rect x="1091.9" y="549" width="6.2" height="15.0" fill="rgb(247,40,36)" rx="2" ry="2" />
<text  x="1094.92" y="559.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (2,666,666 samples, 0.52%)</title><rect x="1024.5" y="325" width="6.1" height="15.0" fill="rgb(220,216,26)" rx="2" ry="2" />
<text  x="1027.49" y="335.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (2,666,666 samples, 0.52%)</title><rect x="83.6" y="309" width="6.1" height="15.0" fill="rgb(228,170,40)" rx="2" ry="2" />
<text  x="86.56" y="319.5" ></text>
</g>
<g >
<title>__GI__IO_file_open (2,666,666 samples, 0.52%)</title><rect x="1091.9" y="517" width="6.2" height="15.0" fill="rgb(223,23,8)" rx="2" ry="2" />
<text  x="1094.92" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (7,999,998 samples, 1.56%)</title><rect x="117.3" y="389" width="18.4" height="15.0" fill="rgb(220,9,16)" rx="2" ry="2" />
<text  x="120.27" y="399.5" ></text>
</g>
<g >
<title>__GI_madvise (1,333,333 samples, 0.26%)</title><rect x="1116.4" y="357" width="3.1" height="15.0" fill="rgb(229,162,46)" rx="2" ry="2" />
<text  x="1119.44" y="367.5" ></text>
</g>
<g >
<title>pmem_persist (1,333,333 samples, 0.26%)</title><rect x="101.9" y="389" width="3.1" height="15.0" fill="rgb(247,163,40)" rx="2" ry="2" />
<text  x="104.95" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator[] (1,333,333 samples, 0.26%)</title><rect x="187.8" y="437" width="3.0" height="15.0" fill="rgb(240,114,52)" rx="2" ry="2" />
<text  x="190.77" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem, std::allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt; &gt;::_Deque_base (1,333,333 samples, 0.26%)</title><rect x="1125.6" y="421" width="3.1" height="15.0" fill="rgb(235,161,32)" rx="2" ry="2" />
<text  x="1128.64" y="431.5" ></text>
</g>
<g >
<title>__ext4_journal_stop (2,666,666 samples, 0.52%)</title><rect x="776.2" y="197" width="6.2" height="15.0" fill="rgb(229,53,39)" rx="2" ry="2" />
<text  x="779.23" y="207.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::Benchmark (1,333,333 samples, 0.26%)</title><rect x="1064.3" y="613" width="3.1" height="15.0" fill="rgb(227,5,1)" rx="2" ry="2" />
<text  x="1067.34" y="623.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (2,666,666 samples, 0.52%)</title><rect x="399.2" y="341" width="6.2" height="15.0" fill="rgb(251,18,53)" rx="2" ry="2" />
<text  x="402.25" y="351.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (7,999,998 samples, 1.56%)</title><rect x="49.8" y="373" width="18.4" height="15.0" fill="rgb(209,100,30)" rx="2" ry="2" />
<text  x="52.84" y="383.5" ></text>
</g>
<g >
<title>__copy_user_nocache (2,666,666 samples, 0.52%)</title><rect x="488.1" y="149" width="6.2" height="15.0" fill="rgb(217,139,11)" rx="2" ry="2" />
<text  x="491.13" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::port::CondVar*, std::allocator&lt;leveldb::port::CondVar*&gt; &gt;::emplace_back&lt;leveldb::port::CondVar*&gt; (1,333,333 samples, 0.26%)</title><rect x="1122.6" y="533" width="3.0" height="15.0" fill="rgb(242,77,30)" rx="2" ry="2" />
<text  x="1125.57" y="543.5" ></text>
</g>
<g >
<title>db_bench (513,333,205 samples, 100.00%)</title><rect x="10.0" y="677" width="1180.0" height="15.0" fill="rgb(235,173,16)" rx="2" ry="2" />
<text  x="13.00" y="687.5" >db_bench</text>
</g>
<g >
<title>__libc_start_main (27,999,993 samples, 5.45%)</title><rect x="1064.3" y="645" width="64.4" height="15.0" fill="rgb(246,63,6)" rx="2" ry="2" />
<text  x="1067.34" y="655.5" >__libc_..</text>
</g>
<g >
<title>do_syscall_64 (3,999,999 samples, 0.78%)</title><rect x="935.6" y="341" width="9.2" height="15.0" fill="rgb(253,52,43)" rx="2" ry="2" />
<text  x="938.61" y="351.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; &gt;::_M_init_functor (2,666,666 samples, 0.52%)</title><rect x="984.6" y="421" width="6.2" height="15.0" fill="rgb(240,138,2)" rx="2" ry="2" />
<text  x="987.65" y="431.5" ></text>
</g>
<g >
<title>show_cpuinfo (7,999,998 samples, 1.56%)</title><rect x="1073.5" y="341" width="18.4" height="15.0" fill="rgb(219,70,3)" rx="2" ry="2" />
<text  x="1076.53" y="351.5" ></text>
</g>
<g >
<title>ext4_ext_remove_space (1,333,333 samples, 0.26%)</title><rect x="1064.3" y="405" width="3.1" height="15.0" fill="rgb(248,227,8)" rx="2" ry="2" />
<text  x="1067.34" y="415.5" ></text>
</g>
<g >
<title>_IO_new_file_underflow (7,999,998 samples, 1.56%)</title><rect x="1073.5" y="501" width="18.4" height="15.0" fill="rgb(206,171,24)" rx="2" ry="2" />
<text  x="1076.53" y="511.5" ></text>
</g>
<g >
<title>ksys_read (7,999,998 samples, 1.56%)</title><rect x="1073.5" y="421" width="18.4" height="15.0" fill="rgb(250,164,3)" rx="2" ry="2" />
<text  x="1076.53" y="431.5" ></text>
</g>
<g >
<title>leveldb::ParseInternalKey (1,333,333 samples, 0.26%)</title><rect x="46.8" y="389" width="3.0" height="15.0" fill="rgb(222,135,47)" rx="2" ry="2" />
<text  x="49.78" y="399.5" ></text>
</g>
<g >
<title>__x64_sys_read (7,999,998 samples, 1.56%)</title><rect x="1073.5" y="437" width="18.4" height="15.0" fill="rgb(233,145,31)" rx="2" ry="2" />
<text  x="1076.53" y="447.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (1,333,333 samples, 0.26%)</title><rect x="71.3" y="293" width="3.1" height="15.0" fill="rgb(231,85,15)" rx="2" ry="2" />
<text  x="74.30" y="303.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (7,999,998 samples, 1.56%)</title><rect x="1018.4" y="389" width="18.4" height="15.0" fill="rgb(212,172,10)" rx="2" ry="2" />
<text  x="1021.36" y="399.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (2,666,666 samples, 0.52%)</title><rect x="411.5" y="357" width="6.1" height="15.0" fill="rgb(229,179,22)" rx="2" ry="2" />
<text  x="414.51" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_deleter (1,333,333 samples, 0.26%)</title><rect x="1186.9" y="645" width="3.1" height="15.0" fill="rgb(249,42,39)" rx="2" ry="2" />
<text  x="1189.94" y="655.5" ></text>
</g>
<g >
<title>__x64_sys_newstat (1,333,333 samples, 0.26%)</title><rect x="1128.7" y="453" width="3.1" height="15.0" fill="rgb(224,195,26)" rx="2" ry="2" />
<text  x="1131.70" y="463.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed64 (1,333,333 samples, 0.26%)</title><rect x="141.8" y="405" width="3.1" height="15.0" fill="rgb(218,50,35)" rx="2" ry="2" />
<text  x="144.79" y="415.5" ></text>
</g>
<g >
<title>leveldb::PutVarint32 (1,333,333 samples, 0.26%)</title><rect x="31.5" y="373" width="3.0" height="15.0" fill="rgb(230,37,44)" rx="2" ry="2" />
<text  x="34.45" y="383.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1,333,333 samples, 0.26%)</title><rect x="239.9" y="165" width="3.0" height="15.0" fill="rgb(251,228,48)" rx="2" ry="2" />
<text  x="242.87" y="175.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.26%)</title><rect x="1116.4" y="341" width="3.1" height="15.0" fill="rgb(205,206,12)" rx="2" ry="2" />
<text  x="1119.44" y="351.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (1,333,333 samples, 0.26%)</title><rect x="239.9" y="293" width="3.0" height="15.0" fill="rgb(209,197,44)" rx="2" ry="2" />
<text  x="242.87" y="303.5" ></text>
</g>
<g >
<title>seq_vprintf (2,666,666 samples, 0.52%)</title><rect x="1085.8" y="309" width="6.1" height="15.0" fill="rgb(252,132,43)" rx="2" ry="2" />
<text  x="1088.79" y="319.5" ></text>
</g>
<g >
<title>__virt_addr_valid (1,333,333 samples, 0.26%)</title><rect x="485.1" y="149" width="3.0" height="15.0" fill="rgb(237,112,18)" rx="2" ry="2" />
<text  x="488.06" y="159.5" ></text>
</g>
<g >
<title>do_page_fault (3,999,999 samples, 0.78%)</title><rect x="108.1" y="213" width="9.2" height="15.0" fill="rgb(218,181,23)" rx="2" ry="2" />
<text  x="111.08" y="223.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (1,333,333 samples, 0.26%)</title><rect x="1147.1" y="645" width="3.1" height="15.0" fill="rgb(232,149,13)" rx="2" ry="2" />
<text  x="1150.09" y="655.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__future_base::_Result_base*, false&gt;::_M_head (1,333,333 samples, 0.26%)</title><rect x="1033.7" y="245" width="3.1" height="15.0" fill="rgb(237,137,53)" rx="2" ry="2" />
<text  x="1036.69" y="255.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::_M_head (1,333,333 samples, 0.26%)</title><rect x="1033.7" y="261" width="3.1" height="15.0" fill="rgb(206,156,1)" rx="2" ry="2" />
<text  x="1036.69" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;leveldb::(anonymous namespace)::PosixEnv::BackgroundWorkItem&gt;::allocate (1,333,333 samples, 0.26%)</title><rect x="1125.6" y="341" width="3.1" height="15.0" fill="rgb(252,168,53)" rx="2" ry="2" />
<text  x="1128.64" y="351.5" ></text>
</g>
<g >
<title>__GI___clone (453,333,220 samples, 88.31%)</title><rect x="10.0" y="661" width="1042.1" height="15.0" fill="rgb(225,90,45)" rx="2" ry="2" />
<text  x="13.00" y="671.5" >__GI___clone</text>
</g>
<g >
<title>std::__shared_ptr_access&lt;std::__future_base::_State_baseV2,  (1,333,333 samples, 0.26%)</title><rect x="975.5" y="437" width="3.0" height="15.0" fill="rgb(215,69,16)" rx="2" ry="2" />
<text  x="978.45" y="447.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::Contents (1,333,333 samples, 0.26%)</title><rect x="230.7" y="453" width="3.0" height="15.0" fill="rgb(229,57,31)" rx="2" ry="2" />
<text  x="233.68" y="463.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.26%)</title><rect x="1137.9" y="645" width="3.1" height="15.0" fill="rgb(241,112,0)" rx="2" ry="2" />
<text  x="1140.90" y="655.5" ></text>
</g>
<g >
<title>do_futex (3,999,999 samples, 0.78%)</title><rect x="935.6" y="309" width="9.2" height="15.0" fill="rgb(222,213,50)" rx="2" ry="2" />
<text  x="938.61" y="319.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::New (1,333,333 samples, 0.26%)</title><rect x="1058.2" y="517" width="3.1" height="15.0" fill="rgb(247,228,21)" rx="2" ry="2" />
<text  x="1061.21" y="527.5" ></text>
</g>
<g >
<title>leveldb::DestroyDB (1,333,333 samples, 0.26%)</title><rect x="1098.1" y="597" width="3.0" height="15.0" fill="rgb(208,140,16)" rx="2" ry="2" />
<text  x="1101.05" y="607.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (1,333,333 samples, 0.26%)</title><rect x="1168.5" y="421" width="3.1" height="15.0" fill="rgb(246,101,3)" rx="2" ry="2" />
<text  x="1171.55" y="431.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.26%)</title><rect x="239.9" y="213" width="3.0" height="15.0" fill="rgb(212,192,13)" rx="2" ry="2" />
<text  x="242.87" y="223.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.26%)</title><rect x="1058.2" y="373" width="3.1" height="15.0" fill="rgb(225,66,46)" rx="2" ry="2" />
<text  x="1061.21" y="383.5" ></text>
</g>
<g >
<title>cpumask_any_but (1,333,333 samples, 0.26%)</title><rect x="1116.4" y="213" width="3.1" height="15.0" fill="rgb(252,52,21)" rx="2" ry="2" />
<text  x="1119.44" y="223.5" ></text>
</g>
<g >
<title>proc_reg_open (2,666,666 samples, 0.52%)</title><rect x="1091.9" y="357" width="6.2" height="15.0" fill="rgb(218,23,30)" rx="2" ry="2" />
<text  x="1094.92" y="367.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::wait (1,333,333 samples, 0.26%)</title><rect x="993.8" y="437" width="3.1" height="15.0" fill="rgb(231,182,53)" rx="2" ry="2" />
<text  x="996.84" y="447.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (13,333,330 samples, 2.60%)</title><rect x="301.2" y="309" width="30.6" height="15.0" fill="rgb(241,29,21)" rx="2" ry="2" />
<text  x="304.17" y="319.5" >le..</text>
</g>
<g >
<title>__pthread_once_slow (1,333,333 samples, 0.26%)</title><rect x="1052.1" y="645" width="3.0" height="15.0" fill="rgb(247,61,53)" rx="2" ry="2" />
<text  x="1055.08" y="655.5" ></text>
</g>
<g >
<title>do_dentry_open (2,666,666 samples, 0.52%)</title><rect x="1091.9" y="373" width="6.2" height="15.0" fill="rgb(243,30,32)" rx="2" ry="2" />
<text  x="1094.92" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2,666,666 samples, 0.52%)</title><rect x="190.8" y="469" width="6.2" height="15.0" fill="rgb(208,162,47)" rx="2" ry="2" />
<text  x="193.83" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (1,333,333 samples, 0.26%)</title><rect x="972.4" y="261" width="3.1" height="15.0" fill="rgb(214,127,2)" rx="2" ry="2" />
<text  x="975.39" y="271.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (1,333,333 samples, 0.26%)</title><rect x="71.3" y="357" width="3.1" height="15.0" fill="rgb(217,228,22)" rx="2" ry="2" />
<text  x="74.30" y="367.5" ></text>
</g>
<g >
<title>submit_bio_wait (11,999,997 samples, 2.34%)</title><rect x="791.6" y="149" width="27.5" height="15.0" fill="rgb(211,117,0)" rx="2" ry="2" />
<text  x="794.56" y="159.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size@plt (1,333,333 samples, 0.26%)</title><rect x="123.4" y="277" width="3.1" height="15.0" fill="rgb(212,166,27)" rx="2" ry="2" />
<text  x="126.40" y="287.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (1,333,333 samples, 0.26%)</title><rect x="901.9" y="389" width="3.1" height="15.0" fill="rgb(205,209,4)" rx="2" ry="2" />
<text  x="904.90" y="399.5" ></text>
</g>
<g >
<title>pmem_make_request (11,999,997 samples, 2.34%)</title><rect x="791.6" y="101" width="27.5" height="15.0" fill="rgb(231,87,48)" rx="2" ry="2" />
<text  x="794.56" y="111.5" >p..</text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.26%)</title><rect x="71.3" y="325" width="3.1" height="15.0" fill="rgb(214,9,53)" rx="2" ry="2" />
<text  x="74.30" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1,333,333 samples, 0.26%)</title><rect x="1156.3" y="645" width="3.1" height="15.0" fill="rgb(254,222,32)" rx="2" ry="2" />
<text  x="1159.29" y="655.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (1,333,333 samples, 0.26%)</title><rect x="1116.4" y="309" width="3.1" height="15.0" fill="rgb(243,127,53)" rx="2" ry="2" />
<text  x="1119.44" y="319.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (9,333,331 samples, 1.82%)</title><rect x="944.8" y="261" width="21.5" height="15.0" fill="rgb(251,6,54)" rx="2" ry="2" />
<text  x="947.81" y="271.5" >s..</text>
</g>
<g >
<title>leveldb::DBImpl::~DBImpl (9,333,331 samples, 1.82%)</title><rect x="1101.1" y="597" width="21.5" height="15.0" fill="rgb(244,174,4)" rx="2" ry="2" />
<text  x="1104.12" y="607.5" >l..</text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (2,666,666 samples, 0.52%)</title><rect x="1030.6" y="325" width="6.2" height="15.0" fill="rgb(247,41,33)" rx="2" ry="2" />
<text  x="1033.62" y="335.5" ></text>
</g>
<g >
<title>leveldb::test::CompressibleString (11,999,997 samples, 2.34%)</title><rect x="163.2" y="469" width="27.6" height="15.0" fill="rgb(207,72,7)" rx="2" ry="2" />
<text  x="166.25" y="479.5" >l..</text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (74,666,648 samples, 14.55%)</title><rect x="246.0" y="389" width="171.6" height="15.0" fill="rgb(225,131,44)" rx="2" ry="2" />
<text  x="249.00" y="399.5" >leveldb::SkipList&lt;char..</text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.26%)</title><rect x="1125.6" y="229" width="3.1" height="15.0" fill="rgb(208,185,17)" rx="2" ry="2" />
<text  x="1128.64" y="239.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;::~pair (2,666,666 samples, 0.52%)</title><rect x="1110.3" y="453" width="6.1" height="15.0" fill="rgb(237,135,32)" rx="2" ry="2" />
<text  x="1113.31" y="463.5" ></text>
</g>
<g >
<title>std::operator&amp; (1,333,333 samples, 0.26%)</title><rect x="414.6" y="325" width="3.0" height="15.0" fill="rgb(242,106,40)" rx="2" ry="2" />
<text  x="417.57" y="335.5" ></text>
</g>
<g >
<title>_copy_from_iter_flushcache (2,666,666 samples, 0.52%)</title><rect x="488.1" y="165" width="6.2" height="15.0" fill="rgb(228,196,23)" rx="2" ry="2" />
<text  x="491.13" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::resize (5,333,332 samples, 1.04%)</title><rect x="105.0" y="373" width="12.3" height="15.0" fill="rgb(247,27,47)" rx="2" ry="2" />
<text  x="108.01" y="383.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.26%)</title><rect x="22.3" y="389" width="3.0" height="15.0" fill="rgb(214,12,51)" rx="2" ry="2" />
<text  x="25.26" y="399.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed64 (1,333,333 samples, 0.26%)</title><rect x="46.8" y="373" width="3.0" height="15.0" fill="rgb(218,39,36)" rx="2" ry="2" />
<text  x="49.78" y="383.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::InsertInto (86,666,645 samples, 16.88%)</title><rect x="233.7" y="453" width="199.3" height="15.0" fill="rgb(248,56,28)" rx="2" ry="2" />
<text  x="236.74" y="463.5" >leveldb::WriteBatchInterna..</text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::begin (1,333,333 samples, 0.26%)</title><rect x="206.2" y="421" width="3.0" height="15.0" fill="rgb(207,211,7)" rx="2" ry="2" />
<text  x="209.16" y="431.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (2,666,666 samples, 0.52%)</title><rect x="249.1" y="325" width="6.1" height="15.0" fill="rgb(245,119,34)" rx="2" ry="2" />
<text  x="252.06" y="335.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (1,333,333 samples, 0.26%)</title><rect x="408.4" y="261" width="3.1" height="15.0" fill="rgb(207,111,49)" rx="2" ry="2" />
<text  x="411.44" y="271.5" ></text>
</g>
<g >
<title>tcmalloc::SizeMap::Init (1,333,333 samples, 0.26%)</title><rect x="1061.3" y="549" width="3.0" height="15.0" fill="rgb(220,167,2)" rx="2" ry="2" />
<text  x="1064.27" y="559.5" ></text>
</g>
<g >
<title>__GI___libc_read (1,333,333 samples, 0.26%)</title><rect x="1055.1" y="565" width="3.1" height="15.0" fill="rgb(218,122,8)" rx="2" ry="2" />
<text  x="1058.14" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1,333,333 samples, 0.26%)</title><rect x="132.6" y="373" width="3.1" height="15.0" fill="rgb(212,3,2)" rx="2" ry="2" />
<text  x="135.60" y="383.5" ></text>
</g>
<g >
<title>__gthread_once (1,333,333 samples, 0.26%)</title><rect x="1177.7" y="645" width="3.1" height="15.0" fill="rgb(227,199,9)" rx="2" ry="2" />
<text  x="1180.74" y="655.5" ></text>
</g>
<g >
<title>elf_machine_rela (2,666,666 samples, 0.52%)</title><rect x="1131.8" y="549" width="6.1" height="15.0" fill="rgb(223,183,20)" rx="2" ry="2" />
<text  x="1134.77" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (1,333,333 samples, 0.26%)</title><rect x="947.9" y="197" width="3.0" height="15.0" fill="rgb(227,91,36)" rx="2" ry="2" />
<text  x="950.87" y="207.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.26%)</title><rect x="776.2" y="133" width="3.1" height="15.0" fill="rgb(240,207,44)" rx="2" ry="2" />
<text  x="779.23" y="143.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (1,333,333 samples, 0.26%)</title><rect x="49.8" y="357" width="3.1" height="15.0" fill="rgb(215,109,28)" rx="2" ry="2" />
<text  x="52.84" y="367.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::_Reset::~_Reset (1,333,333 samples, 0.26%)</title><rect x="1180.8" y="645" width="3.1" height="15.0" fill="rgb(250,162,53)" rx="2" ry="2" />
<text  x="1183.81" y="655.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.26%)</title><rect x="239.9" y="261" width="3.0" height="15.0" fill="rgb(231,148,40)" rx="2" ry="2" />
<text  x="242.87" y="271.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1,333,333 samples, 0.26%)</title><rect x="43.7" y="341" width="3.1" height="15.0" fill="rgb(238,146,6)" rx="2" ry="2" />
<text  x="46.71" y="351.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (62,666,651 samples, 12.21%)</title><rect x="261.3" y="373" width="144.1" height="15.0" fill="rgb(211,124,19)" rx="2" ry="2" />
<text  x="264.32" y="383.5" >leveldb::SkipList&lt;..</text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (1,333,333 samples, 0.26%)</title><rect x="246.0" y="341" width="3.1" height="15.0" fill="rgb(241,11,29)" rx="2" ry="2" />
<text  x="249.00" y="351.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (173,333,290 samples, 33.77%)</title><rect x="475.9" y="261" width="398.4" height="15.0" fill="rgb(252,136,16)" rx="2" ry="2" />
<text  x="478.87" y="271.5" >ext4_file_write_iter</text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;char*, unsigned long&gt; (5,333,332 samples, 1.04%)</title><rect x="105.0" y="309" width="12.3" height="15.0" fill="rgb(209,1,15)" rx="2" ry="2" />
<text  x="108.01" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt;::_M_next (1,333,333 samples, 0.26%)</title><rect x="1101.1" y="501" width="3.1" height="15.0" fill="rgb(209,193,9)" rx="2" ry="2" />
<text  x="1104.12" y="511.5" ></text>
</g>
<g >
<title>ext4_inode_csum.isra.59 (5,333,332 samples, 1.04%)</title><rect x="852.9" y="149" width="12.2" height="15.0" fill="rgb(231,171,36)" rx="2" ry="2" />
<text  x="855.86" y="159.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (2,666,666 samples, 0.52%)</title><rect x="40.6" y="389" width="6.2" height="15.0" fill="rgb(244,29,36)" rx="2" ry="2" />
<text  x="43.65" y="399.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1,333,333 samples, 0.26%)</title><rect x="114.2" y="165" width="3.1" height="15.0" fill="rgb(244,25,32)" rx="2" ry="2" />
<text  x="117.21" y="175.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::InsertRange (1,333,333 samples, 0.26%)</title><rect x="1113.4" y="389" width="3.0" height="15.0" fill="rgb(211,213,25)" rx="2" ry="2" />
<text  x="1116.38" y="399.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (1,333,333 samples, 0.26%)</title><rect x="1174.7" y="661" width="3.0" height="15.0" fill="rgb(214,31,43)" rx="2" ry="2" />
<text  x="1177.68" y="671.5" ></text>
</g>
<g >
<title>[libtcmalloc.so.4.3.0] (1,333,333 samples, 0.26%)</title><rect x="1058.2" y="469" width="3.1" height="15.0" fill="rgb(238,57,8)" rx="2" ry="2" />
<text  x="1061.21" y="479.5" ></text>
</g>
<g >
<title>_dl_start_user (3,999,999 samples, 0.78%)</title><rect x="1055.1" y="661" width="9.2" height="15.0" fill="rgb(240,57,27)" rx="2" ry="2" />
<text  x="1058.14" y="671.5" ></text>
</g>
<g >
<title>memcg_kmem_put_cache (1,333,333 samples, 0.26%)</title><rect x="760.9" y="165" width="3.1" height="15.0" fill="rgb(231,57,41)" rx="2" ry="2" />
<text  x="763.91" y="175.5" ></text>
</g>
<g >
<title>__ext4_journal_start_sb (3,999,999 samples, 0.78%)</title><rect x="828.3" y="197" width="9.2" height="15.0" fill="rgb(218,93,17)" rx="2" ry="2" />
<text  x="831.34" y="207.5" ></text>
</g>
<g >
<title>ksys_write (1,333,333 samples, 0.26%)</title><rect x="1067.4" y="389" width="3.1" height="15.0" fill="rgb(227,1,5)" rx="2" ry="2" />
<text  x="1070.40" y="399.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.26%)</title><rect x="417.6" y="389" width="3.1" height="15.0" fill="rgb(241,164,33)" rx="2" ry="2" />
<text  x="420.64" y="399.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::GrowHeap (1,333,333 samples, 0.26%)</title><rect x="1058.2" y="501" width="3.1" height="15.0" fill="rgb(238,130,10)" rx="2" ry="2" />
<text  x="1061.21" y="511.5" ></text>
</g>
<g >
<title>leveldb::BuildTable (46,666,655 samples, 9.09%)</title><rect x="10.0" y="421" width="107.3" height="15.0" fill="rgb(225,158,0)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >leveldb::Buil..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (1,333,333 samples, 0.26%)</title><rect x="74.4" y="293" width="3.0" height="15.0" fill="rgb(236,10,35)" rx="2" ry="2" />
<text  x="77.36" y="303.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.26%)</title><rect x="429.9" y="405" width="3.1" height="15.0" fill="rgb(226,74,47)" rx="2" ry="2" />
<text  x="432.90" y="415.5" ></text>
</g>
<g >
<title>arch_tlb_finish_mmu (1,333,333 samples, 0.26%)</title><rect x="1137.9" y="533" width="3.1" height="15.0" fill="rgb(236,129,39)" rx="2" ry="2" />
<text  x="1140.90" y="543.5" ></text>
</g>
<g >
<title>cpuinfo_open (2,666,666 samples, 0.52%)</title><rect x="1091.9" y="341" width="6.2" height="15.0" fill="rgb(229,96,7)" rx="2" ry="2" />
<text  x="1094.92" y="351.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (1,333,333 samples, 0.26%)</title><rect x="1058.2" y="533" width="3.1" height="15.0" fill="rgb(211,102,36)" rx="2" ry="2" />
<text  x="1061.21" y="543.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.52%)</title><rect x="1030.6" y="293" width="6.2" height="15.0" fill="rgb(236,76,6)" rx="2" ry="2" />
<text  x="1033.62" y="303.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BackgroundCall (58,666,652 samples, 11.43%)</title><rect x="10.0" y="485" width="134.9" height="15.0" fill="rgb(228,128,50)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >leveldb::DBImpl::..</text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.26%)</title><rect x="28.4" y="341" width="3.1" height="15.0" fill="rgb(218,22,4)" rx="2" ry="2" />
<text  x="31.39" y="351.5" ></text>
</g>
<g >
<title>ext4_mark_iloc_dirty (1,333,333 samples, 0.26%)</title><rect x="785.4" y="101" width="3.1" height="15.0" fill="rgb(242,119,35)" rx="2" ry="2" />
<text  x="788.43" y="111.5" ></text>
</g>
<g >
<title>do_exit (1,333,333 samples, 0.26%)</title><rect x="1137.9" y="597" width="3.1" height="15.0" fill="rgb(225,170,38)" rx="2" ry="2" />
<text  x="1140.90" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_default_append (5,333,332 samples, 1.04%)</title><rect x="105.0" y="357" width="12.3" height="15.0" fill="rgb(232,154,21)" rx="2" ry="2" />
<text  x="108.01" y="367.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1,333,333 samples, 0.26%)</title><rect x="1058.2" y="405" width="3.1" height="15.0" fill="rgb(249,179,23)" rx="2" ry="2" />
<text  x="1061.21" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (1,333,333 samples, 0.26%)</title><rect x="74.4" y="277" width="3.0" height="15.0" fill="rgb(238,16,40)" rx="2" ry="2" />
<text  x="77.36" y="287.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (1,333,333 samples, 0.26%)</title><rect x="1058.2" y="565" width="3.1" height="15.0" fill="rgb(243,185,49)" rx="2" ry="2" />
<text  x="1061.21" y="575.5" ></text>
</g>
<g >
<title>leveldb::test::RandomString (11,999,997 samples, 2.34%)</title><rect x="163.2" y="453" width="27.6" height="15.0" fill="rgb(235,120,1)" rx="2" ry="2" />
<text  x="166.25" y="463.5" >l..</text>
</g>
<g >
<title>_IO_new_do_write (1,333,333 samples, 0.26%)</title><rect x="1067.4" y="501" width="3.1" height="15.0" fill="rgb(216,17,18)" rx="2" ry="2" />
<text  x="1070.40" y="511.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BGWork (58,666,652 samples, 11.43%)</title><rect x="10.0" y="501" width="134.9" height="15.0" fill="rgb(230,227,11)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >leveldb::DBImpl::..</text>
</g>
<g >
<title>_dl_relocate_object (2,666,666 samples, 0.52%)</title><rect x="1131.8" y="581" width="6.1" height="15.0" fill="rgb(252,172,14)" rx="2" ry="2" />
<text  x="1134.77" y="591.5" ></text>
</g>
<g >
<title>_IO_no_init (1,333,333 samples, 0.26%)</title><rect x="147.9" y="437" width="3.1" height="15.0" fill="rgb(235,197,49)" rx="2" ry="2" />
<text  x="150.92" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::release (2,666,666 samples, 0.52%)</title><rect x="954.0" y="213" width="6.1" height="15.0" fill="rgb(246,126,40)" rx="2" ry="2" />
<text  x="957.00" y="223.5" ></text>
</g>
<g >
<title>__wake_up (2,666,666 samples, 0.52%)</title><rect x="776.2" y="165" width="6.2" height="15.0" fill="rgb(245,220,1)" rx="2" ry="2" />
<text  x="779.23" y="175.5" ></text>
</g>
<g >
<title>flush_clwb (1,333,333 samples, 0.26%)</title><rect x="101.9" y="357" width="3.1" height="15.0" fill="rgb(249,95,3)" rx="2" ry="2" />
<text  x="104.95" y="367.5" ></text>
</g>
<g >
<title>leveldb::TableCache::~TableCache (1,333,333 samples, 0.26%)</title><rect x="1119.5" y="565" width="3.1" height="15.0" fill="rgb(215,195,12)" rx="2" ry="2" />
<text  x="1122.51" y="575.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,333,333 samples, 0.26%)</title><rect x="98.9" y="229" width="3.0" height="15.0" fill="rgb(212,34,5)" rx="2" ry="2" />
<text  x="101.88" y="239.5" ></text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.26%)</title><rect x="98.9" y="373" width="3.0" height="15.0" fill="rgb(246,212,32)" rx="2" ry="2" />
<text  x="101.88" y="383.5" ></text>
</g>
<g >
<title>leveldb::ParseInternalKey (1,333,333 samples, 0.26%)</title><rect x="141.8" y="421" width="3.1" height="15.0" fill="rgb(223,36,15)" rx="2" ry="2" />
<text  x="144.79" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_deallocate_node (5,333,332 samples, 1.04%)</title><rect x="1104.2" y="501" width="12.2" height="15.0" fill="rgb(220,120,53)" rx="2" ry="2" />
<text  x="1107.18" y="511.5" ></text>
</g>
<g >
<title>format_decode (1,333,333 samples, 0.26%)</title><rect x="1088.9" y="277" width="3.0" height="15.0" fill="rgb(220,141,35)" rx="2" ry="2" />
<text  x="1091.86" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::front (1,333,333 samples, 0.26%)</title><rect x="206.2" y="437" width="3.0" height="15.0" fill="rgb(234,131,47)" rx="2" ry="2" />
<text  x="209.16" y="447.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::~shared_ptr (9,333,331 samples, 1.82%)</title><rect x="1015.3" y="453" width="21.5" height="15.0" fill="rgb(213,41,54)" rx="2" ry="2" />
<text  x="1018.30" y="463.5" >s..</text>
</g>
<g >
<title>leveldb::Arena::~Arena (1,333,333 samples, 0.26%)</title><rect x="1116.4" y="533" width="3.1" height="15.0" fill="rgb(218,172,11)" rx="2" ry="2" />
<text  x="1119.44" y="543.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (1,333,333 samples, 0.26%)</title><rect x="828.3" y="165" width="3.1" height="15.0" fill="rgb(236,7,54)" rx="2" ry="2" />
<text  x="831.34" y="175.5" ></text>
</g>
<g >
<title>ext4_inode_csum.isra.59 (1,333,333 samples, 0.26%)</title><rect x="785.4" y="69" width="3.1" height="15.0" fill="rgb(222,143,18)" rx="2" ry="2" />
<text  x="788.43" y="79.5" ></text>
</g>
<g >
<title>vfs_write (173,333,290 samples, 33.77%)</title><rect x="475.9" y="293" width="398.4" height="15.0" fill="rgb(214,97,16)" rx="2" ry="2" />
<text  x="478.87" y="303.5" >vfs_write</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2,666,666 samples, 0.52%)</title><rect x="190.8" y="437" width="6.2" height="15.0" fill="rgb(240,197,31)" rx="2" ry="2" />
<text  x="193.83" y="447.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (9,333,331 samples, 1.82%)</title><rect x="1015.3" y="421" width="21.5" height="15.0" fill="rgb(219,176,5)" rx="2" ry="2" />
<text  x="1018.30" y="431.5" >s..</text>
</g>
<g >
<title>memcpy_flushcache (9,333,331 samples, 1.82%)</title><rect x="797.7" y="53" width="21.4" height="15.0" fill="rgb(227,87,19)" rx="2" ry="2" />
<text  x="800.69" y="63.5" >m..</text>
</g>
<g >
<title>path_init (1,333,333 samples, 0.26%)</title><rect x="1128.7" y="357" width="3.1" height="15.0" fill="rgb(221,137,34)" rx="2" ry="2" />
<text  x="1131.70" y="367.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.26%)</title><rect x="89.7" y="293" width="3.1" height="15.0" fill="rgb(238,219,37)" rx="2" ry="2" />
<text  x="92.69" y="303.5" ></text>
</g>
<g >
<title>_ULx86_64_init_local (1,333,333 samples, 0.26%)</title><rect x="1058.2" y="453" width="3.1" height="15.0" fill="rgb(236,205,28)" rx="2" ry="2" />
<text  x="1061.21" y="463.5" ></text>
</g>
<g >
<title>mempool_alloc_slab (1,333,333 samples, 0.26%)</title><rect x="788.5" y="85" width="3.1" height="15.0" fill="rgb(238,40,18)" rx="2" ry="2" />
<text  x="791.49" y="95.5" ></text>
</g>
<g >
<title>ext4_journal_check_start (1,333,333 samples, 0.26%)</title><rect x="751.7" y="181" width="3.1" height="15.0" fill="rgb(247,24,34)" rx="2" ry="2" />
<text  x="754.71" y="191.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteBlock (7,999,998 samples, 1.56%)</title><rect x="80.5" y="373" width="18.4" height="15.0" fill="rgb(221,94,3)" rx="2" ry="2" />
<text  x="83.49" y="383.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::NoBarrier_SetNext (2,666,666 samples, 0.52%)</title><rect x="411.5" y="373" width="6.1" height="15.0" fill="rgb(206,85,3)" rx="2" ry="2" />
<text  x="414.51" y="383.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (3,999,999 samples, 0.78%)</title><rect x="123.4" y="293" width="9.2" height="15.0" fill="rgb(222,98,20)" rx="2" ry="2" />
<text  x="126.40" y="303.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::CompactMemTable (58,666,652 samples, 11.43%)</title><rect x="10.0" y="453" width="134.9" height="15.0" fill="rgb(211,204,21)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >leveldb::DBImpl::..</text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseListToSpans (1,333,333 samples, 0.26%)</title><rect x="1119.5" y="469" width="3.1" height="15.0" fill="rgb(214,65,9)" rx="2" ry="2" />
<text  x="1122.51" y="479.5" ></text>
</g>
<g >
<title>main (27,999,993 samples, 5.45%)</title><rect x="1064.3" y="629" width="64.4" height="15.0" fill="rgb(216,83,53)" rx="2" ry="2" />
<text  x="1067.34" y="639.5" >main</text>
</g>
<g >
<title>leveldb::TableBuilder::WriteRawBlock (3,999,999 samples, 0.78%)</title><rect x="80.5" y="357" width="9.2" height="15.0" fill="rgb(252,134,40)" rx="2" ry="2" />
<text  x="83.49" y="367.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;unsigned long, char&gt; (5,333,332 samples, 1.04%)</title><rect x="105.0" y="277" width="12.3" height="15.0" fill="rgb(233,199,52)" rx="2" ry="2" />
<text  x="108.01" y="287.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (187,999,953 samples, 36.62%)</title><rect x="442.2" y="421" width="432.1" height="15.0" fill="rgb(250,0,7)" rx="2" ry="2" />
<text  x="445.16" y="431.5" >leveldb::(anonymous namespace)::PosixWritableFile::Flush</text>
</g>
<g >
<title>ext4_inode_csum_set (1,333,333 samples, 0.26%)</title><rect x="1064.3" y="341" width="3.1" height="15.0" fill="rgb(225,132,36)" rx="2" ry="2" />
<text  x="1067.34" y="351.5" ></text>
</g>
<g >
<title>__unlink (1,333,333 samples, 0.26%)</title><rect x="1064.3" y="565" width="3.1" height="15.0" fill="rgb(218,34,42)" rx="2" ry="2" />
<text  x="1067.34" y="575.5" ></text>
</g>
<g >
<title>ext4_iomap_begin (34,666,658 samples, 6.75%)</title><rect x="748.6" y="213" width="79.7" height="15.0" fill="rgb(245,225,31)" rx="2" ry="2" />
<text  x="751.65" y="223.5" >ext4_ioma..</text>
</g>
<g >
<title>tcmalloc::ThreadCache::ReleaseToCentralCache (1,333,333 samples, 0.26%)</title><rect x="1116.4" y="485" width="3.1" height="15.0" fill="rgb(240,136,26)" rx="2" ry="2" />
<text  x="1119.44" y="495.5" ></text>
</g>
<g >
<title>__check_object_size (1,333,333 samples, 0.26%)</title><rect x="1055.1" y="437" width="3.1" height="15.0" fill="rgb(211,45,45)" rx="2" ry="2" />
<text  x="1058.14" y="447.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.26%)</title><rect x="1064.3" y="549" width="3.1" height="15.0" fill="rgb(216,103,23)" rx="2" ry="2" />
<text  x="1067.34" y="559.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::InsertRange (1,333,333 samples, 0.26%)</title><rect x="1116.4" y="469" width="3.1" height="15.0" fill="rgb(211,224,20)" rx="2" ry="2" />
<text  x="1119.44" y="479.5" ></text>
</g>
<g >
<title>arch_freq_prepare_all (2,666,666 samples, 0.52%)</title><rect x="1091.9" y="325" width="6.2" height="15.0" fill="rgb(215,176,15)" rx="2" ry="2" />
<text  x="1094.92" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::FileMetaData*, std::allocator&lt;leveldb::FileMetaData*&gt; &gt;::size (2,666,666 samples, 0.52%)</title><rect x="218.4" y="421" width="6.1" height="15.0" fill="rgb(217,143,9)" rx="2" ry="2" />
<text  x="221.42" y="431.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::_M_head (1,333,333 samples, 0.26%)</title><rect x="993.8" y="341" width="3.1" height="15.0" fill="rgb(231,129,17)" rx="2" ry="2" />
<text  x="996.84" y="351.5" ></text>
</g>
<g >
<title>dax_iomap_rw (170,666,624 samples, 33.25%)</title><rect x="478.9" y="245" width="392.3" height="15.0" fill="rgb(230,37,5)" rx="2" ry="2" />
<text  x="481.94" y="255.5" >dax_iomap_rw</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (2,666,666 samples, 0.52%)</title><rect x="1030.6" y="309" width="6.2" height="15.0" fill="rgb(237,207,45)" rx="2" ry="2" />
<text  x="1033.62" y="319.5" ></text>
</g>
</g>
</svg>
