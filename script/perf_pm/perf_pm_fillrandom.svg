<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="774.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="757" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="757" > </text>
<g id="frames">
<g >
<title>alloc_pages_current (1,333,333 samples, 0.33%)</title><rect x="379.7" y="389" width="4.0" height="15.0" fill="rgb(247,68,3)" rx="2" ry="2" />
<text  x="382.73" y="399.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.33%)</title><rect x="1083.8" y="389" width="3.9" height="15.0" fill="rgb(251,134,5)" rx="2" ry="2" />
<text  x="1086.80" y="399.5" ></text>
</g>
<g >
<title>do_futex (2,666,666 samples, 0.67%)</title><rect x="403.3" y="613" width="7.9" height="15.0" fill="rgb(225,166,36)" rx="2" ry="2" />
<text  x="406.33" y="623.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::InsertInto (75,999,981 samples, 19.00%)</title><rect x="737.7" y="469" width="224.2" height="15.0" fill="rgb(216,69,14)" rx="2" ry="2" />
<text  x="740.67" y="479.5" >leveldb::WriteBatchInternal::..</text>
</g>
<g >
<title>complete (1,333,333 samples, 0.33%)</title><rect x="584.3" y="53" width="3.9" height="15.0" fill="rgb(224,133,38)" rx="2" ry="2" />
<text  x="587.27" y="63.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (1,333,333 samples, 0.33%)</title><rect x="1060.2" y="437" width="3.9" height="15.0" fill="rgb(206,62,3)" rx="2" ry="2" />
<text  x="1063.20" y="447.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.33%)</title><rect x="21.8" y="645" width="3.9" height="15.0" fill="rgb(214,18,47)" rx="2" ry="2" />
<text  x="24.80" y="655.5" ></text>
</g>
<g >
<title>__srcu_read_lock (1,333,333 samples, 0.33%)</title><rect x="580.3" y="181" width="4.0" height="15.0" fill="rgb(254,5,46)" rx="2" ry="2" />
<text  x="583.33" y="191.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,333,333 samples, 0.33%)</title><rect x="1154.6" y="613" width="3.9" height="15.0" fill="rgb(233,143,31)" rx="2" ry="2" />
<text  x="1157.60" y="623.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__future_base::_State_baseV2&gt;::~allocator (1,333,333 samples, 0.33%)</title><rect x="1068.1" y="469" width="3.9" height="15.0" fill="rgb(247,48,44)" rx="2" ry="2" />
<text  x="1071.07" y="479.5" ></text>
</g>
<g >
<title>[unknown] (385,333,237 samples, 96.33%)</title><rect x="10.0" y="693" width="1136.7" height="15.0" fill="rgb(244,59,47)" rx="2" ry="2" />
<text  x="13.00" y="703.5" >[unknown]</text>
</g>
<g >
<title>submit_bio_wait_endio (1,333,333 samples, 0.33%)</title><rect x="584.3" y="69" width="3.9" height="15.0" fill="rgb(209,157,11)" rx="2" ry="2" />
<text  x="587.27" y="79.5" ></text>
</g>
<g >
<title>leveldb::Status::operator= (1,333,333 samples, 0.33%)</title><rect x="961.9" y="453" width="3.9" height="15.0" fill="rgb(212,26,9)" rx="2" ry="2" />
<text  x="964.87" y="463.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MemTableInserter::Put (73,333,315 samples, 18.33%)</title><rect x="737.7" y="437" width="216.3" height="15.0" fill="rgb(239,146,39)" rx="2" ry="2" />
<text  x="740.67" y="447.5" >leveldb::(anonymous namespac..</text>
</g>
<g >
<title>find_busiest_group (1,333,333 samples, 0.33%)</title><rect x="847.8" y="197" width="3.9" height="15.0" fill="rgb(243,67,9)" rx="2" ry="2" />
<text  x="850.80" y="207.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.33%)</title><rect x="761.3" y="357" width="3.9" height="15.0" fill="rgb(250,199,16)" rx="2" ry="2" />
<text  x="764.27" y="367.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (25,333,327 samples, 6.33%)</title><rect x="588.2" y="325" width="74.7" height="15.0" fill="rgb(213,30,40)" rx="2" ry="2" />
<text  x="591.20" y="335.5" >exit_to_..</text>
</g>
<g >
<title>leveldb::TableBuilder::Flush (17,333,329 samples, 4.33%)</title><rect x="521.3" y="405" width="51.2" height="15.0" fill="rgb(227,199,49)" rx="2" ry="2" />
<text  x="524.33" y="415.5" >level..</text>
</g>
<g >
<title>strcmp (1,333,333 samples, 0.33%)</title><rect x="1123.1" y="677" width="4.0" height="15.0" fill="rgb(242,185,5)" rx="2" ry="2" />
<text  x="1126.13" y="687.5" ></text>
</g>
<g >
<title>fsnotify (1,333,333 samples, 0.33%)</title><rect x="659.0" y="197" width="3.9" height="15.0" fill="rgb(223,45,5)" rx="2" ry="2" />
<text  x="662.00" y="207.5" ></text>
</g>
<g >
<title>__libc_write (122,666,636 samples, 30.67%)</title><rect x="33.6" y="677" width="361.9" height="15.0" fill="rgb(238,195,8)" rx="2" ry="2" />
<text  x="36.60" y="687.5" >__libc_write</text>
</g>
<g >
<title>leveldb::crc32c::Value (2,666,666 samples, 0.67%)</title><rect x="560.7" y="357" width="7.8" height="15.0" fill="rgb(239,33,46)" rx="2" ry="2" />
<text  x="563.67" y="367.5" ></text>
</g>
<g >
<title>__strchrnul_avx2 (1,333,333 samples, 0.33%)</title><rect x="10.0" y="661" width="3.9" height="15.0" fill="rgb(244,225,23)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>__ext4_handle_dirty_metadata (1,333,333 samples, 0.33%)</title><rect x="356.1" y="469" width="4.0" height="15.0" fill="rgb(248,173,21)" rx="2" ry="2" />
<text  x="359.13" y="479.5" ></text>
</g>
<g >
<title>__vfs_write (7,999,998 samples, 2.00%)</title><rect x="592.1" y="213" width="23.6" height="15.0" fill="rgb(238,184,40)" rx="2" ry="2" />
<text  x="595.13" y="223.5" >_..</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.33%)</title><rect x="438.7" y="389" width="4.0" height="15.0" fill="rgb(240,197,16)" rx="2" ry="2" />
<text  x="441.73" y="399.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::Add (10,666,664 samples, 2.67%)</title><rect x="482.0" y="405" width="31.5" height="15.0" fill="rgb(240,139,47)" rx="2" ry="2" />
<text  x="485.00" y="415.5" >le..</text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.33%)</title><rect x="29.7" y="581" width="3.9" height="15.0" fill="rgb(218,205,45)" rx="2" ry="2" />
<text  x="32.67" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt; &gt;::destroy&lt;std::__future_base::_State_baseV2&gt; (1,333,333 samples, 0.33%)</title><rect x="1111.3" y="405" width="4.0" height="15.0" fill="rgb(239,59,44)" rx="2" ry="2" />
<text  x="1114.33" y="415.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (1,333,333 samples, 0.33%)</title><rect x="478.1" y="405" width="3.9" height="15.0" fill="rgb(250,107,49)" rx="2" ry="2" />
<text  x="481.07" y="415.5" ></text>
</g>
<g >
<title>__srcu_read_unlock (74,666,648 samples, 18.67%)</title><rect x="49.3" y="485" width="220.3" height="15.0" fill="rgb(212,61,12)" rx="2" ry="2" />
<text  x="52.33" y="495.5" >__srcu_read_unlock</text>
</g>
<g >
<title>ext4_mark_inode_dirty (1,333,333 samples, 0.33%)</title><rect x="29.7" y="389" width="3.9" height="15.0" fill="rgb(234,134,34)" rx="2" ry="2" />
<text  x="32.67" y="399.5" ></text>
</g>
<g >
<title>__vfs_write (114,666,638 samples, 28.67%)</title><rect x="45.4" y="581" width="338.3" height="15.0" fill="rgb(246,92,30)" rx="2" ry="2" />
<text  x="48.40" y="591.5" >__vfs_write</text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::~__basic_future (1,333,333 samples, 0.33%)</title><rect x="1064.1" y="469" width="4.0" height="15.0" fill="rgb(218,120,26)" rx="2" ry="2" />
<text  x="1067.13" y="479.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.33%)</title><rect x="525.3" y="229" width="3.9" height="15.0" fill="rgb(249,1,52)" rx="2" ry="2" />
<text  x="528.27" y="239.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (114,666,638 samples, 28.67%)</title><rect x="45.4" y="565" width="338.3" height="15.0" fill="rgb(241,133,52)" rx="2" ry="2" />
<text  x="48.40" y="575.5" >ext4_file_write_iter</text>
</g>
<g >
<title>leveldb::Status::OK (1,333,333 samples, 0.33%)</title><rect x="981.5" y="405" width="4.0" height="15.0" fill="rgb(234,198,22)" rx="2" ry="2" />
<text  x="984.53" y="415.5" ></text>
</g>
<g >
<title>leveldb::log::Writer::EmitPhysicalRecord (23,999,994 samples, 6.00%)</title><rect x="965.8" y="453" width="70.8" height="15.0" fill="rgb(243,80,32)" rx="2" ry="2" />
<text  x="968.80" y="463.5" >leveldb:..</text>
</g>
<g >
<title>__alloc_pages_nodemask (1,333,333 samples, 0.33%)</title><rect x="379.7" y="373" width="4.0" height="15.0" fill="rgb(232,68,10)" rx="2" ry="2" />
<text  x="382.73" y="383.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1,333,333 samples, 0.33%)</title><rect x="666.9" y="181" width="3.9" height="15.0" fill="rgb(236,187,33)" rx="2" ry="2" />
<text  x="669.87" y="191.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (7,999,998 samples, 2.00%)</title><rect x="521.3" y="373" width="23.6" height="15.0" fill="rgb(240,12,3)" rx="2" ry="2" />
<text  x="524.33" y="383.5" >s..</text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.33%)</title><rect x="301.1" y="373" width="3.9" height="15.0" fill="rgb(240,217,47)" rx="2" ry="2" />
<text  x="304.07" y="383.5" ></text>
</g>
<g >
<title>run_rebalance_domains (1,333,333 samples, 0.33%)</title><rect x="847.8" y="245" width="3.9" height="15.0" fill="rgb(229,23,15)" rx="2" ry="2" />
<text  x="850.80" y="255.5" ></text>
</g>
<g >
<title>__x64_sys_openat (2,666,666 samples, 0.67%)</title><rect x="13.9" y="629" width="7.9" height="15.0" fill="rgb(254,11,51)" rx="2" ry="2" />
<text  x="16.93" y="639.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.33%)</title><rect x="954.0" y="437" width="3.9" height="15.0" fill="rgb(227,115,53)" rx="2" ry="2" />
<text  x="957.00" y="447.5" ></text>
</g>
<g >
<title>do_sys_open (2,666,666 samples, 0.67%)</title><rect x="13.9" y="613" width="7.9" height="15.0" fill="rgb(222,20,19)" rx="2" ry="2" />
<text  x="16.93" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (7,999,998 samples, 2.00%)</title><rect x="1091.7" y="453" width="23.6" height="15.0" fill="rgb(217,140,1)" rx="2" ry="2" />
<text  x="1094.67" y="463.5" >s..</text>
</g>
<g >
<title>submit_bio (1,333,333 samples, 0.33%)</title><rect x="584.3" y="133" width="3.9" height="15.0" fill="rgb(219,29,46)" rx="2" ry="2" />
<text  x="587.27" y="143.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.33%)</title><rect x="438.7" y="469" width="4.0" height="15.0" fill="rgb(211,163,47)" rx="2" ry="2" />
<text  x="441.73" y="479.5" ></text>
</g>
<g >
<title>ext4_iomap_begin (1,333,333 samples, 0.33%)</title><rect x="584.3" y="213" width="3.9" height="15.0" fill="rgb(213,90,39)" rx="2" ry="2" />
<text  x="587.27" y="223.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.33%)</title><rect x="851.7" y="325" width="4.0" height="15.0" fill="rgb(242,92,4)" rx="2" ry="2" />
<text  x="854.73" y="335.5" ></text>
</g>
<g >
<title>__do_fault (3,999,999 samples, 1.00%)</title><rect x="576.4" y="277" width="11.8" height="15.0" fill="rgb(209,136,36)" rx="2" ry="2" />
<text  x="579.40" y="287.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::PrintEnvironment (1,333,333 samples, 0.33%)</title><rect x="25.7" y="613" width="4.0" height="15.0" fill="rgb(246,33,1)" rx="2" ry="2" />
<text  x="28.73" y="623.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::ScheduleNuma (1,333,333 samples, 0.33%)</title><rect x="725.9" y="437" width="3.9" height="15.0" fill="rgb(224,190,11)" rx="2" ry="2" />
<text  x="728.87" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::swap (5,333,332 samples, 1.33%)</title><rect x="434.8" y="549" width="15.7" height="15.0" fill="rgb(222,102,11)" rx="2" ry="2" />
<text  x="437.80" y="559.5" ></text>
</g>
<g >
<title>crypto_shash_update (1,333,333 samples, 0.33%)</title><rect x="29.7" y="325" width="3.9" height="15.0" fill="rgb(243,34,28)" rx="2" ry="2" />
<text  x="32.67" y="335.5" ></text>
</g>
<g >
<title>__get_free_pages (1,333,333 samples, 0.33%)</title><rect x="379.7" y="405" width="4.0" height="15.0" fill="rgb(222,53,26)" rx="2" ry="2" />
<text  x="382.73" y="415.5" ></text>
</g>
<g >
<title>memmove_movnt_avx512f_clwb (5,333,332 samples, 1.33%)</title><rect x="572.5" y="373" width="15.7" height="15.0" fill="rgb(248,66,5)" rx="2" ry="2" />
<text  x="575.47" y="383.5" ></text>
</g>
<g >
<title>flush_clwb (25,333,327 samples, 6.33%)</title><rect x="588.2" y="373" width="74.7" height="15.0" fill="rgb(238,151,40)" rx="2" ry="2" />
<text  x="591.20" y="383.5" >flush_clwb</text>
</g>
<g >
<title>std::__future_base::_State_baseV2::wait (1,333,333 samples, 0.33%)</title><rect x="1052.3" y="453" width="4.0" height="15.0" fill="rgb(243,73,44)" rx="2" ry="2" />
<text  x="1055.33" y="463.5" ></text>
</g>
<g >
<title>std::__to_address&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; (1,333,333 samples, 0.33%)</title><rect x="529.2" y="325" width="3.9" height="15.0" fill="rgb(210,189,46)" rx="2" ry="2" />
<text  x="532.20" y="335.5" ></text>
</g>
<g >
<title>read (1,333,333 samples, 0.33%)</title><rect x="1182.1" y="693" width="4.0" height="15.0" fill="rgb(213,58,53)" rx="2" ry="2" />
<text  x="1185.13" y="703.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;, 0ul&gt; (2,666,666 samples, 0.67%)</title><rect x="533.1" y="277" width="7.9" height="15.0" fill="rgb(247,137,42)" rx="2" ry="2" />
<text  x="536.13" y="287.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.33%)</title><rect x="301.1" y="357" width="3.9" height="15.0" fill="rgb(218,79,4)" rx="2" ry="2" />
<text  x="304.07" y="367.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.33%)</title><rect x="1158.5" y="677" width="4.0" height="15.0" fill="rgb(254,101,16)" rx="2" ry="2" />
<text  x="1161.53" y="687.5" ></text>
</g>
<g >
<title>submit_bio_wait (1,333,333 samples, 0.33%)</title><rect x="584.3" y="149" width="3.9" height="15.0" fill="rgb(222,118,43)" rx="2" ry="2" />
<text  x="587.27" y="159.5" ></text>
</g>
<g >
<title>std::thread::_M_start_thread (1,333,333 samples, 0.33%)</title><rect x="725.9" y="421" width="3.9" height="15.0" fill="rgb(215,135,26)" rx="2" ry="2" />
<text  x="728.87" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1,333,333 samples, 0.33%)</title><rect x="509.5" y="389" width="4.0" height="15.0" fill="rgb(220,204,46)" rx="2" ry="2" />
<text  x="512.53" y="399.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.33%)</title><rect x="674.7" y="453" width="4.0" height="15.0" fill="rgb(243,112,23)" rx="2" ry="2" />
<text  x="677.73" y="463.5" ></text>
</g>
<g >
<title>ext4_group_desc_csum (1,333,333 samples, 0.33%)</title><rect x="301.1" y="421" width="3.9" height="15.0" fill="rgb(238,57,11)" rx="2" ry="2" />
<text  x="304.07" y="431.5" ></text>
</g>
<g >
<title>from_kgid (1,333,333 samples, 0.33%)</title><rect x="367.9" y="469" width="4.0" height="15.0" fill="rgb(235,123,28)" rx="2" ry="2" />
<text  x="370.93" y="479.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (1,333,333 samples, 0.33%)</title><rect x="450.5" y="677" width="4.0" height="15.0" fill="rgb(249,108,23)" rx="2" ry="2" />
<text  x="453.53" y="687.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (1,333,333 samples, 0.33%)</title><rect x="29.7" y="421" width="3.9" height="15.0" fill="rgb(236,149,28)" rx="2" ry="2" />
<text  x="32.67" y="431.5" ></text>
</g>
<g >
<title>seq_read (1,333,333 samples, 0.33%)</title><rect x="1182.1" y="565" width="4.0" height="15.0" fill="rgb(226,126,18)" rx="2" ry="2" />
<text  x="1185.13" y="575.5" ></text>
</g>
<g >
<title>__bitmap_intersects (1,333,333 samples, 0.33%)</title><rect x="631.5" y="149" width="3.9" height="15.0" fill="rgb(242,206,9)" rx="2" ry="2" />
<text  x="634.47" y="159.5" ></text>
</g>
<g >
<title>clear_page_erms (1,333,333 samples, 0.33%)</title><rect x="1138.9" y="549" width="3.9" height="15.0" fill="rgb(224,83,12)" rx="2" ry="2" />
<text  x="1141.87" y="559.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::WriteWrapper (110,666,639 samples, 27.67%)</title><rect x="718.0" y="485" width="326.5" height="15.0" fill="rgb(244,160,7)" rx="2" ry="2" />
<text  x="721.00" y="495.5" >leveldb::DBImpl::WriteWrapper</text>
</g>
<g >
<title>__x64_sys_getdents (1,333,333 samples, 0.33%)</title><rect x="21.8" y="629" width="3.9" height="15.0" fill="rgb(235,145,17)" rx="2" ry="2" />
<text  x="24.80" y="639.5" ></text>
</g>
<g >
<title>ext4_dax_huge_fault (3,999,999 samples, 1.00%)</title><rect x="576.4" y="245" width="11.8" height="15.0" fill="rgb(227,89,1)" rx="2" ry="2" />
<text  x="579.40" y="255.5" ></text>
</g>
<g >
<title>alloc_pages_vma (2,666,666 samples, 0.67%)</title><rect x="1138.9" y="581" width="7.8" height="15.0" fill="rgb(245,222,45)" rx="2" ry="2" />
<text  x="1141.87" y="591.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.33%)</title><rect x="434.8" y="533" width="3.9" height="15.0" fill="rgb(227,80,5)" rx="2" ry="2" />
<text  x="437.80" y="543.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.33%)</title><rect x="423.0" y="421" width="3.9" height="15.0" fill="rgb(229,83,4)" rx="2" ry="2" />
<text  x="426.00" y="431.5" ></text>
</g>
<g >
<title>do_exit (2,666,666 samples, 0.67%)</title><rect x="1170.3" y="597" width="7.9" height="15.0" fill="rgb(224,94,44)" rx="2" ry="2" />
<text  x="1173.33" y="607.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.33%)</title><rect x="1154.6" y="629" width="3.9" height="15.0" fill="rgb(225,148,1)" rx="2" ry="2" />
<text  x="1157.60" y="639.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::Write (1,333,333 samples, 0.33%)</title><rect x="1119.2" y="517" width="3.9" height="15.0" fill="rgb(221,174,27)" rx="2" ry="2" />
<text  x="1122.20" y="527.5" ></text>
</g>
<g >
<title>bio_endio (1,333,333 samples, 0.33%)</title><rect x="584.3" y="85" width="3.9" height="15.0" fill="rgb(222,93,10)" rx="2" ry="2" />
<text  x="587.27" y="95.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,666,666 samples, 0.67%)</title><rect x="1170.3" y="677" width="7.9" height="15.0" fill="rgb(250,100,43)" rx="2" ry="2" />
<text  x="1173.33" y="687.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Equal (2,666,666 samples, 0.67%)</title><rect x="745.5" y="389" width="7.9" height="15.0" fill="rgb(225,162,53)" rx="2" ry="2" />
<text  x="748.53" y="399.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1,333,333 samples, 0.33%)</title><rect x="749.5" y="325" width="3.9" height="15.0" fill="rgb(250,52,34)" rx="2" ry="2" />
<text  x="752.47" y="335.5" ></text>
</g>
<g >
<title>jbd2_journal_stop (1,333,333 samples, 0.33%)</title><rect x="348.3" y="485" width="3.9" height="15.0" fill="rgb(232,170,27)" rx="2" ry="2" />
<text  x="351.27" y="495.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.33%)</title><rect x="1182.1" y="661" width="4.0" height="15.0" fill="rgb(222,215,37)" rx="2" ry="2" />
<text  x="1185.13" y="671.5" ></text>
</g>
<g >
<title>__ext4_journal_stop (1,333,333 samples, 0.33%)</title><rect x="285.3" y="501" width="4.0" height="15.0" fill="rgb(212,182,53)" rx="2" ry="2" />
<text  x="288.33" y="511.5" ></text>
</g>
<g >
<title>do_group_exit (2,666,666 samples, 0.67%)</title><rect x="1170.3" y="613" width="7.9" height="15.0" fill="rgb(211,54,25)" rx="2" ry="2" />
<text  x="1173.33" y="623.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1,333,333 samples, 0.33%)</title><rect x="725.9" y="165" width="3.9" height="15.0" fill="rgb(213,189,45)" rx="2" ry="2" />
<text  x="728.87" y="175.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::Next (1,333,333 samples, 0.33%)</title><rect x="466.3" y="421" width="3.9" height="15.0" fill="rgb(212,114,22)" rx="2" ry="2" />
<text  x="469.27" y="431.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (3,999,999 samples, 1.00%)</title><rect x="544.9" y="373" width="11.8" height="15.0" fill="rgb(214,8,11)" rx="2" ry="2" />
<text  x="547.93" y="383.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::RandomGenerator::RandomGenerator (10,666,664 samples, 2.67%)</title><rect x="682.6" y="501" width="31.5" height="15.0" fill="rgb(216,73,48)" rx="2" ry="2" />
<text  x="685.60" y="511.5" >le..</text>
</g>
<g >
<title>leveldb::EncodeFixed64 (1,333,333 samples, 0.33%)</title><rect x="741.6" y="405" width="3.9" height="15.0" fill="rgb(254,68,33)" rx="2" ry="2" />
<text  x="744.60" y="415.5" ></text>
</g>
<g >
<title>std::swap&lt;std::__future_base::_Result_base*&gt; (1,333,333 samples, 0.33%)</title><rect x="446.6" y="533" width="3.9" height="15.0" fill="rgb(219,155,49)" rx="2" ry="2" />
<text  x="449.60" y="543.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,666,666 samples, 0.67%)</title><rect x="1170.3" y="693" width="7.9" height="15.0" fill="rgb(222,214,1)" rx="2" ry="2" />
<text  x="1173.33" y="703.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1,333,333 samples, 0.33%)</title><rect x="1060.2" y="421" width="3.9" height="15.0" fill="rgb(217,37,15)" rx="2" ry="2" />
<text  x="1063.20" y="431.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5,333,332 samples, 1.33%)</title><rect x="395.5" y="661" width="15.7" height="15.0" fill="rgb(209,170,19)" rx="2" ry="2" />
<text  x="398.47" y="671.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteRawBlock (2,666,666 samples, 0.67%)</title><rect x="560.7" y="373" width="7.8" height="15.0" fill="rgb(248,151,36)" rx="2" ry="2" />
<text  x="563.67" y="383.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.33%)</title><rect x="438.7" y="453" width="4.0" height="15.0" fill="rgb(219,229,37)" rx="2" ry="2" />
<text  x="441.73" y="463.5" ></text>
</g>
<g >
<title>std::__future_base::_Result_base::_Deleter::operator (1,333,333 samples, 0.33%)</title><rect x="1103.5" y="325" width="3.9" height="15.0" fill="rgb(231,8,29)" rx="2" ry="2" />
<text  x="1106.47" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt; &gt;::construct&lt;std::__future_base::_State_baseV2&gt; (1,333,333 samples, 0.33%)</title><rect x="1079.9" y="373" width="3.9" height="15.0" fill="rgb(226,121,7)" rx="2" ry="2" />
<text  x="1082.87" y="383.5" ></text>
</g>
<g >
<title>blkdev_issue_zeroout (11,999,997 samples, 3.00%)</title><rect x="305.0" y="469" width="35.4" height="15.0" fill="rgb(250,185,48)" rx="2" ry="2" />
<text  x="308.00" y="479.5" >blk..</text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (62,666,651 samples, 15.67%)</title><rect x="753.4" y="389" width="184.9" height="15.0" fill="rgb(233,215,8)" rx="2" ry="2" />
<text  x="756.40" y="399.5" >leveldb::SkipList&lt;char c..</text>
</g>
<g >
<title>do_page_fault (3,999,999 samples, 1.00%)</title><rect x="576.4" y="341" width="11.8" height="15.0" fill="rgb(239,212,37)" rx="2" ry="2" />
<text  x="579.40" y="351.5" ></text>
</g>
<g >
<title>mprotect_fixup (1,333,333 samples, 0.33%)</title><rect x="450.5" y="565" width="4.0" height="15.0" fill="rgb(249,33,54)" rx="2" ry="2" />
<text  x="453.53" y="575.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Add (30,666,659 samples, 7.67%)</title><rect x="482.0" y="421" width="90.5" height="15.0" fill="rgb(220,105,49)" rx="2" ry="2" />
<text  x="485.00" y="431.5" >leveldb::T..</text>
</g>
<g >
<title>ext4_inode_csum_set (1,333,333 samples, 0.33%)</title><rect x="29.7" y="357" width="3.9" height="15.0" fill="rgb(242,136,26)" rx="2" ry="2" />
<text  x="32.67" y="367.5" ></text>
</g>
<g >
<title>__libc_start_main (2,666,666 samples, 0.67%)</title><rect x="25.7" y="677" width="7.9" height="15.0" fill="rgb(209,219,31)" rx="2" ry="2" />
<text  x="28.73" y="687.5" ></text>
</g>
<g >
<title>__handle_mm_fault (5,333,332 samples, 1.33%)</title><rect x="1131.0" y="597" width="15.7" height="15.0" fill="rgb(206,202,25)" rx="2" ry="2" />
<text  x="1134.00" y="607.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (222,666,611 samples, 55.67%)</title><rect x="466.3" y="565" width="656.8" height="15.0" fill="rgb(241,1,40)" rx="2" ry="2" />
<text  x="469.27" y="575.5" >std::__invoke_impl&lt;void, void </text>
</g>
<g >
<title>ext4_mb_mark_diskspace_used (1,333,333 samples, 0.33%)</title><rect x="301.1" y="453" width="3.9" height="15.0" fill="rgb(212,78,26)" rx="2" ry="2" />
<text  x="304.07" y="463.5" ></text>
</g>
<g >
<title>__mutex_lock.isra.4 (2,666,666 samples, 0.67%)</title><rect x="607.9" y="149" width="7.8" height="15.0" fill="rgb(210,112,48)" rx="2" ry="2" />
<text  x="610.87" y="159.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.33%)</title><rect x="1154.6" y="677" width="3.9" height="15.0" fill="rgb(245,195,3)" rx="2" ry="2" />
<text  x="1157.60" y="687.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (1,333,333 samples, 0.33%)</title><rect x="957.9" y="421" width="4.0" height="15.0" fill="rgb(251,136,32)" rx="2" ry="2" />
<text  x="960.93" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add (1,333,333 samples, 0.33%)</title><rect x="1060.2" y="389" width="3.9" height="15.0" fill="rgb(227,167,47)" rx="2" ry="2" />
<text  x="1063.20" y="399.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2,666,666 samples, 0.67%)</title><rect x="1170.3" y="661" width="7.9" height="15.0" fill="rgb(223,103,47)" rx="2" ry="2" />
<text  x="1173.33" y="671.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (14,666,663 samples, 3.67%)</title><rect x="993.3" y="437" width="43.3" height="15.0" fill="rgb(253,26,37)" rx="2" ry="2" />
<text  x="996.33" y="447.5" >leve..</text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (1,333,333 samples, 0.33%)</title><rect x="1032.7" y="421" width="3.9" height="15.0" fill="rgb(222,86,10)" rx="2" ry="2" />
<text  x="1035.67" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr (3,999,999 samples, 1.00%)</title><rect x="419.1" y="517" width="11.8" height="15.0" fill="rgb(217,194,24)" rx="2" ry="2" />
<text  x="422.07" y="527.5" ></text>
</g>
<g >
<title>snappy::internal::CompressFragment (3,999,999 samples, 1.00%)</title><rect x="454.5" y="677" width="11.8" height="15.0" fill="rgb(209,14,36)" rx="2" ry="2" />
<text  x="457.47" y="687.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::Write (135,999,966 samples, 34.00%)</title><rect x="714.1" y="501" width="401.2" height="15.0" fill="rgb(233,20,24)" rx="2" ry="2" />
<text  x="717.07" y="511.5" >leveldb::DBImpl::Write</text>
</g>
<g >
<title>get_page_from_freelist (1,333,333 samples, 0.33%)</title><rect x="1142.8" y="549" width="3.9" height="15.0" fill="rgb(215,195,37)" rx="2" ry="2" />
<text  x="1145.80" y="559.5" ></text>
</g>
<g >
<title>jbd2_journal_get_write_access (1,333,333 samples, 0.33%)</title><rect x="379.7" y="453" width="4.0" height="15.0" fill="rgb(221,41,54)" rx="2" ry="2" />
<text  x="382.73" y="463.5" ></text>
</g>
<g >
<title>dax_iomap_fault (2,666,666 samples, 0.67%)</title><rect x="580.3" y="229" width="7.9" height="15.0" fill="rgb(225,227,48)" rx="2" ry="2" />
<text  x="583.33" y="239.5" ></text>
</g>
<g >
<title>generic_make_request (11,999,997 samples, 3.00%)</title><rect x="305.0" y="421" width="35.4" height="15.0" fill="rgb(239,32,52)" rx="2" ry="2" />
<text  x="308.00" y="431.5" >gen..</text>
</g>
<g >
<title>vsnprintf (1,333,333 samples, 0.33%)</title><rect x="1182.1" y="501" width="4.0" height="15.0" fill="rgb(208,81,35)" rx="2" ry="2" />
<text  x="1185.13" y="511.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (1,333,333 samples, 0.33%)</title><rect x="415.1" y="485" width="4.0" height="15.0" fill="rgb(220,222,6)" rx="2" ry="2" />
<text  x="418.13" y="495.5" ></text>
</g>
<g >
<title>__getdents64 (1,333,333 samples, 0.33%)</title><rect x="21.8" y="677" width="3.9" height="15.0" fill="rgb(219,10,47)" rx="2" ry="2" />
<text  x="24.80" y="687.5" ></text>
</g>
<g >
<title>ext4_ext_truncate (1,333,333 samples, 0.33%)</title><rect x="29.7" y="469" width="3.9" height="15.0" fill="rgb(232,220,26)" rx="2" ry="2" />
<text  x="32.67" y="479.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;char*, unsigned long, char&gt; (3,999,999 samples, 1.00%)</title><rect x="662.9" y="357" width="11.8" height="15.0" fill="rgb(226,202,32)" rx="2" ry="2" />
<text  x="665.93" y="367.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::PrintHeader (1,333,333 samples, 0.33%)</title><rect x="25.7" y="629" width="4.0" height="15.0" fill="rgb(252,47,6)" rx="2" ry="2" />
<text  x="28.73" y="639.5" ></text>
</g>
<g >
<title>leveldb::Slice::operator[] (3,999,999 samples, 1.00%)</title><rect x="497.7" y="389" width="11.8" height="15.0" fill="rgb(211,126,52)" rx="2" ry="2" />
<text  x="500.73" y="399.5" ></text>
</g>
<g >
<title>evict (1,333,333 samples, 0.33%)</title><rect x="29.7" y="517" width="3.9" height="15.0" fill="rgb(244,203,27)" rx="2" ry="2" />
<text  x="32.67" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (7,999,998 samples, 2.00%)</title><rect x="521.3" y="357" width="23.6" height="15.0" fill="rgb(211,195,9)" rx="2" ry="2" />
<text  x="524.33" y="367.5" >s..</text>
</g>
<g >
<title>__ext4_journal_stop (1,333,333 samples, 0.33%)</title><rect x="348.3" y="501" width="3.9" height="15.0" fill="rgb(210,196,53)" rx="2" ry="2" />
<text  x="351.27" y="511.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.33%)</title><rect x="336.5" y="309" width="3.9" height="15.0" fill="rgb(211,51,36)" rx="2" ry="2" />
<text  x="339.47" y="319.5" ></text>
</g>
<g >
<title>std::swap&lt;char const*&gt; (1,333,333 samples, 0.33%)</title><rect x="961.9" y="437" width="3.9" height="15.0" fill="rgb(219,146,14)" rx="2" ry="2" />
<text  x="964.87" y="447.5" ></text>
</g>
<g >
<title>ext4_free_blocks (1,333,333 samples, 0.33%)</title><rect x="29.7" y="437" width="3.9" height="15.0" fill="rgb(240,228,10)" rx="2" ry="2" />
<text  x="32.67" y="447.5" ></text>
</g>
<g >
<title>[unknown] (222,666,611 samples, 55.67%)</title><rect x="466.3" y="661" width="656.8" height="15.0" fill="rgb(234,229,31)" rx="2" ry="2" />
<text  x="469.27" y="671.5" >[unknown]</text>
</g>
<g >
<title>pmem_make_request (11,999,997 samples, 3.00%)</title><rect x="305.0" y="405" width="35.4" height="15.0" fill="rgb(241,142,48)" rx="2" ry="2" />
<text  x="308.00" y="415.5" >pme..</text>
</g>
<g >
<title>do_syscall_64 (5,333,332 samples, 1.33%)</title><rect x="395.5" y="645" width="15.7" height="15.0" fill="rgb(206,211,2)" rx="2" ry="2" />
<text  x="398.47" y="655.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::_M_get_result (2,666,666 samples, 0.67%)</title><rect x="1048.4" y="469" width="7.9" height="15.0" fill="rgb(214,190,31)" rx="2" ry="2" />
<text  x="1051.40" y="479.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::~_State_baseV2 (2,666,666 samples, 0.67%)</title><rect x="1099.5" y="357" width="7.9" height="15.0" fill="rgb(222,39,1)" rx="2" ry="2" />
<text  x="1102.53" y="367.5" ></text>
</g>
<g >
<title>handle_mm_fault (3,999,999 samples, 1.00%)</title><rect x="576.4" y="309" width="11.8" height="15.0" fill="rgb(222,72,40)" rx="2" ry="2" />
<text  x="579.40" y="319.5" ></text>
</g>
<g >
<title>__clone (1,333,333 samples, 0.33%)</title><rect x="725.9" y="405" width="3.9" height="15.0" fill="rgb(240,156,0)" rx="2" ry="2" />
<text  x="728.87" y="415.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1,333,333 samples, 0.33%)</title><rect x="379.7" y="357" width="4.0" height="15.0" fill="rgb(244,212,6)" rx="2" ry="2" />
<text  x="382.73" y="367.5" ></text>
</g>
<g >
<title>ksys_write (2,666,666 samples, 0.67%)</title><rect x="387.6" y="629" width="7.9" height="15.0" fill="rgb(242,8,0)" rx="2" ry="2" />
<text  x="390.60" y="639.5" ></text>
</g>
<g >
<title>arch_freq_prepare_all (2,666,666 samples, 0.67%)</title><rect x="13.9" y="501" width="7.9" height="15.0" fill="rgb(222,127,7)" rx="2" ry="2" />
<text  x="16.93" y="511.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::CurrentSizeEstimate (1,333,333 samples, 0.33%)</title><rect x="513.5" y="405" width="3.9" height="15.0" fill="rgb(205,23,32)" rx="2" ry="2" />
<text  x="516.47" y="415.5" ></text>
</g>
<g >
<title>tcmalloc::SizeMap::Init (1,333,333 samples, 0.33%)</title><rect x="1186.1" y="693" width="3.9" height="15.0" fill="rgb(213,47,27)" rx="2" ry="2" />
<text  x="1189.07" y="703.5" ></text>
</g>
<g >
<title>pmem_persist (25,333,327 samples, 6.33%)</title><rect x="588.2" y="405" width="74.7" height="15.0" fill="rgb(248,44,30)" rx="2" ry="2" />
<text  x="591.20" y="415.5" >pmem_per..</text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.33%)</title><rect x="1158.5" y="661" width="4.0" height="15.0" fill="rgb(248,93,23)" rx="2" ry="2" />
<text  x="1161.53" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::operator (1,333,333 samples, 0.33%)</title><rect x="415.1" y="517" width="4.0" height="15.0" fill="rgb(218,196,5)" rx="2" ry="2" />
<text  x="418.13" y="527.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::_M_head (1,333,333 samples, 0.33%)</title><rect x="415.1" y="453" width="4.0" height="15.0" fill="rgb(238,28,32)" rx="2" ry="2" />
<text  x="418.13" y="463.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (2,666,666 samples, 0.67%)</title><rect x="470.2" y="405" width="7.9" height="15.0" fill="rgb(219,173,31)" rx="2" ry="2" />
<text  x="473.20" y="415.5" ></text>
</g>
<g >
<title>mutex_unlock (2,666,666 samples, 0.67%)</title><rect x="615.7" y="181" width="7.9" height="15.0" fill="rgb(217,67,15)" rx="2" ry="2" />
<text  x="618.73" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (2,666,666 samples, 0.67%)</title><rect x="548.9" y="293" width="7.8" height="15.0" fill="rgb(242,192,53)" rx="2" ry="2" />
<text  x="551.87" y="303.5" ></text>
</g>
<g >
<title>kernfs_fop_readdir (1,333,333 samples, 0.33%)</title><rect x="21.8" y="597" width="3.9" height="15.0" fill="rgb(227,198,30)" rx="2" ry="2" />
<text  x="24.80" y="607.5" ></text>
</g>
<g >
<title>clocksource_watchdog (1,333,333 samples, 0.33%)</title><rect x="336.5" y="245" width="3.9" height="15.0" fill="rgb(212,166,33)" rx="2" ry="2" />
<text  x="339.47" y="255.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::~shared_ptr (7,999,998 samples, 2.00%)</title><rect x="1091.7" y="469" width="23.6" height="15.0" fill="rgb(209,134,20)" rx="2" ry="2" />
<text  x="1094.67" y="479.5" >s..</text>
</g>
<g >
<title>leveldb::TableBuilder::Finish (30,666,659 samples, 7.67%)</title><rect x="572.5" y="421" width="90.4" height="15.0" fill="rgb(228,138,41)" rx="2" ry="2" />
<text  x="575.47" y="431.5" >leveldb::T..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (3,999,999 samples, 1.00%)</title><rect x="529.2" y="341" width="11.8" height="15.0" fill="rgb(216,196,9)" rx="2" ry="2" />
<text  x="532.20" y="351.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.33%)</title><rect x="761.3" y="373" width="3.9" height="15.0" fill="rgb(250,73,24)" rx="2" ry="2" />
<text  x="764.27" y="383.5" ></text>
</g>
<g >
<title>_dl_map_object (1,333,333 samples, 0.33%)</title><rect x="1166.4" y="693" width="3.9" height="15.0" fill="rgb(249,78,43)" rx="2" ry="2" />
<text  x="1169.40" y="703.5" ></text>
</g>
<g >
<title>policy_nodemask (1,333,333 samples, 0.33%)</title><rect x="666.9" y="165" width="3.9" height="15.0" fill="rgb(225,74,32)" rx="2" ry="2" />
<text  x="669.87" y="175.5" ></text>
</g>
<g >
<title>ext4_inode_csum.isra.59 (1,333,333 samples, 0.33%)</title><rect x="29.7" y="341" width="3.9" height="15.0" fill="rgb(244,25,14)" rx="2" ry="2" />
<text  x="32.67" y="351.5" ></text>
</g>
<g >
<title>from_kprojid (2,666,666 samples, 0.67%)</title><rect x="371.9" y="469" width="7.8" height="15.0" fill="rgb(237,96,10)" rx="2" ry="2" />
<text  x="374.87" y="479.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (1,333,333 samples, 0.33%)</title><rect x="1170.3" y="501" width="4.0" height="15.0" fill="rgb(221,173,24)" rx="2" ry="2" />
<text  x="1173.33" y="511.5" ></text>
</g>
<g >
<title>__x64_sys_futex (3,999,999 samples, 1.00%)</title><rect x="399.4" y="629" width="11.8" height="15.0" fill="rgb(205,98,47)" rx="2" ry="2" />
<text  x="402.40" y="639.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.33%)</title><rect x="706.2" y="453" width="3.9" height="15.0" fill="rgb(236,176,45)" rx="2" ry="2" />
<text  x="709.20" y="463.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Rep::Rep (3,999,999 samples, 1.00%)</title><rect x="662.9" y="405" width="11.8" height="15.0" fill="rgb(253,132,36)" rx="2" ry="2" />
<text  x="665.93" y="415.5" ></text>
</g>
<g >
<title>dl_main (1,333,333 samples, 0.33%)</title><rect x="450.5" y="661" width="4.0" height="15.0" fill="rgb(241,121,33)" rx="2" ry="2" />
<text  x="453.53" y="671.5" ></text>
</g>
<g >
<title>inherit_event.isra.107 (1,333,333 samples, 0.33%)</title><rect x="725.9" y="277" width="3.9" height="15.0" fill="rgb(207,138,51)" rx="2" ry="2" />
<text  x="728.87" y="287.5" ></text>
</g>
<g >
<title>__vfs_read (1,333,333 samples, 0.33%)</title><rect x="1182.1" y="597" width="4.0" height="15.0" fill="rgb(248,199,46)" rx="2" ry="2" />
<text  x="1185.13" y="607.5" ></text>
</g>
<g >
<title>perf_iterate_sb (1,333,333 samples, 0.33%)</title><rect x="450.5" y="533" width="4.0" height="15.0" fill="rgb(228,60,16)" rx="2" ry="2" />
<text  x="453.53" y="543.5" ></text>
</g>
<g >
<title>iput (1,333,333 samples, 0.33%)</title><rect x="29.7" y="533" width="3.9" height="15.0" fill="rgb(243,1,19)" rx="2" ry="2" />
<text  x="32.67" y="543.5" ></text>
</g>
<g >
<title>ext4_issue_zeroout (11,999,997 samples, 3.00%)</title><rect x="305.0" y="485" width="35.4" height="15.0" fill="rgb(245,115,29)" rx="2" ry="2" />
<text  x="308.00" y="495.5" >ext..</text>
</g>
<g >
<title>std::move&lt;std::__future_base::_Result_base*&amp;&gt; (1,333,333 samples, 0.33%)</title><rect x="438.7" y="533" width="4.0" height="15.0" fill="rgb(206,101,4)" rx="2" ry="2" />
<text  x="441.73" y="543.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::MakeRoomForWrite (1,333,333 samples, 0.33%)</title><rect x="725.9" y="469" width="3.9" height="15.0" fill="rgb(230,32,44)" rx="2" ry="2" />
<text  x="728.87" y="479.5" ></text>
</g>
<g >
<title>copy_page_from_iter (1,333,333 samples, 0.33%)</title><rect x="635.4" y="165" width="3.9" height="15.0" fill="rgb(246,79,43)" rx="2" ry="2" />
<text  x="638.40" y="175.5" ></text>
</g>
<g >
<title>_IO_default_xsputn (1,333,333 samples, 0.33%)</title><rect x="1146.7" y="693" width="4.0" height="15.0" fill="rgb(245,74,49)" rx="2" ry="2" />
<text  x="1149.73" y="703.5" ></text>
</g>
<g >
<title>ext4_journal_check_start (1,333,333 samples, 0.33%)</title><rect x="273.5" y="485" width="4.0" height="15.0" fill="rgb(246,48,51)" rx="2" ry="2" />
<text  x="276.53" y="495.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2,666,666 samples, 0.67%)</title><rect x="305.0" y="341" width="7.9" height="15.0" fill="rgb(206,146,15)" rx="2" ry="2" />
<text  x="308.00" y="351.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BackgroundCompaction (70,666,649 samples, 17.67%)</title><rect x="466.3" y="485" width="208.4" height="15.0" fill="rgb(227,206,53)" rx="2" ry="2" />
<text  x="469.27" y="495.5" >leveldb::DBImpl::Background..</text>
</g>
<g >
<title>ext4_map_blocks (17,333,329 samples, 4.33%)</title><rect x="289.3" y="501" width="51.1" height="15.0" fill="rgb(222,7,8)" rx="2" ry="2" />
<text  x="292.27" y="511.5" >ext4_..</text>
</g>
<g >
<title>leveldb::ExtractUserKey (1,333,333 samples, 0.33%)</title><rect x="796.7" y="341" width="3.9" height="15.0" fill="rgb(250,146,10)" rx="2" ry="2" />
<text  x="799.67" y="351.5" ></text>
</g>
<g >
<title>__pthread_once_slow (18,666,662 samples, 4.67%)</title><rect x="395.5" y="677" width="55.0" height="15.0" fill="rgb(207,123,9)" rx="2" ry="2" />
<text  x="398.47" y="687.5" >__pth..</text>
</g>
<g >
<title>std::__invoke&lt;void  (13,333,330 samples, 3.33%)</title><rect x="411.2" y="613" width="39.3" height="15.0" fill="rgb(209,184,28)" rx="2" ry="2" />
<text  x="414.20" y="623.5" >std..</text>
</g>
<g >
<title>mprotect (1,333,333 samples, 0.33%)</title><rect x="450.5" y="645" width="4.0" height="15.0" fill="rgb(241,138,37)" rx="2" ry="2" />
<text  x="453.53" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::release (1,333,333 samples, 0.33%)</title><rect x="426.9" y="501" width="4.0" height="15.0" fill="rgb(241,211,27)" rx="2" ry="2" />
<text  x="429.93" y="511.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.33%)</title><rect x="336.5" y="341" width="3.9" height="15.0" fill="rgb(234,31,30)" rx="2" ry="2" />
<text  x="339.47" y="351.5" ></text>
</g>
<g >
<title>ext4_mark_inode_dirty (10,666,664 samples, 2.67%)</title><rect x="352.2" y="501" width="31.5" height="15.0" fill="rgb(226,195,38)" rx="2" ry="2" />
<text  x="355.20" y="511.5" >ex..</text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.33%)</title><rect x="336.5" y="293" width="3.9" height="15.0" fill="rgb(244,44,54)" rx="2" ry="2" />
<text  x="339.47" y="303.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::CompactMemTable (70,666,649 samples, 17.67%)</title><rect x="466.3" y="469" width="208.4" height="15.0" fill="rgb(215,174,52)" rx="2" ry="2" />
<text  x="469.27" y="479.5" >leveldb::DBImpl::CompactMem..</text>
</g>
<g >
<title>start_this_handle (2,666,666 samples, 0.67%)</title><rect x="340.4" y="469" width="7.9" height="15.0" fill="rgb(230,21,12)" rx="2" ry="2" />
<text  x="343.40" y="479.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.33%)</title><rect x="761.3" y="277" width="3.9" height="15.0" fill="rgb(253,98,16)" rx="2" ry="2" />
<text  x="764.27" y="287.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (6,666,665 samples, 1.67%)</title><rect x="1127.1" y="677" width="19.6" height="15.0" fill="rgb(237,163,40)" rx="2" ry="2" />
<text  x="1130.07" y="687.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_set_result (1,333,333 samples, 0.33%)</title><rect x="1040.5" y="453" width="4.0" height="15.0" fill="rgb(215,201,49)" rx="2" ry="2" />
<text  x="1043.53" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get (1,333,333 samples, 0.33%)</title><rect x="415.1" y="501" width="4.0" height="15.0" fill="rgb(205,196,51)" rx="2" ry="2" />
<text  x="418.13" y="511.5" ></text>
</g>
<g >
<title>leveldb::DestroyDB (1,333,333 samples, 0.33%)</title><rect x="29.7" y="629" width="3.9" height="15.0" fill="rgb(211,86,1)" rx="2" ry="2" />
<text  x="32.67" y="639.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (13,333,330 samples, 3.33%)</title><rect x="411.2" y="597" width="39.3" height="15.0" fill="rgb(252,179,35)" rx="2" ry="2" />
<text  x="414.20" y="607.5" >std..</text>
</g>
<g >
<title>get_page_from_freelist (1,333,333 samples, 0.33%)</title><rect x="525.3" y="149" width="3.9" height="15.0" fill="rgb(221,70,53)" rx="2" ry="2" />
<text  x="528.27" y="159.5" ></text>
</g>
<g >
<title>mmput (2,666,666 samples, 0.67%)</title><rect x="1170.3" y="581" width="7.9" height="15.0" fill="rgb(221,142,38)" rx="2" ry="2" />
<text  x="1173.33" y="591.5" ></text>
</g>
<g >
<title>leveldb::VersionSet::SetLastSequence (1,333,333 samples, 0.33%)</title><rect x="733.7" y="469" width="4.0" height="15.0" fill="rgb(235,137,22)" rx="2" ry="2" />
<text  x="736.73" y="479.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::WriteRandom (151,999,962 samples, 38.00%)</title><rect x="674.7" y="533" width="448.4" height="15.0" fill="rgb(233,19,4)" rx="2" ry="2" />
<text  x="677.73" y="543.5" >leveldb::Benchmark::WriteRandom</text>
</g>
<g >
<title>__handle_mm_fault (1,333,333 samples, 0.33%)</title><rect x="525.3" y="197" width="3.9" height="15.0" fill="rgb(210,30,1)" rx="2" ry="2" />
<text  x="528.27" y="207.5" ></text>
</g>
<g >
<title>do_page_fault (2,666,666 samples, 0.67%)</title><rect x="666.9" y="245" width="7.8" height="15.0" fill="rgb(215,24,44)" rx="2" ry="2" />
<text  x="669.87" y="255.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (222,666,611 samples, 55.67%)</title><rect x="466.3" y="645" width="656.8" height="15.0" fill="rgb(227,225,22)" rx="2" ry="2" />
<text  x="469.27" y="655.5" >[libstdc++.so.6.0.29]</text>
</g>
<g >
<title>std::__fill_n_a&lt;unsigned long, char&gt; (3,999,999 samples, 1.00%)</title><rect x="662.9" y="293" width="11.8" height="15.0" fill="rgb(222,83,42)" rx="2" ry="2" />
<text  x="665.93" y="303.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::DoWrite (150,666,629 samples, 37.67%)</title><rect x="674.7" y="517" width="444.5" height="15.0" fill="rgb(222,136,18)" rx="2" ry="2" />
<text  x="677.73" y="527.5" >leveldb::Benchmark::DoWrite</text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::_Reset::~_Reset (2,666,666 samples, 0.67%)</title><rect x="1056.3" y="469" width="7.8" height="15.0" fill="rgb(226,160,2)" rx="2" ry="2" />
<text  x="1059.27" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::operator* (1,333,333 samples, 0.33%)</title><rect x="1052.3" y="437" width="4.0" height="15.0" fill="rgb(213,116,47)" rx="2" ry="2" />
<text  x="1055.33" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (2,666,666 samples, 0.67%)</title><rect x="533.1" y="309" width="7.9" height="15.0" fill="rgb(209,114,24)" rx="2" ry="2" />
<text  x="536.13" y="319.5" ></text>
</g>
<g >
<title>__jbd2_log_start_commit (1,333,333 samples, 0.33%)</title><rect x="576.4" y="165" width="3.9" height="15.0" fill="rgb(245,155,22)" rx="2" ry="2" />
<text  x="579.40" y="175.5" ></text>
</g>
<g >
<title>write_pmem (9,333,331 samples, 2.33%)</title><rect x="312.9" y="373" width="27.5" height="15.0" fill="rgb(229,207,18)" rx="2" ry="2" />
<text  x="315.87" y="383.5" >w..</text>
</g>
<g >
<title>pmem_copy_from_iter (1,333,333 samples, 0.33%)</title><rect x="269.6" y="501" width="3.9" height="15.0" fill="rgb(252,162,14)" rx="2" ry="2" />
<text  x="272.60" y="511.5" ></text>
</g>
<g >
<title>_xstat (1,333,333 samples, 0.33%)</title><rect x="1166.4" y="677" width="3.9" height="15.0" fill="rgb(254,12,50)" rx="2" ry="2" />
<text  x="1169.40" y="687.5" ></text>
</g>
<g >
<title>dump_emit (7,999,998 samples, 2.00%)</title><rect x="592.1" y="245" width="23.6" height="15.0" fill="rgb(252,103,21)" rx="2" ry="2" />
<text  x="595.13" y="255.5" >d..</text>
</g>
<g >
<title>get_signal (25,333,327 samples, 6.33%)</title><rect x="588.2" y="293" width="74.7" height="15.0" fill="rgb(251,39,6)" rx="2" ry="2" />
<text  x="591.20" y="303.5" >get_signal</text>
</g>
<g >
<title>path_openat (2,666,666 samples, 0.67%)</title><rect x="13.9" y="581" width="7.9" height="15.0" fill="rgb(248,29,47)" rx="2" ry="2" />
<text  x="16.93" y="591.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1,333,333 samples, 0.33%)</title><rect x="525.3" y="165" width="3.9" height="15.0" fill="rgb(238,74,52)" rx="2" ry="2" />
<text  x="528.27" y="175.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::ThreadBody (151,999,962 samples, 38.00%)</title><rect x="674.7" y="549" width="448.4" height="15.0" fill="rgb(218,154,31)" rx="2" ry="2" />
<text  x="677.73" y="559.5" >leveldb::Benchmark::ThreadBody</text>
</g>
<g >
<title>leveldb::TableBuilder::WriteBlock (2,666,666 samples, 0.67%)</title><rect x="560.7" y="389" width="7.8" height="15.0" fill="rgb(249,99,6)" rx="2" ry="2" />
<text  x="563.67" y="399.5" ></text>
</g>
<g >
<title>crc32c_pcl_intel_update (1,333,333 samples, 0.33%)</title><rect x="29.7" y="309" width="3.9" height="15.0" fill="rgb(229,169,39)" rx="2" ry="2" />
<text  x="32.67" y="319.5" ></text>
</g>
<g >
<title>dax_iomap_rw (113,333,305 samples, 28.33%)</title><rect x="49.3" y="549" width="334.4" height="15.0" fill="rgb(219,204,8)" rx="2" ry="2" />
<text  x="52.33" y="559.5" >dax_iomap_rw</text>
</g>
<g >
<title>__zone_watermark_ok (1,333,333 samples, 0.33%)</title><rect x="725.9" y="149" width="3.9" height="15.0" fill="rgb(250,212,39)" rx="2" ry="2" />
<text  x="728.87" y="159.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1,333,333 samples, 0.33%)</title><rect x="792.7" y="341" width="4.0" height="15.0" fill="rgb(235,2,37)" rx="2" ry="2" />
<text  x="795.73" y="351.5" ></text>
</g>
<g >
<title>release_pages (1,333,333 samples, 0.33%)</title><rect x="1170.3" y="485" width="4.0" height="15.0" fill="rgb(227,4,31)" rx="2" ry="2" />
<text  x="1173.33" y="495.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BGWork (70,666,649 samples, 17.67%)</title><rect x="466.3" y="517" width="208.4" height="15.0" fill="rgb(223,72,45)" rx="2" ry="2" />
<text  x="469.27" y="527.5" >leveldb::DBImpl::BGWork</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.33%)</title><rect x="450.5" y="629" width="4.0" height="15.0" fill="rgb(232,63,31)" rx="2" ry="2" />
<text  x="453.53" y="639.5" ></text>
</g>
<g >
<title>page_fault (2,666,666 samples, 0.67%)</title><rect x="666.9" y="261" width="7.8" height="15.0" fill="rgb(224,163,53)" rx="2" ry="2" />
<text  x="669.87" y="271.5" ></text>
</g>
<g >
<title>std::__addressof&lt;bool&gt; (1,333,333 samples, 0.33%)</title><rect x="1040.5" y="437" width="4.0" height="15.0" fill="rgb(228,229,23)" rx="2" ry="2" />
<text  x="1043.53" y="447.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_trace (1,333,333 samples, 0.33%)</title><rect x="725.9" y="245" width="3.9" height="15.0" fill="rgb(224,111,38)" rx="2" ry="2" />
<text  x="728.87" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (2,666,666 samples, 0.67%)</title><rect x="1099.5" y="341" width="7.9" height="15.0" fill="rgb(246,96,10)" rx="2" ry="2" />
<text  x="1102.53" y="351.5" ></text>
</g>
<g >
<title>___slab_alloc (1,333,333 samples, 0.33%)</title><rect x="725.9" y="213" width="3.9" height="15.0" fill="rgb(237,56,15)" rx="2" ry="2" />
<text  x="728.87" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (2,666,666 samples, 0.67%)</title><rect x="521.3" y="309" width="7.9" height="15.0" fill="rgb(227,81,52)" rx="2" ry="2" />
<text  x="524.33" y="319.5" ></text>
</g>
<g >
<title>alloc_pages_current (1,333,333 samples, 0.33%)</title><rect x="725.9" y="181" width="3.9" height="15.0" fill="rgb(214,131,7)" rx="2" ry="2" />
<text  x="728.87" y="191.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.33%)</title><rect x="674.7" y="485" width="4.0" height="15.0" fill="rgb(253,162,51)" rx="2" ry="2" />
<text  x="677.73" y="495.5" ></text>
</g>
<g >
<title>__mutex_lock_slowpath (6,666,665 samples, 1.67%)</title><rect x="639.3" y="149" width="19.7" height="15.0" fill="rgb(239,84,45)" rx="2" ry="2" />
<text  x="642.33" y="159.5" ></text>
</g>
<g >
<title>mutex_spin_on_owner (6,666,665 samples, 1.67%)</title><rect x="639.3" y="117" width="19.7" height="15.0" fill="rgb(236,180,12)" rx="2" ry="2" />
<text  x="642.33" y="127.5" ></text>
</g>
<g >
<title>iterate_dir (1,333,333 samples, 0.33%)</title><rect x="21.8" y="613" width="3.9" height="15.0" fill="rgb(210,99,11)" rx="2" ry="2" />
<text  x="24.80" y="623.5" ></text>
</g>
<g >
<title>leveldb::PutVarint32 (2,666,666 samples, 0.67%)</title><rect x="489.9" y="389" width="7.8" height="15.0" fill="rgb(253,217,12)" rx="2" ry="2" />
<text  x="492.87" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (2,666,666 samples, 0.67%)</title><rect x="521.3" y="341" width="7.9" height="15.0" fill="rgb(217,182,23)" rx="2" ry="2" />
<text  x="524.33" y="351.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::__future_base::_Result_base::_Deleter, true&gt;::_Head_base&lt;std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.33%)</title><rect x="423.0" y="437" width="3.9" height="15.0" fill="rgb(218,110,24)" rx="2" ry="2" />
<text  x="426.00" y="447.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (6,666,665 samples, 1.67%)</title><rect x="415.1" y="565" width="19.7" height="15.0" fill="rgb(208,19,31)" rx="2" ry="2" />
<text  x="418.13" y="575.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.33%)</title><rect x="725.9" y="389" width="3.9" height="15.0" fill="rgb(239,121,26)" rx="2" ry="2" />
<text  x="728.87" y="399.5" ></text>
</g>
<g >
<title>__sb_end_write (1,333,333 samples, 0.33%)</title><rect x="37.5" y="597" width="4.0" height="15.0" fill="rgb(240,227,7)" rx="2" ry="2" />
<text  x="40.53" y="607.5" ></text>
</g>
<g >
<title>__mutex_lock_slowpath (2,666,666 samples, 0.67%)</title><rect x="607.9" y="165" width="7.8" height="15.0" fill="rgb(227,39,45)" rx="2" ry="2" />
<text  x="610.87" y="175.5" ></text>
</g>
<g >
<title>db_bench (399,999,900 samples, 100.00%)</title><rect x="10.0" y="709" width="1180.0" height="15.0" fill="rgb(250,223,32)" rx="2" ry="2" />
<text  x="13.00" y="719.5" >db_bench</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__future_base::_State_baseV2&gt;::destroy&lt;std::__future_base::_State_baseV2&gt; (2,666,666 samples, 0.67%)</title><rect x="1099.5" y="373" width="7.9" height="15.0" fill="rgb(228,100,27)" rx="2" ry="2" />
<text  x="1102.53" y="383.5" ></text>
</g>
<g >
<title>inherit_task_group.isra.109.part.110 (1,333,333 samples, 0.33%)</title><rect x="725.9" y="293" width="3.9" height="15.0" fill="rgb(216,71,10)" rx="2" ry="2" />
<text  x="728.87" y="303.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.33%)</title><rect x="438.7" y="501" width="4.0" height="15.0" fill="rgb(206,58,29)" rx="2" ry="2" />
<text  x="441.73" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,666,666 samples, 0.67%)</title><rect x="13.9" y="661" width="7.9" height="15.0" fill="rgb(237,164,6)" rx="2" ry="2" />
<text  x="16.93" y="671.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::RandomGenerator::Generate (1,333,333 samples, 0.33%)</title><rect x="678.7" y="501" width="3.9" height="15.0" fill="rgb(240,154,1)" rx="2" ry="2" />
<text  x="681.67" y="511.5" ></text>
</g>
<g >
<title>leveldb::Random::Uniform (3,999,999 samples, 1.00%)</title><rect x="694.4" y="453" width="11.8" height="15.0" fill="rgb(244,12,30)" rx="2" ry="2" />
<text  x="697.40" y="463.5" ></text>
</g>
<g >
<title>do_get_write_access (1,333,333 samples, 0.33%)</title><rect x="379.7" y="437" width="4.0" height="15.0" fill="rgb(225,142,52)" rx="2" ry="2" />
<text  x="382.73" y="447.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2,666,666 samples, 0.67%)</title><rect x="891.1" y="309" width="7.8" height="15.0" fill="rgb(237,90,22)" rx="2" ry="2" />
<text  x="894.07" y="319.5" ></text>
</g>
<g >
<title>dax_read_lock (1,333,333 samples, 0.33%)</title><rect x="580.3" y="197" width="4.0" height="15.0" fill="rgb(228,105,2)" rx="2" ry="2" />
<text  x="583.33" y="207.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;char*, unsigned long&gt; (3,999,999 samples, 1.00%)</title><rect x="662.9" y="325" width="11.8" height="15.0" fill="rgb(245,227,39)" rx="2" ry="2" />
<text  x="665.93" y="335.5" ></text>
</g>
<g >
<title>do_signal (2,666,666 samples, 0.67%)</title><rect x="1170.3" y="645" width="7.9" height="15.0" fill="rgb(254,178,15)" rx="2" ry="2" />
<text  x="1173.33" y="655.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::WriteLevel0Table (70,666,649 samples, 17.67%)</title><rect x="466.3" y="453" width="208.4" height="15.0" fill="rgb(226,57,32)" rx="2" ry="2" />
<text  x="469.27" y="463.5" >leveldb::DBImpl::WriteLevel..</text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (1,333,333 samples, 0.33%)</title><rect x="552.8" y="261" width="3.9" height="15.0" fill="rgb(211,194,44)" rx="2" ry="2" />
<text  x="555.80" y="271.5" ></text>
</g>
<g >
<title>vfs_write (117,333,304 samples, 29.33%)</title><rect x="41.5" y="597" width="346.1" height="15.0" fill="rgb(239,113,11)" rx="2" ry="2" />
<text  x="44.47" y="607.5" >vfs_write</text>
</g>
<g >
<title>ext4_iomap_end (14,666,663 samples, 3.67%)</title><rect x="340.4" y="517" width="43.3" height="15.0" fill="rgb(223,65,3)" rx="2" ry="2" />
<text  x="343.40" y="527.5" >ext4..</text>
</g>
<g >
<title>dax_finish_sync_fault (1,333,333 samples, 0.33%)</title><rect x="576.4" y="229" width="3.9" height="15.0" fill="rgb(238,197,18)" rx="2" ry="2" />
<text  x="579.40" y="239.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (2,666,666 samples, 0.67%)</title><rect x="501.7" y="373" width="7.8" height="15.0" fill="rgb(226,152,42)" rx="2" ry="2" />
<text  x="504.67" y="383.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.33%)</title><rect x="525.3" y="213" width="3.9" height="15.0" fill="rgb(235,49,5)" rx="2" ry="2" />
<text  x="528.27" y="223.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (3,999,999 samples, 1.00%)</title><rect x="973.7" y="437" width="11.8" height="15.0" fill="rgb(248,128,25)" rx="2" ry="2" />
<text  x="976.67" y="447.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.33%)</title><rect x="336.5" y="325" width="3.9" height="15.0" fill="rgb(247,217,51)" rx="2" ry="2" />
<text  x="339.47" y="335.5" ></text>
</g>
<g >
<title>exit_mmap (2,666,666 samples, 0.67%)</title><rect x="1170.3" y="565" width="7.9" height="15.0" fill="rgb(210,136,45)" rx="2" ry="2" />
<text  x="1173.33" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (1,333,333 samples, 0.33%)</title><rect x="541.0" y="325" width="3.9" height="15.0" fill="rgb(220,74,14)" rx="2" ry="2" />
<text  x="544.00" y="335.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_State_baseV2 (1,333,333 samples, 0.33%)</title><rect x="1079.9" y="341" width="3.9" height="15.0" fill="rgb(249,177,14)" rx="2" ry="2" />
<text  x="1082.87" y="351.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.33%)</title><rect x="415.1" y="469" width="4.0" height="15.0" fill="rgb(207,106,34)" rx="2" ry="2" />
<text  x="418.13" y="479.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (2,666,666 samples, 0.67%)</title><rect x="482.0" y="389" width="7.9" height="15.0" fill="rgb(236,146,48)" rx="2" ry="2" />
<text  x="485.00" y="399.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::NewNode (1,333,333 samples, 0.33%)</title><rect x="942.2" y="389" width="3.9" height="15.0" fill="rgb(214,104,7)" rx="2" ry="2" />
<text  x="945.20" y="399.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (222,666,611 samples, 55.67%)</title><rect x="466.3" y="629" width="656.8" height="15.0" fill="rgb(245,212,1)" rx="2" ry="2" />
<text  x="469.27" y="639.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (1,333,333 samples, 0.33%)</title><rect x="1064.1" y="437" width="4.0" height="15.0" fill="rgb(205,219,46)" rx="2" ry="2" />
<text  x="1067.13" y="447.5" ></text>
</g>
<g >
<title>__x64_sys_unlink (1,333,333 samples, 0.33%)</title><rect x="29.7" y="565" width="3.9" height="15.0" fill="rgb(252,53,21)" rx="2" ry="2" />
<text  x="32.67" y="575.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (1,333,333 samples, 0.33%)</title><rect x="29.7" y="405" width="3.9" height="15.0" fill="rgb(211,109,27)" rx="2" ry="2" />
<text  x="32.67" y="415.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;&gt; (5,333,332 samples, 1.33%)</title><rect x="1072.0" y="453" width="15.7" height="15.0" fill="rgb(206,95,52)" rx="2" ry="2" />
<text  x="1075.00" y="463.5" ></text>
</g>
<g >
<title>vfs_fsync_range (1,333,333 samples, 0.33%)</title><rect x="576.4" y="213" width="3.9" height="15.0" fill="rgb(207,177,24)" rx="2" ry="2" />
<text  x="579.40" y="223.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set (11,999,997 samples, 3.00%)</title><rect x="415.1" y="581" width="35.4" height="15.0" fill="rgb(232,224,54)" rx="2" ry="2" />
<text  x="418.13" y="591.5" >st..</text>
</g>
<g >
<title>leveldb::MemTableIterator::value (1,333,333 samples, 0.33%)</title><rect x="478.1" y="421" width="3.9" height="15.0" fill="rgb(229,109,4)" rx="2" ry="2" />
<text  x="481.07" y="431.5" ></text>
</g>
<g >
<title>leveldb::MemTable::KeyComparator::operator (1,333,333 samples, 0.33%)</title><rect x="749.5" y="373" width="3.9" height="15.0" fill="rgb(222,72,46)" rx="2" ry="2" />
<text  x="752.47" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.33%)</title><rect x="1182.1" y="677" width="4.0" height="15.0" fill="rgb(205,191,8)" rx="2" ry="2" />
<text  x="1185.13" y="687.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::set_value (1,333,333 samples, 0.33%)</title><rect x="1040.5" y="469" width="4.0" height="15.0" fill="rgb(222,109,45)" rx="2" ry="2" />
<text  x="1043.53" y="479.5" ></text>
</g>
<g >
<title>__vfs_write (14,666,663 samples, 3.67%)</title><rect x="615.7" y="197" width="43.3" height="15.0" fill="rgb(239,221,5)" rx="2" ry="2" />
<text  x="618.73" y="207.5" >__vf..</text>
</g>
<g >
<title>main (2,666,666 samples, 0.67%)</title><rect x="25.7" y="661" width="7.9" height="15.0" fill="rgb(209,213,9)" rx="2" ry="2" />
<text  x="28.73" y="671.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*&amp;, std::__future_base::_Result_base::_Deleter, void&gt; (1,333,333 samples, 0.33%)</title><rect x="423.0" y="469" width="3.9" height="15.0" fill="rgb(210,88,31)" rx="2" ry="2" />
<text  x="426.00" y="479.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::key (2,666,666 samples, 0.67%)</title><rect x="470.2" y="421" width="7.9" height="15.0" fill="rgb(239,97,27)" rx="2" ry="2" />
<text  x="473.20" y="431.5" ></text>
</g>
<g >
<title>do_signal (25,333,327 samples, 6.33%)</title><rect x="588.2" y="309" width="74.7" height="15.0" fill="rgb(238,25,49)" rx="2" ry="2" />
<text  x="591.20" y="319.5" >do_signal</text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (57,333,319 samples, 14.33%)</title><rect x="765.2" y="373" width="169.1" height="15.0" fill="rgb(248,90,52)" rx="2" ry="2" />
<text  x="768.20" y="383.5" >leveldb::SkipList&lt;cha..</text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (3,999,999 samples, 1.00%)</title><rect x="544.9" y="389" width="11.8" height="15.0" fill="rgb(224,165,37)" rx="2" ry="2" />
<text  x="547.93" y="399.5" ></text>
</g>
<g >
<title>handle_mm_fault (5,333,332 samples, 1.33%)</title><rect x="1131.0" y="613" width="15.7" height="15.0" fill="rgb(236,125,24)" rx="2" ry="2" />
<text  x="1134.00" y="623.5" ></text>
</g>
<g >
<title>crc32c_pcl_intel_update (1,333,333 samples, 0.33%)</title><rect x="364.0" y="437" width="3.9" height="15.0" fill="rgb(245,3,36)" rx="2" ry="2" />
<text  x="367.00" y="447.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.33%)</title><rect x="301.1" y="341" width="3.9" height="15.0" fill="rgb(208,29,15)" rx="2" ry="2" />
<text  x="304.07" y="351.5" ></text>
</g>
<g >
<title>__slab_alloc (1,333,333 samples, 0.33%)</title><rect x="725.9" y="229" width="3.9" height="15.0" fill="rgb(210,164,49)" rx="2" ry="2" />
<text  x="728.87" y="239.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (13,333,330 samples, 3.33%)</title><rect x="411.2" y="629" width="39.3" height="15.0" fill="rgb(229,34,18)" rx="2" ry="2" />
<text  x="414.20" y="639.5" >std..</text>
</g>
<g >
<title>seq_printf (1,333,333 samples, 0.33%)</title><rect x="1182.1" y="533" width="4.0" height="15.0" fill="rgb(250,40,4)" rx="2" ry="2" />
<text  x="1185.13" y="543.5" ></text>
</g>
<g >
<title>perf_event_mmap (1,333,333 samples, 0.33%)</title><rect x="450.5" y="549" width="4.0" height="15.0" fill="rgb(208,12,6)" rx="2" ry="2" />
<text  x="453.53" y="559.5" ></text>
</g>
<g >
<title>copy_process.part.35 (1,333,333 samples, 0.33%)</title><rect x="725.9" y="325" width="3.9" height="15.0" fill="rgb(234,132,2)" rx="2" ry="2" />
<text  x="728.87" y="335.5" ></text>
</g>
<g >
<title>leveldb::test::RandomString (9,333,331 samples, 2.33%)</title><rect x="686.5" y="469" width="27.6" height="15.0" fill="rgb(233,206,34)" rx="2" ry="2" />
<text  x="689.53" y="479.5" >l..</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl&lt;std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.67%)</title><rect x="419.1" y="501" width="7.8" height="15.0" fill="rgb(252,86,22)" rx="2" ry="2" />
<text  x="422.07" y="511.5" ></text>
</g>
<g >
<title>ext4_sync_file (1,333,333 samples, 0.33%)</title><rect x="576.4" y="197" width="3.9" height="15.0" fill="rgb(225,107,13)" rx="2" ry="2" />
<text  x="579.40" y="207.5" ></text>
</g>
<g >
<title>pmem_do_bvec (9,333,331 samples, 2.33%)</title><rect x="312.9" y="389" width="27.5" height="15.0" fill="rgb(220,142,15)" rx="2" ry="2" />
<text  x="315.87" y="399.5" >p..</text>
</g>
<g >
<title>do_page_fault (5,333,332 samples, 1.33%)</title><rect x="1131.0" y="645" width="15.7" height="15.0" fill="rgb(213,29,41)" rx="2" ry="2" />
<text  x="1134.00" y="655.5" ></text>
</g>
<g >
<title>ext4_ext_remove_space (1,333,333 samples, 0.33%)</title><rect x="29.7" y="453" width="3.9" height="15.0" fill="rgb(254,229,51)" rx="2" ry="2" />
<text  x="32.67" y="463.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.33%)</title><rect x="847.8" y="277" width="3.9" height="15.0" fill="rgb(236,70,16)" rx="2" ry="2" />
<text  x="850.80" y="287.5" ></text>
</g>
<g >
<title>show_cpuinfo (1,333,333 samples, 0.33%)</title><rect x="1182.1" y="549" width="4.0" height="15.0" fill="rgb(231,125,45)" rx="2" ry="2" />
<text  x="1185.13" y="559.5" ></text>
</g>
<g >
<title>map_id_up (1,333,333 samples, 0.33%)</title><rect x="367.9" y="453" width="4.0" height="15.0" fill="rgb(235,189,43)" rx="2" ry="2" />
<text  x="370.93" y="463.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,666,666 samples, 0.67%)</title><rect x="13.9" y="645" width="7.9" height="15.0" fill="rgb(250,64,0)" rx="2" ry="2" />
<text  x="16.93" y="655.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.33%)</title><rect x="914.7" y="309" width="3.9" height="15.0" fill="rgb(245,124,51)" rx="2" ry="2" />
<text  x="917.67" y="319.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.33%)</title><rect x="847.8" y="261" width="3.9" height="15.0" fill="rgb(246,83,54)" rx="2" ry="2" />
<text  x="850.80" y="271.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (1,333,333 samples, 0.33%)</title><rect x="576.4" y="133" width="3.9" height="15.0" fill="rgb(234,181,7)" rx="2" ry="2" />
<text  x="579.40" y="143.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1,333,333 samples, 0.33%)</title><rect x="1154.6" y="581" width="3.9" height="15.0" fill="rgb(218,18,9)" rx="2" ry="2" />
<text  x="1157.60" y="591.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1,333,333 samples, 0.33%)</title><rect x="482.0" y="373" width="3.9" height="15.0" fill="rgb(252,92,18)" rx="2" ry="2" />
<text  x="485.00" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.33%)</title><rect x="29.7" y="597" width="3.9" height="15.0" fill="rgb(206,109,25)" rx="2" ry="2" />
<text  x="32.67" y="607.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::TableBuilder (3,999,999 samples, 1.00%)</title><rect x="662.9" y="421" width="11.8" height="15.0" fill="rgb(205,75,2)" rx="2" ry="2" />
<text  x="665.93" y="431.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1,333,333 samples, 0.33%)</title><rect x="1158.5" y="693" width="4.0" height="15.0" fill="rgb(212,174,10)" rx="2" ry="2" />
<text  x="1161.53" y="703.5" ></text>
</g>
<g >
<title>ext4_mb_new_blocks (2,666,666 samples, 0.67%)</title><rect x="297.1" y="469" width="7.9" height="15.0" fill="rgb(238,37,24)" rx="2" ry="2" />
<text  x="300.13" y="479.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (13,333,330 samples, 3.33%)</title><rect x="411.2" y="661" width="39.3" height="15.0" fill="rgb(208,15,4)" rx="2" ry="2" />
<text  x="414.20" y="671.5" >std..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (122,666,636 samples, 30.67%)</title><rect x="33.6" y="661" width="361.9" height="15.0" fill="rgb(237,225,4)" rx="2" ry="2" />
<text  x="36.60" y="671.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (2,666,666 samples, 0.67%)</title><rect x="521.3" y="325" width="7.9" height="15.0" fill="rgb(241,210,32)" rx="2" ry="2" />
<text  x="524.33" y="335.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (1,333,333 samples, 0.33%)</title><rect x="485.9" y="373" width="4.0" height="15.0" fill="rgb(224,10,24)" rx="2" ry="2" />
<text  x="488.93" y="383.5" ></text>
</g>
<g >
<title>ksys_read (1,333,333 samples, 0.33%)</title><rect x="1182.1" y="629" width="4.0" height="15.0" fill="rgb(206,111,43)" rx="2" ry="2" />
<text  x="1185.13" y="639.5" ></text>
</g>
<g >
<title>ext4_group_desc_csum_set (1,333,333 samples, 0.33%)</title><rect x="301.1" y="437" width="3.9" height="15.0" fill="rgb(206,175,1)" rx="2" ry="2" />
<text  x="304.07" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1,333,333 samples, 0.33%)</title><rect x="1060.2" y="405" width="3.9" height="15.0" fill="rgb(227,224,3)" rx="2" ry="2" />
<text  x="1063.20" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::resize (3,999,999 samples, 1.00%)</title><rect x="662.9" y="389" width="11.8" height="15.0" fill="rgb(241,96,33)" rx="2" ry="2" />
<text  x="665.93" y="399.5" ></text>
</g>
<g >
<title>leveldb::test::CompressibleString (9,333,331 samples, 2.33%)</title><rect x="686.5" y="485" width="27.6" height="15.0" fill="rgb(254,174,29)" rx="2" ry="2" />
<text  x="689.53" y="495.5" >l..</text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, false, true&gt;::operator (1,333,333 samples, 0.33%)</title><rect x="541.0" y="341" width="3.9" height="15.0" fill="rgb(221,63,42)" rx="2" ry="2" />
<text  x="544.00" y="351.5" ></text>
</g>
<g >
<title>__x64_sys_write (1,333,333 samples, 0.33%)</title><rect x="33.6" y="645" width="3.9" height="15.0" fill="rgb(216,184,45)" rx="2" ry="2" />
<text  x="36.60" y="655.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::MaybeScheduleCompaction (1,333,333 samples, 0.33%)</title><rect x="725.9" y="453" width="3.9" height="15.0" fill="rgb(219,86,2)" rx="2" ry="2" />
<text  x="728.87" y="463.5" ></text>
</g>
<g >
<title>leveldb::EncodeVarint32 (2,666,666 samples, 0.67%)</title><rect x="489.9" y="373" width="7.8" height="15.0" fill="rgb(222,158,40)" rx="2" ry="2" />
<text  x="492.87" y="383.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::~promise (9,333,331 samples, 2.33%)</title><rect x="1087.7" y="485" width="27.6" height="15.0" fill="rgb(239,199,50)" rx="2" ry="2" />
<text  x="1090.73" y="495.5" >s..</text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1,333,333 samples, 0.33%)</title><rect x="749.5" y="341" width="3.9" height="15.0" fill="rgb(242,39,35)" rx="2" ry="2" />
<text  x="752.47" y="351.5" ></text>
</g>
<g >
<title>get_signal (2,666,666 samples, 0.67%)</title><rect x="1170.3" y="629" width="7.9" height="15.0" fill="rgb(228,16,21)" rx="2" ry="2" />
<text  x="1173.33" y="639.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (7,999,998 samples, 2.00%)</title><rect x="521.3" y="389" width="23.6" height="15.0" fill="rgb(245,16,14)" rx="2" ry="2" />
<text  x="524.33" y="399.5" >l..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1,333,333 samples, 0.33%)</title><rect x="568.5" y="389" width="4.0" height="15.0" fill="rgb(234,153,7)" rx="2" ry="2" />
<text  x="571.53" y="399.5" ></text>
</g>
<g >
<title>__do_page_fault (2,666,666 samples, 0.67%)</title><rect x="666.9" y="229" width="7.8" height="15.0" fill="rgb(240,141,25)" rx="2" ry="2" />
<text  x="669.87" y="239.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.33%)</title><rect x="678.7" y="485" width="3.9" height="15.0" fill="rgb(228,25,27)" rx="2" ry="2" />
<text  x="681.67" y="495.5" ></text>
</g>
<g >
<title>mutex_lock (3,999,999 samples, 1.00%)</title><rect x="603.9" y="181" width="11.8" height="15.0" fill="rgb(228,12,6)" rx="2" ry="2" />
<text  x="606.93" y="191.5" ></text>
</g>
<g >
<title>__GI___unlink (1,333,333 samples, 0.33%)</title><rect x="29.7" y="613" width="3.9" height="15.0" fill="rgb(209,164,25)" rx="2" ry="2" />
<text  x="32.67" y="623.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (6,666,665 samples, 1.67%)</title><rect x="415.1" y="549" width="19.7" height="15.0" fill="rgb(251,101,23)" rx="2" ry="2" />
<text  x="418.13" y="559.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BackgroundCall (70,666,649 samples, 17.67%)</title><rect x="466.3" y="501" width="208.4" height="15.0" fill="rgb(218,203,48)" rx="2" ry="2" />
<text  x="469.27" y="511.5" >leveldb::DBImpl::Background..</text>
</g>
<g >
<title>leveldb::Slice::size (2,666,666 samples, 0.67%)</title><rect x="926.5" y="325" width="7.8" height="15.0" fill="rgb(222,172,12)" rx="2" ry="2" />
<text  x="929.47" y="335.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (1,333,333 samples, 0.33%)</title><rect x="564.6" y="309" width="3.9" height="15.0" fill="rgb(249,101,42)" rx="2" ry="2" />
<text  x="567.60" y="319.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (1,333,333 samples, 0.33%)</title><rect x="670.8" y="181" width="3.9" height="15.0" fill="rgb(227,13,19)" rx="2" ry="2" />
<text  x="673.80" y="191.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (1,333,333 samples, 0.33%)</title><rect x="517.4" y="389" width="3.9" height="15.0" fill="rgb(222,188,48)" rx="2" ry="2" />
<text  x="520.40" y="399.5" ></text>
</g>
<g >
<title>ext4_map_blocks (1,333,333 samples, 0.33%)</title><rect x="584.3" y="197" width="3.9" height="15.0" fill="rgb(216,223,54)" rx="2" ry="2" />
<text  x="587.27" y="207.5" ></text>
</g>
<g >
<title>mutex_spin_on_owner (2,666,666 samples, 0.67%)</title><rect x="607.9" y="133" width="7.8" height="15.0" fill="rgb(216,87,36)" rx="2" ry="2" />
<text  x="610.87" y="143.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::Count (1,333,333 samples, 0.33%)</title><rect x="957.9" y="437" width="4.0" height="15.0" fill="rgb(233,37,38)" rx="2" ry="2" />
<text  x="960.93" y="447.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (1,333,333 samples, 0.33%)</title><rect x="749.5" y="357" width="3.9" height="15.0" fill="rgb(212,183,54)" rx="2" ry="2" />
<text  x="752.47" y="367.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::tuple&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*&amp;, std::__future_base::_Result_base::_Deleter, true&gt; (1,333,333 samples, 0.33%)</title><rect x="423.0" y="485" width="3.9" height="15.0" fill="rgb(213,55,26)" rx="2" ry="2" />
<text  x="426.00" y="495.5" ></text>
</g>
<g >
<title>seq_vprintf (1,333,333 samples, 0.33%)</title><rect x="1182.1" y="517" width="4.0" height="15.0" fill="rgb(228,25,7)" rx="2" ry="2" />
<text  x="1185.13" y="527.5" ></text>
</g>
<g >
<title>unmap_page_range (1,333,333 samples, 0.33%)</title><rect x="1174.3" y="517" width="3.9" height="15.0" fill="rgb(231,162,9)" rx="2" ry="2" />
<text  x="1177.27" y="527.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (18,666,662 samples, 4.67%)</title><rect x="800.6" y="341" width="55.1" height="15.0" fill="rgb(241,54,49)" rx="2" ry="2" />
<text  x="803.60" y="351.5" >level..</text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (3,999,999 samples, 1.00%)</title><rect x="887.1" y="325" width="11.8" height="15.0" fill="rgb(240,27,40)" rx="2" ry="2" />
<text  x="890.13" y="335.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (1,333,333 samples, 0.33%)</title><rect x="938.3" y="389" width="3.9" height="15.0" fill="rgb(214,173,15)" rx="2" ry="2" />
<text  x="941.27" y="399.5" ></text>
</g>
<g >
<title>submit_bio_wait (11,999,997 samples, 3.00%)</title><rect x="305.0" y="453" width="35.4" height="15.0" fill="rgb(235,61,45)" rx="2" ry="2" />
<text  x="308.00" y="463.5" >sub..</text>
</g>
<g >
<title>rb_next (1,333,333 samples, 0.33%)</title><rect x="21.8" y="581" width="3.9" height="15.0" fill="rgb(215,146,31)" rx="2" ry="2" />
<text  x="24.80" y="591.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__future_base::_State_baseV2&gt;::~allocator (1,333,333 samples, 0.33%)</title><rect x="1075.9" y="373" width="4.0" height="15.0" fill="rgb(229,213,35)" rx="2" ry="2" />
<text  x="1078.93" y="383.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (25,333,327 samples, 6.33%)</title><rect x="588.2" y="357" width="74.7" height="15.0" fill="rgb(228,200,17)" rx="2" ry="2" />
<text  x="591.20" y="367.5" >swapgs_r..</text>
</g>
<g >
<title>leveldb::crc32c::Extend (2,666,666 samples, 0.67%)</title><rect x="560.7" y="341" width="7.8" height="15.0" fill="rgb(208,83,36)" rx="2" ry="2" />
<text  x="563.67" y="351.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1,333,333 samples, 0.33%)</title><rect x="1056.3" y="437" width="3.9" height="15.0" fill="rgb(225,130,9)" rx="2" ry="2" />
<text  x="1059.27" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (3,999,999 samples, 1.00%)</title><rect x="544.9" y="357" width="11.8" height="15.0" fill="rgb(216,210,9)" rx="2" ry="2" />
<text  x="547.93" y="367.5" ></text>
</g>
<g >
<title>hash_futex (1,333,333 samples, 0.33%)</title><rect x="407.3" y="597" width="3.9" height="15.0" fill="rgb(215,53,54)" rx="2" ry="2" />
<text  x="410.27" y="607.5" ></text>
</g>
<g >
<title>leveldb::Random::Next (2,666,666 samples, 0.67%)</title><rect x="698.3" y="437" width="7.9" height="15.0" fill="rgb(226,186,46)" rx="2" ry="2" />
<text  x="701.33" y="447.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt;::operator (5,333,332 samples, 1.33%)</title><rect x="415.1" y="533" width="15.8" height="15.0" fill="rgb(214,157,20)" rx="2" ry="2" />
<text  x="418.13" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (3,999,999 samples, 1.00%)</title><rect x="544.9" y="341" width="11.8" height="15.0" fill="rgb(213,217,12)" rx="2" ry="2" />
<text  x="547.93" y="351.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (2,666,666 samples, 0.67%)</title><rect x="1056.3" y="453" width="7.8" height="15.0" fill="rgb(236,19,0)" rx="2" ry="2" />
<text  x="1059.27" y="463.5" ></text>
</g>
<g >
<title>ext4_mark_iloc_dirty (1,333,333 samples, 0.33%)</title><rect x="29.7" y="373" width="3.9" height="15.0" fill="rgb(208,180,53)" rx="2" ry="2" />
<text  x="32.67" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;char*, unsigned long&gt; (3,999,999 samples, 1.00%)</title><rect x="662.9" y="341" width="11.8" height="15.0" fill="rgb(226,34,25)" rx="2" ry="2" />
<text  x="665.93" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (1,333,333 samples, 0.33%)</title><rect x="430.9" y="533" width="3.9" height="15.0" fill="rgb(229,19,26)" rx="2" ry="2" />
<text  x="433.87" y="543.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.33%)</title><rect x="450.5" y="613" width="4.0" height="15.0" fill="rgb(241,155,30)" rx="2" ry="2" />
<text  x="453.53" y="623.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1,333,333 samples, 0.33%)</title><rect x="525.3" y="181" width="3.9" height="15.0" fill="rgb(221,71,27)" rx="2" ry="2" />
<text  x="528.27" y="191.5" ></text>
</g>
<g >
<title>__wake_up (1,333,333 samples, 0.33%)</title><rect x="285.3" y="469" width="4.0" height="15.0" fill="rgb(221,182,33)" rx="2" ry="2" />
<text  x="288.33" y="479.5" ></text>
</g>
<g >
<title>__x64_sys_clone (1,333,333 samples, 0.33%)</title><rect x="725.9" y="357" width="3.9" height="15.0" fill="rgb(226,209,13)" rx="2" ry="2" />
<text  x="728.87" y="367.5" ></text>
</g>
<g >
<title>complete (2,666,666 samples, 0.67%)</title><rect x="305.0" y="357" width="7.9" height="15.0" fill="rgb(227,220,50)" rx="2" ry="2" />
<text  x="308.00" y="367.5" ></text>
</g>
<g >
<title>dax_iomap_actor (75,999,981 samples, 19.00%)</title><rect x="49.3" y="517" width="224.2" height="15.0" fill="rgb(217,167,13)" rx="2" ry="2" />
<text  x="52.33" y="527.5" >dax_iomap_actor</text>
</g>
<g >
<title>rebalance_domains (1,333,333 samples, 0.33%)</title><rect x="847.8" y="229" width="3.9" height="15.0" fill="rgb(215,86,41)" rx="2" ry="2" />
<text  x="850.80" y="239.5" ></text>
</g>
<g >
<title>ext4_iomap_begin (22,666,661 samples, 5.67%)</title><rect x="273.5" y="517" width="66.9" height="15.0" fill="rgb(206,192,13)" rx="2" ry="2" />
<text  x="276.53" y="527.5" >ext4_io..</text>
</g>
<g >
<title>__x64_sys_mprotect (1,333,333 samples, 0.33%)</title><rect x="450.5" y="597" width="4.0" height="15.0" fill="rgb(249,15,25)" rx="2" ry="2" />
<text  x="453.53" y="607.5" ></text>
</g>
<g >
<title>iomap_apply (113,333,305 samples, 28.33%)</title><rect x="49.3" y="533" width="334.4" height="15.0" fill="rgb(212,77,21)" rx="2" ry="2" />
<text  x="52.33" y="543.5" >iomap_apply</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (222,666,611 samples, 55.67%)</title><rect x="466.3" y="677" width="656.8" height="15.0" fill="rgb(244,150,32)" rx="2" ry="2" />
<text  x="469.27" y="687.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>ext4_issue_zeroout (1,333,333 samples, 0.33%)</title><rect x="584.3" y="181" width="3.9" height="15.0" fill="rgb(222,105,17)" rx="2" ry="2" />
<text  x="587.27" y="191.5" ></text>
</g>
<g >
<title>page_fault (5,333,332 samples, 1.33%)</title><rect x="1131.0" y="661" width="15.7" height="15.0" fill="rgb(221,74,27)" rx="2" ry="2" />
<text  x="1134.00" y="671.5" ></text>
</g>
<g >
<title>ext4_inode_csum.isra.59 (2,666,666 samples, 0.67%)</title><rect x="360.1" y="453" width="7.8" height="15.0" fill="rgb(240,94,19)" rx="2" ry="2" />
<text  x="363.07" y="463.5" ></text>
</g>
<g >
<title>ext4_claim_free_clusters (1,333,333 samples, 0.33%)</title><rect x="293.2" y="469" width="3.9" height="15.0" fill="rgb(214,104,51)" rx="2" ry="2" />
<text  x="296.20" y="479.5" ></text>
</g>
<g >
<title>std::fill_n&lt;char*, unsigned long, char&gt; (3,999,999 samples, 1.00%)</title><rect x="662.9" y="309" width="11.8" height="15.0" fill="rgb(245,109,17)" rx="2" ry="2" />
<text  x="665.93" y="319.5" ></text>
</g>
<g >
<title>_copy_from_iter (1,333,333 samples, 0.33%)</title><rect x="635.4" y="149" width="3.9" height="15.0" fill="rgb(219,7,33)" rx="2" ry="2" />
<text  x="638.40" y="159.5" ></text>
</g>
<g >
<title>dump_skip (15,999,996 samples, 4.00%)</title><rect x="615.7" y="245" width="47.2" height="15.0" fill="rgb(231,112,37)" rx="2" ry="2" />
<text  x="618.73" y="255.5" >dump..</text>
</g>
<g >
<title>pipe_write (11,999,997 samples, 3.00%)</title><rect x="623.6" y="181" width="35.4" height="15.0" fill="rgb(225,166,51)" rx="2" ry="2" />
<text  x="626.60" y="191.5" >pi..</text>
</g>
<g >
<title>proc_reg_open (2,666,666 samples, 0.67%)</title><rect x="13.9" y="533" width="7.9" height="15.0" fill="rgb(254,39,25)" rx="2" ry="2" />
<text  x="16.93" y="543.5" ></text>
</g>
<g >
<title>do_dentry_open (2,666,666 samples, 0.67%)</title><rect x="13.9" y="549" width="7.9" height="15.0" fill="rgb(239,40,54)" rx="2" ry="2" />
<text  x="16.93" y="559.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (222,666,611 samples, 55.67%)</title><rect x="466.3" y="613" width="656.8" height="15.0" fill="rgb(222,43,49)" rx="2" ry="2" />
<text  x="469.27" y="623.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>call_timer_fn (1,333,333 samples, 0.33%)</title><rect x="336.5" y="261" width="3.9" height="15.0" fill="rgb(252,173,32)" rx="2" ry="2" />
<text  x="339.47" y="271.5" ></text>
</g>
<g >
<title>__do_page_fault (5,333,332 samples, 1.33%)</title><rect x="1131.0" y="629" width="15.7" height="15.0" fill="rgb(253,101,0)" rx="2" ry="2" />
<text  x="1134.00" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (1,333,333 samples, 0.33%)</title><rect x="710.1" y="453" width="4.0" height="15.0" fill="rgb(228,92,44)" rx="2" ry="2" />
<text  x="713.13" y="463.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.33%)</title><rect x="301.1" y="309" width="3.9" height="15.0" fill="rgb(207,152,0)" rx="2" ry="2" />
<text  x="304.07" y="319.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::FlushBuffer (3,999,999 samples, 1.00%)</title><rect x="973.7" y="421" width="11.8" height="15.0" fill="rgb(231,155,26)" rx="2" ry="2" />
<text  x="976.67" y="431.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (7,999,998 samples, 2.00%)</title><rect x="1091.7" y="421" width="23.6" height="15.0" fill="rgb(215,17,6)" rx="2" ry="2" />
<text  x="1094.67" y="431.5" >s..</text>
</g>
<g >
<title>try_charge (1,333,333 samples, 0.33%)</title><rect x="670.8" y="165" width="3.9" height="15.0" fill="rgb(209,73,44)" rx="2" ry="2" />
<text  x="673.80" y="175.5" ></text>
</g>
<g >
<title>ext4_ext_map_blocks (3,999,999 samples, 1.00%)</title><rect x="293.2" y="485" width="11.8" height="15.0" fill="rgb(241,219,13)" rx="2" ry="2" />
<text  x="296.20" y="495.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::~shared_ptr (1,333,333 samples, 0.33%)</title><rect x="1064.1" y="453" width="4.0" height="15.0" fill="rgb(208,113,11)" rx="2" ry="2" />
<text  x="1067.13" y="463.5" ></text>
</g>
<g >
<title>operator new[] (1,333,333 samples, 0.33%)</title><rect x="1178.2" y="693" width="3.9" height="15.0" fill="rgb(217,76,11)" rx="2" ry="2" />
<text  x="1181.20" y="703.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (5,333,332 samples, 1.33%)</title><rect x="1072.0" y="405" width="15.7" height="15.0" fill="rgb(239,116,3)" rx="2" ry="2" />
<text  x="1075.00" y="415.5" ></text>
</g>
<g >
<title>leveldb::Status::~Status (1,333,333 samples, 0.33%)</title><rect x="985.5" y="437" width="3.9" height="15.0" fill="rgb(215,177,47)" rx="2" ry="2" />
<text  x="988.47" y="447.5" ></text>
</g>
<g >
<title>leveldb::MemTable::Add (73,333,315 samples, 18.33%)</title><rect x="737.7" y="421" width="216.3" height="15.0" fill="rgb(244,111,50)" rx="2" ry="2" />
<text  x="740.67" y="431.5" >leveldb::MemTable::Add</text>
</g>
<g >
<title>leveldb::Status::operator= (1,333,333 samples, 0.33%)</title><rect x="729.8" y="469" width="3.9" height="15.0" fill="rgb(230,196,33)" rx="2" ry="2" />
<text  x="732.80" y="479.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (25,333,327 samples, 6.33%)</title><rect x="588.2" y="341" width="74.7" height="15.0" fill="rgb(219,25,28)" rx="2" ry="2" />
<text  x="591.20" y="351.5" >prepare_..</text>
</g>
<g >
<title>memcpy_flushcache (9,333,331 samples, 2.33%)</title><rect x="312.9" y="357" width="27.5" height="15.0" fill="rgb(232,57,25)" rx="2" ry="2" />
<text  x="315.87" y="367.5" >m..</text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1,333,333 samples, 0.33%)</title><rect x="1162.5" y="693" width="3.9" height="15.0" fill="rgb(234,26,40)" rx="2" ry="2" />
<text  x="1165.47" y="703.5" ></text>
</g>
<g >
<title>do_coredump (25,333,327 samples, 6.33%)</title><rect x="588.2" y="277" width="74.7" height="15.0" fill="rgb(218,183,27)" rx="2" ry="2" />
<text  x="591.20" y="287.5" >do_cored..</text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.33%)</title><rect x="525.3" y="261" width="3.9" height="15.0" fill="rgb(254,223,11)" rx="2" ry="2" />
<text  x="528.27" y="271.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadNodeMain (70,666,649 samples, 17.67%)</title><rect x="466.3" y="533" width="208.4" height="15.0" fill="rgb(213,129,22)" rx="2" ry="2" />
<text  x="469.27" y="543.5" >leveldb::(anonymous namespa..</text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.33%)</title><rect x="761.3" y="341" width="3.9" height="15.0" fill="rgb(244,37,42)" rx="2" ry="2" />
<text  x="764.27" y="351.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (1,333,333 samples, 0.33%)</title><rect x="1170.3" y="549" width="4.0" height="15.0" fill="rgb(220,173,39)" rx="2" ry="2" />
<text  x="1173.33" y="559.5" ></text>
</g>
<g >
<title>__x64_sys_write (118,666,637 samples, 29.67%)</title><rect x="37.5" y="629" width="350.1" height="15.0" fill="rgb(208,204,15)" rx="2" ry="2" />
<text  x="40.53" y="639.5" >__x64_sys_write</text>
</g>
<g >
<title>leveldb::Slice::size (2,666,666 samples, 0.67%)</title><rect x="918.6" y="309" width="7.9" height="15.0" fill="rgb(245,105,22)" rx="2" ry="2" />
<text  x="921.60" y="319.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (3,999,999 samples, 1.00%)</title><rect x="662.9" y="277" width="11.8" height="15.0" fill="rgb(241,54,16)" rx="2" ry="2" />
<text  x="665.93" y="287.5" ></text>
</g>
<g >
<title>__kernel_write (7,999,998 samples, 2.00%)</title><rect x="592.1" y="229" width="23.6" height="15.0" fill="rgb(248,214,14)" rx="2" ry="2" />
<text  x="595.13" y="239.5" >_..</text>
</g>
<g >
<title>free_unref_page_list (1,333,333 samples, 0.33%)</title><rect x="1170.3" y="469" width="4.0" height="15.0" fill="rgb(253,55,37)" rx="2" ry="2" />
<text  x="1173.33" y="479.5" ></text>
</g>
<g >
<title>jbd2_alloc (1,333,333 samples, 0.33%)</title><rect x="379.7" y="421" width="4.0" height="15.0" fill="rgb(235,45,41)" rx="2" ry="2" />
<text  x="382.73" y="431.5" ></text>
</g>
<g >
<title>crc32c_pcl_intel_update (1,333,333 samples, 0.33%)</title><rect x="301.1" y="389" width="3.9" height="15.0" fill="rgb(242,177,28)" rx="2" ry="2" />
<text  x="304.07" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__future_base::_State_baseV2&gt;::construct&lt;std::__future_base::_State_baseV2&gt; (1,333,333 samples, 0.33%)</title><rect x="1079.9" y="357" width="3.9" height="15.0" fill="rgb(213,40,13)" rx="2" ry="2" />
<text  x="1082.87" y="367.5" ></text>
</g>
<g >
<title>ext4_mark_iloc_dirty (9,333,331 samples, 2.33%)</title><rect x="352.2" y="485" width="27.5" height="15.0" fill="rgb(241,66,7)" rx="2" ry="2" />
<text  x="355.20" y="495.5" >e..</text>
</g>
<g >
<title>perf_iterate_ctx (1,333,333 samples, 0.33%)</title><rect x="450.5" y="517" width="4.0" height="15.0" fill="rgb(249,124,48)" rx="2" ry="2" />
<text  x="453.53" y="527.5" ></text>
</g>
<g >
<title>leveldb::log::Writer::AddRecord (25,333,327 samples, 6.33%)</title><rect x="961.9" y="469" width="74.7" height="15.0" fill="rgb(211,223,52)" rx="2" ry="2" />
<text  x="964.87" y="479.5" >leveldb:..</text>
</g>
<g >
<title>rcu_gp_kthread_wake (1,333,333 samples, 0.33%)</title><rect x="438.7" y="421" width="4.0" height="15.0" fill="rgb(242,72,8)" rx="2" ry="2" />
<text  x="441.73" y="431.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1,333,333 samples, 0.33%)</title><rect x="1154.6" y="597" width="3.9" height="15.0" fill="rgb(236,226,50)" rx="2" ry="2" />
<text  x="1157.60" y="607.5" ></text>
</g>
<g >
<title>pmem_memcpy (5,333,332 samples, 1.33%)</title><rect x="572.5" y="405" width="15.7" height="15.0" fill="rgb(215,64,19)" rx="2" ry="2" />
<text  x="575.47" y="415.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2,666,666 samples, 0.67%)</title><rect x="1150.7" y="693" width="7.8" height="15.0" fill="rgb(217,167,14)" rx="2" ry="2" />
<text  x="1153.67" y="703.5" ></text>
</g>
<g >
<title>_IO_vsnprintf (1,333,333 samples, 0.33%)</title><rect x="10.0" y="677" width="3.9" height="15.0" fill="rgb(250,13,28)" rx="2" ry="2" />
<text  x="13.00" y="687.5" ></text>
</g>
<g >
<title>unmap_vmas (1,333,333 samples, 0.33%)</title><rect x="1174.3" y="549" width="3.9" height="15.0" fill="rgb(226,52,29)" rx="2" ry="2" />
<text  x="1177.27" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (1,333,333 samples, 0.33%)</title><rect x="552.8" y="277" width="3.9" height="15.0" fill="rgb(253,228,2)" rx="2" ry="2" />
<text  x="555.80" y="287.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.33%)</title><rect x="576.4" y="117" width="3.9" height="15.0" fill="rgb(216,115,7)" rx="2" ry="2" />
<text  x="579.40" y="127.5" ></text>
</g>
<g >
<title>bio_endio (2,666,666 samples, 0.67%)</title><rect x="305.0" y="389" width="7.9" height="15.0" fill="rgb(223,179,36)" rx="2" ry="2" />
<text  x="308.00" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_default_append (3,999,999 samples, 1.00%)</title><rect x="662.9" y="373" width="11.8" height="15.0" fill="rgb(226,221,36)" rx="2" ry="2" />
<text  x="665.93" y="383.5" ></text>
</g>
<g >
<title>generic_make_request (1,333,333 samples, 0.33%)</title><rect x="584.3" y="117" width="3.9" height="15.0" fill="rgb(207,204,26)" rx="2" ry="2" />
<text  x="587.27" y="127.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadNodeEntryPoint (70,666,649 samples, 17.67%)</title><rect x="466.3" y="549" width="208.4" height="15.0" fill="rgb(242,100,5)" rx="2" ry="2" />
<text  x="469.27" y="559.5" >leveldb::(anonymous namespa..</text>
</g>
<g >
<title>update_blocked_averages (1,333,333 samples, 0.33%)</title><rect x="761.3" y="293" width="3.9" height="15.0" fill="rgb(222,91,9)" rx="2" ry="2" />
<text  x="764.27" y="303.5" ></text>
</g>
<g >
<title>alloc_pages_current (3,999,999 samples, 1.00%)</title><rect x="623.6" y="165" width="11.8" height="15.0" fill="rgb(217,191,6)" rx="2" ry="2" />
<text  x="626.60" y="175.5" ></text>
</g>
<g >
<title>ext4_dax_fault (3,999,999 samples, 1.00%)</title><rect x="576.4" y="261" width="11.8" height="15.0" fill="rgb(210,66,10)" rx="2" ry="2" />
<text  x="579.40" y="271.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (2,666,666 samples, 0.67%)</title><rect x="623.6" y="149" width="7.9" height="15.0" fill="rgb(244,16,53)" rx="2" ry="2" />
<text  x="626.60" y="159.5" ></text>
</g>
<g >
<title>leveldb::Arena::AllocateAligned (1,333,333 samples, 0.33%)</title><rect x="942.2" y="373" width="3.9" height="15.0" fill="rgb(247,168,47)" rx="2" ry="2" />
<text  x="945.20" y="383.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (2,666,666 samples, 0.67%)</title><rect x="560.7" y="325" width="7.8" height="15.0" fill="rgb(210,200,47)" rx="2" ry="2" />
<text  x="563.67" y="335.5" ></text>
</g>
<g >
<title>leveldb::MemTable::KeyComparator::operator (49,333,321 samples, 12.33%)</title><rect x="788.8" y="357" width="145.5" height="15.0" fill="rgb(223,175,8)" rx="2" ry="2" />
<text  x="791.80" y="367.5" >leveldb::MemTable:..</text>
</g>
<g >
<title>new_slab (1,333,333 samples, 0.33%)</title><rect x="725.9" y="197" width="3.9" height="15.0" fill="rgb(228,20,27)" rx="2" ry="2" />
<text  x="728.87" y="207.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.33%)</title><rect x="847.8" y="309" width="3.9" height="15.0" fill="rgb(209,99,4)" rx="2" ry="2" />
<text  x="850.80" y="319.5" ></text>
</g>
<g >
<title>do_unlinkat (1,333,333 samples, 0.33%)</title><rect x="29.7" y="549" width="3.9" height="15.0" fill="rgb(238,19,37)" rx="2" ry="2" />
<text  x="32.67" y="559.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::RandomHeight (1,333,333 samples, 0.33%)</title><rect x="950.1" y="389" width="3.9" height="15.0" fill="rgb(213,44,44)" rx="2" ry="2" />
<text  x="953.07" y="399.5" ></text>
</g>
<g >
<title>vfs_read (1,333,333 samples, 0.33%)</title><rect x="1182.1" y="613" width="4.0" height="15.0" fill="rgb(207,16,37)" rx="2" ry="2" />
<text  x="1185.13" y="623.5" ></text>
</g>
<g >
<title>pmem_make_request (1,333,333 samples, 0.33%)</title><rect x="584.3" y="101" width="3.9" height="15.0" fill="rgb(245,207,49)" rx="2" ry="2" />
<text  x="587.27" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (1,333,333 samples, 0.33%)</title><rect x="525.3" y="293" width="3.9" height="15.0" fill="rgb(210,222,6)" rx="2" ry="2" />
<text  x="528.27" y="303.5" ></text>
</g>
<g >
<title>ext4_reserve_inode_write (1,333,333 samples, 0.33%)</title><rect x="379.7" y="485" width="4.0" height="15.0" fill="rgb(227,82,8)" rx="2" ry="2" />
<text  x="382.73" y="495.5" ></text>
</g>
<g >
<title>leveldb::MemHashTableValue::MemHashTableValue (1,333,333 samples, 0.33%)</title><rect x="556.7" y="389" width="4.0" height="15.0" fill="rgb(213,3,35)" rx="2" ry="2" />
<text  x="559.73" y="399.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.33%)</title><rect x="1072.0" y="373" width="3.9" height="15.0" fill="rgb(230,119,25)" rx="2" ry="2" />
<text  x="1075.00" y="383.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (222,666,611 samples, 55.67%)</title><rect x="466.3" y="581" width="656.8" height="15.0" fill="rgb(244,102,24)" rx="2" ry="2" />
<text  x="469.27" y="591.5" >std::__invoke&lt;void </text>
</g>
<g >
<title>std::call_once&lt;void  (13,333,330 samples, 3.33%)</title><rect x="411.2" y="645" width="39.3" height="15.0" fill="rgb(238,94,8)" rx="2" ry="2" />
<text  x="414.20" y="655.5" >std..</text>
</g>
<g >
<title>handle_mm_fault (2,666,666 samples, 0.67%)</title><rect x="666.9" y="213" width="7.8" height="15.0" fill="rgb(233,158,11)" rx="2" ry="2" />
<text  x="669.87" y="223.5" ></text>
</g>
<g >
<title>perf_event_alloc (1,333,333 samples, 0.33%)</title><rect x="725.9" y="261" width="3.9" height="15.0" fill="rgb(213,79,54)" rx="2" ry="2" />
<text  x="728.87" y="271.5" ></text>
</g>
<g >
<title>smp_call_function_single (2,666,666 samples, 0.67%)</title><rect x="13.9" y="469" width="7.9" height="15.0" fill="rgb(214,29,13)" rx="2" ry="2" />
<text  x="16.93" y="479.5" ></text>
</g>
<g >
<title>__ext4_journal_start_sb (3,999,999 samples, 1.00%)</title><rect x="273.5" y="501" width="11.8" height="15.0" fill="rgb(206,206,43)" rx="2" ry="2" />
<text  x="276.53" y="511.5" ></text>
</g>
<g >
<title>get_page_from_freelist (2,666,666 samples, 0.67%)</title><rect x="623.6" y="133" width="7.9" height="15.0" fill="rgb(228,21,29)" rx="2" ry="2" />
<text  x="626.60" y="143.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (9,333,331 samples, 2.33%)</title><rect x="898.9" y="325" width="27.6" height="15.0" fill="rgb(245,33,42)" rx="2" ry="2" />
<text  x="901.93" y="335.5" >l..</text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.33%)</title><rect x="1158.5" y="645" width="4.0" height="15.0" fill="rgb(216,36,42)" rx="2" ry="2" />
<text  x="1161.53" y="655.5" ></text>
</g>
<g >
<title>cpuinfo_open (2,666,666 samples, 0.67%)</title><rect x="13.9" y="517" width="7.9" height="15.0" fill="rgb(222,216,39)" rx="2" ry="2" />
<text  x="16.93" y="527.5" ></text>
</g>
<g >
<title>_do_fork (1,333,333 samples, 0.33%)</title><rect x="725.9" y="341" width="3.9" height="15.0" fill="rgb(218,113,44)" rx="2" ry="2" />
<text  x="728.87" y="351.5" ></text>
</g>
<g >
<title>__do_page_fault (3,999,999 samples, 1.00%)</title><rect x="576.4" y="325" width="11.8" height="15.0" fill="rgb(251,198,50)" rx="2" ry="2" />
<text  x="579.40" y="335.5" ></text>
</g>
<g >
<title>elf_core_dump (25,333,327 samples, 6.33%)</title><rect x="588.2" y="261" width="74.7" height="15.0" fill="rgb(232,78,41)" rx="2" ry="2" />
<text  x="591.20" y="271.5" >elf_core..</text>
</g>
<g >
<title>std::operator&amp; (1,333,333 samples, 0.33%)</title><rect x="934.3" y="357" width="4.0" height="15.0" fill="rgb(205,131,3)" rx="2" ry="2" />
<text  x="937.33" y="367.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::shared_ptr&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt;&gt; (5,333,332 samples, 1.33%)</title><rect x="1072.0" y="437" width="15.7" height="15.0" fill="rgb(209,190,44)" rx="2" ry="2" />
<text  x="1075.00" y="447.5" ></text>
</g>
<g >
<title>ext4_inode_csum_set (2,666,666 samples, 0.67%)</title><rect x="360.1" y="469" width="7.8" height="15.0" fill="rgb(239,19,39)" rx="2" ry="2" />
<text  x="363.07" y="479.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (1,333,333 samples, 0.33%)</title><rect x="934.3" y="373" width="4.0" height="15.0" fill="rgb(208,66,33)" rx="2" ry="2" />
<text  x="937.33" y="383.5" ></text>
</g>
<g >
<title>std::move&lt;std::__future_base::_Result_base::_Deleter&amp;&gt; (1,333,333 samples, 0.33%)</title><rect x="442.7" y="533" width="3.9" height="15.0" fill="rgb(206,71,48)" rx="2" ry="2" />
<text  x="445.67" y="543.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl&lt;std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.33%)</title><rect x="423.0" y="453" width="3.9" height="15.0" fill="rgb(230,112,10)" rx="2" ry="2" />
<text  x="426.00" y="463.5" ></text>
</g>
<g >
<title>proc_reg_read (1,333,333 samples, 0.33%)</title><rect x="1182.1" y="581" width="4.0" height="15.0" fill="rgb(216,216,34)" rx="2" ry="2" />
<text  x="1185.13" y="591.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (1,333,333 samples, 0.33%)</title><rect x="1032.7" y="405" width="3.9" height="15.0" fill="rgb(249,65,10)" rx="2" ry="2" />
<text  x="1035.67" y="415.5" ></text>
</g>
<g >
<title>perf_event_init_task (1,333,333 samples, 0.33%)</title><rect x="725.9" y="309" width="3.9" height="15.0" fill="rgb(244,84,53)" rx="2" ry="2" />
<text  x="728.87" y="319.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_free (1,333,333 samples, 0.33%)</title><rect x="1170.3" y="517" width="4.0" height="15.0" fill="rgb(248,33,37)" rx="2" ry="2" />
<text  x="1173.33" y="527.5" ></text>
</g>
<g >
<title>ext4_truncate (1,333,333 samples, 0.33%)</title><rect x="29.7" y="485" width="3.9" height="15.0" fill="rgb(254,93,42)" rx="2" ry="2" />
<text  x="32.67" y="495.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.33%)</title><rect x="761.3" y="325" width="3.9" height="15.0" fill="rgb(225,225,29)" rx="2" ry="2" />
<text  x="764.27" y="335.5" ></text>
</g>
<g >
<title>jbd2_journal_stop (1,333,333 samples, 0.33%)</title><rect x="285.3" y="485" width="4.0" height="15.0" fill="rgb(242,80,34)" rx="2" ry="2" />
<text  x="288.33" y="495.5" ></text>
</g>
<g >
<title>__handle_mm_fault (3,999,999 samples, 1.00%)</title><rect x="576.4" y="293" width="11.8" height="15.0" fill="rgb(253,154,6)" rx="2" ry="2" />
<text  x="579.40" y="303.5" ></text>
</g>
<g >
<title>jbd2__journal_start (2,666,666 samples, 0.67%)</title><rect x="340.4" y="485" width="7.9" height="15.0" fill="rgb(205,13,5)" rx="2" ry="2" />
<text  x="343.40" y="495.5" ></text>
</g>
<g >
<title>aperfmperf_snapshot_cpu (2,666,666 samples, 0.67%)</title><rect x="13.9" y="485" width="7.9" height="15.0" fill="rgb(231,228,8)" rx="2" ry="2" />
<text  x="16.93" y="495.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (1,333,333 samples, 0.33%)</title><rect x="285.3" y="453" width="4.0" height="15.0" fill="rgb(213,131,6)" rx="2" ry="2" />
<text  x="288.33" y="463.5" ></text>
</g>
<g >
<title>leveldb::Random::OneIn (1,333,333 samples, 0.33%)</title><rect x="950.1" y="373" width="3.9" height="15.0" fill="rgb(215,135,49)" rx="2" ry="2" />
<text  x="953.07" y="383.5" ></text>
</g>
<g >
<title>swake_up (1,333,333 samples, 0.33%)</title><rect x="438.7" y="405" width="4.0" height="15.0" fill="rgb(233,182,44)" rx="2" ry="2" />
<text  x="441.73" y="415.5" ></text>
</g>
<g >
<title>pipe_write (6,666,665 samples, 1.67%)</title><rect x="596.1" y="197" width="19.6" height="15.0" fill="rgb(223,168,54)" rx="2" ry="2" />
<text  x="599.07" y="207.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (5,333,332 samples, 1.33%)</title><rect x="1091.7" y="405" width="15.7" height="15.0" fill="rgb(251,163,21)" rx="2" ry="2" />
<text  x="1094.67" y="415.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (1,333,333 samples, 0.33%)</title><rect x="383.7" y="581" width="3.9" height="15.0" fill="rgb(241,141,25)" rx="2" ry="2" />
<text  x="386.67" y="591.5" ></text>
</g>
<g >
<title>load_balance (1,333,333 samples, 0.33%)</title><rect x="847.8" y="213" width="3.9" height="15.0" fill="rgb(239,38,42)" rx="2" ry="2" />
<text  x="850.80" y="223.5" ></text>
</g>
<g >
<title>arch_tlb_finish_mmu (1,333,333 samples, 0.33%)</title><rect x="1170.3" y="533" width="4.0" height="15.0" fill="rgb(224,47,52)" rx="2" ry="2" />
<text  x="1173.33" y="543.5" ></text>
</g>
<g >
<title>do_syscall_64 (121,333,303 samples, 30.33%)</title><rect x="37.5" y="645" width="358.0" height="15.0" fill="rgb(216,9,46)" rx="2" ry="2" />
<text  x="40.53" y="655.5" >do_syscall_64</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.33%)</title><rect x="21.8" y="661" width="3.9" height="15.0" fill="rgb(205,109,52)" rx="2" ry="2" />
<text  x="24.80" y="671.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.33%)</title><rect x="584.3" y="37" width="3.9" height="15.0" fill="rgb(250,102,40)" rx="2" ry="2" />
<text  x="587.27" y="47.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (2,666,666 samples, 0.67%)</title><rect x="533.1" y="325" width="7.9" height="15.0" fill="rgb(244,182,1)" rx="2" ry="2" />
<text  x="536.13" y="335.5" ></text>
</g>
<g >
<title>dax_iomap_pfn (1,333,333 samples, 0.33%)</title><rect x="580.3" y="213" width="4.0" height="15.0" fill="rgb(244,129,16)" rx="2" ry="2" />
<text  x="583.33" y="223.5" ></text>
</g>
<g >
<title>mutex_lock (6,666,665 samples, 1.67%)</title><rect x="639.3" y="165" width="19.7" height="15.0" fill="rgb(222,114,19)" rx="2" ry="2" />
<text  x="642.33" y="175.5" ></text>
</g>
<g >
<title>map_id_up (2,666,666 samples, 0.67%)</title><rect x="371.9" y="453" width="7.8" height="15.0" fill="rgb(240,38,37)" rx="2" ry="2" />
<text  x="374.87" y="463.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (70,666,649 samples, 17.67%)</title><rect x="745.5" y="405" width="208.5" height="15.0" fill="rgb(219,69,2)" rx="2" ry="2" />
<text  x="748.53" y="415.5" >leveldb::SkipList&lt;char cons..</text>
</g>
<g >
<title>cpumask_next_and (1,333,333 samples, 0.33%)</title><rect x="847.8" y="181" width="3.9" height="15.0" fill="rgb(213,153,1)" rx="2" ry="2" />
<text  x="850.80" y="191.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (5,333,332 samples, 1.33%)</title><rect x="1072.0" y="421" width="15.7" height="15.0" fill="rgb(206,125,3)" rx="2" ry="2" />
<text  x="1075.00" y="431.5" ></text>
</g>
<g >
<title>unmap_single_vma (1,333,333 samples, 0.33%)</title><rect x="1174.3" y="533" width="3.9" height="15.0" fill="rgb(233,194,50)" rx="2" ry="2" />
<text  x="1177.27" y="543.5" ></text>
</g>
<g >
<title>leveldb::BuildTable (70,666,649 samples, 17.67%)</title><rect x="466.3" y="437" width="208.4" height="15.0" fill="rgb(207,17,49)" rx="2" ry="2" />
<text  x="469.27" y="447.5" >leveldb::BuildTable</text>
</g>
<g >
<title>std::make_shared&lt;std::__future_base::_State_baseV2&gt; (5,333,332 samples, 1.33%)</title><rect x="1072.0" y="469" width="15.7" height="15.0" fill="rgb(210,13,14)" rx="2" ry="2" />
<text  x="1075.00" y="479.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.33%)</title><rect x="674.7" y="469" width="4.0" height="15.0" fill="rgb(245,9,23)" rx="2" ry="2" />
<text  x="677.73" y="479.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::Run (2,666,666 samples, 0.67%)</title><rect x="25.7" y="645" width="7.9" height="15.0" fill="rgb(223,78,21)" rx="2" ry="2" />
<text  x="28.73" y="655.5" ></text>
</g>
<g >
<title>leveldb::Status::Status (1,333,333 samples, 0.33%)</title><rect x="1044.5" y="469" width="3.9" height="15.0" fill="rgb(215,34,17)" rx="2" ry="2" />
<text  x="1047.47" y="479.5" ></text>
</g>
<g >
<title>copy_page_from_iter (2,666,666 samples, 0.67%)</title><rect x="596.1" y="181" width="7.8" height="15.0" fill="rgb(234,6,15)" rx="2" ry="2" />
<text  x="599.07" y="191.5" ></text>
</g>
<g >
<title>run_timer_softirq (1,333,333 samples, 0.33%)</title><rect x="336.5" y="277" width="3.9" height="15.0" fill="rgb(251,13,11)" rx="2" ry="2" />
<text  x="339.47" y="287.5" ></text>
</g>
<g >
<title>do_mprotect_pkey (1,333,333 samples, 0.33%)</title><rect x="450.5" y="581" width="4.0" height="15.0" fill="rgb(229,148,41)" rx="2" ry="2" />
<text  x="453.53" y="591.5" ></text>
</g>
<g >
<title>rcu_report_qs_rnp (1,333,333 samples, 0.33%)</title><rect x="438.7" y="437" width="4.0" height="15.0" fill="rgb(208,52,49)" rx="2" ry="2" />
<text  x="441.73" y="447.5" ></text>
</g>
<g >
<title>leveldb::Slice::operator[] (1,333,333 samples, 0.33%)</title><rect x="25.7" y="597" width="4.0" height="15.0" fill="rgb(247,5,11)" rx="2" ry="2" />
<text  x="28.73" y="607.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (1,333,333 samples, 0.33%)</title><rect x="989.4" y="437" width="3.9" height="15.0" fill="rgb(217,27,28)" rx="2" ry="2" />
<text  x="992.40" y="447.5" ></text>
</g>
<g >
<title>leveldb::WriteBatch::Iterate (75,999,981 samples, 19.00%)</title><rect x="737.7" y="453" width="224.2" height="15.0" fill="rgb(216,197,36)" rx="2" ry="2" />
<text  x="740.67" y="463.5" >leveldb::WriteBatch::Iterate</text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.33%)</title><rect x="301.1" y="325" width="3.9" height="15.0" fill="rgb(216,127,28)" rx="2" ry="2" />
<text  x="304.07" y="335.5" ></text>
</g>
<g >
<title>memcpy_erms (2,666,666 samples, 0.67%)</title><rect x="596.1" y="165" width="7.8" height="15.0" fill="rgb(236,101,37)" rx="2" ry="2" />
<text  x="599.07" y="175.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.33%)</title><rect x="438.7" y="485" width="4.0" height="15.0" fill="rgb(243,147,41)" rx="2" ry="2" />
<text  x="441.73" y="495.5" ></text>
</g>
<g >
<title>blkdev_issue_zeroout (1,333,333 samples, 0.33%)</title><rect x="584.3" y="165" width="3.9" height="15.0" fill="rgb(238,32,8)" rx="2" ry="2" />
<text  x="587.27" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (2,666,666 samples, 0.67%)</title><rect x="548.9" y="309" width="7.8" height="15.0" fill="rgb(217,156,38)" rx="2" ry="2" />
<text  x="551.87" y="319.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (2,666,666 samples, 0.67%)</title><rect x="470.2" y="389" width="7.9" height="15.0" fill="rgb(206,88,28)" rx="2" ry="2" />
<text  x="473.20" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2,666,666 samples, 0.67%)</title><rect x="548.9" y="325" width="7.8" height="15.0" fill="rgb(216,48,14)" rx="2" ry="2" />
<text  x="551.87" y="335.5" ></text>
</g>
<g >
<title>jbd2__journal_start (2,666,666 samples, 0.67%)</title><rect x="277.5" y="485" width="7.8" height="15.0" fill="rgb(211,206,18)" rx="2" ry="2" />
<text  x="280.47" y="495.5" ></text>
</g>
<g >
<title>futex_wake (1,333,333 samples, 0.33%)</title><rect x="403.3" y="597" width="4.0" height="15.0" fill="rgb(252,80,3)" rx="2" ry="2" />
<text  x="406.33" y="607.5" ></text>
</g>
<g >
<title>pmem_flush (25,333,327 samples, 6.33%)</title><rect x="588.2" y="389" width="74.7" height="15.0" fill="rgb(209,171,44)" rx="2" ry="2" />
<text  x="591.20" y="399.5" >pmem_flush</text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt; (2,666,666 samples, 0.67%)</title><rect x="533.1" y="293" width="7.9" height="15.0" fill="rgb(221,27,38)" rx="2" ry="2" />
<text  x="536.13" y="303.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.33%)</title><rect x="525.3" y="245" width="3.9" height="15.0" fill="rgb(207,216,31)" rx="2" ry="2" />
<text  x="528.27" y="255.5" ></text>
</g>
<g >
<title>std::future&lt;leveldb::Status&gt;::~future (1,333,333 samples, 0.33%)</title><rect x="1064.1" y="485" width="4.0" height="15.0" fill="rgb(246,178,3)" rx="2" ry="2" />
<text  x="1067.13" y="495.5" ></text>
</g>
<g >
<title>find_next_and_bit (1,333,333 samples, 0.33%)</title><rect x="847.8" y="165" width="3.9" height="15.0" fill="rgb(234,35,36)" rx="2" ry="2" />
<text  x="850.80" y="175.5" ></text>
</g>
<g >
<title>__x64_sys_read (1,333,333 samples, 0.33%)</title><rect x="1182.1" y="645" width="4.0" height="15.0" fill="rgb(247,150,26)" rx="2" ry="2" />
<text  x="1185.13" y="655.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1,333,333 samples, 0.33%)</title><rect x="1064.1" y="421" width="4.0" height="15.0" fill="rgb(205,28,18)" rx="2" ry="2" />
<text  x="1067.13" y="431.5" ></text>
</g>
<g >
<title>__mutex_lock.isra.4 (6,666,665 samples, 1.67%)</title><rect x="639.3" y="133" width="19.7" height="15.0" fill="rgb(221,90,6)" rx="2" ry="2" />
<text  x="642.33" y="143.5" ></text>
</g>
<g >
<title>crypto_shash_update (1,333,333 samples, 0.33%)</title><rect x="301.1" y="405" width="3.9" height="15.0" fill="rgb(239,15,26)" rx="2" ry="2" />
<text  x="304.07" y="415.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.33%)</title><rect x="438.7" y="517" width="4.0" height="15.0" fill="rgb(248,50,42)" rx="2" ry="2" />
<text  x="441.73" y="527.5" ></text>
</g>
<g >
<title>jbd2_journal_dirty_metadata (1,333,333 samples, 0.33%)</title><rect x="356.1" y="453" width="4.0" height="15.0" fill="rgb(240,188,19)" rx="2" ry="2" />
<text  x="359.13" y="463.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::NoBarrier_Next (1,333,333 samples, 0.33%)</title><rect x="946.1" y="389" width="4.0" height="15.0" fill="rgb(205,23,35)" rx="2" ry="2" />
<text  x="949.13" y="399.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (7,999,998 samples, 2.00%)</title><rect x="1091.7" y="437" width="23.6" height="15.0" fill="rgb(223,151,25)" rx="2" ry="2" />
<text  x="1094.67" y="447.5" >s..</text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::promise (6,666,665 samples, 1.67%)</title><rect x="1068.1" y="485" width="19.6" height="15.0" fill="rgb(218,127,11)" rx="2" ry="2" />
<text  x="1071.07" y="495.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (1,333,333 samples, 0.33%)</title><rect x="478.1" y="389" width="3.9" height="15.0" fill="rgb(210,0,29)" rx="2" ry="2" />
<text  x="481.07" y="399.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (3,999,999 samples, 1.00%)</title><rect x="1072.0" y="389" width="11.8" height="15.0" fill="rgb(227,13,42)" rx="2" ry="2" />
<text  x="1075.00" y="399.5" ></text>
</g>
<g >
<title>__ext4_journal_start_sb (2,666,666 samples, 0.67%)</title><rect x="340.4" y="501" width="7.9" height="15.0" fill="rgb(231,160,35)" rx="2" ry="2" />
<text  x="343.40" y="511.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.33%)</title><rect x="1091.7" y="389" width="3.9" height="15.0" fill="rgb(249,124,42)" rx="2" ry="2" />
<text  x="1094.67" y="399.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (26,666,660 samples, 6.67%)</title><rect x="855.7" y="341" width="78.6" height="15.0" fill="rgb(239,31,13)" rx="2" ry="2" />
<text  x="858.67" y="351.5" >leveldb::..</text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.33%)</title><rect x="1154.6" y="661" width="3.9" height="15.0" fill="rgb(239,85,20)" rx="2" ry="2" />
<text  x="1157.60" y="671.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.33%)</title><rect x="1107.4" y="405" width="3.9" height="15.0" fill="rgb(245,162,43)" rx="2" ry="2" />
<text  x="1110.40" y="415.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (2,666,666 samples, 0.67%)</title><rect x="1138.9" y="565" width="7.8" height="15.0" fill="rgb(242,83,42)" rx="2" ry="2" />
<text  x="1141.87" y="575.5" ></text>
</g>
<g >
<title>__ext4_journal_get_write_access (1,333,333 samples, 0.33%)</title><rect x="379.7" y="469" width="4.0" height="15.0" fill="rgb(232,184,5)" rx="2" ry="2" />
<text  x="382.73" y="479.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (1,333,333 samples, 0.33%)</title><rect x="297.1" y="453" width="4.0" height="15.0" fill="rgb(234,0,8)" rx="2" ry="2" />
<text  x="300.13" y="463.5" ></text>
</g>
<g >
<title>submit_bio_wait_endio (2,666,666 samples, 0.67%)</title><rect x="305.0" y="373" width="7.9" height="15.0" fill="rgb(254,171,45)" rx="2" ry="2" />
<text  x="308.00" y="383.5" ></text>
</g>
<g >
<title>ext4_evict_inode (1,333,333 samples, 0.33%)</title><rect x="29.7" y="501" width="3.9" height="15.0" fill="rgb(246,46,16)" rx="2" ry="2" />
<text  x="32.67" y="511.5" ></text>
</g>
<g >
<title>dump_emit (15,999,996 samples, 4.00%)</title><rect x="615.7" y="229" width="47.2" height="15.0" fill="rgb(225,170,7)" rx="2" ry="2" />
<text  x="618.73" y="239.5" >dump..</text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.33%)</title><rect x="725.9" y="373" width="3.9" height="15.0" fill="rgb(241,56,53)" rx="2" ry="2" />
<text  x="728.87" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::swap (5,333,332 samples, 1.33%)</title><rect x="434.8" y="565" width="15.7" height="15.0" fill="rgb(217,214,26)" rx="2" ry="2" />
<text  x="437.80" y="575.5" ></text>
</g>
<g >
<title>std::future&lt;leveldb::Status&gt;::get (6,666,665 samples, 1.67%)</title><rect x="1044.5" y="485" width="19.6" height="15.0" fill="rgb(249,104,39)" rx="2" ry="2" />
<text  x="1047.47" y="495.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (222,666,611 samples, 55.67%)</title><rect x="466.3" y="597" width="656.8" height="15.0" fill="rgb(243,222,9)" rx="2" ry="2" />
<text  x="469.27" y="607.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (10,666,664 samples, 2.67%)</title><rect x="820.3" y="325" width="31.4" height="15.0" fill="rgb(239,61,14)" rx="2" ry="2" />
<text  x="823.27" y="335.5" >le..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt; &gt;::destroy&lt;std::__future_base::_State_baseV2&gt; (3,999,999 samples, 1.00%)</title><rect x="1095.6" y="389" width="11.8" height="15.0" fill="rgb(236,188,29)" rx="2" ry="2" />
<text  x="1098.60" y="399.5" ></text>
</g>
<g >
<title>ext4_es_lookup_extent (1,333,333 samples, 0.33%)</title><rect x="289.3" y="485" width="3.9" height="15.0" fill="rgb(221,131,51)" rx="2" ry="2" />
<text  x="292.27" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::resize (1,333,333 samples, 0.33%)</title><rect x="1115.3" y="501" width="3.9" height="15.0" fill="rgb(236,187,43)" rx="2" ry="2" />
<text  x="1118.27" y="511.5" ></text>
</g>
<g >
<title>do_filp_open (2,666,666 samples, 0.67%)</title><rect x="13.9" y="597" width="7.9" height="15.0" fill="rgb(210,133,24)" rx="2" ry="2" />
<text  x="16.93" y="607.5" ></text>
</g>
<g >
<title>vfs_open (2,666,666 samples, 0.67%)</title><rect x="13.9" y="565" width="7.9" height="15.0" fill="rgb(251,34,24)" rx="2" ry="2" />
<text  x="16.93" y="575.5" ></text>
</g>
<g >
<title>__wake_up (1,333,333 samples, 0.33%)</title><rect x="576.4" y="149" width="3.9" height="15.0" fill="rgb(250,157,0)" rx="2" ry="2" />
<text  x="579.40" y="159.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_set_result (1,333,333 samples, 0.33%)</title><rect x="1036.6" y="469" width="3.9" height="15.0" fill="rgb(217,47,6)" rx="2" ry="2" />
<text  x="1039.60" y="479.5" ></text>
</g>
<g >
<title>submit_bio (11,999,997 samples, 3.00%)</title><rect x="305.0" y="437" width="35.4" height="15.0" fill="rgb(219,174,39)" rx="2" ry="2" />
<text  x="308.00" y="447.5" >sub..</text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::Append (1,333,333 samples, 0.33%)</title><rect x="969.7" y="437" width="4.0" height="15.0" fill="rgb(236,55,37)" rx="2" ry="2" />
<text  x="972.73" y="447.5" ></text>
</g>
<g >
<title>page_fault (3,999,999 samples, 1.00%)</title><rect x="576.4" y="357" width="11.8" height="15.0" fill="rgb(239,192,17)" rx="2" ry="2" />
<text  x="579.40" y="367.5" ></text>
</g>
<g >
<title>dax_read_unlock (74,666,648 samples, 18.67%)</title><rect x="49.3" y="501" width="220.3" height="15.0" fill="rgb(230,202,34)" rx="2" ry="2" />
<text  x="52.33" y="511.5" >dax_read_unlock</text>
</g>
<g >
<title>cpuset_nodemask_valid_mems_allowed (1,333,333 samples, 0.33%)</title><rect x="666.9" y="149" width="3.9" height="15.0" fill="rgb(244,126,53)" rx="2" ry="2" />
<text  x="669.87" y="159.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.33%)</title><rect x="847.8" y="293" width="3.9" height="15.0" fill="rgb(235,213,22)" rx="2" ry="2" />
<text  x="850.80" y="303.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.33%)</title><rect x="674.7" y="501" width="4.0" height="15.0" fill="rgb(207,154,10)" rx="2" ry="2" />
<text  x="677.73" y="511.5" ></text>
</g>
<g >
<title>get_futex_key_refs.isra.16 (1,333,333 samples, 0.33%)</title><rect x="403.3" y="581" width="4.0" height="15.0" fill="rgb(214,137,27)" rx="2" ry="2" />
<text  x="406.33" y="591.5" ></text>
</g>
<g >
<title>memmove_nodrain_avx512f_clwb (5,333,332 samples, 1.33%)</title><rect x="572.5" y="389" width="15.7" height="15.0" fill="rgb(218,133,23)" rx="2" ry="2" />
<text  x="575.47" y="399.5" ></text>
</g>
<g >
<title>all (399,999,900 samples, 100%)</title><rect x="10.0" y="725" width="1180.0" height="15.0" fill="rgb(212,118,7)" rx="2" ry="2" />
<text  x="13.00" y="735.5" ></text>
</g>
<g >
<title>std::move&lt;char const*&amp;&gt; (1,333,333 samples, 0.33%)</title><rect x="729.8" y="453" width="3.9" height="15.0" fill="rgb(227,163,13)" rx="2" ry="2" />
<text  x="732.80" y="463.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (1,333,333 samples, 0.33%)</title><rect x="517.4" y="405" width="3.9" height="15.0" fill="rgb(239,221,16)" rx="2" ry="2" />
<text  x="520.40" y="415.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.33%)</title><rect x="1154.6" y="645" width="3.9" height="15.0" fill="rgb(217,41,26)" rx="2" ry="2" />
<text  x="1157.60" y="655.5" ></text>
</g>
<g >
<title>__handle_mm_fault (2,666,666 samples, 0.67%)</title><rect x="666.9" y="197" width="7.8" height="15.0" fill="rgb(236,196,21)" rx="2" ry="2" />
<text  x="669.87" y="207.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1,333,333 samples, 0.33%)</title><rect x="525.3" y="277" width="3.9" height="15.0" fill="rgb(207,131,50)" rx="2" ry="2" />
<text  x="528.27" y="287.5" ></text>
</g>
<g >
<title>__kernel_write (15,999,996 samples, 4.00%)</title><rect x="615.7" y="213" width="47.2" height="15.0" fill="rgb(212,211,1)" rx="2" ry="2" />
<text  x="618.73" y="223.5" >__ke..</text>
</g>
<g >
<title>run_rebalance_domains (1,333,333 samples, 0.33%)</title><rect x="761.3" y="309" width="3.9" height="15.0" fill="rgb(206,108,15)" rx="2" ry="2" />
<text  x="764.27" y="319.5" ></text>
</g>
<g >
<title>ksys_write (118,666,637 samples, 29.67%)</title><rect x="37.5" y="613" width="350.1" height="15.0" fill="rgb(220,178,7)" rx="2" ry="2" />
<text  x="40.53" y="623.5" >ksys_write</text>
</g>
<g >
<title>__GI___libc_open (2,666,666 samples, 0.67%)</title><rect x="13.9" y="677" width="7.9" height="15.0" fill="rgb(244,87,54)" rx="2" ry="2" />
<text  x="16.93" y="687.5" ></text>
</g>
<g >
<title>jbd2_complete_transaction (1,333,333 samples, 0.33%)</title><rect x="576.4" y="181" width="3.9" height="15.0" fill="rgb(231,172,54)" rx="2" ry="2" />
<text  x="579.40" y="191.5" ></text>
</g>
</g>
</svg>
