<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="710.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="693" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="693" > </text>
<g id="frames">
<g >
<title>leveldb::IteratorWrapper::Update (40,000,000 samples, 0.27%)</title><rect x="141.6" y="341" width="3.3" height="15.0" fill="rgb(251,27,4)" rx="2" ry="2" />
<text  x="144.65" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (40,000,000 samples, 0.27%)</title><rect x="215.5" y="261" width="3.2" height="15.0" fill="rgb(249,99,4)" rx="2" ry="2" />
<text  x="218.50" y="271.5" ></text>
</g>
<g >
<title>start_this_handle (20,000,000 samples, 0.14%)</title><rect x="1145.0" y="453" width="1.7" height="15.0" fill="rgb(248,70,54)" rx="2" ry="2" />
<text  x="1148.05" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (140,000,000 samples, 0.95%)</title><rect x="414.6" y="325" width="11.2" height="15.0" fill="rgb(207,83,33)" rx="2" ry="2" />
<text  x="417.57" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (20,000,000 samples, 0.14%)</title><rect x="406.5" y="277" width="1.6" height="15.0" fill="rgb(245,90,27)" rx="2" ry="2" />
<text  x="409.54" y="287.5" ></text>
</g>
<g >
<title>snappy::RawCompress (160,000,000 samples, 1.09%)</title><rect x="474.0" y="341" width="12.8" height="15.0" fill="rgb(250,162,1)" rx="2" ry="2" />
<text  x="476.97" y="351.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (20,000,000 samples, 0.14%)</title><rect x="427.4" y="277" width="1.6" height="15.0" fill="rgb(237,128,20)" rx="2" ry="2" />
<text  x="430.41" y="287.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::Write (5,780,000,000 samples, 39.32%)</title><rect x="523.7" y="453" width="464.0" height="15.0" fill="rgb(235,85,19)" rx="2" ry="2" />
<text  x="526.74" y="463.5" >leveldb::DBImpl::Write</text>
</g>
<g >
<title>__do_sys_madvise (20,000,000 samples, 0.14%)</title><rect x="284.5" y="117" width="1.6" height="15.0" fill="rgb(246,15,3)" rx="2" ry="2" />
<text  x="287.53" y="127.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_set_result (400,000,000 samples, 2.72%)</title><rect x="883.4" y="405" width="32.1" height="15.0" fill="rgb(245,69,40)" rx="2" ry="2" />
<text  x="886.36" y="415.5" >st..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (40,000,000 samples, 0.27%)</title><rect x="29.3" y="261" width="3.2" height="15.0" fill="rgb(211,85,50)" rx="2" ry="2" />
<text  x="32.27" y="271.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (60,000,000 samples, 0.41%)</title><rect x="392.1" y="389" width="4.8" height="15.0" fill="rgb(212,67,13)" rx="2" ry="2" />
<text  x="395.10" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (80,000,000 samples, 0.54%)</title><rect x="408.1" y="293" width="6.5" height="15.0" fill="rgb(228,14,26)" rx="2" ry="2" />
<text  x="411.15" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::end (20,000,000 samples, 0.14%)</title><rect x="525.3" y="405" width="1.7" height="15.0" fill="rgb(208,172,16)" rx="2" ry="2" />
<text  x="528.35" y="415.5" ></text>
</g>
<g >
<title>std::once_flag::once_flag (20,000,000 samples, 0.14%)</title><rect x="955.6" y="277" width="1.6" height="15.0" fill="rgb(236,48,10)" rx="2" ry="2" />
<text  x="958.61" y="287.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Valid (20,000,000 samples, 0.14%)</title><rect x="151.3" y="309" width="1.6" height="15.0" fill="rgb(206,186,2)" rx="2" ry="2" />
<text  x="154.28" y="319.5" ></text>
</g>
<g >
<title>leveldb::log::Writer::EmitPhysicalRecord (640,000,000 samples, 4.35%)</title><rect x="822.4" y="405" width="51.3" height="15.0" fill="rgb(211,224,22)" rx="2" ry="2" />
<text  x="825.35" y="415.5" >level..</text>
</g>
<g >
<title>__GI_madvise (20,000,000 samples, 0.14%)</title><rect x="284.5" y="181" width="1.6" height="15.0" fill="rgb(249,21,44)" rx="2" ry="2" />
<text  x="287.53" y="191.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (20,000,000 samples, 0.14%)</title><rect x="38.9" y="293" width="1.6" height="15.0" fill="rgb(252,152,46)" rx="2" ry="2" />
<text  x="41.90" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (40,000,000 samples, 0.27%)</title><rect x="274.9" y="325" width="3.2" height="15.0" fill="rgb(218,88,49)" rx="2" ry="2" />
<text  x="277.90" y="335.5" ></text>
</g>
<g >
<title>leveldb::port::Snappy_Uncompress (100,000,000 samples, 0.68%)</title><rect x="109.5" y="293" width="8.1" height="15.0" fill="rgb(250,100,35)" rx="2" ry="2" />
<text  x="112.54" y="303.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::status (20,000,000 samples, 0.14%)</title><rect x="472.4" y="341" width="1.6" height="15.0" fill="rgb(206,65,38)" rx="2" ry="2" />
<text  x="475.37" y="351.5" ></text>
</g>
<g >
<title>write_pmem (80,000,000 samples, 0.54%)</title><rect x="1132.2" y="357" width="6.4" height="15.0" fill="rgb(220,49,41)" rx="2" ry="2" />
<text  x="1135.20" y="367.5" ></text>
</g>
<g >
<title>snappy::RawUncompress (100,000,000 samples, 0.68%)</title><rect x="109.5" y="261" width="8.1" height="15.0" fill="rgb(247,67,41)" rx="2" ry="2" />
<text  x="112.54" y="271.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (240,000,000 samples, 1.63%)</title><rect x="968.4" y="357" width="19.3" height="15.0" fill="rgb(214,49,37)" rx="2" ry="2" />
<text  x="971.45" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_ebo_helper&lt;0, std::allocator&lt;std::__future_base::_State_baseV2&gt;, true&gt;::_S_get (20,000,000 samples, 0.14%)</title><rect x="970.1" y="325" width="1.6" height="15.0" fill="rgb(209,91,27)" rx="2" ry="2" />
<text  x="973.05" y="335.5" ></text>
</g>
<g >
<title>std::forward&lt;leveldb::DBImpl::Writer*&gt; (20,000,000 samples, 0.14%)</title><rect x="880.1" y="341" width="1.7" height="15.0" fill="rgb(240,221,50)" rx="2" ry="2" />
<text  x="883.15" y="351.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::Sequence (20,000,000 samples, 0.14%)</title><rect x="812.7" y="405" width="1.6" height="15.0" fill="rgb(220,72,6)" rx="2" ry="2" />
<text  x="815.72" y="415.5" ></text>
</g>
<g >
<title>futex_wake (100,000,000 samples, 0.68%)</title><rect x="888.2" y="341" width="8.0" height="15.0" fill="rgb(253,156,8)" rx="2" ry="2" />
<text  x="891.18" y="351.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::WriteRandom (6,160,000,000 samples, 41.90%)</title><rect x="510.9" y="485" width="494.5" height="15.0" fill="rgb(205,39,51)" rx="2" ry="2" />
<text  x="513.90" y="495.5" >leveldb::Benchmark::WriteRandom</text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set (240,000,000 samples, 1.63%)</title><rect x="896.2" y="261" width="19.3" height="15.0" fill="rgb(239,178,10)" rx="2" ry="2" />
<text  x="899.20" y="271.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::value (60,000,000 samples, 0.41%)</title><rect x="170.5" y="357" width="4.9" height="15.0" fill="rgb(235,202,1)" rx="2" ry="2" />
<text  x="173.54" y="367.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (220,000,000 samples, 1.50%)</title><rect x="775.8" y="277" width="17.7" height="15.0" fill="rgb(237,73,28)" rx="2" ry="2" />
<text  x="778.80" y="287.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (240,000,000 samples, 1.63%)</title><rect x="896.2" y="277" width="19.3" height="15.0" fill="rgb(236,172,50)" rx="2" ry="2" />
<text  x="899.20" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (20,000,000 samples, 0.14%)</title><rect x="191.4" y="293" width="1.6" height="15.0" fill="rgb(212,222,39)" rx="2" ry="2" />
<text  x="194.41" y="303.5" ></text>
</g>
<g >
<title>_IO_new_file_underflow (20,000,000 samples, 0.14%)</title><rect x="1007.0" y="469" width="1.6" height="15.0" fill="rgb(253,202,45)" rx="2" ry="2" />
<text  x="1009.98" y="479.5" ></text>
</g>
<g >
<title>__ext4_ext_dirty (40,000,000 samples, 0.27%)</title><rect x="1151.5" y="405" width="3.2" height="15.0" fill="rgb(231,0,47)" rx="2" ry="2" />
<text  x="1154.47" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt;::_Deque_iterator (20,000,000 samples, 0.14%)</title><rect x="878.5" y="389" width="1.6" height="15.0" fill="rgb(247,91,34)" rx="2" ry="2" />
<text  x="881.54" y="399.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (20,000,000 samples, 0.14%)</title><rect x="299.0" y="229" width="1.6" height="15.0" fill="rgb(250,165,41)" rx="2" ry="2" />
<text  x="301.98" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (40,000,000 samples, 0.27%)</title><rect x="218.7" y="277" width="3.2" height="15.0" fill="rgb(227,74,0)" rx="2" ry="2" />
<text  x="221.71" y="287.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (20,000,000 samples, 0.14%)</title><rect x="929.9" y="373" width="1.6" height="15.0" fill="rgb(241,101,5)" rx="2" ry="2" />
<text  x="932.92" y="383.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::key (40,000,000 samples, 0.27%)</title><rect x="1019.8" y="613" width="3.2" height="15.0" fill="rgb(212,19,32)" rx="2" ry="2" />
<text  x="1022.82" y="623.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned int&gt;::__atomic_base (20,000,000 samples, 0.14%)</title><rect x="952.4" y="245" width="1.6" height="15.0" fill="rgb(242,165,11)" rx="2" ry="2" />
<text  x="955.39" y="255.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (40,000,000 samples, 0.27%)</title><rect x="99.9" y="341" width="3.2" height="15.0" fill="rgb(223,157,24)" rx="2" ry="2" />
<text  x="102.90" y="351.5" ></text>
</g>
<g >
<title>memcpy_flushcache (100,000,000 samples, 0.68%)</title><rect x="1164.3" y="341" width="8.0" height="15.0" fill="rgb(228,35,51)" rx="2" ry="2" />
<text  x="1167.31" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (20,000,000 samples, 0.14%)</title><rect x="58.2" y="341" width="1.6" height="15.0" fill="rgb(248,54,54)" rx="2" ry="2" />
<text  x="61.16" y="351.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (20,000,000 samples, 0.14%)</title><rect x="188.2" y="325" width="1.6" height="15.0" fill="rgb(225,16,53)" rx="2" ry="2" />
<text  x="191.20" y="335.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (40,000,000 samples, 0.27%)</title><rect x="1013.4" y="405" width="3.2" height="15.0" fill="rgb(210,16,37)" rx="2" ry="2" />
<text  x="1016.40" y="415.5" ></text>
</g>
<g >
<title>leveldb::Random::OneIn (20,000,000 samples, 0.14%)</title><rect x="806.3" y="325" width="1.6" height="15.0" fill="rgb(209,109,49)" rx="2" ry="2" />
<text  x="809.30" y="335.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (400,000,000 samples, 2.72%)</title><rect x="883.4" y="389" width="32.1" height="15.0" fill="rgb(254,165,53)" rx="2" ry="2" />
<text  x="886.36" y="399.5" >st..</text>
</g>
<g >
<title>leveldb::MemTable::Unref (20,000,000 samples, 0.14%)</title><rect x="284.5" y="389" width="1.6" height="15.0" fill="rgb(235,197,20)" rx="2" ry="2" />
<text  x="287.53" y="399.5" ></text>
</g>
<g >
<title>snappy::internal::CompressFragment (120,000,000 samples, 0.82%)</title><rect x="475.6" y="309" width="9.6" height="15.0" fill="rgb(217,202,15)" rx="2" ry="2" />
<text  x="478.58" y="319.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::swap (60,000,000 samples, 0.41%)</title><rect x="910.7" y="229" width="4.8" height="15.0" fill="rgb(226,67,26)" rx="2" ry="2" />
<text  x="913.65" y="239.5" ></text>
</g>
<g >
<title>bio_endio (20,000,000 samples, 0.14%)</title><rect x="1156.3" y="341" width="1.6" height="15.0" fill="rgb(223,209,54)" rx="2" ry="2" />
<text  x="1159.29" y="351.5" ></text>
</g>
<g >
<title>__GI__IO_default_uflow (20,000,000 samples, 0.14%)</title><rect x="1007.0" y="485" width="1.6" height="15.0" fill="rgb(235,69,24)" rx="2" ry="2" />
<text  x="1009.98" y="495.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Next (20,000,000 samples, 0.14%)</title><rect x="10.0" y="357" width="1.6" height="15.0" fill="rgb(236,19,39)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;unsigned long, char&gt; (40,000,000 samples, 0.27%)</title><rect x="53.3" y="245" width="3.3" height="15.0" fill="rgb(243,116,31)" rx="2" ry="2" />
<text  x="56.35" y="255.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (20,000,000 samples, 0.14%)</title><rect x="189.8" y="325" width="1.6" height="15.0" fill="rgb(251,147,2)" rx="2" ry="2" />
<text  x="192.81" y="335.5" ></text>
</g>
<g >
<title>leveldb::Arena::~Arena (20,000,000 samples, 0.14%)</title><rect x="284.5" y="357" width="1.6" height="15.0" fill="rgb(248,176,42)" rx="2" ry="2" />
<text  x="287.53" y="367.5" ></text>
</g>
<g >
<title>flush_clwb (140,000,000 samples, 0.95%)</title><rect x="287.7" y="341" width="11.3" height="15.0" fill="rgb(233,108,3)" rx="2" ry="2" />
<text  x="290.74" y="351.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (40,000,000 samples, 0.27%)</title><rect x="91.9" y="325" width="3.2" height="15.0" fill="rgb(232,145,24)" rx="2" ry="2" />
<text  x="94.88" y="335.5" ></text>
</g>
<g >
<title>leveldb::port::Snappy_Compress (160,000,000 samples, 1.09%)</title><rect x="474.0" y="357" width="12.8" height="15.0" fill="rgb(238,119,12)" rx="2" ry="2" />
<text  x="476.97" y="367.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;unsigned long, char&gt; (20,000,000 samples, 0.14%)</title><rect x="299.0" y="261" width="1.6" height="15.0" fill="rgb(252,200,29)" rx="2" ry="2" />
<text  x="301.98" y="271.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (40,000,000 samples, 0.27%)</title><rect x="796.7" y="309" width="3.2" height="15.0" fill="rgb(249,133,43)" rx="2" ry="2" />
<text  x="799.67" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (20,000,000 samples, 0.14%)</title><rect x="271.7" y="325" width="1.6" height="15.0" fill="rgb(252,0,19)" rx="2" ry="2" />
<text  x="274.69" y="335.5" ></text>
</g>
<g >
<title>pmem_make_request (80,000,000 samples, 0.54%)</title><rect x="1156.3" y="357" width="6.4" height="15.0" fill="rgb(239,186,21)" rx="2" ry="2" />
<text  x="1159.29" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::release (20,000,000 samples, 0.14%)</title><rect x="1188.4" y="629" width="1.6" height="15.0" fill="rgb(218,82,53)" rx="2" ry="2" />
<text  x="1191.39" y="639.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (60,000,000 samples, 0.41%)</title><rect x="308.6" y="341" width="4.8" height="15.0" fill="rgb(229,176,24)" rx="2" ry="2" />
<text  x="311.61" y="351.5" ></text>
</g>
<g >
<title>std::__fill_a&lt;char&gt; (40,000,000 samples, 0.27%)</title><rect x="249.2" y="213" width="3.2" height="15.0" fill="rgb(217,186,49)" rx="2" ry="2" />
<text  x="252.21" y="223.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Valid (20,000,000 samples, 0.14%)</title><rect x="119.2" y="277" width="1.6" height="15.0" fill="rgb(222,123,42)" rx="2" ry="2" />
<text  x="122.17" y="287.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::New (20,000,000 samples, 0.14%)</title><rect x="50.1" y="261" width="1.6" height="15.0" fill="rgb(232,183,50)" rx="2" ry="2" />
<text  x="53.14" y="271.5" ></text>
</g>
<g >
<title>leveldb::log::Writer::AddRecord (700,000,000 samples, 4.76%)</title><rect x="817.5" y="421" width="56.2" height="15.0" fill="rgb(241,23,22)" rx="2" ry="2" />
<text  x="820.54" y="431.5" >level..</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (20,000,000 samples, 0.14%)</title><rect x="1145.0" y="421" width="1.7" height="15.0" fill="rgb(220,50,20)" rx="2" ry="2" />
<text  x="1148.05" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt;::_M_next (20,000,000 samples, 0.14%)</title><rect x="217.1" y="229" width="1.6" height="15.0" fill="rgb(235,28,21)" rx="2" ry="2" />
<text  x="220.10" y="239.5" ></text>
</g>
<g >
<title>__wake_up (40,000,000 samples, 0.27%)</title><rect x="1148.3" y="405" width="3.2" height="15.0" fill="rgb(238,211,43)" rx="2" ry="2" />
<text  x="1151.26" y="415.5" ></text>
</g>
<g >
<title>submit_bio (80,000,000 samples, 0.54%)</title><rect x="1156.3" y="389" width="6.4" height="15.0" fill="rgb(219,161,49)" rx="2" ry="2" />
<text  x="1159.29" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (40,000,000 samples, 0.27%)</title><rect x="234.8" y="277" width="3.2" height="15.0" fill="rgb(231,201,43)" rx="2" ry="2" />
<text  x="237.76" y="287.5" ></text>
</g>
<g >
<title>submit_bio (80,000,000 samples, 0.54%)</title><rect x="1132.2" y="421" width="6.4" height="15.0" fill="rgb(249,60,21)" rx="2" ry="2" />
<text  x="1135.20" y="431.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (240,000,000 samples, 1.63%)</title><rect x="896.2" y="309" width="19.3" height="15.0" fill="rgb(245,197,1)" rx="2" ry="2" />
<text  x="899.20" y="319.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (20,000,000 samples, 0.14%)</title><rect x="327.9" y="277" width="1.6" height="15.0" fill="rgb(252,56,7)" rx="2" ry="2" />
<text  x="330.88" y="287.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access (20,000,000 samples, 0.14%)</title><rect x="899.4" y="181" width="1.6" height="15.0" fill="rgb(212,121,23)" rx="2" ry="2" />
<text  x="902.41" y="191.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (60,000,000 samples, 0.41%)</title><rect x="273.3" y="373" width="4.8" height="15.0" fill="rgb(234,189,43)" rx="2" ry="2" />
<text  x="276.29" y="383.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (20,000,000 samples, 0.14%)</title><rect x="1016.6" y="613" width="1.6" height="15.0" fill="rgb(223,190,46)" rx="2" ry="2" />
<text  x="1019.61" y="623.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt;::operator (100,000,000 samples, 0.68%)</title><rect x="901.0" y="213" width="8.0" height="15.0" fill="rgb(234,120,12)" rx="2" ry="2" />
<text  x="904.02" y="223.5" ></text>
</g>
<g >
<title>tcmalloc::NewSpan (20,000,000 samples, 0.14%)</title><rect x="50.1" y="229" width="1.6" height="15.0" fill="rgb(237,86,31)" rx="2" ry="2" />
<text  x="53.14" y="239.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::NoBarrier_SetNext (60,000,000 samples, 0.41%)</title><rect x="799.9" y="341" width="4.8" height="15.0" fill="rgb(211,109,28)" rx="2" ry="2" />
<text  x="802.88" y="351.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::~promise (300,000,000 samples, 2.04%)</title><rect x="963.6" y="437" width="24.1" height="15.0" fill="rgb(232,227,8)" rx="2" ry="2" />
<text  x="966.63" y="447.5" >s..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (100,000,000 samples, 0.68%)</title><rect x="1008.6" y="485" width="8.0" height="15.0" fill="rgb(213,119,41)" rx="2" ry="2" />
<text  x="1011.59" y="495.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Update (40,000,000 samples, 0.27%)</title><rect x="144.9" y="373" width="3.2" height="15.0" fill="rgb(214,187,37)" rx="2" ry="2" />
<text  x="147.86" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (20,000,000 samples, 0.14%)</title><rect x="427.4" y="309" width="1.6" height="15.0" fill="rgb(231,28,43)" rx="2" ry="2" />
<text  x="430.41" y="319.5" ></text>
</g>
<g >
<title>leveldb::EncodeFixed64 (20,000,000 samples, 0.14%)</title><rect x="122.4" y="277" width="1.6" height="15.0" fill="rgb(205,163,41)" rx="2" ry="2" />
<text  x="125.38" y="287.5" ></text>
</g>
<g >
<title>leveldb::Slice::operator[] (20,000,000 samples, 0.14%)</title><rect x="16.4" y="341" width="1.6" height="15.0" fill="rgb(226,15,50)" rx="2" ry="2" />
<text  x="19.42" y="351.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (20,000,000 samples, 0.14%)</title><rect x="233.2" y="229" width="1.6" height="15.0" fill="rgb(250,157,6)" rx="2" ry="2" />
<text  x="236.16" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__future_base::_State_baseV2&gt;::construct&lt;std::__future_base::_State_baseV2&gt; (180,000,000 samples, 1.22%)</title><rect x="946.0" y="309" width="14.4" height="15.0" fill="rgb(243,147,36)" rx="2" ry="2" />
<text  x="948.97" y="319.5" ></text>
</g>
<g >
<title>snappy::Compress (20,000,000 samples, 0.14%)</title><rect x="246.0" y="277" width="1.6" height="15.0" fill="rgb(244,89,27)" rx="2" ry="2" />
<text  x="249.00" y="287.5" ></text>
</g>
<g >
<title>memmove_nodrain_avx512f_clwb (20,000,000 samples, 0.14%)</title><rect x="1172.3" y="613" width="1.6" height="15.0" fill="rgb(211,57,11)" rx="2" ry="2" />
<text  x="1175.34" y="623.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BackgroundCompaction (6,240,000,000 samples, 42.45%)</title><rect x="10.0" y="437" width="500.9" height="15.0" fill="rgb(206,173,33)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >leveldb::DBImpl::BackgroundCompaction</text>
</g>
<g >
<title>leveldb::TableBuilder::ok (20,000,000 samples, 0.14%)</title><rect x="472.4" y="357" width="1.6" height="15.0" fill="rgb(212,58,27)" rx="2" ry="2" />
<text  x="475.37" y="367.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::_M_get_result (140,000,000 samples, 0.95%)</title><rect x="920.3" y="421" width="11.2" height="15.0" fill="rgb(222,218,11)" rx="2" ry="2" />
<text  x="923.29" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux (60,000,000 samples, 0.41%)</title><rect x="990.9" y="437" width="4.8" height="15.0" fill="rgb(213,88,50)" rx="2" ry="2" />
<text  x="993.93" y="447.5" ></text>
</g>
<g >
<title>leveldb::Slice::operator[] (20,000,000 samples, 0.14%)</title><rect x="396.9" y="357" width="1.6" height="15.0" fill="rgb(248,155,47)" rx="2" ry="2" />
<text  x="399.91" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (20,000,000 samples, 0.14%)</title><rect x="319.9" y="357" width="1.6" height="15.0" fill="rgb(213,49,4)" rx="2" ry="2" />
<text  x="322.85" y="367.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_State_baseV2 (180,000,000 samples, 1.22%)</title><rect x="946.0" y="293" width="14.4" height="15.0" fill="rgb(227,159,40)" rx="2" ry="2" />
<text  x="948.97" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt; &gt;::destroy&lt;std::__future_base::_State_baseV2&gt; (140,000,000 samples, 0.95%)</title><rect x="976.5" y="341" width="11.2" height="15.0" fill="rgb(224,83,26)" rx="2" ry="2" />
<text  x="979.48" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (20,000,000 samples, 0.14%)</title><rect x="209.1" y="213" width="1.6" height="15.0" fill="rgb(254,172,54)" rx="2" ry="2" />
<text  x="212.07" y="223.5" ></text>
</g>
<g >
<title>__gthread_once (360,000,000 samples, 2.45%)</title><rect x="886.6" y="373" width="28.9" height="15.0" fill="rgb(238,72,13)" rx="2" ry="2" />
<text  x="889.57" y="383.5" >__..</text>
</g>
<g >
<title>leveldb::Slice::size (40,000,000 samples, 0.27%)</title><rect x="790.2" y="261" width="3.3" height="15.0" fill="rgb(205,16,54)" rx="2" ry="2" />
<text  x="793.24" y="271.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (40,000,000 samples, 0.27%)</title><rect x="796.7" y="293" width="3.2" height="15.0" fill="rgb(226,214,25)" rx="2" ry="2" />
<text  x="799.67" y="303.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (40,000,000 samples, 0.27%)</title><rect x="177.0" y="277" width="3.2" height="15.0" fill="rgb(253,200,10)" rx="2" ry="2" />
<text  x="179.97" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::FileMetaData*, std::allocator&lt;leveldb::FileMetaData*&gt; &gt;::size (40,000,000 samples, 0.27%)</title><rect x="165.7" y="389" width="3.2" height="15.0" fill="rgb(205,181,7)" rx="2" ry="2" />
<text  x="168.73" y="399.5" ></text>
</g>
<g >
<title>leveldb::port::Mutex::Unlock (40,000,000 samples, 0.27%)</title><rect x="528.6" y="405" width="3.2" height="15.0" fill="rgb(253,83,34)" rx="2" ry="2" />
<text  x="531.56" y="415.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (60,000,000 samples, 0.41%)</title><rect x="931.5" y="373" width="4.8" height="15.0" fill="rgb(229,11,46)" rx="2" ry="2" />
<text  x="934.52" y="383.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; &gt;::_M_init_functor (20,000,000 samples, 0.14%)</title><rect x="915.5" y="389" width="1.6" height="15.0" fill="rgb(247,71,17)" rx="2" ry="2" />
<text  x="918.47" y="399.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::Add (40,000,000 samples, 0.27%)</title><rect x="14.8" y="357" width="3.2" height="15.0" fill="rgb(244,199,13)" rx="2" ry="2" />
<text  x="17.82" y="367.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;unsigned long, char&gt; (40,000,000 samples, 0.27%)</title><rect x="249.2" y="229" width="3.2" height="15.0" fill="rgb(207,193,24)" rx="2" ry="2" />
<text  x="252.21" y="239.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::shared_ptr (60,000,000 samples, 0.41%)</title><rect x="931.5" y="389" width="4.8" height="15.0" fill="rgb(244,156,46)" rx="2" ry="2" />
<text  x="934.52" y="399.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (20,000,000 samples, 0.14%)</title><rect x="1186.8" y="613" width="1.6" height="15.0" fill="rgb(205,165,10)" rx="2" ry="2" />
<text  x="1189.79" y="623.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (20,000,000 samples, 0.14%)</title><rect x="270.1" y="261" width="1.6" height="15.0" fill="rgb(236,57,22)" rx="2" ry="2" />
<text  x="273.08" y="271.5" ></text>
</g>
<g >
<title>leveldb::Block::Iter::Next (20,000,000 samples, 0.14%)</title><rect x="136.8" y="309" width="1.6" height="15.0" fill="rgb(207,69,43)" rx="2" ry="2" />
<text  x="139.83" y="319.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (12,400,000,000 samples, 84.35%)</title><rect x="10.0" y="581" width="995.4" height="15.0" fill="rgb(231,179,20)" rx="2" ry="2" />
<text  x="13.00" y="591.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (40,000,000 samples, 0.27%)</title><rect x="425.8" y="325" width="3.2" height="15.0" fill="rgb(252,25,1)" rx="2" ry="2" />
<text  x="428.81" y="335.5" ></text>
</g>
<g >
<title>leveldb::MemTable::KeyComparator::operator (60,000,000 samples, 0.41%)</title><rect x="665.0" y="325" width="4.8" height="15.0" fill="rgb(227,137,9)" rx="2" ry="2" />
<text  x="668.02" y="335.5" ></text>
</g>
<g >
<title>snappy::internal::CompressFragment (20,000,000 samples, 0.14%)</title><rect x="246.0" y="261" width="1.6" height="15.0" fill="rgb(205,115,17)" rx="2" ry="2" />
<text  x="249.00" y="271.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (40,000,000 samples, 0.27%)</title><rect x="249.2" y="197" width="3.2" height="15.0" fill="rgb(224,142,52)" rx="2" ry="2" />
<text  x="252.21" y="207.5" ></text>
</g>
<g >
<title>_raw_spin_lock (20,000,000 samples, 0.14%)</title><rect x="1146.7" y="421" width="1.6" height="15.0" fill="rgb(210,217,23)" rx="2" ry="2" />
<text  x="1149.65" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::resize (40,000,000 samples, 0.27%)</title><rect x="249.2" y="325" width="3.2" height="15.0" fill="rgb(211,115,4)" rx="2" ry="2" />
<text  x="252.21" y="335.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteBlock (100,000,000 samples, 0.68%)</title><rect x="38.9" y="341" width="8.0" height="15.0" fill="rgb(235,120,36)" rx="2" ry="2" />
<text  x="41.90" y="351.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (20,000,000 samples, 0.14%)</title><rect x="1037.5" y="613" width="1.6" height="15.0" fill="rgb(249,32,21)" rx="2" ry="2" />
<text  x="1040.48" y="623.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (20,000,000 samples, 0.14%)</title><rect x="1042.3" y="629" width="1.6" height="15.0" fill="rgb(238,90,43)" rx="2" ry="2" />
<text  x="1045.30" y="639.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::promise (340,000,000 samples, 2.31%)</title><rect x="936.3" y="437" width="27.3" height="15.0" fill="rgb(214,44,40)" rx="2" ry="2" />
<text  x="939.34" y="447.5" >s..</text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (12,400,000,000 samples, 84.35%)</title><rect x="10.0" y="517" width="995.4" height="15.0" fill="rgb(240,180,28)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >std::__invoke_impl&lt;void, void </text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (20,000,000 samples, 0.14%)</title><rect x="909.0" y="149" width="1.7" height="15.0" fill="rgb(239,23,53)" rx="2" ry="2" />
<text  x="912.05" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (20,000,000 samples, 0.14%)</title><rect x="406.5" y="293" width="1.6" height="15.0" fill="rgb(208,15,40)" rx="2" ry="2" />
<text  x="409.54" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_deallocate_node (40,000,000 samples, 0.27%)</title><rect x="1013.4" y="469" width="3.2" height="15.0" fill="rgb(235,193,23)" rx="2" ry="2" />
<text  x="1016.40" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (140,000,000 samples, 0.95%)</title><rect x="202.7" y="229" width="11.2" height="15.0" fill="rgb(222,80,8)" rx="2" ry="2" />
<text  x="205.65" y="239.5" ></text>
</g>
<g >
<title>leveldb::Status::OK (20,000,000 samples, 0.14%)</title><rect x="828.8" y="389" width="1.6" height="15.0" fill="rgb(249,4,10)" rx="2" ry="2" />
<text  x="831.78" y="399.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::~MemHashTable (100,000,000 samples, 0.68%)</title><rect x="1008.6" y="533" width="8.0" height="15.0" fill="rgb(222,62,45)" rx="2" ry="2" />
<text  x="1011.59" y="543.5" ></text>
</g>
<g >
<title>pmem_flush (140,000,000 samples, 0.95%)</title><rect x="287.7" y="357" width="11.3" height="15.0" fill="rgb(254,226,39)" rx="2" ry="2" />
<text  x="290.74" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (20,000,000 samples, 0.14%)</title><rect x="311.8" y="309" width="1.6" height="15.0" fill="rgb(246,189,28)" rx="2" ry="2" />
<text  x="314.82" y="319.5" ></text>
</g>
<g >
<title>_IO_str_init_static_internal (20,000,000 samples, 0.14%)</title><rect x="515.7" y="405" width="1.6" height="15.0" fill="rgb(231,40,50)" rx="2" ry="2" />
<text  x="518.71" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (20,000,000 samples, 0.14%)</title><rect x="35.7" y="277" width="1.6" height="15.0" fill="rgb(218,187,34)" rx="2" ry="2" />
<text  x="38.69" y="287.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::get_future (60,000,000 samples, 0.41%)</title><rect x="931.5" y="437" width="4.8" height="15.0" fill="rgb(218,189,31)" rx="2" ry="2" />
<text  x="934.52" y="447.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;leveldb::ParsedInternalKey, leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt; (20,000,000 samples, 0.14%)</title><rect x="509.3" y="309" width="1.6" height="15.0" fill="rgb(210,93,45)" rx="2" ry="2" />
<text  x="512.29" y="319.5" ></text>
</g>
<g >
<title>handle_mm_fault (80,000,000 samples, 0.54%)</title><rect x="1132.2" y="565" width="6.4" height="15.0" fill="rgb(243,100,25)" rx="2" ry="2" />
<text  x="1135.20" y="575.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::TableBuilder (20,000,000 samples, 0.14%)</title><rect x="299.0" y="389" width="1.6" height="15.0" fill="rgb(212,86,42)" rx="2" ry="2" />
<text  x="301.98" y="399.5" ></text>
</g>
<g >
<title>memmove_nodrain_avx512f_clwb (40,000,000 samples, 0.27%)</title><rect x="867.3" y="373" width="3.2" height="15.0" fill="rgb(241,31,7)" rx="2" ry="2" />
<text  x="870.31" y="383.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::RandomHeight (40,000,000 samples, 0.27%)</title><rect x="804.7" y="341" width="3.2" height="15.0" fill="rgb(210,77,29)" rx="2" ry="2" />
<text  x="807.69" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (140,000,000 samples, 0.95%)</title><rect x="976.5" y="293" width="11.2" height="15.0" fill="rgb(231,155,27)" rx="2" ry="2" />
<text  x="979.48" y="303.5" ></text>
</g>
<g >
<title>leveldb::WriteBatch::Iterate (1,920,000,000 samples, 13.06%)</title><rect x="658.6" y="405" width="154.1" height="15.0" fill="rgb(248,163,11)" rx="2" ry="2" />
<text  x="661.60" y="415.5" >leveldb::WriteBatch..</text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (20,000,000 samples, 0.14%)</title><rect x="962.0" y="341" width="1.6" height="15.0" fill="rgb(224,229,44)" rx="2" ry="2" />
<text  x="965.03" y="351.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (200,000,000 samples, 1.36%)</title><rect x="119.2" y="325" width="16.0" height="15.0" fill="rgb(212,73,19)" rx="2" ry="2" />
<text  x="122.17" y="335.5" ></text>
</g>
<g >
<title>ext4_dax_huge_fault (20,000,000 samples, 0.14%)</title><rect x="1162.7" y="517" width="1.6" height="15.0" fill="rgb(250,1,26)" rx="2" ry="2" />
<text  x="1165.71" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (80,000,000 samples, 0.54%)</title><rect x="499.7" y="405" width="6.4" height="15.0" fill="rgb(249,129,15)" rx="2" ry="2" />
<text  x="502.66" y="415.5" ></text>
</g>
<g >
<title>__do_page_fault (80,000,000 samples, 0.54%)</title><rect x="1132.2" y="581" width="6.4" height="15.0" fill="rgb(219,128,32)" rx="2" ry="2" />
<text  x="1135.20" y="591.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (520,000,000 samples, 3.54%)</title><rect x="711.6" y="293" width="41.7" height="15.0" fill="rgb(250,194,33)" rx="2" ry="2" />
<text  x="714.58" y="303.5" >lev..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (40,000,000 samples, 0.27%)</title><rect x="226.7" y="261" width="3.2" height="15.0" fill="rgb(249,65,22)" rx="2" ry="2" />
<text  x="229.73" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (40,000,000 samples, 0.27%)</title><rect x="329.5" y="341" width="3.2" height="15.0" fill="rgb(221,52,6)" rx="2" ry="2" />
<text  x="332.48" y="351.5" ></text>
</g>
<g >
<title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::__atomic_futex_unsigned (60,000,000 samples, 0.41%)</title><rect x="949.2" y="277" width="4.8" height="15.0" fill="rgb(220,200,42)" rx="2" ry="2" />
<text  x="952.18" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::push_back (20,000,000 samples, 0.14%)</title><rect x="880.1" y="421" width="1.7" height="15.0" fill="rgb(234,170,53)" rx="2" ry="2" />
<text  x="883.15" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (260,000,000 samples, 1.77%)</title><rect x="315.0" y="373" width="20.9" height="15.0" fill="rgb(223,92,8)" rx="2" ry="2" />
<text  x="318.03" y="383.5" ></text>
</g>
<g >
<title>operator new[] (60,000,000 samples, 0.41%)</title><rect x="401.7" y="325" width="4.8" height="15.0" fill="rgb(216,186,9)" rx="2" ry="2" />
<text  x="404.73" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::_S_do_relocate (20,000,000 samples, 0.14%)</title><rect x="509.3" y="357" width="1.6" height="15.0" fill="rgb(217,46,2)" rx="2" ry="2" />
<text  x="512.29" y="367.5" ></text>
</g>
<g >
<title>ext4_iomap_begin (140,000,000 samples, 0.95%)</title><rect x="1151.5" y="469" width="11.2" height="15.0" fill="rgb(246,168,20)" rx="2" ry="2" />
<text  x="1154.47" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (60,000,000 samples, 0.41%)</title><rect x="486.8" y="373" width="4.8" height="15.0" fill="rgb(209,43,48)" rx="2" ry="2" />
<text  x="489.82" y="383.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::key (40,000,000 samples, 0.27%)</title><rect x="11.6" y="373" width="3.2" height="15.0" fill="rgb(208,219,19)" rx="2" ry="2" />
<text  x="14.61" y="383.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (40,000,000 samples, 0.27%)</title><rect x="162.5" y="357" width="3.2" height="15.0" fill="rgb(220,75,31)" rx="2" ry="2" />
<text  x="165.52" y="367.5" ></text>
</g>
<g >
<title>do_syscall_64 (100,000,000 samples, 0.68%)</title><rect x="888.2" y="309" width="8.0" height="15.0" fill="rgb(251,191,54)" rx="2" ry="2" />
<text  x="891.18" y="319.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;leveldb::ParsedInternalKey*, leveldb::ParsedInternalKey&gt; (20,000,000 samples, 0.14%)</title><rect x="491.6" y="341" width="1.6" height="15.0" fill="rgb(234,188,10)" rx="2" ry="2" />
<text  x="494.63" y="351.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (20,000,000 samples, 0.14%)</title><rect x="1039.1" y="629" width="1.6" height="15.0" fill="rgb(224,10,20)" rx="2" ry="2" />
<text  x="1042.09" y="639.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::wait (100,000,000 samples, 0.68%)</title><rect x="921.9" y="405" width="8.0" height="15.0" fill="rgb(227,25,28)" rx="2" ry="2" />
<text  x="924.89" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (220,000,000 samples, 1.50%)</title><rect x="254.0" y="325" width="17.7" height="15.0" fill="rgb(235,129,23)" rx="2" ry="2" />
<text  x="257.03" y="335.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Rep::Rep (40,000,000 samples, 0.27%)</title><rect x="53.3" y="357" width="3.3" height="15.0" fill="rgb(219,204,51)" rx="2" ry="2" />
<text  x="56.35" y="367.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (20,000,000 samples, 0.14%)</title><rect x="276.5" y="261" width="1.6" height="15.0" fill="rgb(249,155,24)" rx="2" ry="2" />
<text  x="279.50" y="271.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (20,000,000 samples, 0.14%)</title><rect x="909.0" y="181" width="1.7" height="15.0" fill="rgb(216,145,0)" rx="2" ry="2" />
<text  x="912.05" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (20,000,000 samples, 0.14%)</title><rect x="201.0" y="213" width="1.7" height="15.0" fill="rgb(247,22,52)" rx="2" ry="2" />
<text  x="204.05" y="223.5" ></text>
</g>
<g >
<title>std::future&lt;leveldb::Status&gt;::future (60,000,000 samples, 0.41%)</title><rect x="931.5" y="421" width="4.8" height="15.0" fill="rgb(253,44,8)" rx="2" ry="2" />
<text  x="934.52" y="431.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (240,000,000 samples, 1.63%)</title><rect x="756.5" y="277" width="19.3" height="15.0" fill="rgb(225,125,23)" rx="2" ry="2" />
<text  x="759.53" y="287.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (60,000,000 samples, 0.41%)</title><rect x="303.8" y="277" width="4.8" height="15.0" fill="rgb(220,2,22)" rx="2" ry="2" />
<text  x="306.80" y="287.5" ></text>
</g>
<g >
<title>read_int (20,000,000 samples, 0.14%)</title><rect x="520.5" y="389" width="1.6" height="15.0" fill="rgb(241,182,12)" rx="2" ry="2" />
<text  x="523.53" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (20,000,000 samples, 0.14%)</title><rect x="37.3" y="293" width="1.6" height="15.0" fill="rgb(248,203,53)" rx="2" ry="2" />
<text  x="40.29" y="303.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::~DBImpl (100,000,000 samples, 0.68%)</title><rect x="1008.6" y="549" width="8.0" height="15.0" fill="rgb(246,168,41)" rx="2" ry="2" />
<text  x="1011.59" y="559.5" ></text>
</g>
<g >
<title>file_write_and_wait_range (20,000,000 samples, 0.14%)</title><rect x="1146.7" y="437" width="1.6" height="15.0" fill="rgb(207,114,22)" rx="2" ry="2" />
<text  x="1149.65" y="447.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseListToSpans (20,000,000 samples, 0.14%)</title><rect x="1015.0" y="341" width="1.6" height="15.0" fill="rgb(220,188,50)" rx="2" ry="2" />
<text  x="1018.01" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (20,000,000 samples, 0.14%)</title><rect x="1177.2" y="629" width="1.6" height="15.0" fill="rgb(241,102,11)" rx="2" ry="2" />
<text  x="1180.16" y="639.5" ></text>
</g>
<g >
<title>pmem_flush (20,000,000 samples, 0.14%)</title><rect x="51.7" y="341" width="1.6" height="15.0" fill="rgb(249,152,52)" rx="2" ry="2" />
<text  x="54.74" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (20,000,000 samples, 0.14%)</title><rect x="974.9" y="309" width="1.6" height="15.0" fill="rgb(226,81,20)" rx="2" ry="2" />
<text  x="977.87" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (20,000,000 samples, 0.14%)</title><rect x="284.5" y="149" width="1.6" height="15.0" fill="rgb(227,156,43)" rx="2" ry="2" />
<text  x="287.53" y="159.5" ></text>
</g>
<g >
<title>do_page_fault (360,000,000 samples, 2.45%)</title><rect x="1143.4" y="597" width="28.9" height="15.0" fill="rgb(231,166,41)" rx="2" ry="2" />
<text  x="1146.44" y="607.5" >do..</text>
</g>
<g >
<title>std::swap&lt;std::__future_base::_Result_base::_Deleter&gt; (40,000,000 samples, 0.27%)</title><rect x="912.3" y="213" width="3.2" height="15.0" fill="rgb(236,13,29)" rx="2" ry="2" />
<text  x="915.26" y="223.5" ></text>
</g>
<g >
<title>TCMalloc_SystemRelease (20,000,000 samples, 0.14%)</title><rect x="284.5" y="197" width="1.6" height="15.0" fill="rgb(228,133,19)" rx="2" ry="2" />
<text  x="287.53" y="207.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (20,000,000 samples, 0.14%)</title><rect x="666.6" y="293" width="1.6" height="15.0" fill="rgb(242,6,20)" rx="2" ry="2" />
<text  x="669.63" y="303.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (280,000,000 samples, 1.90%)</title><rect x="965.2" y="405" width="22.5" height="15.0" fill="rgb(206,101,11)" rx="2" ry="2" />
<text  x="968.24" y="415.5" >s..</text>
</g>
<g >
<title>leveldb::BlockBuilder::Add (140,000,000 samples, 0.95%)</title><rect x="175.4" y="341" width="11.2" height="15.0" fill="rgb(224,188,1)" rx="2" ry="2" />
<text  x="178.36" y="351.5" ></text>
</g>
<g >
<title>dax_iomap_fault (80,000,000 samples, 0.54%)</title><rect x="1132.2" y="517" width="6.4" height="15.0" fill="rgb(227,47,21)" rx="2" ry="2" />
<text  x="1135.20" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt;::_M_next (60,000,000 samples, 0.41%)</title><rect x="1008.6" y="469" width="4.8" height="15.0" fill="rgb(241,197,13)" rx="2" ry="2" />
<text  x="1011.59" y="479.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (20,000,000 samples, 0.14%)</title><rect x="284.5" y="165" width="1.6" height="15.0" fill="rgb(212,128,8)" rx="2" ry="2" />
<text  x="287.53" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (120,000,000 samples, 0.82%)</title><rect x="438.7" y="309" width="9.6" height="15.0" fill="rgb(221,23,33)" rx="2" ry="2" />
<text  x="441.65" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_S_cget (20,000,000 samples, 0.14%)</title><rect x="331.1" y="325" width="1.6" height="15.0" fill="rgb(253,77,2)" rx="2" ry="2" />
<text  x="334.09" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (20,000,000 samples, 0.14%)</title><rect x="422.6" y="229" width="1.6" height="15.0" fill="rgb(209,97,38)" rx="2" ry="2" />
<text  x="425.60" y="239.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (20,000,000 samples, 0.14%)</title><rect x="1016.6" y="629" width="1.6" height="15.0" fill="rgb(206,115,36)" rx="2" ry="2" />
<text  x="1019.61" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (100,000,000 samples, 0.68%)</title><rect x="321.5" y="341" width="8.0" height="15.0" fill="rgb(231,84,39)" rx="2" ry="2" />
<text  x="324.46" y="351.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (280,000,000 samples, 1.90%)</title><rect x="117.6" y="341" width="22.4" height="15.0" fill="rgb(246,173,38)" rx="2" ry="2" />
<text  x="120.56" y="351.5" >l..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::deallocate (40,000,000 samples, 0.27%)</title><rect x="1013.4" y="437" width="3.2" height="15.0" fill="rgb(254,135,16)" rx="2" ry="2" />
<text  x="1016.40" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (60,000,000 samples, 0.41%)</title><rect x="401.7" y="341" width="4.8" height="15.0" fill="rgb(235,202,29)" rx="2" ry="2" />
<text  x="404.73" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt;::deallocate (40,000,000 samples, 0.27%)</title><rect x="1013.4" y="421" width="3.2" height="15.0" fill="rgb(232,69,0)" rx="2" ry="2" />
<text  x="1016.40" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (20,000,000 samples, 0.14%)</title><rect x="213.9" y="261" width="1.6" height="15.0" fill="rgb(233,83,10)" rx="2" ry="2" />
<text  x="216.89" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (40,000,000 samples, 0.27%)</title><rect x="268.5" y="293" width="3.2" height="15.0" fill="rgb(213,227,30)" rx="2" ry="2" />
<text  x="271.48" y="303.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (20,000,000 samples, 0.14%)</title><rect x="37.3" y="341" width="1.6" height="15.0" fill="rgb(205,103,8)" rx="2" ry="2" />
<text  x="40.29" y="351.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (1,620,000,000 samples, 11.02%)</title><rect x="669.8" y="341" width="130.1" height="15.0" fill="rgb(244,133,24)" rx="2" ry="2" />
<text  x="672.84" y="351.5" >leveldb::SkipLis..</text>
</g>
<g >
<title>leveldb::DBImpl::MakeRoomForWrite (20,000,000 samples, 0.14%)</title><rect x="527.0" y="421" width="1.6" height="15.0" fill="rgb(246,190,3)" rx="2" ry="2" />
<text  x="529.95" y="431.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (140,000,000 samples, 0.95%)</title><rect x="106.3" y="341" width="11.3" height="15.0" fill="rgb(237,90,30)" rx="2" ry="2" />
<text  x="109.33" y="351.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BGWork (6,240,000,000 samples, 42.45%)</title><rect x="10.0" y="469" width="500.9" height="15.0" fill="rgb(254,114,32)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >leveldb::DBImpl::BGWork</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (20,000,000 samples, 0.14%)</title><rect x="443.5" y="245" width="1.6" height="15.0" fill="rgb(232,227,39)" rx="2" ry="2" />
<text  x="446.47" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::construct&lt;leveldb::ParsedInternalKey, leveldb::ParsedInternalKey&gt; (20,000,000 samples, 0.14%)</title><rect x="509.3" y="293" width="1.6" height="15.0" fill="rgb(220,211,38)" rx="2" ry="2" />
<text  x="512.29" y="303.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (160,000,000 samples, 1.09%)</title><rect x="24.4" y="341" width="12.9" height="15.0" fill="rgb(218,157,38)" rx="2" ry="2" />
<text  x="27.45" y="351.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::Carve (20,000,000 samples, 0.14%)</title><rect x="50.1" y="245" width="1.6" height="15.0" fill="rgb(250,220,45)" rx="2" ry="2" />
<text  x="53.14" y="255.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (12,400,000,000 samples, 84.35%)</title><rect x="10.0" y="549" width="995.4" height="15.0" fill="rgb(252,225,36)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>leveldb::Slice::size (80,000,000 samples, 0.54%)</title><rect x="371.2" y="357" width="6.4" height="15.0" fill="rgb(217,85,9)" rx="2" ry="2" />
<text  x="374.22" y="367.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (40,000,000 samples, 0.27%)</title><rect x="177.0" y="309" width="3.2" height="15.0" fill="rgb(254,29,30)" rx="2" ry="2" />
<text  x="179.97" y="319.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (20,000,000 samples, 0.14%)</title><rect x="485.2" y="293" width="1.6" height="15.0" fill="rgb(231,225,52)" rx="2" ry="2" />
<text  x="488.21" y="303.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, false&gt;::_M_head (20,000,000 samples, 0.14%)</title><rect x="907.4" y="101" width="1.6" height="15.0" fill="rgb(249,162,13)" rx="2" ry="2" />
<text  x="910.44" y="111.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (20,000,000 samples, 0.14%)</title><rect x="168.9" y="309" width="1.6" height="15.0" fill="rgb(217,207,27)" rx="2" ry="2" />
<text  x="171.94" y="319.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (20,000,000 samples, 0.14%)</title><rect x="18.0" y="341" width="1.6" height="15.0" fill="rgb(253,189,33)" rx="2" ry="2" />
<text  x="21.03" y="351.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (20,000,000 samples, 0.14%)</title><rect x="347.1" y="325" width="1.6" height="15.0" fill="rgb(233,214,54)" rx="2" ry="2" />
<text  x="350.14" y="335.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MergingIterator::Next (1,020,000,000 samples, 6.94%)</title><rect x="66.2" y="405" width="81.9" height="15.0" fill="rgb(209,104,44)" rx="2" ry="2" />
<text  x="69.19" y="415.5" >leveldb::..</text>
</g>
<g >
<title>start_thread (12,400,000,000 samples, 84.35%)</title><rect x="10.0" y="613" width="995.4" height="15.0" fill="rgb(246,173,39)" rx="2" ry="2" />
<text  x="13.00" y="623.5" >start_thread</text>
</g>
<g >
<title>std::fill_n&lt;char*, unsigned long, char&gt; (40,000,000 samples, 0.27%)</title><rect x="249.2" y="245" width="3.2" height="15.0" fill="rgb(242,70,37)" rx="2" ry="2" />
<text  x="252.21" y="255.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (60,000,000 samples, 0.41%)</title><rect x="177.0" y="325" width="4.8" height="15.0" fill="rgb(210,195,5)" rx="2" ry="2" />
<text  x="179.97" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (260,000,000 samples, 1.77%)</title><rect x="252.4" y="341" width="20.9" height="15.0" fill="rgb(227,68,45)" rx="2" ry="2" />
<text  x="255.42" y="351.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_deleter (20,000,000 samples, 0.14%)</title><rect x="910.7" y="213" width="1.6" height="15.0" fill="rgb(226,27,46)" rx="2" ry="2" />
<text  x="913.65" y="223.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (40,000,000 samples, 0.27%)</title><rect x="18.0" y="357" width="3.2" height="15.0" fill="rgb(232,55,45)" rx="2" ry="2" />
<text  x="21.03" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size@plt (20,000,000 samples, 0.14%)</title><rect x="361.6" y="357" width="1.6" height="15.0" fill="rgb(215,219,5)" rx="2" ry="2" />
<text  x="364.59" y="367.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::DecommitSpan (20,000,000 samples, 0.14%)</title><rect x="284.5" y="213" width="1.6" height="15.0" fill="rgb(242,211,17)" rx="2" ry="2" />
<text  x="287.53" y="223.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (120,000,000 samples, 0.82%)</title><rect x="854.5" y="373" width="9.6" height="15.0" fill="rgb(248,74,6)" rx="2" ry="2" />
<text  x="857.46" y="383.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BuildBatchGroup (20,000,000 samples, 0.14%)</title><rect x="1031.1" y="629" width="1.6" height="15.0" fill="rgb(236,164,18)" rx="2" ry="2" />
<text  x="1034.06" y="639.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (20,000,000 samples, 0.14%)</title><rect x="984.5" y="229" width="1.6" height="15.0" fill="rgb(235,166,5)" rx="2" ry="2" />
<text  x="987.50" y="239.5" ></text>
</g>
<g >
<title>_start (120,000,000 samples, 0.82%)</title><rect x="1007.0" y="629" width="9.6" height="15.0" fill="rgb(243,181,8)" rx="2" ry="2" />
<text  x="1009.98" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add (20,000,000 samples, 0.14%)</title><rect x="966.8" y="341" width="1.6" height="15.0" fill="rgb(244,141,9)" rx="2" ry="2" />
<text  x="969.84" y="351.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::MergeIntoFreeList (20,000,000 samples, 0.14%)</title><rect x="284.5" y="229" width="1.6" height="15.0" fill="rgb(207,139,24)" rx="2" ry="2" />
<text  x="287.53" y="239.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (20,000,000 samples, 0.14%)</title><rect x="910.7" y="197" width="1.6" height="15.0" fill="rgb(215,133,0)" rx="2" ry="2" />
<text  x="913.65" y="207.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::front (40,000,000 samples, 0.27%)</title><rect x="876.9" y="421" width="3.2" height="15.0" fill="rgb(241,3,23)" rx="2" ry="2" />
<text  x="879.94" y="431.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (20,000,000 samples, 0.14%)</title><rect x="140.0" y="293" width="1.6" height="15.0" fill="rgb(208,208,51)" rx="2" ry="2" />
<text  x="143.04" y="303.5" ></text>
</g>
<g >
<title>leveldb::Compaction::MaxOutputFileSize (20,000,000 samples, 0.14%)</title><rect x="154.5" y="405" width="1.6" height="15.0" fill="rgb(226,18,44)" rx="2" ry="2" />
<text  x="157.49" y="415.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::_M_head (40,000,000 samples, 0.27%)</title><rect x="905.8" y="117" width="3.2" height="15.0" fill="rgb(230,73,5)" rx="2" ry="2" />
<text  x="908.84" y="127.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Next (540,000,000 samples, 3.67%)</title><rect x="104.7" y="389" width="43.4" height="15.0" fill="rgb(229,3,5)" rx="2" ry="2" />
<text  x="107.72" y="399.5" >leve..</text>
</g>
<g >
<title>__gthread_mutex_unlock (20,000,000 samples, 0.14%)</title><rect x="875.3" y="389" width="1.6" height="15.0" fill="rgb(243,110,39)" rx="2" ry="2" />
<text  x="878.33" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (40,000,000 samples, 0.27%)</title><rect x="905.8" y="165" width="3.2" height="15.0" fill="rgb(228,142,19)" rx="2" ry="2" />
<text  x="908.84" y="175.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::begin (40,000,000 samples, 0.27%)</title><rect x="876.9" y="405" width="3.2" height="15.0" fill="rgb(220,57,9)" rx="2" ry="2" />
<text  x="879.94" y="415.5" ></text>
</g>
<g >
<title>__libc_start_main (120,000,000 samples, 0.82%)</title><rect x="1007.0" y="613" width="9.6" height="15.0" fill="rgb(212,3,30)" rx="2" ry="2" />
<text  x="1009.98" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (20,000,000 samples, 0.14%)</title><rect x="59.8" y="357" width="1.6" height="15.0" fill="rgb(205,157,17)" rx="2" ry="2" />
<text  x="62.77" y="367.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::DoCompactionWork (5,580,000,000 samples, 37.96%)</title><rect x="63.0" y="421" width="447.9" height="15.0" fill="rgb(215,152,7)" rx="2" ry="2" />
<text  x="65.98" y="431.5" >leveldb::DBImpl::DoCompactionWork</text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (20,000,000 samples, 0.14%)</title><rect x="665.0" y="293" width="1.6" height="15.0" fill="rgb(245,182,17)" rx="2" ry="2" />
<text  x="668.02" y="303.5" ></text>
</g>
<g >
<title>submit_bio (100,000,000 samples, 0.68%)</title><rect x="1164.3" y="421" width="8.0" height="15.0" fill="rgb(233,180,45)" rx="2" ry="2" />
<text  x="1167.31" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_addr (20,000,000 samples, 0.14%)</title><rect x="326.3" y="245" width="1.6" height="15.0" fill="rgb(223,156,3)" rx="2" ry="2" />
<text  x="329.27" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (20,000,000 samples, 0.14%)</title><rect x="56.6" y="325" width="1.6" height="15.0" fill="rgb(254,12,39)" rx="2" ry="2" />
<text  x="59.56" y="335.5" ></text>
</g>
<g >
<title>do_page_fault (20,000,000 samples, 0.14%)</title><rect x="133.6" y="245" width="1.6" height="15.0" fill="rgb(239,4,4)" rx="2" ry="2" />
<text  x="136.62" y="255.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (20,000,000 samples, 0.14%)</title><rect x="37.3" y="325" width="1.6" height="15.0" fill="rgb(226,71,20)" rx="2" ry="2" />
<text  x="40.29" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::emplace_back&lt;leveldb::DBImpl::Writer*&gt; (20,000,000 samples, 0.14%)</title><rect x="880.1" y="405" width="1.7" height="15.0" fill="rgb(250,35,38)" rx="2" ry="2" />
<text  x="883.15" y="415.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;&gt; (280,000,000 samples, 1.90%)</title><rect x="941.2" y="405" width="22.4" height="15.0" fill="rgb(237,78,24)" rx="2" ry="2" />
<text  x="944.16" y="415.5" >s..</text>
</g>
<g >
<title>leveldb::DBImpl::FinishCompactionOutputFile (160,000,000 samples, 1.09%)</title><rect x="286.1" y="405" width="12.9" height="15.0" fill="rgb(235,83,44)" rx="2" ry="2" />
<text  x="289.14" y="415.5" ></text>
</g>
<g >
<title>db_bench (14,700,000,000 samples, 100.00%)</title><rect x="10.0" y="645" width="1180.0" height="15.0" fill="rgb(239,226,22)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >db_bench</text>
</g>
<g >
<title>std::__invoke&lt;void  (240,000,000 samples, 1.63%)</title><rect x="896.2" y="293" width="19.3" height="15.0" fill="rgb(251,90,11)" rx="2" ry="2" />
<text  x="899.20" y="303.5" ></text>
</g>
<g >
<title>pmem_persist (20,000,000 samples, 0.14%)</title><rect x="247.6" y="341" width="1.6" height="15.0" fill="rgb(243,200,39)" rx="2" ry="2" />
<text  x="250.61" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (20,000,000 samples, 0.14%)</title><rect x="326.3" y="261" width="1.6" height="15.0" fill="rgb(249,215,22)" rx="2" ry="2" />
<text  x="329.27" y="271.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::FindShortestSeparator (20,000,000 samples, 0.14%)</title><rect x="396.9" y="389" width="1.6" height="15.0" fill="rgb(224,6,31)" rx="2" ry="2" />
<text  x="399.91" y="399.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (60,000,000 samples, 0.41%)</title><rect x="971.7" y="341" width="4.8" height="15.0" fill="rgb(239,1,29)" rx="2" ry="2" />
<text  x="974.66" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (20,000,000 samples, 0.14%)</title><rect x="231.6" y="229" width="1.6" height="15.0" fill="rgb(230,194,43)" rx="2" ry="2" />
<text  x="234.55" y="239.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::value (40,000,000 samples, 0.27%)</title><rect x="149.7" y="325" width="3.2" height="15.0" fill="rgb(210,89,39)" rx="2" ry="2" />
<text  x="152.67" y="335.5" ></text>
</g>
<g >
<title>snappy::RawUncompress (100,000,000 samples, 0.68%)</title><rect x="124.0" y="245" width="8.0" height="15.0" fill="rgb(245,40,31)" rx="2" ry="2" />
<text  x="126.99" y="255.5" ></text>
</g>
<g >
<title>leveldb::EncodeFixed64 (40,000,000 samples, 0.27%)</title><rect x="814.3" y="405" width="3.2" height="15.0" fill="rgb(250,108,25)" rx="2" ry="2" />
<text  x="817.33" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (40,000,000 samples, 0.27%)</title><rect x="274.9" y="341" width="3.2" height="15.0" fill="rgb(251,205,9)" rx="2" ry="2" />
<text  x="277.90" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (100,000,000 samples, 0.68%)</title><rect x="440.3" y="293" width="8.0" height="15.0" fill="rgb(236,12,5)" rx="2" ry="2" />
<text  x="443.26" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (40,000,000 samples, 0.27%)</title><rect x="226.7" y="277" width="3.2" height="15.0" fill="rgb(249,189,52)" rx="2" ry="2" />
<text  x="229.73" y="287.5" ></text>
</g>
<g >
<title>leveldb::port::Mutex::Lock (20,000,000 samples, 0.14%)</title><rect x="873.7" y="421" width="1.6" height="15.0" fill="rgb(237,48,17)" rx="2" ry="2" />
<text  x="876.73" y="431.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (40,000,000 samples, 0.27%)</title><rect x="56.6" y="373" width="3.2" height="15.0" fill="rgb(230,92,36)" rx="2" ry="2" />
<text  x="59.56" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (20,000,000 samples, 0.14%)</title><rect x="326.3" y="293" width="1.6" height="15.0" fill="rgb(213,46,32)" rx="2" ry="2" />
<text  x="329.27" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append@plt (40,000,000 samples, 0.27%)</title><rect x="387.3" y="373" width="3.2" height="15.0" fill="rgb(215,76,26)" rx="2" ry="2" />
<text  x="390.28" y="383.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed64 (40,000,000 samples, 0.27%)</title><rect x="281.3" y="357" width="3.2" height="15.0" fill="rgb(239,213,54)" rx="2" ry="2" />
<text  x="284.32" y="367.5" ></text>
</g>
<g >
<title>leveldb::Status::Status (20,000,000 samples, 0.14%)</title><rect x="828.8" y="373" width="1.6" height="15.0" fill="rgb(211,134,10)" rx="2" ry="2" />
<text  x="831.78" y="383.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (120,000,000 samples, 0.82%)</title><rect x="766.2" y="245" width="9.6" height="15.0" fill="rgb(216,96,13)" rx="2" ry="2" />
<text  x="769.16" y="255.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteBlock (120,000,000 samples, 0.82%)</title><rect x="238.0" y="325" width="9.6" height="15.0" fill="rgb(213,156,33)" rx="2" ry="2" />
<text  x="240.97" y="335.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (40,000,000 samples, 0.27%)</title><rect x="91.9" y="341" width="3.2" height="15.0" fill="rgb(230,162,33)" rx="2" ry="2" />
<text  x="94.88" y="351.5" ></text>
</g>
<g >
<title>leveldb::Random::Uniform (20,000,000 samples, 0.14%)</title><rect x="987.7" y="453" width="1.6" height="15.0" fill="rgb(246,219,25)" rx="2" ry="2" />
<text  x="990.71" y="463.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Finish (20,000,000 samples, 0.14%)</title><rect x="247.6" y="357" width="1.6" height="15.0" fill="rgb(213,212,15)" rx="2" ry="2" />
<text  x="250.61" y="367.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (20,000,000 samples, 0.14%)</title><rect x="873.7" y="389" width="1.6" height="15.0" fill="rgb(248,202,1)" rx="2" ry="2" />
<text  x="876.73" y="399.5" ></text>
</g>
<g >
<title>flush_clwb (20,000,000 samples, 0.14%)</title><rect x="247.6" y="309" width="1.6" height="15.0" fill="rgb(212,145,2)" rx="2" ry="2" />
<text  x="250.61" y="319.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Add (1,920,000,000 samples, 13.06%)</title><rect x="339.1" y="405" width="154.1" height="15.0" fill="rgb(209,192,50)" rx="2" ry="2" />
<text  x="342.12" y="415.5" >leveldb::TableBuild..</text>
</g>
<g >
<title>generic_make_request (100,000,000 samples, 0.68%)</title><rect x="1164.3" y="405" width="8.0" height="15.0" fill="rgb(217,36,38)" rx="2" ry="2" />
<text  x="1167.31" y="415.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_complete_async (60,000,000 samples, 0.41%)</title><rect x="925.1" y="389" width="4.8" height="15.0" fill="rgb(235,75,8)" rx="2" ry="2" />
<text  x="928.10" y="399.5" ></text>
</g>
<g >
<title>operator new[] (40,000,000 samples, 0.27%)</title><rect x="937.9" y="421" width="3.3" height="15.0" fill="rgb(250,226,44)" rx="2" ry="2" />
<text  x="940.95" y="431.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (20,000,000 samples, 0.14%)</title><rect x="393.7" y="357" width="1.6" height="15.0" fill="rgb(205,209,45)" rx="2" ry="2" />
<text  x="396.70" y="367.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (20,000,000 samples, 0.14%)</title><rect x="751.7" y="277" width="1.6" height="15.0" fill="rgb(252,81,1)" rx="2" ry="2" />
<text  x="754.71" y="287.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::key (20,000,000 samples, 0.14%)</title><rect x="103.1" y="373" width="1.6" height="15.0" fill="rgb(241,197,25)" rx="2" ry="2" />
<text  x="106.12" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (40,000,000 samples, 0.27%)</title><rect x="268.5" y="277" width="3.2" height="15.0" fill="rgb(241,185,17)" rx="2" ry="2" />
<text  x="271.48" y="287.5" ></text>
</g>
<g >
<title>operator new[] (20,000,000 samples, 0.14%)</title><rect x="132.0" y="261" width="1.6" height="15.0" fill="rgb(210,123,34)" rx="2" ry="2" />
<text  x="135.01" y="271.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (20,000,000 samples, 0.14%)</title><rect x="1007.0" y="437" width="1.6" height="15.0" fill="rgb(234,188,45)" rx="2" ry="2" />
<text  x="1009.98" y="447.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (20,000,000 samples, 0.14%)</title><rect x="191.4" y="309" width="1.6" height="15.0" fill="rgb(252,52,12)" rx="2" ry="2" />
<text  x="194.41" y="319.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (80,000,000 samples, 0.54%)</title><rect x="377.6" y="373" width="6.5" height="15.0" fill="rgb(236,5,52)" rx="2" ry="2" />
<text  x="380.65" y="383.5" ></text>
</g>
<g >
<title>leveldb::ParseInternalKey (40,000,000 samples, 0.27%)</title><rect x="281.3" y="373" width="3.2" height="15.0" fill="rgb(214,3,2)" rx="2" ry="2" />
<text  x="284.32" y="383.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (40,000,000 samples, 0.27%)</title><rect x="305.4" y="261" width="3.2" height="15.0" fill="rgb(248,136,24)" rx="2" ry="2" />
<text  x="308.40" y="271.5" ></text>
</g>
<g >
<title>ext4_mark_iloc_dirty (40,000,000 samples, 0.27%)</title><rect x="1151.5" y="373" width="3.2" height="15.0" fill="rgb(250,210,13)" rx="2" ry="2" />
<text  x="1154.47" y="383.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (20,000,000 samples, 0.14%)</title><rect x="337.5" y="405" width="1.6" height="15.0" fill="rgb(222,100,42)" rx="2" ry="2" />
<text  x="340.51" y="415.5" ></text>
</g>
<g >
<title>jbd2_complete_transaction (40,000,000 samples, 0.27%)</title><rect x="1148.3" y="437" width="3.2" height="15.0" fill="rgb(229,12,28)" rx="2" ry="2" />
<text  x="1151.26" y="447.5" ></text>
</g>
<g >
<title>__GI__IO_getline_info (20,000,000 samples, 0.14%)</title><rect x="1007.0" y="501" width="1.6" height="15.0" fill="rgb(217,152,37)" rx="2" ry="2" />
<text  x="1009.98" y="511.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::Stats::FinishedSingleOp (20,000,000 samples, 0.14%)</title><rect x="522.1" y="453" width="1.6" height="15.0" fill="rgb(215,57,1)" rx="2" ry="2" />
<text  x="525.14" y="463.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (20,000,000 samples, 0.14%)</title><rect x="427.4" y="293" width="1.6" height="15.0" fill="rgb(240,20,16)" rx="2" ry="2" />
<text  x="430.41" y="303.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (20,000,000 samples, 0.14%)</title><rect x="963.6" y="373" width="1.6" height="15.0" fill="rgb(243,160,20)" rx="2" ry="2" />
<text  x="966.63" y="383.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (20,000,000 samples, 0.14%)</title><rect x="668.2" y="293" width="1.6" height="15.0" fill="rgb(214,127,13)" rx="2" ry="2" />
<text  x="671.23" y="303.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (20,000,000 samples, 0.14%)</title><rect x="244.4" y="261" width="1.6" height="15.0" fill="rgb(227,187,6)" rx="2" ry="2" />
<text  x="247.39" y="271.5" ></text>
</g>
<g >
<title>std::swap&lt;char const*&gt; (60,000,000 samples, 0.41%)</title><rect x="817.5" y="389" width="4.9" height="15.0" fill="rgb(249,80,38)" rx="2" ry="2" />
<text  x="820.54" y="399.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;std::__future_base::_State_baseV2,  (20,000,000 samples, 0.14%)</title><rect x="929.9" y="405" width="1.6" height="15.0" fill="rgb(239,125,44)" rx="2" ry="2" />
<text  x="932.92" y="415.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (400,000,000 samples, 2.72%)</title><rect x="400.1" y="373" width="32.1" height="15.0" fill="rgb(225,64,19)" rx="2" ry="2" />
<text  x="403.12" y="383.5" >le..</text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::size (20,000,000 samples, 0.14%)</title><rect x="238.0" y="293" width="1.6" height="15.0" fill="rgb(231,205,22)" rx="2" ry="2" />
<text  x="240.97" y="303.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (40,000,000 samples, 0.27%)</title><rect x="905.8" y="133" width="3.2" height="15.0" fill="rgb(222,82,52)" rx="2" ry="2" />
<text  x="908.84" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt;::_M_next (20,000,000 samples, 0.14%)</title><rect x="419.4" y="293" width="1.6" height="15.0" fill="rgb(222,220,40)" rx="2" ry="2" />
<text  x="422.39" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt;::allocate (20,000,000 samples, 0.14%)</title><rect x="220.3" y="245" width="1.6" height="15.0" fill="rgb(210,209,39)" rx="2" ry="2" />
<text  x="223.31" y="255.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (20,000,000 samples, 0.14%)</title><rect x="1034.3" y="613" width="1.6" height="15.0" fill="rgb(242,172,1)" rx="2" ry="2" />
<text  x="1037.27" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (80,000,000 samples, 0.54%)</title><rect x="323.1" y="325" width="6.4" height="15.0" fill="rgb(245,74,53)" rx="2" ry="2" />
<text  x="326.06" y="335.5" ></text>
</g>
<g >
<title>leveldb::Block::Iter::value (20,000,000 samples, 0.14%)</title><rect x="149.7" y="309" width="1.6" height="15.0" fill="rgb(210,75,5)" rx="2" ry="2" />
<text  x="152.67" y="319.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::key (20,000,000 samples, 0.14%)</title><rect x="279.7" y="373" width="1.6" height="15.0" fill="rgb(206,25,21)" rx="2" ry="2" />
<text  x="282.71" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (20,000,000 samples, 0.14%)</title><rect x="1177.2" y="613" width="1.6" height="15.0" fill="rgb(246,133,10)" rx="2" ry="2" />
<text  x="1180.16" y="623.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (20,000,000 samples, 0.14%)</title><rect x="1047.1" y="629" width="1.6" height="15.0" fill="rgb(226,119,6)" rx="2" ry="2" />
<text  x="1050.12" y="639.5" ></text>
</g>
<g >
<title>std::mutex::unlock (40,000,000 samples, 0.27%)</title><rect x="528.6" y="389" width="3.2" height="15.0" fill="rgb(215,77,12)" rx="2" ry="2" />
<text  x="531.56" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (260,000,000 samples, 1.77%)</title><rect x="193.0" y="277" width="20.9" height="15.0" fill="rgb(226,34,24)" rx="2" ry="2" />
<text  x="196.02" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (60,000,000 samples, 0.41%)</title><rect x="997.3" y="421" width="4.9" height="15.0" fill="rgb(212,199,46)" rx="2" ry="2" />
<text  x="1000.35" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add (20,000,000 samples, 0.14%)</title><rect x="934.7" y="309" width="1.6" height="15.0" fill="rgb(237,103,6)" rx="2" ry="2" />
<text  x="937.73" y="319.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (40,000,000 samples, 0.27%)</title><rect x="801.5" y="309" width="3.2" height="15.0" fill="rgb(221,59,9)" rx="2" ry="2" />
<text  x="804.48" y="319.5" ></text>
</g>
<g >
<title>leveldb::Table::BlockReader (180,000,000 samples, 1.22%)</title><rect x="120.8" y="293" width="14.4" height="15.0" fill="rgb(249,197,3)" rx="2" ry="2" />
<text  x="123.78" y="303.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Value (80,000,000 samples, 0.54%)</title><rect x="239.6" y="293" width="6.4" height="15.0" fill="rgb(245,169,42)" rx="2" ry="2" />
<text  x="242.58" y="303.5" ></text>
</g>
<g >
<title>dax_finish_sync_fault (60,000,000 samples, 0.41%)</title><rect x="1146.7" y="485" width="4.8" height="15.0" fill="rgb(235,21,28)" rx="2" ry="2" />
<text  x="1149.65" y="495.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (240,000,000 samples, 1.63%)</title><rect x="941.2" y="341" width="19.2" height="15.0" fill="rgb(238,82,15)" rx="2" ry="2" />
<text  x="944.16" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (20,000,000 samples, 0.14%)</title><rect x="974.9" y="325" width="1.6" height="15.0" fill="rgb(223,86,30)" rx="2" ry="2" />
<text  x="977.87" y="335.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (280,000,000 samples, 1.90%)</title><rect x="941.2" y="357" width="22.4" height="15.0" fill="rgb(246,146,48)" rx="2" ry="2" />
<text  x="944.16" y="367.5" >s..</text>
</g>
<g >
<title>__GI___pthread_mutex_unlock (20,000,000 samples, 0.14%)</title><rect x="530.2" y="357" width="1.6" height="15.0" fill="rgb(251,194,45)" rx="2" ry="2" />
<text  x="533.16" y="367.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::CompactMemTable (660,000,000 samples, 4.49%)</title><rect x="10.0" y="421" width="53.0" height="15.0" fill="rgb(233,60,28)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >level..</text>
</g>
<g >
<title>leveldb::Slice::compare (20,000,000 samples, 0.14%)</title><rect x="347.1" y="341" width="1.6" height="15.0" fill="rgb(250,152,21)" rx="2" ry="2" />
<text  x="350.14" y="351.5" ></text>
</g>
<g >
<title>_IO_fgets (20,000,000 samples, 0.14%)</title><rect x="1007.0" y="533" width="1.6" height="15.0" fill="rgb(222,92,0)" rx="2" ry="2" />
<text  x="1009.98" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (20,000,000 samples, 0.14%)</title><rect x="934.7" y="341" width="1.6" height="15.0" fill="rgb(239,163,53)" rx="2" ry="2" />
<text  x="937.73" y="351.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (100,000,000 samples, 0.68%)</title><rect x="95.1" y="357" width="8.0" height="15.0" fill="rgb(239,31,44)" rx="2" ry="2" />
<text  x="98.09" y="367.5" ></text>
</g>
<g >
<title>ext4_mark_inode_dirty (40,000,000 samples, 0.27%)</title><rect x="1151.5" y="389" width="3.2" height="15.0" fill="rgb(205,107,52)" rx="2" ry="2" />
<text  x="1154.47" y="399.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::value (60,000,000 samples, 0.41%)</title><rect x="149.7" y="357" width="4.8" height="15.0" fill="rgb(248,49,12)" rx="2" ry="2" />
<text  x="152.67" y="367.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (20,000,000 samples, 0.14%)</title><rect x="361.6" y="373" width="1.6" height="15.0" fill="rgb(228,181,2)" rx="2" ry="2" />
<text  x="364.59" y="383.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (40,000,000 samples, 0.27%)</title><rect x="210.7" y="213" width="3.2" height="15.0" fill="rgb(252,218,34)" rx="2" ry="2" />
<text  x="213.68" y="223.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::~DBImpl (100,000,000 samples, 0.68%)</title><rect x="1008.6" y="565" width="8.0" height="15.0" fill="rgb(246,222,17)" rx="2" ry="2" />
<text  x="1011.59" y="575.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;leveldb::ParsedInternalKey*, leveldb::ParsedInternalKey*, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt; (20,000,000 samples, 0.14%)</title><rect x="509.3" y="341" width="1.6" height="15.0" fill="rgb(218,175,31)" rx="2" ry="2" />
<text  x="512.29" y="351.5" ></text>
</g>
<g >
<title>generic_make_request (80,000,000 samples, 0.54%)</title><rect x="1132.2" y="405" width="6.4" height="15.0" fill="rgb(240,59,32)" rx="2" ry="2" />
<text  x="1135.20" y="415.5" ></text>
</g>
<g >
<title>do_futex (60,000,000 samples, 0.41%)</title><rect x="891.4" y="277" width="4.8" height="15.0" fill="rgb(245,154,15)" rx="2" ry="2" />
<text  x="894.39" y="287.5" ></text>
</g>
<g >
<title>pmem_persist (20,000,000 samples, 0.14%)</title><rect x="51.7" y="357" width="1.6" height="15.0" fill="rgb(240,195,19)" rx="2" ry="2" />
<text  x="54.74" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (20,000,000 samples, 0.14%)</title><rect x="1182.0" y="629" width="1.6" height="15.0" fill="rgb(210,130,18)" rx="2" ry="2" />
<text  x="1184.97" y="639.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (40,000,000 samples, 0.27%)</title><rect x="1148.3" y="389" width="3.2" height="15.0" fill="rgb(241,82,54)" rx="2" ry="2" />
<text  x="1151.26" y="399.5" ></text>
</g>
<g >
<title>leveldb::EncodeVarint32 (20,000,000 samples, 0.14%)</title><rect x="356.8" y="357" width="1.6" height="15.0" fill="rgb(252,47,37)" rx="2" ry="2" />
<text  x="359.78" y="367.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (100,000,000 samples, 0.68%)</title><rect x="779.0" y="261" width="8.0" height="15.0" fill="rgb(209,142,51)" rx="2" ry="2" />
<text  x="782.01" y="271.5" ></text>
</g>
<g >
<title>leveldb::MemTable::ApproximateMemoryUsage (20,000,000 samples, 0.14%)</title><rect x="527.0" y="405" width="1.6" height="15.0" fill="rgb(221,128,18)" rx="2" ry="2" />
<text  x="529.95" y="415.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (20,000,000 samples, 0.14%)</title><rect x="974.9" y="293" width="1.6" height="15.0" fill="rgb(240,112,25)" rx="2" ry="2" />
<text  x="977.87" y="303.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::SetNext (20,000,000 samples, 0.14%)</title><rect x="1042.3" y="613" width="1.6" height="15.0" fill="rgb(227,123,49)" rx="2" ry="2" />
<text  x="1045.30" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (60,000,000 samples, 0.41%)</title><rect x="213.9" y="277" width="4.8" height="15.0" fill="rgb(217,146,43)" rx="2" ry="2" />
<text  x="216.89" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (20,000,000 samples, 0.14%)</title><rect x="1007.0" y="421" width="1.6" height="15.0" fill="rgb(210,28,52)" rx="2" ry="2" />
<text  x="1009.98" y="431.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Add (900,000,000 samples, 6.12%)</title><rect x="175.4" y="357" width="72.2" height="15.0" fill="rgb(214,220,49)" rx="2" ry="2" />
<text  x="178.36" y="367.5" >leveldb:..</text>
</g>
<g >
<title>leveldb::MemTableIterator::key (20,000,000 samples, 0.14%)</title><rect x="61.4" y="389" width="1.6" height="15.0" fill="rgb(227,127,13)" rx="2" ry="2" />
<text  x="64.37" y="399.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32 (20,000,000 samples, 0.14%)</title><rect x="1037.5" y="629" width="1.6" height="15.0" fill="rgb(216,120,31)" rx="2" ry="2" />
<text  x="1040.48" y="639.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::ThreadBody (6,160,000,000 samples, 41.90%)</title><rect x="510.9" y="501" width="494.5" height="15.0" fill="rgb(243,64,23)" rx="2" ry="2" />
<text  x="513.90" y="511.5" >leveldb::Benchmark::ThreadBody</text>
</g>
<g >
<title>snappy::RawUncompress (100,000,000 samples, 0.68%)</title><rect x="109.5" y="277" width="8.1" height="15.0" fill="rgb(236,154,41)" rx="2" ry="2" />
<text  x="112.54" y="287.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::SetNext (40,000,000 samples, 0.27%)</title><rect x="1043.9" y="629" width="3.2" height="15.0" fill="rgb(208,129,34)" rx="2" ry="2" />
<text  x="1046.90" y="639.5" ></text>
</g>
<g >
<title>__jbd2_log_start_commit (40,000,000 samples, 0.27%)</title><rect x="1148.3" y="421" width="3.2" height="15.0" fill="rgb(219,91,45)" rx="2" ry="2" />
<text  x="1151.26" y="431.5" ></text>
</g>
<g >
<title>leveldb::Status::Status (20,000,000 samples, 0.14%)</title><rect x="811.1" y="373" width="1.6" height="15.0" fill="rgb(243,174,29)" rx="2" ry="2" />
<text  x="814.12" y="383.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MergingIterator::value (80,000,000 samples, 0.54%)</title><rect x="148.1" y="405" width="6.4" height="15.0" fill="rgb(246,47,43)" rx="2" ry="2" />
<text  x="151.07" y="415.5" ></text>
</g>
<g >
<title>leveldb::WriteBatch::Put (120,000,000 samples, 0.82%)</title><rect x="995.7" y="453" width="9.7" height="15.0" fill="rgb(223,185,22)" rx="2" ry="2" />
<text  x="998.74" y="463.5" ></text>
</g>
<g >
<title>madvise_free_single_vma (20,000,000 samples, 0.14%)</title><rect x="284.5" y="101" width="1.6" height="15.0" fill="rgb(220,79,13)" rx="2" ry="2" />
<text  x="287.53" y="111.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (40,000,000 samples, 0.27%)</title><rect x="1148.3" y="373" width="3.2" height="15.0" fill="rgb(218,22,27)" rx="2" ry="2" />
<text  x="1151.26" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_default_append (40,000,000 samples, 0.27%)</title><rect x="249.2" y="309" width="3.2" height="15.0" fill="rgb(240,133,24)" rx="2" ry="2" />
<text  x="252.21" y="319.5" ></text>
</g>
<g >
<title>leveldb::EncodeFixed64 (20,000,000 samples, 0.14%)</title><rect x="106.3" y="309" width="1.6" height="15.0" fill="rgb(219,15,28)" rx="2" ry="2" />
<text  x="109.33" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (80,000,000 samples, 0.54%)</title><rect x="329.5" y="357" width="6.4" height="15.0" fill="rgb(229,213,48)" rx="2" ry="2" />
<text  x="332.48" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;char*, unsigned long&gt; (40,000,000 samples, 0.27%)</title><rect x="249.2" y="277" width="3.2" height="15.0" fill="rgb(232,83,50)" rx="2" ry="2" />
<text  x="252.21" y="287.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (20,000,000 samples, 0.14%)</title><rect x="233.2" y="245" width="1.6" height="15.0" fill="rgb(234,38,53)" rx="2" ry="2" />
<text  x="236.16" y="255.5" ></text>
</g>
<g >
<title>dax_iomap_fault (100,000,000 samples, 0.68%)</title><rect x="1164.3" y="517" width="8.0" height="15.0" fill="rgb(238,117,35)" rx="2" ry="2" />
<text  x="1167.31" y="527.5" ></text>
</g>
<g >
<title>memcpy_flushcache (80,000,000 samples, 0.54%)</title><rect x="1132.2" y="341" width="6.4" height="15.0" fill="rgb(211,77,15)" rx="2" ry="2" />
<text  x="1135.20" y="351.5" ></text>
</g>
<g >
<title>leveldb::ParseInternalKey (20,000,000 samples, 0.14%)</title><rect x="21.2" y="357" width="1.6" height="15.0" fill="rgb(231,211,38)" rx="2" ry="2" />
<text  x="24.24" y="367.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (40,000,000 samples, 0.27%)</title><rect x="48.5" y="325" width="3.2" height="15.0" fill="rgb(210,83,54)" rx="2" ry="2" />
<text  x="51.53" y="335.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Valid (20,000,000 samples, 0.14%)</title><rect x="278.1" y="357" width="1.6" height="15.0" fill="rgb(226,33,38)" rx="2" ry="2" />
<text  x="281.11" y="367.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Finish (20,000,000 samples, 0.14%)</title><rect x="51.7" y="373" width="1.6" height="15.0" fill="rgb(222,134,33)" rx="2" ry="2" />
<text  x="54.74" y="383.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (20,000,000 samples, 0.14%)</title><rect x="1173.9" y="629" width="1.7" height="15.0" fill="rgb(208,164,26)" rx="2" ry="2" />
<text  x="1176.95" y="639.5" ></text>
</g>
<g >
<title>leveldb::port::Snappy_Compress (20,000,000 samples, 0.14%)</title><rect x="246.0" y="309" width="1.6" height="15.0" fill="rgb(225,57,29)" rx="2" ry="2" />
<text  x="249.00" y="319.5" ></text>
</g>
<g >
<title>std::atomic&lt;unsigned int&gt;::atomic (20,000,000 samples, 0.14%)</title><rect x="952.4" y="261" width="1.6" height="15.0" fill="rgb(225,70,10)" rx="2" ry="2" />
<text  x="955.39" y="271.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (20,000,000 samples, 0.14%)</title><rect x="1173.9" y="613" width="1.7" height="15.0" fill="rgb(242,53,28)" rx="2" ry="2" />
<text  x="1176.95" y="623.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed64 (20,000,000 samples, 0.14%)</title><rect x="335.9" y="389" width="1.6" height="15.0" fill="rgb(217,98,14)" rx="2" ry="2" />
<text  x="338.90" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get (60,000,000 samples, 0.41%)</title><rect x="904.2" y="181" width="4.8" height="15.0" fill="rgb(225,171,22)" rx="2" ry="2" />
<text  x="907.23" y="191.5" ></text>
</g>
<g >
<title>leveldb::MemTable::KeyComparator::operator (1,100,000,000 samples, 7.48%)</title><rect x="705.2" y="309" width="88.3" height="15.0" fill="rgb(229,91,44)" rx="2" ry="2" />
<text  x="708.16" y="319.5" >leveldb::M..</text>
</g>
<g >
<title>std::call_once&lt;void  (240,000,000 samples, 1.63%)</title><rect x="896.2" y="341" width="19.3" height="15.0" fill="rgb(216,134,23)" rx="2" ry="2" />
<text  x="899.20" y="351.5" ></text>
</g>
<g >
<title>std::move&lt;char const*&amp;&gt; (40,000,000 samples, 0.27%)</title><rect x="819.1" y="373" width="3.3" height="15.0" fill="rgb(242,63,12)" rx="2" ry="2" />
<text  x="822.14" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (40,000,000 samples, 0.27%)</title><rect x="34.1" y="293" width="3.2" height="15.0" fill="rgb(235,151,3)" rx="2" ry="2" />
<text  x="37.08" y="303.5" ></text>
</g>
<g >
<title>leveldb::Block::Iter::Valid (20,000,000 samples, 0.14%)</title><rect x="136.8" y="293" width="1.6" height="15.0" fill="rgb(243,36,12)" rx="2" ry="2" />
<text  x="139.83" y="303.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (20,000,000 samples, 0.14%)</title><rect x="1023.0" y="629" width="1.6" height="15.0" fill="rgb(209,76,41)" rx="2" ry="2" />
<text  x="1026.03" y="639.5" ></text>
</g>
<g >
<title>ext4_ext_map_blocks (40,000,000 samples, 0.27%)</title><rect x="1151.5" y="437" width="3.2" height="15.0" fill="rgb(230,173,17)" rx="2" ry="2" />
<text  x="1154.47" y="447.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::Next (480,000,000 samples, 3.27%)</title><rect x="106.3" y="373" width="38.6" height="15.0" fill="rgb(209,100,13)" rx="2" ry="2" />
<text  x="109.33" y="383.5" >lev..</text>
</g>
<g >
<title>leveldb::DBImpl::BuildBatchGroup (20,000,000 samples, 0.14%)</title><rect x="525.3" y="421" width="1.7" height="15.0" fill="rgb(205,62,53)" rx="2" ry="2" />
<text  x="528.35" y="431.5" ></text>
</g>
<g >
<title>memmove_movnt_avx512f_clwb (420,000,000 samples, 2.86%)</title><rect x="1138.6" y="629" width="33.7" height="15.0" fill="rgb(233,110,0)" rx="2" ry="2" />
<text  x="1141.63" y="639.5" >me..</text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::release (20,000,000 samples, 0.14%)</title><rect x="909.0" y="197" width="1.7" height="15.0" fill="rgb(238,78,0)" rx="2" ry="2" />
<text  x="912.05" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_deallocate_node_ptr (20,000,000 samples, 0.14%)</title><rect x="1178.8" y="629" width="1.6" height="15.0" fill="rgb(245,223,45)" rx="2" ry="2" />
<text  x="1181.76" y="639.5" ></text>
</g>
<g >
<title>vfs_fsync_range (60,000,000 samples, 0.41%)</title><rect x="1146.7" y="469" width="4.8" height="15.0" fill="rgb(234,17,10)" rx="2" ry="2" />
<text  x="1149.65" y="479.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (20,000,000 samples, 0.14%)</title><rect x="909.0" y="165" width="1.7" height="15.0" fill="rgb(225,111,0)" rx="2" ry="2" />
<text  x="912.05" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (20,000,000 samples, 0.14%)</title><rect x="429.0" y="309" width="1.6" height="15.0" fill="rgb(218,96,40)" rx="2" ry="2" />
<text  x="432.02" y="319.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (20,000,000 samples, 0.14%)</title><rect x="934.7" y="357" width="1.6" height="15.0" fill="rgb(249,160,30)" rx="2" ry="2" />
<text  x="937.73" y="367.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::InsertRange (20,000,000 samples, 0.14%)</title><rect x="1015.0" y="357" width="1.6" height="15.0" fill="rgb(223,43,32)" rx="2" ry="2" />
<text  x="1018.01" y="367.5" ></text>
</g>
<g >
<title>__GI___libc_read (20,000,000 samples, 0.14%)</title><rect x="1007.0" y="453" width="1.6" height="15.0" fill="rgb(248,145,49)" rx="2" ry="2" />
<text  x="1009.98" y="463.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (20,000,000 samples, 0.14%)</title><rect x="10.0" y="341" width="1.6" height="15.0" fill="rgb(212,123,17)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>submit_bio_wait (100,000,000 samples, 0.68%)</title><rect x="1164.3" y="437" width="8.0" height="15.0" fill="rgb(212,14,52)" rx="2" ry="2" />
<text  x="1167.31" y="447.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (20,000,000 samples, 0.14%)</title><rect x="1183.6" y="629" width="1.6" height="15.0" fill="rgb(245,169,13)" rx="2" ry="2" />
<text  x="1186.58" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (20,000,000 samples, 0.14%)</title><rect x="199.4" y="213" width="1.6" height="15.0" fill="rgb(243,148,33)" rx="2" ry="2" />
<text  x="202.44" y="223.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::Count (20,000,000 samples, 0.14%)</title><rect x="1002.2" y="437" width="1.6" height="15.0" fill="rgb(233,99,4)" rx="2" ry="2" />
<text  x="1005.16" y="447.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Valid (20,000,000 samples, 0.14%)</title><rect x="1018.2" y="613" width="1.6" height="15.0" fill="rgb(228,154,23)" rx="2" ry="2" />
<text  x="1021.22" y="623.5" ></text>
</g>
<g >
<title>ext4_dax_fault (240,000,000 samples, 1.63%)</title><rect x="1143.4" y="517" width="19.3" height="15.0" fill="rgb(222,35,21)" rx="2" ry="2" />
<text  x="1146.44" y="527.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt; (20,000,000 samples, 0.14%)</title><rect x="35.7" y="245" width="1.6" height="15.0" fill="rgb(216,213,25)" rx="2" ry="2" />
<text  x="38.69" y="255.5" ></text>
</g>
<g >
<title>dax_iomap_fault (140,000,000 samples, 0.95%)</title><rect x="1151.5" y="485" width="11.2" height="15.0" fill="rgb(220,142,30)" rx="2" ry="2" />
<text  x="1154.47" y="495.5" ></text>
</g>
<g >
<title>leveldb::WriteBatch::Clear (60,000,000 samples, 0.41%)</title><rect x="990.9" y="453" width="4.8" height="15.0" fill="rgb(226,113,39)" rx="2" ry="2" />
<text  x="993.93" y="463.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (80,000,000 samples, 0.54%)</title><rect x="793.5" y="325" width="6.4" height="15.0" fill="rgb(229,204,1)" rx="2" ry="2" />
<text  x="796.46" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (20,000,000 samples, 0.14%)</title><rect x="58.2" y="325" width="1.6" height="15.0" fill="rgb(253,182,54)" rx="2" ry="2" />
<text  x="61.16" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (20,000,000 samples, 0.14%)</title><rect x="215.5" y="229" width="1.6" height="15.0" fill="rgb(243,181,31)" rx="2" ry="2" />
<text  x="218.50" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;leveldb::DBImpl::Writer*&gt;::construct&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&gt; (20,000,000 samples, 0.14%)</title><rect x="880.1" y="357" width="1.7" height="15.0" fill="rgb(253,70,25)" rx="2" ry="2" />
<text  x="883.15" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (20,000,000 samples, 0.14%)</title><rect x="56.6" y="341" width="1.6" height="15.0" fill="rgb(225,149,47)" rx="2" ry="2" />
<text  x="59.56" y="351.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Iterator::Next (20,000,000 samples, 0.14%)</title><rect x="168.9" y="341" width="1.6" height="15.0" fill="rgb(218,70,43)" rx="2" ry="2" />
<text  x="171.94" y="351.5" ></text>
</g>
<g >
<title>main (120,000,000 samples, 0.82%)</title><rect x="1007.0" y="597" width="9.6" height="15.0" fill="rgb(243,175,15)" rx="2" ry="2" />
<text  x="1009.98" y="607.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (300,000,000 samples, 2.04%)</title><rect x="406.5" y="357" width="24.1" height="15.0" fill="rgb(222,69,45)" rx="2" ry="2" />
<text  x="409.54" y="367.5" >s..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&amp;, leveldb::DBImpl::Writer**&gt;::_Deque_iterator (20,000,000 samples, 0.14%)</title><rect x="525.3" y="389" width="1.7" height="15.0" fill="rgb(224,57,34)" rx="2" ry="2" />
<text  x="528.35" y="399.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (20,000,000 samples, 0.14%)</title><rect x="19.6" y="325" width="1.6" height="15.0" fill="rgb(244,171,19)" rx="2" ry="2" />
<text  x="22.63" y="335.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (160,000,000 samples, 1.09%)</title><rect x="24.4" y="325" width="12.9" height="15.0" fill="rgb(207,68,6)" rx="2" ry="2" />
<text  x="27.45" y="335.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (60,000,000 samples, 0.41%)</title><rect x="997.3" y="405" width="4.9" height="15.0" fill="rgb(207,123,45)" rx="2" ry="2" />
<text  x="1000.35" y="415.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (40,000,000 samples, 0.27%)</title><rect x="353.6" y="341" width="3.2" height="15.0" fill="rgb(240,217,18)" rx="2" ry="2" />
<text  x="356.56" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (100,000,000 samples, 0.68%)</title><rect x="24.4" y="293" width="8.1" height="15.0" fill="rgb(212,188,49)" rx="2" ry="2" />
<text  x="27.45" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::_M_deallocate_node_ptr (40,000,000 samples, 0.27%)</title><rect x="1013.4" y="453" width="3.2" height="15.0" fill="rgb(235,183,29)" rx="2" ry="2" />
<text  x="1016.40" y="463.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::Add (40,000,000 samples, 0.27%)</title><rect x="1026.2" y="629" width="3.3" height="15.0" fill="rgb(226,62,17)" rx="2" ry="2" />
<text  x="1029.24" y="639.5" ></text>
</g>
<g >
<title>ext4_dax_huge_fault (80,000,000 samples, 0.54%)</title><rect x="1132.2" y="533" width="6.4" height="15.0" fill="rgb(206,1,8)" rx="2" ry="2" />
<text  x="1135.20" y="543.5" ></text>
</g>
<g >
<title>snappy::Compress (80,000,000 samples, 0.54%)</title><rect x="40.5" y="293" width="6.4" height="15.0" fill="rgb(209,56,5)" rx="2" ry="2" />
<text  x="43.50" y="303.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadNodeMain (6,240,000,000 samples, 42.45%)</title><rect x="10.0" y="485" width="500.9" height="15.0" fill="rgb(209,126,48)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadNodeMain</text>
</g>
<g >
<title>leveldb::Random::Next (20,000,000 samples, 0.14%)</title><rect x="987.7" y="437" width="1.6" height="15.0" fill="rgb(217,196,27)" rx="2" ry="2" />
<text  x="990.71" y="447.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::OpenCompactionOutputFile (20,000,000 samples, 0.14%)</title><rect x="299.0" y="405" width="1.6" height="15.0" fill="rgb(244,21,37)" rx="2" ry="2" />
<text  x="301.98" y="415.5" ></text>
</g>
<g >
<title>__do_page_fault (20,000,000 samples, 0.14%)</title><rect x="133.6" y="229" width="1.6" height="15.0" fill="rgb(246,204,49)" rx="2" ry="2" />
<text  x="136.62" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (160,000,000 samples, 1.09%)</title><rect x="24.4" y="309" width="12.9" height="15.0" fill="rgb(246,123,16)" rx="2" ry="2" />
<text  x="27.45" y="319.5" ></text>
</g>
<g >
<title>leveldb::ParseInternalKey (20,000,000 samples, 0.14%)</title><rect x="335.9" y="405" width="1.6" height="15.0" fill="rgb(233,173,10)" rx="2" ry="2" />
<text  x="338.90" y="415.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::value (80,000,000 samples, 0.54%)</title><rect x="148.1" y="389" width="6.4" height="15.0" fill="rgb(216,170,20)" rx="2" ry="2" />
<text  x="151.07" y="399.5" ></text>
</g>
<g >
<title>leveldb::Block::Iter::Next (20,000,000 samples, 0.14%)</title><rect x="140.0" y="341" width="1.6" height="15.0" fill="rgb(244,4,18)" rx="2" ry="2" />
<text  x="143.04" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (20,000,000 samples, 0.14%)</title><rect x="1003.8" y="437" width="1.6" height="15.0" fill="rgb(237,198,39)" rx="2" ry="2" />
<text  x="1006.77" y="447.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (60,000,000 samples, 0.41%)</title><rect x="273.3" y="357" width="4.8" height="15.0" fill="rgb(211,90,20)" rx="2" ry="2" />
<text  x="276.29" y="367.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (20,000,000 samples, 0.14%)</title><rect x="191.4" y="277" width="1.6" height="15.0" fill="rgb(217,24,19)" rx="2" ry="2" />
<text  x="194.41" y="287.5" ></text>
</g>
<g >
<title>std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (20,000,000 samples, 0.14%)</title><rect x="1183.6" y="613" width="1.6" height="15.0" fill="rgb(248,74,51)" rx="2" ry="2" />
<text  x="1186.58" y="623.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::__basic_future (60,000,000 samples, 0.41%)</title><rect x="931.5" y="405" width="4.8" height="15.0" fill="rgb(226,38,25)" rx="2" ry="2" />
<text  x="934.52" y="415.5" ></text>
</g>
<g >
<title>leveldb::MutexLock::~MutexLock (40,000,000 samples, 0.27%)</title><rect x="528.6" y="421" width="3.2" height="15.0" fill="rgb(212,70,5)" rx="2" ry="2" />
<text  x="531.56" y="431.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (20,000,000 samples, 0.14%)</title><rect x="963.6" y="389" width="1.6" height="15.0" fill="rgb(213,16,7)" rx="2" ry="2" />
<text  x="966.63" y="399.5" ></text>
</g>
<g >
<title>ext4_iomap_begin (80,000,000 samples, 0.54%)</title><rect x="1132.2" y="501" width="6.4" height="15.0" fill="rgb(228,16,27)" rx="2" ry="2" />
<text  x="1135.20" y="511.5" ></text>
</g>
<g >
<title>leveldb::InternalKey::DecodeFrom (20,000,000 samples, 0.14%)</title><rect x="300.6" y="405" width="1.6" height="15.0" fill="rgb(205,93,39)" rx="2" ry="2" />
<text  x="303.59" y="415.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (20,000,000 samples, 0.14%)</title><rect x="1188.4" y="613" width="1.6" height="15.0" fill="rgb(222,59,9)" rx="2" ry="2" />
<text  x="1191.39" y="623.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteBlock (460,000,000 samples, 3.13%)</title><rect x="449.9" y="373" width="36.9" height="15.0" fill="rgb(206,204,3)" rx="2" ry="2" />
<text  x="452.89" y="383.5" >lev..</text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;char*, unsigned long, char&gt; (40,000,000 samples, 0.27%)</title><rect x="53.3" y="309" width="3.3" height="15.0" fill="rgb(237,49,11)" rx="2" ry="2" />
<text  x="56.35" y="319.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (180,000,000 samples, 1.22%)</title><rect x="223.5" y="325" width="14.5" height="15.0" fill="rgb(240,126,32)" rx="2" ry="2" />
<text  x="226.52" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::_S_relocate (20,000,000 samples, 0.14%)</title><rect x="509.3" y="373" width="1.6" height="15.0" fill="rgb(237,189,47)" rx="2" ry="2" />
<text  x="512.29" y="383.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Valid (20,000,000 samples, 0.14%)</title><rect x="143.3" y="309" width="1.6" height="15.0" fill="rgb(242,165,1)" rx="2" ry="2" />
<text  x="146.25" y="319.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (80,000,000 samples, 0.54%)</title><rect x="400.1" y="357" width="6.4" height="15.0" fill="rgb(225,134,51)" rx="2" ry="2" />
<text  x="403.12" y="367.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (20,000,000 samples, 0.14%)</title><rect x="164.1" y="341" width="1.6" height="15.0" fill="rgb(246,41,49)" rx="2" ry="2" />
<text  x="167.12" y="351.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (20,000,000 samples, 0.14%)</title><rect x="284.5" y="341" width="1.6" height="15.0" fill="rgb(222,18,2)" rx="2" ry="2" />
<text  x="287.53" y="351.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (20,000,000 samples, 0.14%)</title><rect x="446.7" y="261" width="1.6" height="15.0" fill="rgb(248,152,36)" rx="2" ry="2" />
<text  x="449.68" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (20,000,000 samples, 0.14%)</title><rect x="32.5" y="277" width="1.6" height="15.0" fill="rgb(216,110,54)" rx="2" ry="2" />
<text  x="35.48" y="287.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::value (60,000,000 samples, 0.41%)</title><rect x="149.7" y="373" width="4.8" height="15.0" fill="rgb(252,193,18)" rx="2" ry="2" />
<text  x="152.67" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (40,000,000 samples, 0.27%)</title><rect x="29.3" y="245" width="3.2" height="15.0" fill="rgb(226,16,3)" rx="2" ry="2" />
<text  x="32.27" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::operator (60,000,000 samples, 0.41%)</title><rect x="904.2" y="197" width="4.8" height="15.0" fill="rgb(211,81,46)" rx="2" ry="2" />
<text  x="907.23" y="207.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_tlbonly (20,000,000 samples, 0.14%)</title><rect x="284.5" y="53" width="1.6" height="15.0" fill="rgb(217,217,46)" rx="2" ry="2" />
<text  x="287.53" y="63.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Value (280,000,000 samples, 1.90%)</title><rect x="449.9" y="341" width="22.5" height="15.0" fill="rgb(228,66,51)" rx="2" ry="2" />
<text  x="452.89" y="351.5" >l..</text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (40,000,000 samples, 0.27%)</title><rect x="1034.3" y="629" width="3.2" height="15.0" fill="rgb(240,126,14)" rx="2" ry="2" />
<text  x="1037.27" y="639.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (1,400,000,000 samples, 9.52%)</title><rect x="681.1" y="325" width="112.4" height="15.0" fill="rgb(247,137,42)" rx="2" ry="2" />
<text  x="684.07" y="335.5" >leveldb::Skip..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (40,000,000 samples, 0.27%)</title><rect x="199.4" y="245" width="3.3" height="15.0" fill="rgb(228,30,5)" rx="2" ry="2" />
<text  x="202.44" y="255.5" ></text>
</g>
<g >
<title>std::operator&amp; (40,000,000 samples, 0.27%)</title><rect x="801.5" y="293" width="3.2" height="15.0" fill="rgb(241,207,22)" rx="2" ry="2" />
<text  x="804.48" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (40,000,000 samples, 0.27%)</title><rect x="215.5" y="245" width="3.2" height="15.0" fill="rgb(219,23,51)" rx="2" ry="2" />
<text  x="218.50" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (20,000,000 samples, 0.14%)</title><rect x="326.3" y="277" width="1.6" height="15.0" fill="rgb(205,188,22)" rx="2" ry="2" />
<text  x="329.27" y="287.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (20,000,000 samples, 0.14%)</title><rect x="424.2" y="229" width="1.6" height="15.0" fill="rgb(227,43,41)" rx="2" ry="2" />
<text  x="427.20" y="239.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::Valid (20,000,000 samples, 0.14%)</title><rect x="278.1" y="373" width="1.6" height="15.0" fill="rgb(214,206,19)" rx="2" ry="2" />
<text  x="281.11" y="383.5" ></text>
</g>
<g >
<title>memcpy_flushcache (60,000,000 samples, 0.41%)</title><rect x="1157.9" y="309" width="4.8" height="15.0" fill="rgb(220,31,13)" rx="2" ry="2" />
<text  x="1160.89" y="319.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (40,000,000 samples, 0.27%)</title><rect x="801.5" y="325" width="3.2" height="15.0" fill="rgb(211,148,14)" rx="2" ry="2" />
<text  x="804.48" y="335.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (260,000,000 samples, 1.77%)</title><rect x="252.4" y="373" width="20.9" height="15.0" fill="rgb(227,111,25)" rx="2" ry="2" />
<text  x="255.42" y="383.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (40,000,000 samples, 0.27%)</title><rect x="177.0" y="293" width="3.2" height="15.0" fill="rgb(235,27,53)" rx="2" ry="2" />
<text  x="179.97" y="303.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (40,000,000 samples, 0.27%)</title><rect x="210.7" y="197" width="3.2" height="15.0" fill="rgb(219,135,19)" rx="2" ry="2" />
<text  x="213.68" y="207.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteRawBlock (280,000,000 samples, 1.90%)</title><rect x="449.9" y="357" width="22.5" height="15.0" fill="rgb(234,202,39)" rx="2" ry="2" />
<text  x="452.89" y="367.5" >l..</text>
</g>
<g >
<title>leveldb::TableBuilder::Rep::Rep (40,000,000 samples, 0.27%)</title><rect x="249.2" y="341" width="3.2" height="15.0" fill="rgb(222,19,4)" rx="2" ry="2" />
<text  x="252.21" y="351.5" ></text>
</g>
<g >
<title>leveldb::port::Mutex::Unlock (20,000,000 samples, 0.14%)</title><rect x="875.3" y="421" width="1.6" height="15.0" fill="rgb(213,104,5)" rx="2" ry="2" />
<text  x="878.33" y="431.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::SkipEmptyDataBlocksForward (140,000,000 samples, 0.95%)</title><rect x="106.3" y="357" width="11.3" height="15.0" fill="rgb(231,14,24)" rx="2" ry="2" />
<text  x="109.33" y="367.5" ></text>
</g>
<g >
<title>ext4_issue_zeroout (100,000,000 samples, 0.68%)</title><rect x="1154.7" y="437" width="8.0" height="15.0" fill="rgb(227,37,12)" rx="2" ry="2" />
<text  x="1157.68" y="447.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;leveldb::ParsedInternalKey*, leveldb::ParsedInternalKey*, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt; (20,000,000 samples, 0.14%)</title><rect x="509.3" y="325" width="1.6" height="15.0" fill="rgb(250,149,38)" rx="2" ry="2" />
<text  x="512.29" y="335.5" ></text>
</g>
<g >
<title>ext4_issue_zeroout (80,000,000 samples, 0.54%)</title><rect x="1132.2" y="469" width="6.4" height="15.0" fill="rgb(231,170,0)" rx="2" ry="2" />
<text  x="1135.20" y="479.5" ></text>
</g>
<g >
<title>snappy::RawCompress (80,000,000 samples, 0.54%)</title><rect x="40.5" y="309" width="6.4" height="15.0" fill="rgb(224,169,0)" rx="2" ry="2" />
<text  x="43.50" y="319.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::RoundUp&lt;4&gt; (20,000,000 samples, 0.14%)</title><rect x="864.1" y="373" width="1.6" height="15.0" fill="rgb(244,212,30)" rx="2" ry="2" />
<text  x="867.10" y="383.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (20,000,000 samples, 0.14%)</title><rect x="1032.7" y="613" width="1.6" height="15.0" fill="rgb(232,112,19)" rx="2" ry="2" />
<text  x="1035.67" y="623.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::construct&lt;leveldb::DBImpl::Writer*, leveldb::DBImpl::Writer*&gt; (20,000,000 samples, 0.14%)</title><rect x="880.1" y="373" width="1.7" height="15.0" fill="rgb(210,21,31)" rx="2" ry="2" />
<text  x="883.15" y="383.5" ></text>
</g>
<g >
<title>leveldb::ReadBlock (140,000,000 samples, 0.95%)</title><rect x="124.0" y="277" width="11.2" height="15.0" fill="rgb(239,88,8)" rx="2" ry="2" />
<text  x="126.99" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_default_append (20,000,000 samples, 0.14%)</title><rect x="299.0" y="341" width="1.6" height="15.0" fill="rgb(219,91,21)" rx="2" ry="2" />
<text  x="301.98" y="351.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Next (60,000,000 samples, 0.41%)</title><rect x="135.2" y="325" width="4.8" height="15.0" fill="rgb(221,133,33)" rx="2" ry="2" />
<text  x="138.22" y="335.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::WriteWrapper (4,900,000,000 samples, 33.33%)</title><rect x="523.7" y="437" width="393.4" height="15.0" fill="rgb(221,70,16)" rx="2" ry="2" />
<text  x="526.74" y="447.5" >leveldb::DBImpl::WriteWrapper</text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_S_cget (20,000,000 samples, 0.14%)</title><rect x="1180.4" y="613" width="1.6" height="15.0" fill="rgb(211,64,13)" rx="2" ry="2" />
<text  x="1183.37" y="623.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (80,000,000 samples, 0.54%)</title><rect x="239.6" y="277" width="6.4" height="15.0" fill="rgb(248,97,7)" rx="2" ry="2" />
<text  x="242.58" y="287.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::InsertInto (1,960,000,000 samples, 13.33%)</title><rect x="657.0" y="421" width="157.3" height="15.0" fill="rgb(208,61,20)" rx="2" ry="2" />
<text  x="659.99" y="431.5" >leveldb::WriteBatchI..</text>
</g>
<g >
<title>leveldb::BlockHandle::EncodeTo (20,000,000 samples, 0.14%)</title><rect x="1029.5" y="629" width="1.6" height="15.0" fill="rgb(242,198,23)" rx="2" ry="2" />
<text  x="1032.46" y="639.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Next (20,000,000 samples, 0.14%)</title><rect x="1023.0" y="613" width="1.6" height="15.0" fill="rgb(224,9,40)" rx="2" ry="2" />
<text  x="1026.03" y="623.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (240,000,000 samples, 1.63%)</title><rect x="896.2" y="325" width="19.3" height="15.0" fill="rgb(247,103,54)" rx="2" ry="2" />
<text  x="899.20" y="335.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::Next (20,000,000 samples, 0.14%)</title><rect x="10.0" y="373" width="1.6" height="15.0" fill="rgb(229,121,53)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (20,000,000 samples, 0.14%)</title><rect x="173.8" y="325" width="1.6" height="15.0" fill="rgb(227,188,25)" rx="2" ry="2" />
<text  x="176.76" y="335.5" ></text>
</g>
<g >
<title>pmem_make_request (80,000,000 samples, 0.54%)</title><rect x="1132.2" y="389" width="6.4" height="15.0" fill="rgb(237,178,5)" rx="2" ry="2" />
<text  x="1135.20" y="399.5" ></text>
</g>
<g >
<title>__GI___snprintf (80,000,000 samples, 0.54%)</title><rect x="515.7" y="437" width="6.4" height="15.0" fill="rgb(219,66,37)" rx="2" ry="2" />
<text  x="518.71" y="447.5" ></text>
</g>
<g >
<title>pmem_memcpy (40,000,000 samples, 0.27%)</title><rect x="867.3" y="389" width="3.2" height="15.0" fill="rgb(219,11,29)" rx="2" ry="2" />
<text  x="870.31" y="399.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (20,000,000 samples, 0.14%)</title><rect x="807.9" y="389" width="1.6" height="15.0" fill="rgb(212,33,32)" rx="2" ry="2" />
<text  x="810.90" y="399.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (20,000,000 samples, 0.14%)</title><rect x="327.9" y="293" width="1.6" height="15.0" fill="rgb(222,137,14)" rx="2" ry="2" />
<text  x="330.88" y="303.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (20,000,000 samples, 0.14%)</title><rect x="875.3" y="357" width="1.6" height="15.0" fill="rgb(244,107,2)" rx="2" ry="2" />
<text  x="878.33" y="367.5" ></text>
</g>
<g >
<title>memmove_mov_avx512f_clwb (20,000,000 samples, 0.14%)</title><rect x="865.7" y="373" width="1.6" height="15.0" fill="rgb(254,114,47)" rx="2" ry="2" />
<text  x="868.70" y="383.5" ></text>
</g>
<g >
<title>_IO_vfprintf_internal (60,000,000 samples, 0.41%)</title><rect x="517.3" y="405" width="4.8" height="15.0" fill="rgb(251,33,34)" rx="2" ry="2" />
<text  x="520.32" y="415.5" ></text>
</g>
<g >
<title>submit_bio_wait_endio (20,000,000 samples, 0.14%)</title><rect x="1156.3" y="325" width="1.6" height="15.0" fill="rgb(221,128,17)" rx="2" ry="2" />
<text  x="1159.29" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (20,000,000 samples, 0.14%)</title><rect x="276.5" y="277" width="1.6" height="15.0" fill="rgb(233,110,51)" rx="2" ry="2" />
<text  x="279.50" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (60,000,000 samples, 0.41%)</title><rect x="303.8" y="357" width="4.8" height="15.0" fill="rgb(214,127,45)" rx="2" ry="2" />
<text  x="306.80" y="367.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (160,000,000 samples, 1.09%)</title><rect x="459.5" y="309" width="12.9" height="15.0" fill="rgb(230,167,52)" rx="2" ry="2" />
<text  x="462.52" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (60,000,000 samples, 0.41%)</title><rect x="303.8" y="325" width="4.8" height="15.0" fill="rgb(224,165,38)" rx="2" ry="2" />
<text  x="306.80" y="335.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (20,000,000 samples, 0.14%)</title><rect x="1035.9" y="613" width="1.6" height="15.0" fill="rgb(213,137,21)" rx="2" ry="2" />
<text  x="1038.88" y="623.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (40,000,000 samples, 0.27%)</title><rect x="210.7" y="165" width="3.2" height="15.0" fill="rgb(236,142,1)" rx="2" ry="2" />
<text  x="213.68" y="175.5" ></text>
</g>
<g >
<title>complete (20,000,000 samples, 0.14%)</title><rect x="1156.3" y="309" width="1.6" height="15.0" fill="rgb(242,145,45)" rx="2" ry="2" />
<text  x="1159.29" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (20,000,000 samples, 0.14%)</title><rect x="233.2" y="261" width="1.6" height="15.0" fill="rgb(211,121,46)" rx="2" ry="2" />
<text  x="236.16" y="271.5" ></text>
</g>
<g >
<title>memmove_mov_avx512f_clwb (1,120,000,000 samples, 7.62%)</title><rect x="1048.7" y="629" width="89.9" height="15.0" fill="rgb(212,112,30)" rx="2" ry="2" />
<text  x="1051.72" y="639.5" >memmove_mo..</text>
</g>
<g >
<title>leveldb::TableBuilder::Finish (140,000,000 samples, 0.95%)</title><rect x="287.7" y="389" width="11.3" height="15.0" fill="rgb(212,207,24)" rx="2" ry="2" />
<text  x="290.74" y="399.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (40,000,000 samples, 0.27%)</title><rect x="56.6" y="389" width="3.2" height="15.0" fill="rgb(243,63,14)" rx="2" ry="2" />
<text  x="59.56" y="399.5" ></text>
</g>
<g >
<title>std::mutex::lock (20,000,000 samples, 0.14%)</title><rect x="873.7" y="405" width="1.6" height="15.0" fill="rgb(238,110,32)" rx="2" ry="2" />
<text  x="876.73" y="415.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::FindShortestSeparator (20,000,000 samples, 0.14%)</title><rect x="189.8" y="341" width="1.6" height="15.0" fill="rgb(213,61,25)" rx="2" ry="2" />
<text  x="192.81" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (60,000,000 samples, 0.41%)</title><rect x="308.6" y="357" width="4.8" height="15.0" fill="rgb(242,159,29)" rx="2" ry="2" />
<text  x="311.61" y="367.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (120,000,000 samples, 0.82%)</title><rect x="347.1" y="373" width="9.7" height="15.0" fill="rgb(223,46,34)" rx="2" ry="2" />
<text  x="350.14" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt; &gt;::construct&lt;std::__future_base::_State_baseV2&gt; (180,000,000 samples, 1.22%)</title><rect x="946.0" y="325" width="14.4" height="15.0" fill="rgb(205,66,24)" rx="2" ry="2" />
<text  x="948.97" y="335.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (20,000,000 samples, 0.14%)</title><rect x="989.3" y="453" width="1.6" height="15.0" fill="rgb(237,146,37)" rx="2" ry="2" />
<text  x="992.32" y="463.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (20,000,000 samples, 0.14%)</title><rect x="172.1" y="325" width="1.7" height="15.0" fill="rgb(241,82,42)" rx="2" ry="2" />
<text  x="175.15" y="335.5" ></text>
</g>
<g >
<title>leveldb::Block::Iter::GetRestartPoint (20,000,000 samples, 0.14%)</title><rect x="140.0" y="309" width="1.6" height="15.0" fill="rgb(209,101,40)" rx="2" ry="2" />
<text  x="143.04" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (20,000,000 samples, 0.14%)</title><rect x="56.6" y="309" width="1.6" height="15.0" fill="rgb(221,1,38)" rx="2" ry="2" />
<text  x="59.56" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (80,000,000 samples, 0.54%)</title><rect x="441.9" y="277" width="6.4" height="15.0" fill="rgb(240,187,14)" rx="2" ry="2" />
<text  x="444.86" y="287.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Flush (1,180,000,000 samples, 8.03%)</title><rect x="398.5" y="389" width="94.7" height="15.0" fill="rgb(208,40,28)" rx="2" ry="2" />
<text  x="401.52" y="399.5" >leveldb::Ta..</text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter, void&gt; (20,000,000 samples, 0.14%)</title><rect x="909.0" y="213" width="1.7" height="15.0" fill="rgb(248,45,13)" rx="2" ry="2" />
<text  x="912.05" y="223.5" ></text>
</g>
<g >
<title>pmem_persist (140,000,000 samples, 0.95%)</title><rect x="287.7" y="373" width="11.3" height="15.0" fill="rgb(217,55,1)" rx="2" ry="2" />
<text  x="290.74" y="383.5" ></text>
</g>
<g >
<title>__x64_sys_futex (60,000,000 samples, 0.41%)</title><rect x="891.4" y="293" width="4.8" height="15.0" fill="rgb(236,26,34)" rx="2" ry="2" />
<text  x="894.39" y="303.5" ></text>
</g>
<g >
<title>write_pmem (60,000,000 samples, 0.41%)</title><rect x="1157.9" y="325" width="4.8" height="15.0" fill="rgb(213,104,49)" rx="2" ry="2" />
<text  x="1160.89" y="335.5" ></text>
</g>
<g >
<title>snappy::internal::WorkingMemory::GetHashTable (20,000,000 samples, 0.14%)</title><rect x="485.2" y="309" width="1.6" height="15.0" fill="rgb(222,112,8)" rx="2" ry="2" />
<text  x="488.21" y="319.5" ></text>
</g>
<g >
<title>flush_clwb_nolog (680,000,000 samples, 4.63%)</title><rect x="1077.6" y="613" width="54.6" height="15.0" fill="rgb(234,56,27)" rx="2" ry="2" />
<text  x="1080.62" y="623.5" >flush..</text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (20,000,000 samples, 0.14%)</title><rect x="1175.6" y="629" width="1.6" height="15.0" fill="rgb(240,190,23)" rx="2" ry="2" />
<text  x="1178.55" y="639.5" ></text>
</g>
<g >
<title>std::__fill_a&lt;char&gt; (40,000,000 samples, 0.27%)</title><rect x="53.3" y="229" width="3.3" height="15.0" fill="rgb(230,215,19)" rx="2" ry="2" />
<text  x="56.35" y="239.5" ></text>
</g>
<g >
<title>__handle_mm_fault (80,000,000 samples, 0.54%)</title><rect x="1132.2" y="549" width="6.4" height="15.0" fill="rgb(222,193,18)" rx="2" ry="2" />
<text  x="1135.20" y="559.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (100,000,000 samples, 0.68%)</title><rect x="888.2" y="325" width="8.0" height="15.0" fill="rgb(248,132,44)" rx="2" ry="2" />
<text  x="891.18" y="335.5" ></text>
</g>
<g >
<title>__do_fault (260,000,000 samples, 1.77%)</title><rect x="1143.4" y="533" width="20.9" height="15.0" fill="rgb(239,0,37)" rx="2" ry="2" />
<text  x="1146.44" y="543.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::CurrentSizeEstimate (20,000,000 samples, 0.14%)</title><rect x="390.5" y="389" width="1.6" height="15.0" fill="rgb(247,10,45)" rx="2" ry="2" />
<text  x="393.49" y="399.5" ></text>
</g>
<g >
<title>write_pmem (100,000,000 samples, 0.68%)</title><rect x="1164.3" y="357" width="8.0" height="15.0" fill="rgb(231,78,19)" rx="2" ry="2" />
<text  x="1167.31" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (20,000,000 samples, 0.14%)</title><rect x="231.6" y="245" width="1.6" height="15.0" fill="rgb(213,77,17)" rx="2" ry="2" />
<text  x="234.55" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (80,000,000 samples, 0.54%)</title><rect x="323.1" y="309" width="6.4" height="15.0" fill="rgb(222,158,53)" rx="2" ry="2" />
<text  x="326.06" y="319.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadNodeEntryPoint (6,240,000,000 samples, 42.45%)</title><rect x="10.0" y="501" width="500.9" height="15.0" fill="rgb(250,199,42)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadNodeEntryP..</text>
</g>
<g >
<title>tc_deletearray_nothrow (20,000,000 samples, 0.14%)</title><rect x="313.4" y="389" width="1.6" height="15.0" fill="rgb(250,160,32)" rx="2" ry="2" />
<text  x="316.43" y="399.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (20,000,000 samples, 0.14%)</title><rect x="244.4" y="245" width="1.6" height="15.0" fill="rgb(228,147,23)" rx="2" ry="2" />
<text  x="247.39" y="255.5" ></text>
</g>
<g >
<title>all (14,700,000,000 samples, 100%)</title><rect x="10.0" y="661" width="1180.0" height="15.0" fill="rgb(248,143,43)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (20,000,000 samples, 0.14%)</title><rect x="437.0" y="325" width="1.7" height="15.0" fill="rgb(207,22,34)" rx="2" ry="2" />
<text  x="440.05" y="335.5" ></text>
</g>
<g >
<title>ext4_issue_zeroout (100,000,000 samples, 0.68%)</title><rect x="1164.3" y="469" width="8.0" height="15.0" fill="rgb(227,5,31)" rx="2" ry="2" />
<text  x="1167.31" y="479.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (20,000,000 samples, 0.14%)</title><rect x="963.6" y="421" width="1.6" height="15.0" fill="rgb(235,88,37)" rx="2" ry="2" />
<text  x="966.63" y="431.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;leveldb::Status&gt;::_M_destroy (60,000,000 samples, 0.41%)</title><rect x="981.3" y="261" width="4.8" height="15.0" fill="rgb(216,41,49)" rx="2" ry="2" />
<text  x="984.29" y="271.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (20,000,000 samples, 0.14%)</title><rect x="221.9" y="245" width="1.6" height="15.0" fill="rgb(254,228,11)" rx="2" ry="2" />
<text  x="224.92" y="255.5" ></text>
</g>
<g >
<title>leveldb::port::Snappy_Compress (80,000,000 samples, 0.54%)</title><rect x="40.5" y="325" width="6.4" height="15.0" fill="rgb(231,143,34)" rx="2" ry="2" />
<text  x="43.50" y="335.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (140,000,000 samples, 0.95%)</title><rect x="302.2" y="389" width="11.2" height="15.0" fill="rgb(219,111,9)" rx="2" ry="2" />
<text  x="305.19" y="399.5" ></text>
</g>
<g >
<title>page_fault (360,000,000 samples, 2.45%)</title><rect x="1143.4" y="613" width="28.9" height="15.0" fill="rgb(235,125,28)" rx="2" ry="2" />
<text  x="1146.44" y="623.5" >pa..</text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (40,000,000 samples, 0.27%)</title><rect x="162.5" y="389" width="3.2" height="15.0" fill="rgb(218,82,47)" rx="2" ry="2" />
<text  x="165.52" y="399.5" ></text>
</g>
<g >
<title>std::mutex::unlock (20,000,000 samples, 0.14%)</title><rect x="875.3" y="405" width="1.6" height="15.0" fill="rgb(230,207,17)" rx="2" ry="2" />
<text  x="878.33" y="415.5" ></text>
</g>
<g >
<title>blkdev_issue_zeroout (80,000,000 samples, 0.54%)</title><rect x="1132.2" y="453" width="6.4" height="15.0" fill="rgb(223,85,40)" rx="2" ry="2" />
<text  x="1135.20" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (60,000,000 samples, 0.41%)</title><rect x="303.8" y="341" width="4.8" height="15.0" fill="rgb(239,33,7)" rx="2" ry="2" />
<text  x="306.80" y="351.5" ></text>
</g>
<g >
<title>leveldb::Status::ok (20,000,000 samples, 0.14%)</title><rect x="830.4" y="389" width="1.6" height="15.0" fill="rgb(206,91,51)" rx="2" ry="2" />
<text  x="833.38" y="399.5" ></text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (20,000,000 samples, 0.14%)</title><rect x="1047.1" y="613" width="1.6" height="15.0" fill="rgb(206,103,54)" rx="2" ry="2" />
<text  x="1050.12" y="623.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (20,000,000 samples, 0.14%)</title><rect x="1185.2" y="629" width="1.6" height="15.0" fill="rgb(242,25,39)" rx="2" ry="2" />
<text  x="1188.18" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::allocate (20,000,000 samples, 0.14%)</title><rect x="220.3" y="261" width="1.6" height="15.0" fill="rgb(253,177,27)" rx="2" ry="2" />
<text  x="223.31" y="271.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (160,000,000 samples, 1.09%)</title><rect x="897.8" y="245" width="12.9" height="15.0" fill="rgb(245,193,27)" rx="2" ry="2" />
<text  x="900.81" y="255.5" ></text>
</g>
<g >
<title>leveldb::BlockBuilder::Finish (20,000,000 samples, 0.14%)</title><rect x="238.0" y="309" width="1.6" height="15.0" fill="rgb(209,138,14)" rx="2" ry="2" />
<text  x="240.97" y="319.5" ></text>
</g>
<g >
<title>std::fill_n&lt;char*, unsigned long, char&gt; (20,000,000 samples, 0.14%)</title><rect x="299.0" y="277" width="1.6" height="15.0" fill="rgb(250,125,5)" rx="2" ry="2" />
<text  x="301.98" y="287.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::DoWrite (6,160,000,000 samples, 41.90%)</title><rect x="510.9" y="469" width="494.5" height="15.0" fill="rgb(227,66,12)" rx="2" ry="2" />
<text  x="513.90" y="479.5" >leveldb::Benchmark::DoWrite</text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;char*, unsigned long&gt; (40,000,000 samples, 0.27%)</title><rect x="249.2" y="261" width="3.2" height="15.0" fill="rgb(249,92,53)" rx="2" ry="2" />
<text  x="252.21" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, false, true&gt;::operator (20,000,000 samples, 0.14%)</title><rect x="429.0" y="325" width="1.6" height="15.0" fill="rgb(214,78,45)" rx="2" ry="2" />
<text  x="432.02" y="335.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (20,000,000 samples, 0.14%)</title><rect x="1156.3" y="293" width="1.6" height="15.0" fill="rgb(239,156,49)" rx="2" ry="2" />
<text  x="1159.29" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (20,000,000 samples, 0.14%)</title><rect x="56.6" y="293" width="1.6" height="15.0" fill="rgb(236,132,10)" rx="2" ry="2" />
<text  x="59.56" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;leveldb::ParsedInternalKey&gt;::construct&lt;leveldb::ParsedInternalKey, leveldb::ParsedInternalKey const&amp;&gt; (20,000,000 samples, 0.14%)</title><rect x="507.7" y="373" width="1.6" height="15.0" fill="rgb(248,53,38)" rx="2" ry="2" />
<text  x="510.69" y="383.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (20,000,000 samples, 0.14%)</title><rect x="1032.7" y="629" width="1.6" height="15.0" fill="rgb(249,99,0)" rx="2" ry="2" />
<text  x="1035.67" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_eq (20,000,000 samples, 0.14%)</title><rect x="1180.4" y="629" width="1.6" height="15.0" fill="rgb(225,127,49)" rx="2" ry="2" />
<text  x="1183.37" y="639.5" ></text>
</g>
<g >
<title>leveldb::EncodeFixed32 (40,000,000 samples, 0.27%)</title><rect x="825.6" y="389" width="3.2" height="15.0" fill="rgb(241,134,37)" rx="2" ry="2" />
<text  x="828.56" y="399.5" ></text>
</g>
<g >
<title>std::fill_n&lt;char*, unsigned long, char&gt; (40,000,000 samples, 0.27%)</title><rect x="53.3" y="261" width="3.3" height="15.0" fill="rgb(235,176,38)" rx="2" ry="2" />
<text  x="56.35" y="271.5" ></text>
</g>
<g >
<title>leveldb::Block::Iter::ParseNextKey (20,000,000 samples, 0.14%)</title><rect x="140.0" y="325" width="1.6" height="15.0" fill="rgb(238,3,21)" rx="2" ry="2" />
<text  x="143.04" y="335.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::PrintEnvironment (20,000,000 samples, 0.14%)</title><rect x="1007.0" y="549" width="1.6" height="15.0" fill="rgb(226,128,47)" rx="2" ry="2" />
<text  x="1009.98" y="559.5" ></text>
</g>
<g >
<title>handle_mm_fault (360,000,000 samples, 2.45%)</title><rect x="1143.4" y="565" width="28.9" height="15.0" fill="rgb(212,103,49)" rx="2" ry="2" />
<text  x="1146.44" y="575.5" >ha..</text>
</g>
<g >
<title>operator new[] (20,000,000 samples, 0.14%)</title><rect x="474.0" y="309" width="1.6" height="15.0" fill="rgb(242,173,43)" rx="2" ry="2" />
<text  x="476.97" y="319.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (20,000,000 samples, 0.14%)</title><rect x="1039.1" y="613" width="1.6" height="15.0" fill="rgb(217,9,37)" rx="2" ry="2" />
<text  x="1042.09" y="623.5" ></text>
</g>
<g >
<title>__pthread_once_slow (360,000,000 samples, 2.45%)</title><rect x="886.6" y="357" width="28.9" height="15.0" fill="rgb(221,133,52)" rx="2" ry="2" />
<text  x="889.57" y="367.5" >__..</text>
</g>
<g >
<title>snappy::Compress (160,000,000 samples, 1.09%)</title><rect x="474.0" y="325" width="12.8" height="15.0" fill="rgb(226,120,0)" rx="2" ry="2" />
<text  x="476.97" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (20,000,000 samples, 0.14%)</title><rect x="231.6" y="213" width="1.6" height="15.0" fill="rgb(224,141,18)" rx="2" ry="2" />
<text  x="234.55" y="223.5" ></text>
</g>
<g >
<title>leveldb::MemTable::KeyComparator::operator (20,000,000 samples, 0.14%)</title><rect x="1040.7" y="629" width="1.6" height="15.0" fill="rgb(221,212,20)" rx="2" ry="2" />
<text  x="1043.69" y="639.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (20,000,000 samples, 0.14%)</title><rect x="225.1" y="309" width="1.6" height="15.0" fill="rgb(241,31,39)" rx="2" ry="2" />
<text  x="228.13" y="319.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (40,000,000 samples, 0.27%)</title><rect x="787.0" y="261" width="3.2" height="15.0" fill="rgb(243,160,5)" rx="2" ry="2" />
<text  x="790.03" y="271.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::FileSize (60,000,000 samples, 0.41%)</title><rect x="493.2" y="405" width="4.9" height="15.0" fill="rgb(205,190,13)" rx="2" ry="2" />
<text  x="496.24" y="415.5" ></text>
</g>
<g >
<title>__GI___clone (12,400,000,000 samples, 84.35%)</title><rect x="10.0" y="629" width="995.4" height="15.0" fill="rgb(236,74,20)" rx="2" ry="2" />
<text  x="13.00" y="639.5" >__GI___clone</text>
</g>
<g >
<title>std::operator&amp; (20,000,000 samples, 0.14%)</title><rect x="798.3" y="277" width="1.6" height="15.0" fill="rgb(217,168,34)" rx="2" ry="2" />
<text  x="801.27" y="287.5" ></text>
</g>
<g >
<title>leveldb::MemTable::Add (1,840,000,000 samples, 12.52%)</title><rect x="660.2" y="373" width="147.7" height="15.0" fill="rgb(220,193,10)" rx="2" ry="2" />
<text  x="663.20" y="383.5" >leveldb::MemTable:..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (20,000,000 samples, 0.14%)</title><rect x="59.8" y="341" width="1.6" height="15.0" fill="rgb(247,153,35)" rx="2" ry="2" />
<text  x="62.77" y="351.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::Valid (20,000,000 samples, 0.14%)</title><rect x="1024.6" y="613" width="1.6" height="15.0" fill="rgb(224,89,45)" rx="2" ry="2" />
<text  x="1027.64" y="623.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::SetSequence (40,000,000 samples, 0.27%)</title><rect x="814.3" y="421" width="3.2" height="15.0" fill="rgb(216,66,53)" rx="2" ry="2" />
<text  x="817.33" y="431.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (60,000,000 samples, 0.41%)</title><rect x="990.9" y="421" width="4.8" height="15.0" fill="rgb(213,215,47)" rx="2" ry="2" />
<text  x="993.93" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (20,000,000 samples, 0.14%)</title><rect x="358.4" y="357" width="1.6" height="15.0" fill="rgb(206,26,11)" rx="2" ry="2" />
<text  x="361.38" y="367.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::TableBuilder (40,000,000 samples, 0.27%)</title><rect x="53.3" y="373" width="3.3" height="15.0" fill="rgb(251,9,52)" rx="2" ry="2" />
<text  x="56.35" y="383.5" ></text>
</g>
<g >
<title>memmove_nodrain_avx512f_clwb (20,000,000 samples, 0.14%)</title><rect x="865.7" y="389" width="1.6" height="15.0" fill="rgb(248,27,38)" rx="2" ry="2" />
<text  x="868.70" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (20,000,000 samples, 0.14%)</title><rect x="37.3" y="309" width="1.6" height="15.0" fill="rgb(228,31,29)" rx="2" ry="2" />
<text  x="40.29" y="319.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (20,000,000 samples, 0.14%)</title><rect x="270.1" y="213" width="1.6" height="15.0" fill="rgb(248,11,7)" rx="2" ry="2" />
<text  x="273.08" y="223.5" ></text>
</g>
<g >
<title>leveldb::Status::~Status (1,520,000,000 samples, 10.34%)</title><rect x="531.8" y="421" width="122.0" height="15.0" fill="rgb(213,222,45)" rx="2" ry="2" />
<text  x="534.77" y="431.5" >leveldb::Status..</text>
</g>
<g >
<title>leveldb::Slice::Slice (20,000,000 samples, 0.14%)</title><rect x="668.2" y="277" width="1.6" height="15.0" fill="rgb(242,65,2)" rx="2" ry="2" />
<text  x="671.23" y="287.5" ></text>
</g>
<g >
<title>pmem_do_bvec (60,000,000 samples, 0.41%)</title><rect x="1157.9" y="341" width="4.8" height="15.0" fill="rgb(217,215,47)" rx="2" ry="2" />
<text  x="1160.89" y="351.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (20,000,000 samples, 0.14%)</title><rect x="221.9" y="277" width="1.6" height="15.0" fill="rgb(212,199,3)" rx="2" ry="2" />
<text  x="224.92" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::get_deleter (20,000,000 samples, 0.14%)</title><rect x="986.1" y="277" width="1.6" height="15.0" fill="rgb(244,80,17)" rx="2" ry="2" />
<text  x="989.11" y="287.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (40,000,000 samples, 0.27%)</title><rect x="422.6" y="245" width="3.2" height="15.0" fill="rgb(235,79,46)" rx="2" ry="2" />
<text  x="425.60" y="255.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl (20,000,000 samples, 0.14%)</title><rect x="958.8" y="261" width="1.6" height="15.0" fill="rgb(227,3,44)" rx="2" ry="2" />
<text  x="961.82" y="271.5" ></text>
</g>
<g >
<title>ext4_iomap_begin (100,000,000 samples, 0.68%)</title><rect x="1164.3" y="501" width="8.0" height="15.0" fill="rgb(221,136,7)" rx="2" ry="2" />
<text  x="1167.31" y="511.5" ></text>
</g>
<g >
<title>ext4_dax_huge_fault (240,000,000 samples, 1.63%)</title><rect x="1143.4" y="501" width="19.3" height="15.0" fill="rgb(214,129,6)" rx="2" ry="2" />
<text  x="1146.44" y="511.5" ></text>
</g>
<g >
<title>pmem_do_bvec (80,000,000 samples, 0.54%)</title><rect x="1132.2" y="373" width="6.4" height="15.0" fill="rgb(222,88,50)" rx="2" ry="2" />
<text  x="1135.20" y="383.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (180,000,000 samples, 1.22%)</title><rect x="433.8" y="357" width="14.5" height="15.0" fill="rgb(243,197,20)" rx="2" ry="2" />
<text  x="436.84" y="367.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;1ul, std::__future_base::_Result_base::_Deleter&gt; (20,000,000 samples, 0.14%)</title><rect x="910.7" y="181" width="1.6" height="15.0" fill="rgb(248,120,1)" rx="2" ry="2" />
<text  x="913.65" y="191.5" ></text>
</g>
<g >
<title>submit_bio_wait (80,000,000 samples, 0.54%)</title><rect x="1156.3" y="405" width="6.4" height="15.0" fill="rgb(233,42,6)" rx="2" ry="2" />
<text  x="1159.29" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_default_append (40,000,000 samples, 0.27%)</title><rect x="53.3" y="325" width="3.3" height="15.0" fill="rgb(252,70,45)" rx="2" ry="2" />
<text  x="56.35" y="335.5" ></text>
</g>
<g >
<title>handle_mm_fault (20,000,000 samples, 0.14%)</title><rect x="133.6" y="213" width="1.6" height="15.0" fill="rgb(241,50,5)" rx="2" ry="2" />
<text  x="136.62" y="223.5" ></text>
</g>
<g >
<title>ext4_sync_file (60,000,000 samples, 0.41%)</title><rect x="1146.7" y="453" width="4.8" height="15.0" fill="rgb(241,167,14)" rx="2" ry="2" />
<text  x="1149.65" y="463.5" ></text>
</g>
<g >
<title>leveldb::ReadBlock (120,000,000 samples, 0.82%)</title><rect x="107.9" y="309" width="9.7" height="15.0" fill="rgb(251,158,32)" rx="2" ry="2" />
<text  x="110.93" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::construct&lt;leveldb::ParsedInternalKey, leveldb::ParsedInternalKey const&amp;&gt; (40,000,000 samples, 0.27%)</title><rect x="506.1" y="389" width="3.2" height="15.0" fill="rgb(225,73,23)" rx="2" ry="2" />
<text  x="509.08" y="399.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (20,000,000 samples, 0.14%)</title><rect x="393.7" y="373" width="1.6" height="15.0" fill="rgb(244,212,14)" rx="2" ry="2" />
<text  x="396.70" y="383.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::Delete (20,000,000 samples, 0.14%)</title><rect x="284.5" y="245" width="1.6" height="15.0" fill="rgb(206,134,2)" rx="2" ry="2" />
<text  x="287.53" y="255.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::value (40,000,000 samples, 0.27%)</title><rect x="149.7" y="341" width="3.2" height="15.0" fill="rgb(222,168,33)" rx="2" ry="2" />
<text  x="152.67" y="351.5" ></text>
</g>
<g >
<title>blkdev_issue_zeroout (100,000,000 samples, 0.68%)</title><rect x="1154.7" y="421" width="8.0" height="15.0" fill="rgb(219,208,51)" rx="2" ry="2" />
<text  x="1157.68" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (20,000,000 samples, 0.14%)</title><rect x="35.7" y="261" width="1.6" height="15.0" fill="rgb(216,65,42)" rx="2" ry="2" />
<text  x="38.69" y="271.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Update (20,000,000 samples, 0.14%)</title><rect x="138.4" y="309" width="1.6" height="15.0" fill="rgb(240,130,41)" rx="2" ry="2" />
<text  x="141.44" y="319.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;char*, unsigned long&gt; (20,000,000 samples, 0.14%)</title><rect x="299.0" y="309" width="1.6" height="15.0" fill="rgb(212,200,6)" rx="2" ry="2" />
<text  x="301.98" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (380,000,000 samples, 2.59%)</title><rect x="193.0" y="293" width="30.5" height="15.0" fill="rgb(252,98,2)" rx="2" ry="2" />
<text  x="196.02" y="303.5" >st..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__future_base::_State_baseV2&gt;::destroy&lt;std::__future_base::_State_baseV2&gt; (140,000,000 samples, 0.95%)</title><rect x="976.5" y="325" width="11.2" height="15.0" fill="rgb(253,85,26)" rx="2" ry="2" />
<text  x="979.48" y="335.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (12,400,000,000 samples, 84.35%)</title><rect x="10.0" y="565" width="995.4" height="15.0" fill="rgb(244,75,36)" rx="2" ry="2" />
<text  x="13.00" y="575.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>std::__future_base::_Result&lt;leveldb::Status&gt;::_M_set (20,000,000 samples, 0.14%)</title><rect x="902.6" y="197" width="1.6" height="15.0" fill="rgb(227,110,43)" rx="2" ry="2" />
<text  x="905.63" y="207.5" ></text>
</g>
<g >
<title>submit_bio_wait (80,000,000 samples, 0.54%)</title><rect x="1132.2" y="437" width="6.4" height="15.0" fill="rgb(236,112,54)" rx="2" ry="2" />
<text  x="1135.20" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt; &gt;::allocate (20,000,000 samples, 0.14%)</title><rect x="34.1" y="277" width="1.6" height="15.0" fill="rgb(233,7,35)" rx="2" ry="2" />
<text  x="37.08" y="287.5" ></text>
</g>
<g >
<title>leveldb::port::Snappy_Uncompress (100,000,000 samples, 0.68%)</title><rect x="124.0" y="261" width="8.0" height="15.0" fill="rgb(235,140,36)" rx="2" ry="2" />
<text  x="126.99" y="271.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (40,000,000 samples, 0.27%)</title><rect x="53.3" y="213" width="3.3" height="15.0" fill="rgb(212,97,6)" rx="2" ry="2" />
<text  x="56.35" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (100,000,000 samples, 0.68%)</title><rect x="406.5" y="325" width="8.1" height="15.0" fill="rgb(253,135,27)" rx="2" ry="2" />
<text  x="409.54" y="335.5" ></text>
</g>
<g >
<title>leveldb::PutLengthPrefixedSlice (80,000,000 samples, 0.54%)</title><rect x="995.7" y="437" width="6.5" height="15.0" fill="rgb(235,57,51)" rx="2" ry="2" />
<text  x="998.74" y="447.5" ></text>
</g>
<g >
<title>ext4_ext_convert_to_initialized (40,000,000 samples, 0.27%)</title><rect x="1151.5" y="421" width="3.2" height="15.0" fill="rgb(234,199,20)" rx="2" ry="2" />
<text  x="1154.47" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (40,000,000 samples, 0.27%)</title><rect x="332.7" y="341" width="3.2" height="15.0" fill="rgb(246,186,0)" rx="2" ry="2" />
<text  x="335.69" y="351.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (20,000,000 samples, 0.14%)</title><rect x="1002.2" y="421" width="1.6" height="15.0" fill="rgb(210,165,35)" rx="2" ry="2" />
<text  x="1005.16" y="431.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MemTableInserter::Put (1,840,000,000 samples, 12.52%)</title><rect x="660.2" y="389" width="147.7" height="15.0" fill="rgb(248,65,39)" rx="2" ry="2" />
<text  x="663.20" y="399.5" >leveldb::(anonymou..</text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (20,000,000 samples, 0.14%)</title><rect x="1182.0" y="613" width="1.6" height="15.0" fill="rgb(216,143,36)" rx="2" ry="2" />
<text  x="1184.97" y="623.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (20,000,000 samples, 0.14%)</title><rect x="807.9" y="357" width="1.6" height="15.0" fill="rgb(211,2,54)" rx="2" ry="2" />
<text  x="810.90" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (20,000,000 samples, 0.14%)</title><rect x="437.0" y="293" width="1.7" height="15.0" fill="rgb(237,130,37)" rx="2" ry="2" />
<text  x="440.05" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (60,000,000 samples, 0.41%)</title><rect x="303.8" y="309" width="4.8" height="15.0" fill="rgb(223,83,40)" rx="2" ry="2" />
<text  x="306.80" y="319.5" ></text>
</g>
<g >
<title>snappy::RawUncompress (100,000,000 samples, 0.68%)</title><rect x="124.0" y="229" width="8.0" height="15.0" fill="rgb(244,43,38)" rx="2" ry="2" />
<text  x="126.99" y="239.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (60,000,000 samples, 0.41%)</title><rect x="303.8" y="293" width="4.8" height="15.0" fill="rgb(236,6,41)" rx="2" ry="2" />
<text  x="306.80" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (60,000,000 samples, 0.41%)</title><rect x="421.0" y="293" width="4.8" height="15.0" fill="rgb(225,16,37)" rx="2" ry="2" />
<text  x="423.99" y="303.5" ></text>
</g>
<g >
<title>std::future&lt;leveldb::Status&gt;::get (180,000,000 samples, 1.22%)</title><rect x="917.1" y="437" width="14.4" height="15.0" fill="rgb(210,187,41)" rx="2" ry="2" />
<text  x="920.07" y="447.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (12,400,000,000 samples, 84.35%)</title><rect x="10.0" y="597" width="995.4" height="15.0" fill="rgb(220,192,27)" rx="2" ry="2" />
<text  x="13.00" y="607.5" >[libstdc++.so.6.0.29]</text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::Valid (20,000,000 samples, 0.14%)</title><rect x="143.3" y="325" width="1.6" height="15.0" fill="rgb(205,14,20)" rx="2" ry="2" />
<text  x="146.25" y="335.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (20,000,000 samples, 0.14%)</title><rect x="61.4" y="373" width="1.6" height="15.0" fill="rgb(241,41,12)" rx="2" ry="2" />
<text  x="64.37" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (60,000,000 samples, 0.41%)</title><rect x="421.0" y="277" width="4.8" height="15.0" fill="rgb(225,116,45)" rx="2" ry="2" />
<text  x="423.99" y="287.5" ></text>
</g>
<g >
<title>page_fault (80,000,000 samples, 0.54%)</title><rect x="1132.2" y="613" width="6.4" height="15.0" fill="rgb(214,101,48)" rx="2" ry="2" />
<text  x="1135.20" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (40,000,000 samples, 0.27%)</title><rect x="199.4" y="229" width="3.3" height="15.0" fill="rgb(206,135,17)" rx="2" ry="2" />
<text  x="202.44" y="239.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (20,000,000 samples, 0.14%)</title><rect x="271.7" y="309" width="1.6" height="15.0" fill="rgb(252,34,2)" rx="2" ry="2" />
<text  x="274.69" y="319.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; (20,000,000 samples, 0.14%)</title><rect x="221.9" y="261" width="1.6" height="15.0" fill="rgb(227,152,16)" rx="2" ry="2" />
<text  x="224.92" y="271.5" ></text>
</g>
<g >
<title>snappy::RawCompress (20,000,000 samples, 0.14%)</title><rect x="246.0" y="293" width="1.6" height="15.0" fill="rgb(235,94,47)" rx="2" ry="2" />
<text  x="249.00" y="303.5" ></text>
</g>
<g >
<title>pmem_memcpy (20,000,000 samples, 0.14%)</title><rect x="1172.3" y="629" width="1.6" height="15.0" fill="rgb(246,129,41)" rx="2" ry="2" />
<text  x="1175.34" y="639.5" ></text>
</g>
<g >
<title>snappy::internal::CompressFragment (80,000,000 samples, 0.54%)</title><rect x="40.5" y="277" width="6.4" height="15.0" fill="rgb(234,54,21)" rx="2" ry="2" />
<text  x="43.50" y="287.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (20,000,000 samples, 0.14%)</title><rect x="347.1" y="357" width="1.6" height="15.0" fill="rgb(240,148,3)" rx="2" ry="2" />
<text  x="350.14" y="367.5" ></text>
</g>
<g >
<title>leveldb::WriteBatchInternal::Contents (40,000,000 samples, 0.27%)</title><rect x="653.8" y="421" width="3.2" height="15.0" fill="rgb(247,144,42)" rx="2" ry="2" />
<text  x="656.78" y="431.5" ></text>
</g>
<g >
<title>_IO_vsnprintf (80,000,000 samples, 0.54%)</title><rect x="515.7" y="421" width="6.4" height="15.0" fill="rgb(223,123,14)" rx="2" ry="2" />
<text  x="518.71" y="431.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (260,000,000 samples, 1.77%)</title><rect x="730.8" y="277" width="20.9" height="15.0" fill="rgb(224,174,24)" rx="2" ry="2" />
<text  x="733.84" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (20,000,000 samples, 0.14%)</title><rect x="32.5" y="261" width="1.6" height="15.0" fill="rgb(235,82,46)" rx="2" ry="2" />
<text  x="35.48" y="271.5" ></text>
</g>
<g >
<title>std::__future_base::_Result_base::_Deleter::operator (80,000,000 samples, 0.54%)</title><rect x="979.7" y="277" width="6.4" height="15.0" fill="rgb(229,83,44)" rx="2" ry="2" />
<text  x="982.69" y="287.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (20,000,000 samples, 0.14%)</title><rect x="334.3" y="325" width="1.6" height="15.0" fill="rgb(218,11,9)" rx="2" ry="2" />
<text  x="337.30" y="335.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::Next (340,000,000 samples, 2.31%)</title><rect x="117.6" y="357" width="27.3" height="15.0" fill="rgb(251,40,38)" rx="2" ry="2" />
<text  x="120.56" y="367.5" >l..</text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (40,000,000 samples, 0.27%)</title><rect x="162.5" y="373" width="3.2" height="15.0" fill="rgb(250,117,13)" rx="2" ry="2" />
<text  x="165.52" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (40,000,000 samples, 0.27%)</title><rect x="274.9" y="293" width="3.2" height="15.0" fill="rgb(253,22,46)" rx="2" ry="2" />
<text  x="277.90" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (20,000,000 samples, 0.14%)</title><rect x="233.2" y="277" width="1.6" height="15.0" fill="rgb(225,129,9)" rx="2" ry="2" />
<text  x="236.16" y="287.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (260,000,000 samples, 1.77%)</title><rect x="252.4" y="357" width="20.9" height="15.0" fill="rgb(250,183,33)" rx="2" ry="2" />
<text  x="255.42" y="367.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (20,000,000 samples, 0.14%)</title><rect x="61.4" y="357" width="1.6" height="15.0" fill="rgb(207,191,27)" rx="2" ry="2" />
<text  x="64.37" y="367.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Add (460,000,000 samples, 3.13%)</title><rect x="14.8" y="373" width="36.9" height="15.0" fill="rgb(223,138,37)" rx="2" ry="2" />
<text  x="17.82" y="383.5" >lev..</text>
</g>
<g >
<title>pmem_persist (40,000,000 samples, 0.27%)</title><rect x="870.5" y="389" width="3.2" height="15.0" fill="rgb(253,92,10)" rx="2" ry="2" />
<text  x="873.52" y="399.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (220,000,000 samples, 1.50%)</title><rect x="432.2" y="373" width="17.7" height="15.0" fill="rgb(214,27,5)" rx="2" ry="2" />
<text  x="435.23" y="383.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Equal (100,000,000 samples, 0.68%)</title><rect x="661.8" y="341" width="8.0" height="15.0" fill="rgb(228,118,13)" rx="2" ry="2" />
<text  x="664.81" y="351.5" ></text>
</g>
<g >
<title>leveldb::Slice::operator[] (40,000,000 samples, 0.27%)</title><rect x="1026.2" y="613" width="3.3" height="15.0" fill="rgb(250,188,18)" rx="2" ry="2" />
<text  x="1029.24" y="623.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteRawBlock (80,000,000 samples, 0.54%)</title><rect x="239.6" y="309" width="6.4" height="15.0" fill="rgb(212,194,14)" rx="2" ry="2" />
<text  x="242.58" y="319.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteRawBlock (20,000,000 samples, 0.14%)</title><rect x="38.9" y="325" width="1.6" height="15.0" fill="rgb(208,212,20)" rx="2" ry="2" />
<text  x="41.90" y="335.5" ></text>
</g>
<g >
<title>leveldb::MemTable::~MemTable (20,000,000 samples, 0.14%)</title><rect x="284.5" y="373" width="1.6" height="15.0" fill="rgb(245,227,44)" rx="2" ry="2" />
<text  x="287.53" y="383.5" ></text>
</g>
<g >
<title>arch_tlb_finish_mmu (20,000,000 samples, 0.14%)</title><rect x="284.5" y="69" width="1.6" height="15.0" fill="rgb(240,188,8)" rx="2" ry="2" />
<text  x="287.53" y="79.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::~Benchmark (100,000,000 samples, 0.68%)</title><rect x="1008.6" y="581" width="8.0" height="15.0" fill="rgb(253,182,9)" rx="2" ry="2" />
<text  x="1011.59" y="591.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (20,000,000 samples, 0.14%)</title><rect x="270.1" y="229" width="1.6" height="15.0" fill="rgb(223,49,33)" rx="2" ry="2" />
<text  x="273.08" y="239.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (40,000,000 samples, 0.27%)</title><rect x="384.1" y="357" width="3.2" height="15.0" fill="rgb(231,172,6)" rx="2" ry="2" />
<text  x="387.07" y="367.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (40,000,000 samples, 0.27%)</title><rect x="666.6" y="309" width="3.2" height="15.0" fill="rgb(218,90,26)" rx="2" ry="2" />
<text  x="669.63" y="319.5" ></text>
</g>
<g >
<title>leveldb::Table::BlockReader (140,000,000 samples, 0.95%)</title><rect x="106.3" y="325" width="11.3" height="15.0" fill="rgb(245,112,28)" rx="2" ry="2" />
<text  x="109.33" y="335.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;std::__future_base::_State_baseV2,  (20,000,000 samples, 0.14%)</title><rect x="929.9" y="389" width="1.6" height="15.0" fill="rgb(207,105,15)" rx="2" ry="2" />
<text  x="932.92" y="399.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (20,000,000 samples, 0.14%)</title><rect x="271.7" y="293" width="1.6" height="15.0" fill="rgb(224,34,49)" rx="2" ry="2" />
<text  x="274.69" y="303.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (20,000,000 samples, 0.14%)</title><rect x="130.4" y="213" width="1.6" height="15.0" fill="rgb(222,212,20)" rx="2" ry="2" />
<text  x="133.41" y="223.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (220,000,000 samples, 1.50%)</title><rect x="758.1" y="261" width="17.7" height="15.0" fill="rgb(209,93,10)" rx="2" ry="2" />
<text  x="761.14" y="271.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (160,000,000 samples, 1.09%)</title><rect x="302.2" y="405" width="12.8" height="15.0" fill="rgb(252,11,39)" rx="2" ry="2" />
<text  x="305.19" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_ptr (40,000,000 samples, 0.27%)</title><rect x="234.8" y="245" width="3.2" height="15.0" fill="rgb(219,19,27)" rx="2" ry="2" />
<text  x="237.76" y="255.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::FindShortestSeparator (20,000,000 samples, 0.14%)</title><rect x="396.9" y="373" width="1.6" height="15.0" fill="rgb(210,6,45)" rx="2" ry="2" />
<text  x="399.91" y="383.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (40,000,000 samples, 0.27%)</title><rect x="905.8" y="149" width="3.2" height="15.0" fill="rgb(237,163,41)" rx="2" ry="2" />
<text  x="908.84" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (100,000,000 samples, 0.68%)</title><rect x="1008.6" y="501" width="8.0" height="15.0" fill="rgb(237,193,16)" rx="2" ry="2" />
<text  x="1011.59" y="511.5" ></text>
</g>
<g >
<title>ext4_dax_huge_fault (100,000,000 samples, 0.68%)</title><rect x="1164.3" y="533" width="8.0" height="15.0" fill="rgb(208,176,51)" rx="2" ry="2" />
<text  x="1167.31" y="543.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (260,000,000 samples, 1.77%)</title><rect x="315.0" y="405" width="20.9" height="15.0" fill="rgb(226,130,48)" rx="2" ry="2" />
<text  x="318.03" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (100,000,000 samples, 0.68%)</title><rect x="406.5" y="309" width="8.1" height="15.0" fill="rgb(250,143,52)" rx="2" ry="2" />
<text  x="409.54" y="319.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (20,000,000 samples, 0.14%)</title><rect x="963.6" y="405" width="1.6" height="15.0" fill="rgb(223,68,51)" rx="2" ry="2" />
<text  x="966.63" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (120,000,000 samples, 0.82%)</title><rect x="438.7" y="325" width="9.6" height="15.0" fill="rgb(228,31,49)" rx="2" ry="2" />
<text  x="441.65" y="335.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (20,000,000 samples, 0.14%)</title><rect x="59.8" y="373" width="1.6" height="15.0" fill="rgb(236,66,41)" rx="2" ry="2" />
<text  x="62.77" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;leveldb::ParsedInternalKey&gt;::construct&lt;leveldb::ParsedInternalKey, leveldb::ParsedInternalKey&gt; (20,000,000 samples, 0.14%)</title><rect x="509.3" y="277" width="1.6" height="15.0" fill="rgb(240,10,50)" rx="2" ry="2" />
<text  x="512.29" y="287.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (20,000,000 samples, 0.14%)</title><rect x="1185.2" y="613" width="1.6" height="15.0" fill="rgb(233,167,13)" rx="2" ry="2" />
<text  x="1188.18" y="623.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::clear (100,000,000 samples, 0.68%)</title><rect x="1008.6" y="517" width="8.0" height="15.0" fill="rgb(217,205,40)" rx="2" ry="2" />
<text  x="1011.59" y="527.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseToSpans (20,000,000 samples, 0.14%)</title><rect x="284.5" y="261" width="1.6" height="15.0" fill="rgb(212,7,24)" rx="2" ry="2" />
<text  x="287.53" y="271.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (20,000,000 samples, 0.14%)</title><rect x="1040.7" y="613" width="1.6" height="15.0" fill="rgb(246,56,36)" rx="2" ry="2" />
<text  x="1043.69" y="623.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (20,000,000 samples, 0.14%)</title><rect x="59.8" y="389" width="1.6" height="15.0" fill="rgb(232,223,33)" rx="2" ry="2" />
<text  x="62.77" y="399.5" ></text>
</g>
<g >
<title>leveldb::BuildTable (580,000,000 samples, 3.95%)</title><rect x="10.0" y="389" width="46.6" height="15.0" fill="rgb(223,68,51)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >leve..</text>
</g>
<g >
<title>leveldb::BlockBuilder::Add (620,000,000 samples, 4.22%)</title><rect x="340.7" y="389" width="49.8" height="15.0" fill="rgb(218,106,48)" rx="2" ry="2" />
<text  x="343.72" y="399.5" >level..</text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (20,000,000 samples, 0.14%)</title><rect x="915.5" y="405" width="1.6" height="15.0" fill="rgb(232,92,33)" rx="2" ry="2" />
<text  x="918.47" y="415.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (140,000,000 samples, 0.95%)</title><rect x="899.4" y="229" width="11.3" height="15.0" fill="rgb(209,225,13)" rx="2" ry="2" />
<text  x="902.41" y="239.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (260,000,000 samples, 1.77%)</title><rect x="315.0" y="389" width="20.9" height="15.0" fill="rgb(206,2,33)" rx="2" ry="2" />
<text  x="318.03" y="399.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (1,840,000,000 samples, 12.52%)</title><rect x="660.2" y="357" width="147.7" height="15.0" fill="rgb(209,40,28)" rx="2" ry="2" />
<text  x="663.20" y="367.5" >leveldb::SkipList&lt;..</text>
</g>
<g >
<title>do_page_fault (80,000,000 samples, 0.54%)</title><rect x="1132.2" y="597" width="6.4" height="15.0" fill="rgb(232,150,29)" rx="2" ry="2" />
<text  x="1135.20" y="607.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::PrintHeader (20,000,000 samples, 0.14%)</title><rect x="1007.0" y="565" width="1.6" height="15.0" fill="rgb(227,223,49)" rx="2" ry="2" />
<text  x="1009.98" y="575.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (60,000,000 samples, 0.41%)</title><rect x="170.5" y="341" width="4.9" height="15.0" fill="rgb(210,103,2)" rx="2" ry="2" />
<text  x="173.54" y="351.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (20,000,000 samples, 0.14%)</title><rect x="530.2" y="373" width="1.6" height="15.0" fill="rgb(236,151,28)" rx="2" ry="2" />
<text  x="533.16" y="383.5" ></text>
</g>
<g >
<title>generic_make_request (80,000,000 samples, 0.54%)</title><rect x="1156.3" y="373" width="6.4" height="15.0" fill="rgb(215,141,31)" rx="2" ry="2" />
<text  x="1159.29" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (40,000,000 samples, 0.27%)</title><rect x="274.9" y="309" width="3.2" height="15.0" fill="rgb(252,122,31)" rx="2" ry="2" />
<text  x="277.90" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (40,000,000 samples, 0.27%)</title><rect x="384.1" y="373" width="3.2" height="15.0" fill="rgb(221,210,30)" rx="2" ry="2" />
<text  x="387.07" y="383.5" ></text>
</g>
<g >
<title>__ext4_journal_start_sb (20,000,000 samples, 0.14%)</title><rect x="1145.0" y="485" width="1.7" height="15.0" fill="rgb(239,122,3)" rx="2" ry="2" />
<text  x="1148.05" y="495.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; &gt;::_M_get_pointer (20,000,000 samples, 0.14%)</title><rect x="899.4" y="213" width="1.6" height="15.0" fill="rgb(241,56,41)" rx="2" ry="2" />
<text  x="902.41" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (40,000,000 samples, 0.27%)</title><rect x="229.9" y="277" width="3.3" height="15.0" fill="rgb(218,57,10)" rx="2" ry="2" />
<text  x="232.95" y="287.5" ></text>
</g>
<g >
<title>leveldb::PutVarint32 (20,000,000 samples, 0.14%)</title><rect x="995.7" y="421" width="1.6" height="15.0" fill="rgb(209,117,45)" rx="2" ry="2" />
<text  x="998.74" y="431.5" ></text>
</g>
<g >
<title>std::make_shared&lt;std::__future_base::_State_baseV2&gt; (280,000,000 samples, 1.90%)</title><rect x="941.2" y="421" width="22.4" height="15.0" fill="rgb(237,94,39)" rx="2" ry="2" />
<text  x="944.16" y="431.5" >s..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (180,000,000 samples, 1.22%)</title><rect x="433.8" y="341" width="14.5" height="15.0" fill="rgb(244,222,11)" rx="2" ry="2" />
<text  x="436.84" y="351.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock (20,000,000 samples, 0.14%)</title><rect x="875.3" y="373" width="1.6" height="15.0" fill="rgb(252,152,34)" rx="2" ry="2" />
<text  x="878.33" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::resize (40,000,000 samples, 0.27%)</title><rect x="53.3" y="341" width="3.3" height="15.0" fill="rgb(233,104,45)" rx="2" ry="2" />
<text  x="56.35" y="351.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::~_State_baseV2 (140,000,000 samples, 0.95%)</title><rect x="976.5" y="309" width="11.2" height="15.0" fill="rgb(223,211,42)" rx="2" ry="2" />
<text  x="979.48" y="319.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::store (40,000,000 samples, 0.27%)</title><rect x="1043.9" y="613" width="3.2" height="15.0" fill="rgb(252,48,54)" rx="2" ry="2" />
<text  x="1046.90" y="623.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (60,000,000 samples, 0.41%)</title><rect x="308.6" y="325" width="4.8" height="15.0" fill="rgb(237,82,49)" rx="2" ry="2" />
<text  x="311.61" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (20,000,000 samples, 0.14%)</title><rect x="228.3" y="245" width="1.6" height="15.0" fill="rgb(228,46,6)" rx="2" ry="2" />
<text  x="231.34" y="255.5" ></text>
</g>
<g >
<title>leveldb::IteratorWrapper::value (20,000,000 samples, 0.14%)</title><rect x="119.2" y="293" width="1.6" height="15.0" fill="rgb(231,144,38)" rx="2" ry="2" />
<text  x="122.17" y="303.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::WriteLevel0Table (660,000,000 samples, 4.49%)</title><rect x="10.0" y="405" width="53.0" height="15.0" fill="rgb(208,116,14)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >level..</text>
</g>
<g >
<title>add_timer (20,000,000 samples, 0.14%)</title><rect x="1145.0" y="437" width="1.7" height="15.0" fill="rgb(208,13,5)" rx="2" ry="2" />
<text  x="1148.05" y="447.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::InitDataBlock (200,000,000 samples, 1.36%)</title><rect x="119.2" y="309" width="16.0" height="15.0" fill="rgb(216,168,35)" rx="2" ry="2" />
<text  x="122.17" y="319.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; &gt; (20,000,000 samples, 0.14%)</title><rect x="899.4" y="197" width="1.6" height="15.0" fill="rgb(215,193,51)" rx="2" ry="2" />
<text  x="902.41" y="207.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Flush (360,000,000 samples, 2.45%)</title><rect x="22.8" y="357" width="28.9" height="15.0" fill="rgb(245,130,5)" rx="2" ry="2" />
<text  x="25.84" y="367.5" >le..</text>
</g>
<g >
<title>pmem_drain (20,000,000 samples, 0.14%)</title><rect x="872.1" y="373" width="1.6" height="15.0" fill="rgb(239,189,34)" rx="2" ry="2" />
<text  x="875.12" y="383.5" ></text>
</g>
<g >
<title>leveldb::EncodeVarint32 (20,000,000 samples, 0.14%)</title><rect x="995.7" y="405" width="1.6" height="15.0" fill="rgb(243,13,0)" rx="2" ry="2" />
<text  x="998.74" y="415.5" ></text>
</g>
<g >
<title>__handle_mm_fault (360,000,000 samples, 2.45%)</title><rect x="1143.4" y="549" width="28.9" height="15.0" fill="rgb(236,209,39)" rx="2" ry="2" />
<text  x="1146.44" y="559.5" >__..</text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (20,000,000 samples, 0.14%)</title><rect x="944.4" y="325" width="1.6" height="15.0" fill="rgb(230,36,20)" rx="2" ry="2" />
<text  x="947.37" y="335.5" ></text>
</g>
<g >
<title>ext4_map_blocks (140,000,000 samples, 0.95%)</title><rect x="1151.5" y="453" width="11.2" height="15.0" fill="rgb(248,162,23)" rx="2" ry="2" />
<text  x="1154.47" y="463.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Value (20,000,000 samples, 0.14%)</title><rect x="38.9" y="309" width="1.6" height="15.0" fill="rgb(226,155,10)" rx="2" ry="2" />
<text  x="41.90" y="319.5" ></text>
</g>
<g >
<title>leveldb::DecodeFixed32 (140,000,000 samples, 0.95%)</title><rect x="461.1" y="293" width="11.3" height="15.0" fill="rgb(218,225,30)" rx="2" ry="2" />
<text  x="464.13" y="303.5" ></text>
</g>
<g >
<title>operator new[] (60,000,000 samples, 0.41%)</title><rect x="46.9" y="341" width="4.8" height="15.0" fill="rgb(236,142,11)" rx="2" ry="2" />
<text  x="49.93" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (20,000,000 samples, 0.14%)</title><rect x="443.5" y="261" width="1.6" height="15.0" fill="rgb(242,152,2)" rx="2" ry="2" />
<text  x="446.47" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::clear (20,000,000 samples, 0.14%)</title><rect x="491.6" y="373" width="1.6" height="15.0" fill="rgb(228,168,3)" rx="2" ry="2" />
<text  x="494.63" y="383.5" ></text>
</g>
<g >
<title>leveldb::Slice::operator[] (60,000,000 samples, 0.41%)</title><rect x="181.8" y="325" width="4.8" height="15.0" fill="rgb(249,40,14)" rx="2" ry="2" />
<text  x="184.78" y="335.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::NumEntries (20,000,000 samples, 0.14%)</title><rect x="498.1" y="405" width="1.6" height="15.0" fill="rgb(207,103,42)" rx="2" ry="2" />
<text  x="501.05" y="415.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (20,000,000 samples, 0.14%)</title><rect x="18.0" y="325" width="1.6" height="15.0" fill="rgb(223,192,10)" rx="2" ry="2" />
<text  x="21.03" y="335.5" ></text>
</g>
<g >
<title>leveldb::BuildTable (1,040,000,000 samples, 7.07%)</title><rect x="168.9" y="373" width="83.5" height="15.0" fill="rgb(239,107,36)" rx="2" ry="2" />
<text  x="171.94" y="383.5" >leveldb::..</text>
</g>
<g >
<title>leveldb::Block::Iter::value (20,000,000 samples, 0.14%)</title><rect x="152.9" y="341" width="1.6" height="15.0" fill="rgb(224,172,8)" rx="2" ry="2" />
<text  x="155.88" y="351.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::Next (20,000,000 samples, 0.14%)</title><rect x="168.9" y="357" width="1.6" height="15.0" fill="rgb(247,38,20)" rx="2" ry="2" />
<text  x="171.94" y="367.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (20,000,000 samples, 0.14%)</title><rect x="180.2" y="293" width="1.6" height="15.0" fill="rgb(240,5,3)" rx="2" ry="2" />
<text  x="183.18" y="303.5" ></text>
</g>
<g >
<title>blkdev_issue_zeroout (100,000,000 samples, 0.68%)</title><rect x="1164.3" y="453" width="8.0" height="15.0" fill="rgb(206,52,37)" rx="2" ry="2" />
<text  x="1167.31" y="463.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (20,000,000 samples, 0.14%)</title><rect x="284.5" y="133" width="1.6" height="15.0" fill="rgb(230,86,43)" rx="2" ry="2" />
<text  x="287.53" y="143.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (420,000,000 samples, 2.86%)</title><rect x="832.0" y="389" width="33.7" height="15.0" fill="rgb(218,90,6)" rx="2" ry="2" />
<text  x="834.99" y="399.5" >le..</text>
</g>
<g >
<title>__GI__IO_getline (20,000,000 samples, 0.14%)</title><rect x="1007.0" y="517" width="1.6" height="15.0" fill="rgb(225,207,30)" rx="2" ry="2" />
<text  x="1009.98" y="527.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;&amp;&gt; (20,000,000 samples, 0.14%)</title><rect x="445.1" y="245" width="1.6" height="15.0" fill="rgb(229,139,24)" rx="2" ry="2" />
<text  x="448.07" y="255.5" ></text>
</g>
<g >
<title>pmem_do_bvec (100,000,000 samples, 0.68%)</title><rect x="1164.3" y="373" width="8.0" height="15.0" fill="rgb(227,95,3)" rx="2" ry="2" />
<text  x="1167.31" y="383.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32 (20,000,000 samples, 0.14%)</title><rect x="807.9" y="373" width="1.6" height="15.0" fill="rgb(250,131,43)" rx="2" ry="2" />
<text  x="810.90" y="383.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock (20,000,000 samples, 0.14%)</title><rect x="873.7" y="373" width="1.6" height="15.0" fill="rgb(242,16,35)" rx="2" ry="2" />
<text  x="876.73" y="383.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::WriteLevel0Table (1,440,000,000 samples, 9.80%)</title><rect x="168.9" y="389" width="115.6" height="15.0" fill="rgb(243,178,47)" rx="2" ry="2" />
<text  x="171.94" y="399.5" >leveldb::DBImp..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; (20,000,000 samples, 0.14%)</title><rect x="1005.4" y="629" width="1.6" height="15.0" fill="rgb(207,115,18)" rx="2" ry="2" />
<text  x="1008.37" y="639.5" ></text>
</g>
<g >
<title>leveldb::Compaction::ShouldStopBefore (160,000,000 samples, 1.09%)</title><rect x="156.1" y="405" width="12.8" height="15.0" fill="rgb(205,32,39)" rx="2" ry="2" />
<text  x="159.10" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (20,000,000 samples, 0.14%)</title><rect x="445.1" y="261" width="1.6" height="15.0" fill="rgb(247,208,12)" rx="2" ry="2" />
<text  x="448.07" y="271.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (500,000,000 samples, 3.40%)</title><rect x="753.3" y="293" width="40.2" height="15.0" fill="rgb(223,219,10)" rx="2" ry="2" />
<text  x="756.32" y="303.5" >lev..</text>
</g>
<g >
<title>leveldb::TableBuilder::Rep::Rep (20,000,000 samples, 0.14%)</title><rect x="299.0" y="373" width="1.6" height="15.0" fill="rgb(217,195,7)" rx="2" ry="2" />
<text  x="301.98" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result_base::_Deleter, void&gt; (40,000,000 samples, 0.27%)</title><rect x="957.2" y="277" width="3.2" height="15.0" fill="rgb(241,85,4)" rx="2" ry="2" />
<text  x="960.21" y="287.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::RemoveRange (40,000,000 samples, 0.27%)</title><rect x="48.5" y="309" width="3.2" height="15.0" fill="rgb(244,28,13)" rx="2" ry="2" />
<text  x="51.53" y="319.5" ></text>
</g>
<g >
<title>leveldb::Status::operator= (60,000,000 samples, 0.41%)</title><rect x="817.5" y="405" width="4.9" height="15.0" fill="rgb(220,106,34)" rx="2" ry="2" />
<text  x="820.54" y="415.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::TableBuilder (40,000,000 samples, 0.27%)</title><rect x="249.2" y="357" width="3.2" height="15.0" fill="rgb(206,213,6)" rx="2" ry="2" />
<text  x="252.21" y="367.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseToSpans (20,000,000 samples, 0.14%)</title><rect x="1015.0" y="325" width="1.6" height="15.0" fill="rgb(250,64,0)" rx="2" ry="2" />
<text  x="1018.01" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::push_back (60,000,000 samples, 0.41%)</title><rect x="506.1" y="405" width="4.8" height="15.0" fill="rgb(213,103,40)" rx="2" ry="2" />
<text  x="509.08" y="415.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (20,000,000 samples, 0.14%)</title><rect x="430.6" y="357" width="1.6" height="15.0" fill="rgb(221,44,38)" rx="2" ry="2" />
<text  x="433.63" y="367.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (20,000,000 samples, 0.14%)</title><rect x="185.0" y="309" width="1.6" height="15.0" fill="rgb(218,23,28)" rx="2" ry="2" />
<text  x="187.99" y="319.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (40,000,000 samples, 0.27%)</title><rect x="210.7" y="181" width="3.2" height="15.0" fill="rgb(233,80,51)" rx="2" ry="2" />
<text  x="213.68" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::swap (60,000,000 samples, 0.41%)</title><rect x="910.7" y="245" width="4.8" height="15.0" fill="rgb(207,59,28)" rx="2" ry="2" />
<text  x="913.65" y="255.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::~shared_ptr (280,000,000 samples, 1.90%)</title><rect x="965.2" y="421" width="22.5" height="15.0" fill="rgb(237,187,48)" rx="2" ry="2" />
<text  x="968.24" y="431.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append@plt (20,000,000 samples, 0.14%)</title><rect x="360.0" y="357" width="1.6" height="15.0" fill="rgb(224,228,16)" rx="2" ry="2" />
<text  x="362.99" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__atomic_add_dispatch (20,000,000 samples, 0.14%)</title><rect x="934.7" y="325" width="1.6" height="15.0" fill="rgb(236,42,18)" rx="2" ry="2" />
<text  x="937.73" y="335.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (20,000,000 samples, 0.14%)</title><rect x="284.5" y="37" width="1.6" height="15.0" fill="rgb(208,75,54)" rx="2" ry="2" />
<text  x="287.53" y="47.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::shared_ptr (20,000,000 samples, 0.14%)</title><rect x="1186.8" y="629" width="1.6" height="15.0" fill="rgb(241,187,3)" rx="2" ry="2" />
<text  x="1189.79" y="639.5" ></text>
</g>
<g >
<title>flush_clwb (20,000,000 samples, 0.14%)</title><rect x="51.7" y="325" width="1.6" height="15.0" fill="rgb(215,36,35)" rx="2" ry="2" />
<text  x="54.74" y="335.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;char*, unsigned long&gt; (40,000,000 samples, 0.27%)</title><rect x="53.3" y="293" width="3.3" height="15.0" fill="rgb(222,219,36)" rx="2" ry="2" />
<text  x="56.35" y="303.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (240,000,000 samples, 1.63%)</title><rect x="83.9" y="373" width="19.2" height="15.0" fill="rgb(240,200,13)" rx="2" ry="2" />
<text  x="86.85" y="383.5" ></text>
</g>
<g >
<title>leveldb::PutVarint32 (60,000,000 samples, 0.41%)</title><rect x="356.8" y="373" width="4.8" height="15.0" fill="rgb(230,188,31)" rx="2" ry="2" />
<text  x="359.78" y="383.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (380,000,000 samples, 2.59%)</title><rect x="193.0" y="309" width="30.5" height="15.0" fill="rgb(210,70,31)" rx="2" ry="2" />
<text  x="196.02" y="319.5" >st..</text>
</g>
<g >
<title>std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::_M_erase_at_end (20,000,000 samples, 0.14%)</title><rect x="491.6" y="357" width="1.6" height="15.0" fill="rgb(214,113,28)" rx="2" ry="2" />
<text  x="494.63" y="367.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (20,000,000 samples, 0.14%)</title><rect x="189.8" y="309" width="1.6" height="15.0" fill="rgb(246,158,48)" rx="2" ry="2" />
<text  x="192.81" y="319.5" ></text>
</g>
<g >
<title>leveldb::PutVarint64 (20,000,000 samples, 0.14%)</title><rect x="1029.5" y="613" width="1.6" height="15.0" fill="rgb(231,140,6)" rx="2" ry="2" />
<text  x="1032.46" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (280,000,000 samples, 1.90%)</title><rect x="941.2" y="373" width="22.4" height="15.0" fill="rgb(214,54,13)" rx="2" ry="2" />
<text  x="944.16" y="383.5" >s..</text>
</g>
<g >
<title>leveldb::DecodeFixed32 (120,000,000 samples, 0.82%)</title><rect x="854.5" y="357" width="9.6" height="15.0" fill="rgb(224,140,27)" rx="2" ry="2" />
<text  x="857.46" y="367.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;leveldb::ParsedInternalKey*&gt; (20,000,000 samples, 0.14%)</title><rect x="491.6" y="325" width="1.6" height="15.0" fill="rgb(232,193,16)" rx="2" ry="2" />
<text  x="494.63" y="335.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (20,000,000 samples, 0.14%)</title><rect x="168.9" y="325" width="1.6" height="15.0" fill="rgb(227,219,37)" rx="2" ry="2" />
<text  x="171.94" y="335.5" ></text>
</g>
<g >
<title>leveldb::Slice::ToString[abi:cxx11] (20,000,000 samples, 0.14%)</title><rect x="432.2" y="357" width="1.6" height="15.0" fill="rgb(211,210,5)" rx="2" ry="2" />
<text  x="435.23" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (140,000,000 samples, 0.95%)</title><rect x="302.2" y="373" width="11.2" height="15.0" fill="rgb(239,161,9)" rx="2" ry="2" />
<text  x="305.19" y="383.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::set_value (440,000,000 samples, 2.99%)</title><rect x="881.8" y="421" width="35.3" height="15.0" fill="rgb(240,126,7)" rx="2" ry="2" />
<text  x="884.76" y="431.5" >st..</text>
</g>
<g >
<title>tcmalloc::ThreadCache::ListTooLong (20,000,000 samples, 0.14%)</title><rect x="284.5" y="325" width="1.6" height="15.0" fill="rgb(245,96,33)" rx="2" ry="2" />
<text  x="287.53" y="335.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;char*, unsigned long, char&gt; (20,000,000 samples, 0.14%)</title><rect x="299.0" y="325" width="1.6" height="15.0" fill="rgb(226,149,15)" rx="2" ry="2" />
<text  x="301.98" y="335.5" ></text>
</g>
<g >
<title>ext4_map_blocks (100,000,000 samples, 0.68%)</title><rect x="1164.3" y="485" width="8.0" height="15.0" fill="rgb(217,6,15)" rx="2" ry="2" />
<text  x="1167.31" y="495.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::InsertRange (20,000,000 samples, 0.14%)</title><rect x="284.5" y="293" width="1.6" height="15.0" fill="rgb(222,131,35)" rx="2" ry="2" />
<text  x="287.53" y="303.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;&amp;&gt; (20,000,000 samples, 0.14%)</title><rect x="209.1" y="197" width="1.6" height="15.0" fill="rgb(240,220,5)" rx="2" ry="2" />
<text  x="212.07" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (140,000,000 samples, 0.95%)</title><rect x="414.6" y="309" width="11.2" height="15.0" fill="rgb(242,139,22)" rx="2" ry="2" />
<text  x="417.57" y="319.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ReleaseToCentralCache (20,000,000 samples, 0.14%)</title><rect x="284.5" y="309" width="1.6" height="15.0" fill="rgb(214,19,33)" rx="2" ry="2" />
<text  x="287.53" y="319.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ListTooLong (20,000,000 samples, 0.14%)</title><rect x="1015.0" y="389" width="1.6" height="15.0" fill="rgb(226,168,43)" rx="2" ry="2" />
<text  x="1018.01" y="399.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Flush (700,000,000 samples, 4.76%)</title><rect x="191.4" y="341" width="56.2" height="15.0" fill="rgb(247,123,37)" rx="2" ry="2" />
<text  x="194.41" y="351.5" >level..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (60,000,000 samples, 0.41%)</title><rect x="112.7" y="245" width="4.9" height="15.0" fill="rgb(237,21,23)" rx="2" ry="2" />
<text  x="115.75" y="255.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;leveldb::Status&gt;::~_Result (20,000,000 samples, 0.14%)</title><rect x="984.5" y="245" width="1.6" height="15.0" fill="rgb(234,116,33)" rx="2" ry="2" />
<text  x="987.50" y="255.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (20,000,000 samples, 0.14%)</title><rect x="395.3" y="373" width="1.6" height="15.0" fill="rgb(229,118,45)" rx="2" ry="2" />
<text  x="398.31" y="383.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::KeyBuffer::Set (80,000,000 samples, 0.54%)</title><rect x="515.7" y="453" width="6.4" height="15.0" fill="rgb(207,35,47)" rx="2" ry="2" />
<text  x="518.71" y="463.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (20,000,000 samples, 0.14%)</title><rect x="98.3" y="341" width="1.6" height="15.0" fill="rgb(225,14,0)" rx="2" ry="2" />
<text  x="101.30" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;leveldb::ParsedInternalKey, std::allocator&lt;leveldb::ParsedInternalKey&gt; &gt;::_M_realloc_insert&lt;leveldb::ParsedInternalKey const&amp;&gt; (20,000,000 samples, 0.14%)</title><rect x="509.3" y="389" width="1.6" height="15.0" fill="rgb(212,94,25)" rx="2" ry="2" />
<text  x="512.29" y="399.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::ReleaseListToSpans (20,000,000 samples, 0.14%)</title><rect x="284.5" y="277" width="1.6" height="15.0" fill="rgb(218,63,41)" rx="2" ry="2" />
<text  x="287.53" y="287.5" ></text>
</g>
<g >
<title>std::__fill_a&lt;char&gt; (20,000,000 samples, 0.14%)</title><rect x="299.0" y="245" width="1.6" height="15.0" fill="rgb(206,224,21)" rx="2" ry="2" />
<text  x="301.98" y="255.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (440,000,000 samples, 2.99%)</title><rect x="69.4" y="389" width="35.3" height="15.0" fill="rgb(212,115,15)" rx="2" ry="2" />
<text  x="72.40" y="399.5" >le..</text>
</g>
<g >
<title>std::pointer_traits&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, true&gt;*&gt;::pointer_to (20,000,000 samples, 0.14%)</title><rect x="1178.8" y="613" width="1.6" height="15.0" fill="rgb(227,60,34)" rx="2" ry="2" />
<text  x="1181.76" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (20,000,000 samples, 0.14%)</title><rect x="437.0" y="309" width="1.7" height="15.0" fill="rgb(222,115,25)" rx="2" ry="2" />
<text  x="440.05" y="319.5" ></text>
</g>
<g >
<title>leveldb::Status::OK (20,000,000 samples, 0.14%)</title><rect x="811.1" y="389" width="1.6" height="15.0" fill="rgb(235,40,28)" rx="2" ry="2" />
<text  x="814.12" y="399.5" ></text>
</g>
<g >
<title>pmem_flush (20,000,000 samples, 0.14%)</title><rect x="247.6" y="325" width="1.6" height="15.0" fill="rgb(221,67,22)" rx="2" ry="2" />
<text  x="250.61" y="335.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (280,000,000 samples, 1.90%)</title><rect x="449.9" y="325" width="22.5" height="15.0" fill="rgb(253,132,7)" rx="2" ry="2" />
<text  x="452.89" y="335.5" >l..</text>
</g>
<g >
<title>leveldb::DBImpl::CompactMemTable (1,460,000,000 samples, 9.93%)</title><rect x="168.9" y="405" width="117.2" height="15.0" fill="rgb(238,198,28)" rx="2" ry="2" />
<text  x="171.94" y="415.5" >leveldb::DBImp..</text>
</g>
<g >
<title>__memcmp_avx2_movbe (20,000,000 samples, 0.14%)</title><rect x="424.2" y="213" width="1.6" height="15.0" fill="rgb(214,94,8)" rx="2" ry="2" />
<text  x="427.20" y="223.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (20,000,000 samples, 0.14%)</title><rect x="665.0" y="309" width="1.6" height="15.0" fill="rgb(226,19,15)" rx="2" ry="2" />
<text  x="668.02" y="319.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (20,000,000 samples, 0.14%)</title><rect x="180.2" y="309" width="1.6" height="15.0" fill="rgb(222,87,43)" rx="2" ry="2" />
<text  x="183.18" y="319.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;char*, unsigned long&gt; (40,000,000 samples, 0.27%)</title><rect x="53.3" y="277" width="3.3" height="15.0" fill="rgb(234,181,18)" rx="2" ry="2" />
<text  x="56.35" y="287.5" ></text>
</g>
<g >
<title>jbd2__journal_start (20,000,000 samples, 0.14%)</title><rect x="1145.0" y="469" width="1.7" height="15.0" fill="rgb(236,2,20)" rx="2" ry="2" />
<text  x="1148.05" y="479.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (20,000,000 samples, 0.14%)</title><rect x="530.2" y="341" width="1.6" height="15.0" fill="rgb(220,9,18)" rx="2" ry="2" />
<text  x="533.16" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (20,000,000 samples, 0.14%)</title><rect x="37.3" y="277" width="1.6" height="15.0" fill="rgb(250,19,26)" rx="2" ry="2" />
<text  x="40.29" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (40,000,000 samples, 0.27%)</title><rect x="56.6" y="357" width="3.2" height="15.0" fill="rgb(253,209,21)" rx="2" ry="2" />
<text  x="59.56" y="367.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (140,000,000 samples, 0.95%)</title><rect x="226.7" y="309" width="11.3" height="15.0" fill="rgb(216,48,48)" rx="2" ry="2" />
<text  x="229.73" y="319.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;char*, unsigned long, char&gt; (40,000,000 samples, 0.27%)</title><rect x="249.2" y="293" width="3.2" height="15.0" fill="rgb(247,64,17)" rx="2" ry="2" />
<text  x="252.21" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (140,000,000 samples, 0.95%)</title><rect x="202.7" y="245" width="11.2" height="15.0" fill="rgb(238,20,2)" rx="2" ry="2" />
<text  x="205.65" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_valptr (40,000,000 samples, 0.27%)</title><rect x="234.8" y="261" width="3.2" height="15.0" fill="rgb(224,163,39)" rx="2" ry="2" />
<text  x="237.76" y="271.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (20,000,000 samples, 0.14%)</title><rect x="395.3" y="357" width="1.6" height="15.0" fill="rgb(253,61,19)" rx="2" ry="2" />
<text  x="398.31" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::empty (20,000,000 samples, 0.14%)</title><rect x="1031.1" y="613" width="1.6" height="15.0" fill="rgb(236,38,31)" rx="2" ry="2" />
<text  x="1034.06" y="623.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (12,400,000,000 samples, 84.35%)</title><rect x="10.0" y="533" width="995.4" height="15.0" fill="rgb(212,65,2)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >std::__invoke&lt;void </text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::resize (20,000,000 samples, 0.14%)</title><rect x="299.0" y="357" width="1.6" height="15.0" fill="rgb(240,182,44)" rx="2" ry="2" />
<text  x="301.98" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (100,000,000 samples, 0.68%)</title><rect x="321.5" y="357" width="8.0" height="15.0" fill="rgb(224,164,31)" rx="2" ry="2" />
<text  x="324.46" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;char*, unsigned long&gt; (20,000,000 samples, 0.14%)</title><rect x="299.0" y="293" width="1.6" height="15.0" fill="rgb(219,83,43)" rx="2" ry="2" />
<text  x="301.98" y="303.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::ReleaseToCentralCache (20,000,000 samples, 0.14%)</title><rect x="1015.0" y="373" width="1.6" height="15.0" fill="rgb(249,71,9)" rx="2" ry="2" />
<text  x="1018.01" y="383.5" ></text>
</g>
<g >
<title>std::atomic_flag::atomic_flag (20,000,000 samples, 0.14%)</title><rect x="954.0" y="277" width="1.6" height="15.0" fill="rgb(213,95,11)" rx="2" ry="2" />
<text  x="957.00" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;::_M_v (20,000,000 samples, 0.14%)</title><rect x="1175.6" y="613" width="1.6" height="15.0" fill="rgb(205,110,12)" rx="2" ry="2" />
<text  x="1178.55" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (40,000,000 samples, 0.27%)</title><rect x="229.9" y="261" width="3.3" height="15.0" fill="rgb(212,216,13)" rx="2" ry="2" />
<text  x="232.95" y="271.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::Run (20,000,000 samples, 0.14%)</title><rect x="1007.0" y="581" width="1.6" height="15.0" fill="rgb(224,116,42)" rx="2" ry="2" />
<text  x="1009.98" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (20,000,000 samples, 0.14%)</title><rect x="970.1" y="341" width="1.6" height="15.0" fill="rgb(251,170,4)" rx="2" ry="2" />
<text  x="973.05" y="351.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (20,000,000 samples, 0.14%)</title><rect x="19.6" y="341" width="1.6" height="15.0" fill="rgb(228,73,7)" rx="2" ry="2" />
<text  x="22.63" y="351.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::FetchFromOneSpansSafe (40,000,000 samples, 0.27%)</title><rect x="48.5" y="293" width="3.2" height="15.0" fill="rgb(223,81,31)" rx="2" ry="2" />
<text  x="51.53" y="303.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (40,000,000 samples, 0.27%)</title><rect x="422.6" y="261" width="3.2" height="15.0" fill="rgb(235,225,24)" rx="2" ry="2" />
<text  x="425.60" y="271.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BackgroundCall (6,240,000,000 samples, 42.45%)</title><rect x="10.0" y="453" width="500.9" height="15.0" fill="rgb(241,113,16)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >leveldb::DBImpl::BackgroundCall</text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MergingIterator::FindSmallest (60,000,000 samples, 0.41%)</title><rect x="1018.2" y="629" width="4.8" height="15.0" fill="rgb(215,66,36)" rx="2" ry="2" />
<text  x="1021.22" y="639.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (20,000,000 samples, 0.14%)</title><rect x="284.5" y="85" width="1.6" height="15.0" fill="rgb(224,62,46)" rx="2" ry="2" />
<text  x="287.53" y="95.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (280,000,000 samples, 1.90%)</title><rect x="965.2" y="389" width="22.5" height="15.0" fill="rgb(216,183,30)" rx="2" ry="2" />
<text  x="968.24" y="399.5" >s..</text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;::~pair (20,000,000 samples, 0.14%)</title><rect x="1005.4" y="613" width="1.6" height="15.0" fill="rgb(216,38,24)" rx="2" ry="2" />
<text  x="1008.37" y="623.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (20,000,000 samples, 0.14%)</title><rect x="307.0" y="245" width="1.6" height="15.0" fill="rgb(225,140,38)" rx="2" ry="2" />
<text  x="310.01" y="255.5" ></text>
</g>
<g >
<title>leveldb::Block::Iter::Valid (20,000,000 samples, 0.14%)</title><rect x="149.7" y="293" width="1.6" height="15.0" fill="rgb(218,116,14)" rx="2" ry="2" />
<text  x="152.67" y="303.5" ></text>
</g>
<g >
<title>__GI__IO_padn (20,000,000 samples, 0.14%)</title><rect x="518.9" y="389" width="1.6" height="15.0" fill="rgb(242,34,15)" rx="2" ry="2" />
<text  x="521.93" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;leveldb::DBImpl::Writer*, std::allocator&lt;leveldb::DBImpl::Writer*&gt; &gt;::_M_push_back_aux&lt;leveldb::DBImpl::Writer*&gt; (20,000,000 samples, 0.14%)</title><rect x="880.1" y="389" width="1.7" height="15.0" fill="rgb(249,6,23)" rx="2" ry="2" />
<text  x="883.15" y="399.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (40,000,000 samples, 0.27%)</title><rect x="48.5" y="277" width="3.2" height="15.0" fill="rgb(241,42,44)" rx="2" ry="2" />
<text  x="51.53" y="287.5" ></text>
</g>
<g >
<title>leveldb::Arena::MemoryUsage (20,000,000 samples, 0.14%)</title><rect x="527.0" y="389" width="1.6" height="15.0" fill="rgb(250,108,19)" rx="2" ry="2" />
<text  x="529.95" y="399.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::shared_ptr&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt;&gt; (280,000,000 samples, 1.90%)</title><rect x="941.2" y="389" width="22.4" height="15.0" fill="rgb(237,102,11)" rx="2" ry="2" />
<text  x="944.16" y="399.5" >s..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (140,000,000 samples, 0.95%)</title><rect x="226.7" y="293" width="11.3" height="15.0" fill="rgb(220,86,30)" rx="2" ry="2" />
<text  x="229.73" y="303.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (20,000,000 samples, 0.14%)</title><rect x="270.1" y="245" width="1.6" height="15.0" fill="rgb(239,48,36)" rx="2" ry="2" />
<text  x="273.08" y="255.5" ></text>
</g>
<g >
<title>pmem_make_request (100,000,000 samples, 0.68%)</title><rect x="1164.3" y="389" width="8.0" height="15.0" fill="rgb(221,62,25)" rx="2" ry="2" />
<text  x="1167.31" y="399.5" ></text>
</g>
<g >
<title>drop_futex_key_refs.isra.17 (20,000,000 samples, 0.14%)</title><rect x="894.6" y="261" width="1.6" height="15.0" fill="rgb(251,4,48)" rx="2" ry="2" />
<text  x="897.60" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (100,000,000 samples, 0.68%)</title><rect x="24.4" y="277" width="8.1" height="15.0" fill="rgb(211,17,29)" rx="2" ry="2" />
<text  x="27.45" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (300,000,000 samples, 2.04%)</title><rect x="406.5" y="341" width="24.1" height="15.0" fill="rgb(210,89,1)" rx="2" ry="2" />
<text  x="409.54" y="351.5" >s..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (280,000,000 samples, 1.90%)</title><rect x="965.2" y="373" width="22.5" height="15.0" fill="rgb(209,199,32)" rx="2" ry="2" />
<text  x="968.24" y="383.5" >s..</text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (40,000,000 samples, 0.27%)</title><rect x="186.6" y="341" width="3.2" height="15.0" fill="rgb(252,141,25)" rx="2" ry="2" />
<text  x="189.60" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (220,000,000 samples, 1.50%)</title><rect x="254.0" y="309" width="17.7" height="15.0" fill="rgb(245,200,27)" rx="2" ry="2" />
<text  x="257.03" y="319.5" ></text>
</g>
<g >
<title>std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (20,000,000 samples, 0.14%)</title><rect x="960.4" y="341" width="1.6" height="15.0" fill="rgb(222,129,12)" rx="2" ry="2" />
<text  x="963.42" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (20,000,000 samples, 0.14%)</title><rect x="32.5" y="293" width="1.6" height="15.0" fill="rgb(205,2,4)" rx="2" ry="2" />
<text  x="35.48" y="303.5" ></text>
</g>
<g >
<title>tc_deletearray_nothrow (20,000,000 samples, 0.14%)</title><rect x="448.3" y="357" width="1.6" height="15.0" fill="rgb(233,223,44)" rx="2" ry="2" />
<text  x="451.29" y="367.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (400,000,000 samples, 2.72%)</title><rect x="191.4" y="325" width="32.1" height="15.0" fill="rgb(238,134,45)" rx="2" ry="2" />
<text  x="194.41" y="335.5" >le..</text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (40,000,000 samples, 0.27%)</title><rect x="91.9" y="357" width="3.2" height="15.0" fill="rgb(253,53,54)" rx="2" ry="2" />
<text  x="94.88" y="367.5" ></text>
</g>
<g >
<title>page_fault (20,000,000 samples, 0.14%)</title><rect x="133.6" y="261" width="1.6" height="15.0" fill="rgb(245,215,42)" rx="2" ry="2" />
<text  x="136.62" y="271.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::TwoLevelIterator::key (20,000,000 samples, 0.14%)</title><rect x="1024.6" y="629" width="1.6" height="15.0" fill="rgb(239,66,46)" rx="2" ry="2" />
<text  x="1027.64" y="639.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (100,000,000 samples, 0.68%)</title><rect x="348.7" y="357" width="8.1" height="15.0" fill="rgb(239,35,13)" rx="2" ry="2" />
<text  x="351.75" y="367.5" ></text>
</g>
<g >
<title>__do_page_fault (360,000,000 samples, 2.45%)</title><rect x="1143.4" y="581" width="28.9" height="15.0" fill="rgb(246,49,43)" rx="2" ry="2" />
<text  x="1146.44" y="591.5" >__..</text>
</g>
<g >
<title>__gnu_cxx::__exchange_and_add_dispatch (40,000,000 samples, 0.27%)</title><rect x="965.2" y="357" width="3.2" height="15.0" fill="rgb(226,206,33)" rx="2" ry="2" />
<text  x="968.24" y="367.5" ></text>
</g>
<g >
<title>leveldb::Slice::empty (20,000,000 samples, 0.14%)</title><rect x="809.5" y="389" width="1.6" height="15.0" fill="rgb(225,48,54)" rx="2" ry="2" />
<text  x="812.51" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (260,000,000 samples, 1.77%)</title><rect x="193.0" y="261" width="20.9" height="15.0" fill="rgb(219,71,44)" rx="2" ry="2" />
<text  x="196.02" y="271.5" ></text>
</g>
<g >
<title>leveldb::Slice::operator[] (180,000,000 samples, 1.22%)</title><rect x="363.2" y="373" width="14.4" height="15.0" fill="rgb(212,83,9)" rx="2" ry="2" />
<text  x="366.20" y="383.5" ></text>
</g>
<g >
<title>ext4_map_blocks (80,000,000 samples, 0.54%)</title><rect x="1132.2" y="485" width="6.4" height="15.0" fill="rgb(221,2,45)" rx="2" ry="2" />
<text  x="1135.20" y="495.5" ></text>
</g>
</g>
</svg>
