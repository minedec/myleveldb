<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="758.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="741" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="741" > </text>
<g id="frames">
<g >
<title>leveldb::BuildTable (71,999,982 samples, 17.94%)</title><rect x="535.3" y="421" width="211.7" height="15.0" fill="rgb(253,208,48)" rx="2" ry="2" />
<text  x="538.32" y="431.5" >leveldb::BuildTable</text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.33%)</title><rect x="1127.3" y="597" width="3.9" height="15.0" fill="rgb(248,14,12)" rx="2" ry="2" />
<text  x="1130.28" y="607.5" ></text>
</g>
<g >
<title>ext4_mb_mark_diskspace_used (1,333,333 samples, 0.33%)</title><rect x="49.2" y="261" width="3.9" height="15.0" fill="rgb(254,214,18)" rx="2" ry="2" />
<text  x="52.20" y="271.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::_M_get_result (2,666,666 samples, 0.66%)</title><rect x="1076.3" y="453" width="7.9" height="15.0" fill="rgb(231,99,25)" rx="2" ry="2" />
<text  x="1079.31" y="463.5" ></text>
</g>
<g >
<title>leveldb::DB::Open (1,333,333 samples, 0.33%)</title><rect x="49.2" y="597" width="3.9" height="15.0" fill="rgb(246,39,24)" rx="2" ry="2" />
<text  x="52.20" y="607.5" ></text>
</g>
<g >
<title>leveldb::Status::Status (1,333,333 samples, 0.33%)</title><rect x="1021.4" y="405" width="3.9" height="15.0" fill="rgb(215,60,18)" rx="2" ry="2" />
<text  x="1024.43" y="415.5" ></text>
</g>
<g >
<title>leveldb::Slice::compare (1,333,333 samples, 0.33%)</title><rect x="950.9" y="293" width="3.9" height="15.0" fill="rgb(238,17,22)" rx="2" ry="2" />
<text  x="953.86" y="303.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (2,666,666 samples, 0.66%)</title><rect x="1107.7" y="389" width="7.8" height="15.0" fill="rgb(217,29,22)" rx="2" ry="2" />
<text  x="1110.67" y="399.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (1,333,333 samples, 0.33%)</title><rect x="394.2" y="437" width="3.9" height="15.0" fill="rgb(239,129,18)" rx="2" ry="2" />
<text  x="397.19" y="447.5" ></text>
</g>
<g >
<title>try_charge (1,333,333 samples, 0.33%)</title><rect x="1127.3" y="549" width="3.9" height="15.0" fill="rgb(236,227,7)" rx="2" ry="2" />
<text  x="1130.28" y="559.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;char*, unsigned long&gt; (3,999,999 samples, 1.00%)</title><rect x="735.2" y="325" width="11.8" height="15.0" fill="rgb(242,26,40)" rx="2" ry="2" />
<text  x="738.25" y="335.5" ></text>
</g>
<g >
<title>__x64_sys_openat (1,333,333 samples, 0.33%)</title><rect x="1154.7" y="597" width="3.9" height="15.0" fill="rgb(250,213,34)" rx="2" ry="2" />
<text  x="1157.72" y="607.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1,333,333 samples, 0.33%)</title><rect x="696.0" y="117" width="4.0" height="15.0" fill="rgb(214,70,28)" rx="2" ry="2" />
<text  x="699.05" y="127.5" ></text>
</g>
<g >
<title>unmap_page_range (1,333,333 samples, 0.33%)</title><rect x="1162.6" y="501" width="3.9" height="15.0" fill="rgb(215,121,20)" rx="2" ry="2" />
<text  x="1165.56" y="511.5" ></text>
</g>
<g >
<title>page_fault (2,666,666 samples, 0.66%)</title><rect x="754.9" y="469" width="7.8" height="15.0" fill="rgb(205,2,42)" rx="2" ry="2" />
<text  x="757.85" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1,333,333 samples, 0.33%)</title><rect x="602.0" y="309" width="3.9" height="15.0" fill="rgb(250,29,5)" rx="2" ry="2" />
<text  x="604.96" y="319.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.33%)</title><rect x="888.1" y="277" width="4.0" height="15.0" fill="rgb(219,103,5)" rx="2" ry="2" />
<text  x="891.14" y="287.5" ></text>
</g>
<g >
<title>pagevec_lookup_range (1,333,333 samples, 0.33%)</title><rect x="347.1" y="453" width="4.0" height="15.0" fill="rgb(240,12,13)" rx="2" ry="2" />
<text  x="350.14" y="463.5" ></text>
</g>
<g >
<title>put_unused_fd (1,333,333 samples, 0.33%)</title><rect x="1154.7" y="565" width="3.9" height="15.0" fill="rgb(215,77,42)" rx="2" ry="2" />
<text  x="1157.72" y="575.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::KeyIsAfterNode (50,666,654 samples, 12.62%)</title><rect x="845.0" y="357" width="149.0" height="15.0" fill="rgb(232,226,18)" rx="2" ry="2" />
<text  x="848.02" y="367.5" >leveldb::SkipList&lt;c..</text>
</g>
<g >
<title>__ext4_journal_start_sb (1,333,333 samples, 0.33%)</title><rect x="637.2" y="213" width="4.0" height="15.0" fill="rgb(254,190,10)" rx="2" ry="2" />
<text  x="640.24" y="223.5" ></text>
</g>
<g >
<title>dax_iomap_rw (131,999,967 samples, 32.89%)</title><rect x="68.8" y="533" width="388.1" height="15.0" fill="rgb(236,172,17)" rx="2" ry="2" />
<text  x="71.80" y="543.5" >dax_iomap_rw</text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (2,666,666 samples, 0.66%)</title><rect x="551.0" y="389" width="7.8" height="15.0" fill="rgb(216,173,36)" rx="2" ry="2" />
<text  x="554.00" y="399.5" ></text>
</g>
<g >
<title>madvise_free_pte_range (1,333,333 samples, 0.33%)</title><rect x="468.7" y="517" width="3.9" height="15.0" fill="rgb(221,180,28)" rx="2" ry="2" />
<text  x="471.67" y="527.5" ></text>
</g>
<g >
<title>iterate_dir (1,333,333 samples, 0.33%)</title><rect x="45.3" y="597" width="3.9" height="15.0" fill="rgb(210,9,42)" rx="2" ry="2" />
<text  x="48.28" y="607.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (1,333,333 samples, 0.33%)</title><rect x="351.1" y="421" width="3.9" height="15.0" fill="rgb(224,162,26)" rx="2" ry="2" />
<text  x="354.06" y="431.5" ></text>
</g>
<g >
<title>dax_iomap_actor (87,999,978 samples, 21.93%)</title><rect x="68.8" y="501" width="258.7" height="15.0" fill="rgb(208,209,34)" rx="2" ry="2" />
<text  x="71.80" y="511.5" >dax_iomap_actor</text>
</g>
<g >
<title>__fput (1,333,333 samples, 0.33%)</title><rect x="1166.5" y="533" width="3.9" height="15.0" fill="rgb(243,120,46)" rx="2" ry="2" />
<text  x="1169.48" y="543.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (2,666,666 samples, 0.66%)</title><rect x="986.1" y="309" width="7.9" height="15.0" fill="rgb(254,185,27)" rx="2" ry="2" />
<text  x="989.15" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,666,666 samples, 0.66%)</title><rect x="37.4" y="629" width="7.9" height="15.0" fill="rgb(208,136,10)" rx="2" ry="2" />
<text  x="40.44" y="639.5" ></text>
</g>
<g >
<title>__kernel_write (13,333,330 samples, 3.32%)</title><rect x="684.3" y="197" width="39.2" height="15.0" fill="rgb(246,5,8)" rx="2" ry="2" />
<text  x="687.29" y="207.5" >__k..</text>
</g>
<g >
<title>leveldb::WriteBatchInternal::InsertInto (74,666,648 samples, 18.60%)</title><rect x="805.8" y="453" width="219.5" height="15.0" fill="rgb(219,78,14)" rx="2" ry="2" />
<text  x="808.81" y="463.5" >leveldb::WriteBatchInternal::..</text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.33%)</title><rect x="978.3" y="261" width="3.9" height="15.0" fill="rgb(241,95,12)" rx="2" ry="2" />
<text  x="981.31" y="271.5" ></text>
</g>
<g >
<title>open64 (1,333,333 samples, 0.33%)</title><rect x="1154.7" y="645" width="3.9" height="15.0" fill="rgb(238,53,7)" rx="2" ry="2" />
<text  x="1157.72" y="655.5" ></text>
</g>
<g >
<title>find_extend_vma (1,333,333 samples, 0.33%)</title><rect x="723.5" y="197" width="3.9" height="15.0" fill="rgb(232,33,41)" rx="2" ry="2" />
<text  x="726.49" y="207.5" ></text>
</g>
<g >
<title>ext4_data_block_valid (3,999,999 samples, 1.00%)</title><rect x="335.4" y="453" width="11.7" height="15.0" fill="rgb(245,84,30)" rx="2" ry="2" />
<text  x="338.38" y="463.5" ></text>
</g>
<g >
<title>apparmor_file_permission (1,333,333 samples, 0.33%)</title><rect x="464.8" y="549" width="3.9" height="15.0" fill="rgb(206,173,25)" rx="2" ry="2" />
<text  x="467.75" y="559.5" ></text>
</g>
<g >
<title>leveldb::VersionSet::LogAndApply (1,333,333 samples, 0.33%)</title><rect x="49.2" y="581" width="3.9" height="15.0" fill="rgb(246,71,16)" rx="2" ry="2" />
<text  x="52.20" y="591.5" ></text>
</g>
<g >
<title>ext4_inode_csum.isra.59 (5,333,332 samples, 1.33%)</title><rect x="405.9" y="437" width="15.7" height="15.0" fill="rgb(223,64,11)" rx="2" ry="2" />
<text  x="408.95" y="447.5" ></text>
</g>
<g >
<title>tcmalloc::ThreadCache::FetchFromCentralCache (1,333,333 samples, 0.33%)</title><rect x="1186.1" y="677" width="3.9" height="15.0" fill="rgb(240,95,14)" rx="2" ry="2" />
<text  x="1189.08" y="687.5" ></text>
</g>
<g >
<title>find_vma (1,333,333 samples, 0.33%)</title><rect x="723.5" y="181" width="3.9" height="15.0" fill="rgb(218,62,23)" rx="2" ry="2" />
<text  x="726.49" y="191.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::GetMaxHeight (1,333,333 samples, 0.33%)</title><rect x="841.1" y="357" width="3.9" height="15.0" fill="rgb(231,109,41)" rx="2" ry="2" />
<text  x="844.10" y="367.5" ></text>
</g>
<g >
<title>ext4_map_blocks (15,999,996 samples, 3.99%)</title><rect x="335.4" y="485" width="47.0" height="15.0" fill="rgb(245,119,5)" rx="2" ry="2" />
<text  x="338.38" y="495.5" >ext4..</text>
</g>
<g >
<title>__ext4_journal_stop (1,333,333 samples, 0.33%)</title><rect x="649.0" y="181" width="3.9" height="15.0" fill="rgb(218,198,36)" rx="2" ry="2" />
<text  x="652.00" y="191.5" ></text>
</g>
<g >
<title>ext4_mark_inode_dirty (19,999,995 samples, 4.98%)</title><rect x="398.1" y="485" width="58.8" height="15.0" fill="rgb(228,3,21)" rx="2" ry="2" />
<text  x="401.11" y="495.5" >ext4_m..</text>
</g>
<g >
<title>jbd2_journal_stop (1,333,333 samples, 0.33%)</title><rect x="331.5" y="469" width="3.9" height="15.0" fill="rgb(251,104,23)" rx="2" ry="2" />
<text  x="334.46" y="479.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (1,333,333 samples, 0.33%)</title><rect x="1017.5" y="389" width="3.9" height="15.0" fill="rgb(254,76,19)" rx="2" ry="2" />
<text  x="1020.51" y="399.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;leveldb::Status&gt;::~_Result (1,333,333 samples, 0.33%)</title><rect x="1111.6" y="261" width="3.9" height="15.0" fill="rgb(237,39,45)" rx="2" ry="2" />
<text  x="1114.59" y="271.5" ></text>
</g>
<g >
<title>tcmalloc::CentralFreeList::Populate (1,333,333 samples, 0.33%)</title><rect x="1127.3" y="661" width="3.9" height="15.0" fill="rgb(243,49,7)" rx="2" ry="2" />
<text  x="1130.28" y="671.5" ></text>
</g>
<g >
<title>do_exit (3,999,999 samples, 1.00%)</title><rect x="1158.6" y="581" width="11.8" height="15.0" fill="rgb(251,155,25)" rx="2" ry="2" />
<text  x="1161.64" y="591.5" ></text>
</g>
<g >
<title>ext4_reserve_inode_write (10,666,664 samples, 2.66%)</title><rect x="425.5" y="469" width="31.4" height="15.0" fill="rgb(232,33,6)" rx="2" ry="2" />
<text  x="428.55" y="479.5" >ex..</text>
</g>
<g >
<title>pmem_make_request (1,333,333 samples, 0.33%)</title><rect x="652.9" y="85" width="3.9" height="15.0" fill="rgb(237,8,29)" rx="2" ry="2" />
<text  x="655.92" y="95.5" ></text>
</g>
<g >
<title>generic_make_request (1,333,333 samples, 0.33%)</title><rect x="652.9" y="101" width="3.9" height="15.0" fill="rgb(227,218,37)" rx="2" ry="2" />
<text  x="655.92" y="111.5" ></text>
</g>
<g >
<title>vfs_fsync_range (2,666,666 samples, 0.66%)</title><rect x="641.2" y="197" width="7.8" height="15.0" fill="rgb(239,139,9)" rx="2" ry="2" />
<text  x="644.16" y="207.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BGWork (71,999,982 samples, 17.94%)</title><rect x="535.3" y="501" width="211.7" height="15.0" fill="rgb(244,5,13)" rx="2" ry="2" />
<text  x="538.32" y="511.5" >leveldb::DBImpl::BGWork</text>
</g>
<g >
<title>leveldb::MemTable::KeyComparator::operator (45,333,322 samples, 11.30%)</title><rect x="860.7" y="341" width="133.3" height="15.0" fill="rgb(229,189,30)" rx="2" ry="2" />
<text  x="863.70" y="351.5" >leveldb::MemTabl..</text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (1,333,333 samples, 0.33%)</title><rect x="911.7" y="325" width="3.9" height="15.0" fill="rgb(207,173,10)" rx="2" ry="2" />
<text  x="914.66" y="335.5" ></text>
</g>
<g >
<title>[unknown] (2,666,666 samples, 0.66%)</title><rect x="10.0" y="661" width="7.8" height="15.0" fill="rgb(239,228,54)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>leveldb::operator== (1,333,333 samples, 0.33%)</title><rect x="574.5" y="373" width="3.9" height="15.0" fill="rgb(221,156,25)" rx="2" ry="2" />
<text  x="577.52" y="383.5" ></text>
</g>
<g >
<title>std::__future_base::_Result_base::_Deleter::operator (2,666,666 samples, 0.66%)</title><rect x="1107.7" y="309" width="7.8" height="15.0" fill="rgb(240,188,41)" rx="2" ry="2" />
<text  x="1110.67" y="319.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::DoWrite (126,666,635 samples, 31.56%)</title><rect x="754.9" y="501" width="372.4" height="15.0" fill="rgb(208,107,19)" rx="2" ry="2" />
<text  x="757.85" y="511.5" >leveldb::Benchmark::DoWrite</text>
</g>
<g >
<title>[unknown] (2,666,666 samples, 0.66%)</title><rect x="10.0" y="645" width="7.8" height="15.0" fill="rgb(211,189,21)" rx="2" ry="2" />
<text  x="13.00" y="655.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::FlushBuffer (1,333,333 samples, 0.33%)</title><rect x="1029.3" y="405" width="3.9" height="15.0" fill="rgb(223,181,25)" rx="2" ry="2" />
<text  x="1032.27" y="415.5" ></text>
</g>
<g >
<title>std::__addressof&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; const&gt; (1,333,333 samples, 0.33%)</title><rect x="484.4" y="501" width="3.9" height="15.0" fill="rgb(239,127,30)" rx="2" ry="2" />
<text  x="487.35" y="511.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteRawBlock (2,666,666 samples, 0.66%)</title><rect x="621.6" y="357" width="7.8" height="15.0" fill="rgb(205,151,48)" rx="2" ry="2" />
<text  x="624.56" y="367.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::~shared_ptr (1,333,333 samples, 0.33%)</title><rect x="1115.5" y="469" width="3.9" height="15.0" fill="rgb(236,149,27)" rx="2" ry="2" />
<text  x="1118.51" y="479.5" ></text>
</g>
<g >
<title>ext4_iomap_begin (18,666,662 samples, 4.65%)</title><rect x="327.5" y="501" width="54.9" height="15.0" fill="rgb(253,75,51)" rx="2" ry="2" />
<text  x="330.54" y="511.5" >ext4_..</text>
</g>
<g >
<title>std::move&lt;std::__future_base::_Result_base*&amp;&gt; (1,333,333 samples, 0.33%)</title><rect x="515.7" y="501" width="3.9" height="15.0" fill="rgb(240,213,31)" rx="2" ry="2" />
<text  x="518.71" y="511.5" ></text>
</g>
<g >
<title>aperfmperf_snapshot_cpu (2,666,666 samples, 0.66%)</title><rect x="37.4" y="469" width="7.9" height="15.0" fill="rgb(241,172,32)" rx="2" ry="2" />
<text  x="40.44" y="479.5" ></text>
</g>
<g >
<title>all (401,333,233 samples, 100%)</title><rect x="10.0" y="709" width="1180.0" height="15.0" fill="rgb(213,49,9)" rx="2" ry="2" />
<text  x="13.00" y="719.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1,333,333 samples, 0.33%)</title><rect x="1146.9" y="565" width="3.9" height="15.0" fill="rgb(219,160,11)" rx="2" ry="2" />
<text  x="1149.88" y="575.5" ></text>
</g>
<g >
<title>show_cpuinfo (1,333,333 samples, 0.33%)</title><rect x="1178.2" y="533" width="4.0" height="15.0" fill="rgb(215,54,24)" rx="2" ry="2" />
<text  x="1181.24" y="543.5" ></text>
</g>
<g >
<title>__wake_up (2,666,666 samples, 0.66%)</title><rect x="641.2" y="133" width="7.8" height="15.0" fill="rgb(254,215,34)" rx="2" ry="2" />
<text  x="644.16" y="143.5" ></text>
</g>
<g >
<title>leveldb::WriteBatch::Iterate (74,666,648 samples, 18.60%)</title><rect x="805.8" y="437" width="219.5" height="15.0" fill="rgb(228,39,12)" rx="2" ry="2" />
<text  x="808.81" y="447.5" >leveldb::WriteBatch::Iterate</text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (201,333,283 samples, 50.17%)</title><rect x="535.3" y="549" width="592.0" height="15.0" fill="rgb(207,100,43)" rx="2" ry="2" />
<text  x="538.32" y="559.5" >std::__invoke_impl&lt;void, void </text>
</g>
<g >
<title>generic_make_request (7,999,998 samples, 1.99%)</title><rect x="358.9" y="405" width="23.5" height="15.0" fill="rgb(215,23,13)" rx="2" ry="2" />
<text  x="361.90" y="415.5" >g..</text>
</g>
<g >
<title>do_group_exit (3,999,999 samples, 1.00%)</title><rect x="1158.6" y="597" width="11.8" height="15.0" fill="rgb(247,21,2)" rx="2" ry="2" />
<text  x="1161.64" y="607.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32 (1,333,333 samples, 0.33%)</title><rect x="1017.5" y="405" width="3.9" height="15.0" fill="rgb(237,208,39)" rx="2" ry="2" />
<text  x="1020.51" y="415.5" ></text>
</g>
<g >
<title>pmem_persist (26,666,660 samples, 6.64%)</title><rect x="656.8" y="389" width="78.4" height="15.0" fill="rgb(211,145,35)" rx="2" ry="2" />
<text  x="659.84" y="399.5" >pmem_pers..</text>
</g>
<g >
<title>_dl_map_object (1,333,333 samples, 0.33%)</title><rect x="1154.7" y="677" width="3.9" height="15.0" fill="rgb(245,81,18)" rx="2" ry="2" />
<text  x="1157.72" y="687.5" ></text>
</g>
<g >
<title>ext4_inode_csum_set (1,333,333 samples, 0.33%)</title><rect x="351.1" y="373" width="3.9" height="15.0" fill="rgb(220,67,37)" rx="2" ry="2" />
<text  x="354.06" y="383.5" ></text>
</g>
<g >
<title>leveldb::log::Writer::EmitPhysicalRecord (14,666,663 samples, 3.65%)</title><rect x="1025.3" y="437" width="43.2" height="15.0" fill="rgb(228,140,50)" rx="2" ry="2" />
<text  x="1028.35" y="447.5" >leve..</text>
</g>
<g >
<title>futex_wake (1,333,333 samples, 0.33%)</title><rect x="480.4" y="581" width="4.0" height="15.0" fill="rgb(246,94,44)" rx="2" ry="2" />
<text  x="483.43" y="591.5" ></text>
</g>
<g >
<title>ext4_dax_huge_fault (6,666,665 samples, 1.66%)</title><rect x="637.2" y="229" width="19.6" height="15.0" fill="rgb(230,49,32)" rx="2" ry="2" />
<text  x="640.24" y="239.5" ></text>
</g>
<g >
<title>____fput (1,333,333 samples, 0.33%)</title><rect x="1166.5" y="549" width="3.9" height="15.0" fill="rgb(206,83,40)" rx="2" ry="2" />
<text  x="1169.48" y="559.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.33%)</title><rect x="488.3" y="453" width="3.9" height="15.0" fill="rgb(241,176,19)" rx="2" ry="2" />
<text  x="491.27" y="463.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.33%)</title><rect x="468.7" y="485" width="3.9" height="15.0" fill="rgb(218,40,7)" rx="2" ry="2" />
<text  x="471.67" y="495.5" ></text>
</g>
<g >
<title>__handle_mm_fault (6,666,665 samples, 1.66%)</title><rect x="637.2" y="277" width="19.6" height="15.0" fill="rgb(219,117,7)" rx="2" ry="2" />
<text  x="640.24" y="287.5" ></text>
</g>
<g >
<title>run_timer_softirq (1,333,333 samples, 0.33%)</title><rect x="468.7" y="437" width="3.9" height="15.0" fill="rgb(254,27,15)" rx="2" ry="2" />
<text  x="471.67" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (1,333,333 samples, 0.33%)</title><rect x="1103.8" y="357" width="3.9" height="15.0" fill="rgb(250,98,10)" rx="2" ry="2" />
<text  x="1106.75" y="367.5" ></text>
</g>
<g >
<title>get_signal (26,666,660 samples, 6.64%)</title><rect x="656.8" y="277" width="78.4" height="15.0" fill="rgb(222,149,28)" rx="2" ry="2" />
<text  x="659.84" y="287.5" >get_signal</text>
</g>
<g >
<title>leveldb::Benchmark::Run (1,333,333 samples, 0.33%)</title><rect x="49.2" y="629" width="3.9" height="15.0" fill="rgb(235,107,47)" rx="2" ry="2" />
<text  x="52.20" y="639.5" ></text>
</g>
<g >
<title>dax_finish_sync_fault (2,666,666 samples, 0.66%)</title><rect x="641.2" y="213" width="7.8" height="15.0" fill="rgb(223,36,33)" rx="2" ry="2" />
<text  x="644.16" y="223.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1,333,333 samples, 0.33%)</title><rect x="1092.0" y="389" width="3.9" height="15.0" fill="rgb(246,36,28)" rx="2" ry="2" />
<text  x="1094.99" y="399.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.33%)</title><rect x="1131.2" y="613" width="3.9" height="15.0" fill="rgb(220,167,21)" rx="2" ry="2" />
<text  x="1134.20" y="623.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (1,333,333 samples, 0.33%)</title><rect x="1127.3" y="565" width="3.9" height="15.0" fill="rgb(248,120,19)" rx="2" ry="2" />
<text  x="1130.28" y="575.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (2,666,666 samples, 0.66%)</title><rect x="621.6" y="325" width="7.8" height="15.0" fill="rgb(254,205,28)" rx="2" ry="2" />
<text  x="624.56" y="335.5" ></text>
</g>
<g >
<title>page_fault (3,999,999 samples, 1.00%)</title><rect x="1143.0" y="661" width="11.7" height="15.0" fill="rgb(243,90,52)" rx="2" ry="2" />
<text  x="1145.96" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::__future_base::_State_baseV2&gt;::_M_addr (1,333,333 samples, 0.33%)</title><rect x="1103.8" y="325" width="3.9" height="15.0" fill="rgb(241,59,52)" rx="2" ry="2" />
<text  x="1106.75" y="335.5" ></text>
</g>
<g >
<title>ext4_sync_file (2,666,666 samples, 0.66%)</title><rect x="641.2" y="181" width="7.8" height="15.0" fill="rgb(220,102,22)" rx="2" ry="2" />
<text  x="644.16" y="191.5" ></text>
</g>
<g >
<title>follow_page_pte (2,666,666 samples, 0.66%)</title><rect x="727.4" y="181" width="7.8" height="15.0" fill="rgb(212,203,45)" rx="2" ry="2" />
<text  x="730.41" y="191.5" ></text>
</g>
<g >
<title>clean_bdev_aliases (1,333,333 samples, 0.33%)</title><rect x="347.1" y="469" width="4.0" height="15.0" fill="rgb(219,60,36)" rx="2" ry="2" />
<text  x="350.14" y="479.5" ></text>
</g>
<g >
<title>__ext4_get_inode_loc (5,333,332 samples, 1.33%)</title><rect x="429.5" y="453" width="15.6" height="15.0" fill="rgb(224,26,48)" rx="2" ry="2" />
<text  x="432.47" y="463.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;leveldb::Status&gt;::_M_destroy (2,666,666 samples, 0.66%)</title><rect x="1107.7" y="293" width="7.8" height="15.0" fill="rgb(228,201,6)" rx="2" ry="2" />
<text  x="1110.67" y="303.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (11,999,997 samples, 2.99%)</title><rect x="484.4" y="629" width="35.2" height="15.0" fill="rgb(237,167,39)" rx="2" ry="2" />
<text  x="487.35" y="639.5" >st..</text>
</g>
<g >
<title>radix_tree_next_chunk (1,333,333 samples, 0.33%)</title><rect x="347.1" y="421" width="4.0" height="15.0" fill="rgb(226,158,54)" rx="2" ry="2" />
<text  x="350.14" y="431.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::MakeRoomForWrite (1,333,333 samples, 0.33%)</title><rect x="790.1" y="453" width="4.0" height="15.0" fill="rgb(208,41,28)" rx="2" ry="2" />
<text  x="793.13" y="463.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_set_result (1,333,333 samples, 0.33%)</title><rect x="1068.5" y="437" width="3.9" height="15.0" fill="rgb(206,53,3)" rx="2" ry="2" />
<text  x="1071.47" y="447.5" ></text>
</g>
<g >
<title>__mutex_lock_slowpath (3,999,999 samples, 1.00%)</title><rect x="668.6" y="149" width="11.8" height="15.0" fill="rgb(246,166,48)" rx="2" ry="2" />
<text  x="671.60" y="159.5" ></text>
</g>
<g >
<title>__x64_sys_openat (2,666,666 samples, 0.66%)</title><rect x="37.4" y="613" width="7.9" height="15.0" fill="rgb(234,186,6)" rx="2" ry="2" />
<text  x="40.44" y="623.5" ></text>
</g>
<g >
<title>up_write (1,333,333 samples, 0.33%)</title><rect x="460.8" y="533" width="4.0" height="15.0" fill="rgb(219,227,43)" rx="2" ry="2" />
<text  x="463.83" y="543.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.33%)</title><rect x="468.7" y="469" width="3.9" height="15.0" fill="rgb(252,125,12)" rx="2" ry="2" />
<text  x="471.67" y="479.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.33%)</title><rect x="492.2" y="469" width="3.9" height="15.0" fill="rgb(214,194,41)" rx="2" ry="2" />
<text  x="495.19" y="479.5" ></text>
</g>
<g >
<title>leveldb::Random::Next (1,333,333 samples, 0.33%)</title><rect x="778.4" y="421" width="3.9" height="15.0" fill="rgb(222,71,29)" rx="2" ry="2" />
<text  x="781.37" y="431.5" ></text>
</g>
<g >
<title>_GLOBAL__sub_I__ZN7leveldb10TableCacheC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_7OptionsEi (1,333,333 samples, 0.33%)</title><rect x="1135.1" y="677" width="3.9" height="15.0" fill="rgb(235,121,9)" rx="2" ry="2" />
<text  x="1138.12" y="687.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::setValue (2,666,666 samples, 0.66%)</title><rect x="613.7" y="373" width="7.9" height="15.0" fill="rgb(241,210,45)" rx="2" ry="2" />
<text  x="616.72" y="383.5" ></text>
</g>
<g >
<title>tcmalloc::PageHeap::PageHeap (1,333,333 samples, 0.33%)</title><rect x="1131.2" y="645" width="3.9" height="15.0" fill="rgb(220,66,23)" rx="2" ry="2" />
<text  x="1134.20" y="655.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Value (2,666,666 samples, 0.66%)</title><rect x="621.6" y="341" width="7.8" height="15.0" fill="rgb(226,62,20)" rx="2" ry="2" />
<text  x="624.56" y="351.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::Writer::Writer (1,333,333 samples, 0.33%)</title><rect x="794.1" y="453" width="3.9" height="15.0" fill="rgb(206,216,27)" rx="2" ry="2" />
<text  x="797.05" y="463.5" ></text>
</g>
<g >
<title>leveldb::Status::OK (1,333,333 samples, 0.33%)</title><rect x="1021.4" y="421" width="3.9" height="15.0" fill="rgb(209,162,46)" rx="2" ry="2" />
<text  x="1024.43" y="431.5" ></text>
</g>
<g >
<title>jbd2_journal_stop (2,666,666 samples, 0.66%)</title><rect x="390.3" y="469" width="7.8" height="15.0" fill="rgb(237,56,43)" rx="2" ry="2" />
<text  x="393.27" y="479.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (1,333,333 samples, 0.33%)</title><rect x="351.1" y="437" width="3.9" height="15.0" fill="rgb(210,12,9)" rx="2" ry="2" />
<text  x="354.06" y="447.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (2,666,666 samples, 0.66%)</title><rect x="551.0" y="373" width="7.8" height="15.0" fill="rgb(250,127,11)" rx="2" ry="2" />
<text  x="554.00" y="383.5" ></text>
</g>
<g >
<title>__do_page_fault (2,666,666 samples, 0.66%)</title><rect x="754.9" y="437" width="7.8" height="15.0" fill="rgb(224,10,1)" rx="2" ry="2" />
<text  x="757.85" y="447.5" ></text>
</g>
<g >
<title>submit_bio (1,333,333 samples, 0.33%)</title><rect x="652.9" y="117" width="3.9" height="15.0" fill="rgb(251,191,46)" rx="2" ry="2" />
<text  x="655.92" y="127.5" ></text>
</g>
<g >
<title>mmput (2,666,666 samples, 0.66%)</title><rect x="1158.6" y="565" width="7.9" height="15.0" fill="rgb(223,21,0)" rx="2" ry="2" />
<text  x="1161.64" y="575.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.33%)</title><rect x="531.4" y="597" width="3.9" height="15.0" fill="rgb(212,29,51)" rx="2" ry="2" />
<text  x="534.40" y="607.5" ></text>
</g>
<g >
<title>ksys_read (2,666,666 samples, 0.66%)</title><rect x="1178.2" y="613" width="7.9" height="15.0" fill="rgb(232,162,38)" rx="2" ry="2" />
<text  x="1181.24" y="623.5" ></text>
</g>
<g >
<title>tcmalloc::MetaDataAlloc (1,333,333 samples, 0.33%)</title><rect x="1131.2" y="661" width="3.9" height="15.0" fill="rgb(253,55,21)" rx="2" ry="2" />
<text  x="1134.20" y="671.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.33%)</title><rect x="468.7" y="629" width="3.9" height="15.0" fill="rgb(220,30,16)" rx="2" ry="2" />
<text  x="471.67" y="639.5" ></text>
</g>
<g >
<title>leveldb::Log (1,333,333 samples, 0.33%)</title><rect x="790.1" y="405" width="4.0" height="15.0" fill="rgb(214,206,33)" rx="2" ry="2" />
<text  x="793.13" y="415.5" ></text>
</g>
<g >
<title>do_signal (26,666,660 samples, 6.64%)</title><rect x="656.8" y="293" width="78.4" height="15.0" fill="rgb(253,89,44)" rx="2" ry="2" />
<text  x="659.84" y="303.5" >do_signal</text>
</g>
<g >
<title>leveldb::Random::Uniform (1,333,333 samples, 0.33%)</title><rect x="1119.4" y="485" width="4.0" height="15.0" fill="rgb(245,29,5)" rx="2" ry="2" />
<text  x="1122.44" y="495.5" ></text>
</g>
<g >
<title>__vfs_write (7,999,998 samples, 1.99%)</title><rect x="656.8" y="197" width="23.6" height="15.0" fill="rgb(252,44,20)" rx="2" ry="2" />
<text  x="659.84" y="207.5" >_..</text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.33%)</title><rect x="500.0" y="453" width="4.0" height="15.0" fill="rgb(210,225,53)" rx="2" ry="2" />
<text  x="503.03" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (1,333,333 samples, 0.33%)</title><rect x="1123.4" y="485" width="3.9" height="15.0" fill="rgb(249,223,5)" rx="2" ry="2" />
<text  x="1126.36" y="495.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.33%)</title><rect x="1127.3" y="613" width="3.9" height="15.0" fill="rgb(244,78,19)" rx="2" ry="2" />
<text  x="1130.28" y="623.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (11,999,997 samples, 2.99%)</title><rect x="484.4" y="581" width="35.2" height="15.0" fill="rgb(235,42,29)" rx="2" ry="2" />
<text  x="487.35" y="591.5" >st..</text>
</g>
<g >
<title>__x64_sys_getdents (1,333,333 samples, 0.33%)</title><rect x="45.3" y="613" width="3.9" height="15.0" fill="rgb(212,53,27)" rx="2" ry="2" />
<text  x="48.28" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1,333,333 samples, 0.33%)</title><rect x="633.3" y="389" width="3.9" height="15.0" fill="rgb(225,41,17)" rx="2" ry="2" />
<text  x="636.32" y="399.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.33%)</title><rect x="888.1" y="245" width="4.0" height="15.0" fill="rgb(241,168,47)" rx="2" ry="2" />
<text  x="891.14" y="255.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (2,666,666 samples, 0.66%)</title><rect x="1084.2" y="421" width="7.8" height="15.0" fill="rgb(220,66,47)" rx="2" ry="2" />
<text  x="1087.15" y="431.5" ></text>
</g>
<g >
<title>__libc_write (141,333,298 samples, 35.22%)</title><rect x="53.1" y="661" width="415.6" height="15.0" fill="rgb(211,32,47)" rx="2" ry="2" />
<text  x="56.12" y="671.5" >__libc_write</text>
</g>
<g >
<title>__x64_sys_madvise (1,333,333 samples, 0.33%)</title><rect x="468.7" y="613" width="3.9" height="15.0" fill="rgb(243,221,50)" rx="2" ry="2" />
<text  x="471.67" y="623.5" ></text>
</g>
<g >
<title>ext4_mark_iloc_dirty (7,999,998 samples, 1.99%)</title><rect x="402.0" y="469" width="23.5" height="15.0" fill="rgb(244,6,19)" rx="2" ry="2" />
<text  x="405.03" y="479.5" >e..</text>
</g>
<g >
<title>memmove_nodrain_avx512f_clwb (6,666,665 samples, 1.66%)</title><rect x="637.2" y="373" width="19.6" height="15.0" fill="rgb(249,45,38)" rx="2" ry="2" />
<text  x="640.24" y="383.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (1,333,333 samples, 0.33%)</title><rect x="49.2" y="373" width="3.9" height="15.0" fill="rgb(237,155,48)" rx="2" ry="2" />
<text  x="52.20" y="383.5" ></text>
</g>
<g >
<title>std::atomic&lt;leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node*&gt;::load (3,999,999 samples, 1.00%)</title><rect x="997.9" y="341" width="11.8" height="15.0" fill="rgb(214,143,27)" rx="2" ry="2" />
<text  x="1000.91" y="351.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;&gt; (2,666,666 samples, 0.66%)</title><rect x="1099.8" y="437" width="7.9" height="15.0" fill="rgb(220,213,35)" rx="2" ry="2" />
<text  x="1102.83" y="447.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Rep::Rep (3,999,999 samples, 1.00%)</title><rect x="735.2" y="389" width="11.8" height="15.0" fill="rgb(246,173,25)" rx="2" ry="2" />
<text  x="738.25" y="399.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (2,666,666 samples, 0.66%)</title><rect x="1099.8" y="373" width="7.9" height="15.0" fill="rgb(211,163,33)" rx="2" ry="2" />
<text  x="1102.83" y="383.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.33%)</title><rect x="468.7" y="501" width="3.9" height="15.0" fill="rgb(234,77,13)" rx="2" ry="2" />
<text  x="471.67" y="511.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.33%)</title><rect x="978.3" y="245" width="3.9" height="15.0" fill="rgb(237,15,10)" rx="2" ry="2" />
<text  x="981.31" y="255.5" ></text>
</g>
<g >
<title>alloc_pages_current (2,666,666 samples, 0.66%)</title><rect x="692.1" y="149" width="7.9" height="15.0" fill="rgb(233,173,30)" rx="2" ry="2" />
<text  x="695.13" y="159.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (13,333,330 samples, 3.32%)</title><rect x="872.5" y="325" width="39.2" height="15.0" fill="rgb(228,172,38)" rx="2" ry="2" />
<text  x="875.46" y="335.5" >lev..</text>
</g>
<g >
<title>leveldb::WriteStringToFileSync (1,333,333 samples, 0.33%)</title><rect x="49.2" y="549" width="3.9" height="15.0" fill="rgb(251,208,42)" rx="2" ry="2" />
<text  x="52.20" y="559.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (2,666,666 samples, 0.66%)</title><rect x="641.2" y="117" width="7.8" height="15.0" fill="rgb(233,177,17)" rx="2" ry="2" />
<text  x="644.16" y="127.5" ></text>
</g>
<g >
<title>copy_page_from_iter (5,333,332 samples, 1.33%)</title><rect x="700.0" y="149" width="15.6" height="15.0" fill="rgb(249,19,21)" rx="2" ry="2" />
<text  x="702.97" y="159.5" ></text>
</g>
<g >
<title>dax_iomap_rw (1,333,333 samples, 0.33%)</title><rect x="49.2" y="357" width="3.9" height="15.0" fill="rgb(241,42,35)" rx="2" ry="2" />
<text  x="52.20" y="367.5" ></text>
</g>
<g >
<title>jbd2_journal_get_write_access (1,333,333 samples, 0.33%)</title><rect x="453.0" y="453" width="3.9" height="15.0" fill="rgb(212,134,2)" rx="2" ry="2" />
<text  x="455.99" y="463.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::get_future (1,333,333 samples, 0.33%)</title><rect x="1092.0" y="469" width="3.9" height="15.0" fill="rgb(232,116,35)" rx="2" ry="2" />
<text  x="1094.99" y="479.5" ></text>
</g>
<g >
<title>start_this_handle (1,333,333 samples, 0.33%)</title><rect x="386.3" y="453" width="4.0" height="15.0" fill="rgb(248,29,20)" rx="2" ry="2" />
<text  x="389.35" y="463.5" ></text>
</g>
<g >
<title>__do_page_fault (3,999,999 samples, 1.00%)</title><rect x="1143.0" y="629" width="11.7" height="15.0" fill="rgb(226,157,12)" rx="2" ry="2" />
<text  x="1145.96" y="639.5" ></text>
</g>
<g >
<title>page_fault (6,666,665 samples, 1.66%)</title><rect x="637.2" y="341" width="19.6" height="15.0" fill="rgb(229,57,40)" rx="2" ry="2" />
<text  x="640.24" y="351.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.33%)</title><rect x="978.3" y="213" width="3.9" height="15.0" fill="rgb(227,132,11)" rx="2" ry="2" />
<text  x="981.31" y="223.5" ></text>
</g>
<g >
<title>do_page_fault (6,666,665 samples, 1.66%)</title><rect x="637.2" y="325" width="19.6" height="15.0" fill="rgb(224,82,24)" rx="2" ry="2" />
<text  x="640.24" y="335.5" ></text>
</g>
<g >
<title>fsnotify (1,333,333 samples, 0.33%)</title><rect x="680.4" y="213" width="3.9" height="15.0" fill="rgb(230,111,6)" rx="2" ry="2" />
<text  x="683.37" y="223.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt; &gt;::_M_get_pointer (1,333,333 samples, 0.33%)</title><rect x="484.4" y="517" width="3.9" height="15.0" fill="rgb(246,31,28)" rx="2" ry="2" />
<text  x="487.35" y="527.5" ></text>
</g>
<g >
<title>__ext4_journal_start_sb (1,333,333 samples, 0.33%)</title><rect x="327.5" y="485" width="4.0" height="15.0" fill="rgb(253,26,49)" rx="2" ry="2" />
<text  x="330.54" y="495.5" ></text>
</g>
<g >
<title>leveldb::Status::OK (1,333,333 samples, 0.33%)</title><rect x="1033.2" y="421" width="3.9" height="15.0" fill="rgb(235,137,8)" rx="2" ry="2" />
<text  x="1036.19" y="431.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::WriteBlock (2,666,666 samples, 0.66%)</title><rect x="621.6" y="373" width="7.8" height="15.0" fill="rgb(233,101,23)" rx="2" ry="2" />
<text  x="624.56" y="383.5" ></text>
</g>
<g >
<title>crc32c_pcl_intel_update (1,333,333 samples, 0.33%)</title><rect x="417.7" y="405" width="3.9" height="15.0" fill="rgb(211,150,44)" rx="2" ry="2" />
<text  x="420.71" y="415.5" ></text>
</g>
<g >
<title>submit_bio_wait (7,999,998 samples, 1.99%)</title><rect x="358.9" y="437" width="23.5" height="15.0" fill="rgb(225,198,47)" rx="2" ry="2" />
<text  x="361.90" y="447.5" >s..</text>
</g>
<g >
<title>elf_core_dump (26,666,660 samples, 6.64%)</title><rect x="656.8" y="245" width="78.4" height="15.0" fill="rgb(249,192,44)" rx="2" ry="2" />
<text  x="659.84" y="255.5" >elf_core_..</text>
</g>
<g >
<title>operator new[] (2,666,666 samples, 0.66%)</title><rect x="1170.4" y="677" width="7.8" height="15.0" fill="rgb(215,169,19)" rx="2" ry="2" />
<text  x="1173.40" y="687.5" ></text>
</g>
<g >
<title>_copy_from_iter_flushcache (1,333,333 samples, 0.33%)</title><rect x="76.6" y="453" width="4.0" height="15.0" fill="rgb(219,181,53)" rx="2" ry="2" />
<text  x="79.64" y="463.5" ></text>
</g>
<g >
<title>ext4_iomap_begin (1,333,333 samples, 0.33%)</title><rect x="49.2" y="325" width="3.9" height="15.0" fill="rgb(227,209,5)" rx="2" ry="2" />
<text  x="52.20" y="335.5" ></text>
</g>
<g >
<title>__vfs_write (13,333,330 samples, 3.32%)</title><rect x="684.3" y="181" width="39.2" height="15.0" fill="rgb(215,202,33)" rx="2" ry="2" />
<text  x="687.29" y="191.5" >__v..</text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.33%)</title><rect x="888.1" y="293" width="4.0" height="15.0" fill="rgb(211,159,26)" rx="2" ry="2" />
<text  x="891.14" y="303.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2,666,666 samples, 0.66%)</title><rect x="754.9" y="485" width="7.8" height="15.0" fill="rgb(217,0,44)" rx="2" ry="2" />
<text  x="757.85" y="495.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (3,999,999 samples, 1.00%)</title><rect x="1158.6" y="645" width="11.8" height="15.0" fill="rgb(253,23,29)" rx="2" ry="2" />
<text  x="1161.64" y="655.5" ></text>
</g>
<g >
<title>__wake_up (1,333,333 samples, 0.33%)</title><rect x="394.2" y="453" width="3.9" height="15.0" fill="rgb(214,4,52)" rx="2" ry="2" />
<text  x="397.19" y="463.5" ></text>
</g>
<g >
<title>mutex_spin_on_owner (2,666,666 samples, 0.66%)</title><rect x="715.6" y="101" width="7.9" height="15.0" fill="rgb(238,45,0)" rx="2" ry="2" />
<text  x="718.65" y="111.5" ></text>
</g>
<g >
<title>leveldb::MemTable::KeyComparator::operator (1,333,333 samples, 0.33%)</title><rect x="825.4" y="357" width="3.9" height="15.0" fill="rgb(246,136,44)" rx="2" ry="2" />
<text  x="828.42" y="367.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (11,999,997 samples, 2.99%)</title><rect x="484.4" y="645" width="35.2" height="15.0" fill="rgb(217,107,1)" rx="2" ry="2" />
<text  x="487.35" y="655.5" >st..</text>
</g>
<g >
<title>cpuinfo_open (2,666,666 samples, 0.66%)</title><rect x="37.4" y="501" width="7.9" height="15.0" fill="rgb(225,95,29)" rx="2" ry="2" />
<text  x="40.44" y="511.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1,333,333 samples, 0.33%)</title><rect x="398.1" y="469" width="3.9" height="15.0" fill="rgb(252,102,21)" rx="2" ry="2" />
<text  x="401.11" y="479.5" ></text>
</g>
<g >
<title>bio_endio (2,666,666 samples, 0.66%)</title><rect x="358.9" y="373" width="7.8" height="15.0" fill="rgb(227,5,22)" rx="2" ry="2" />
<text  x="361.90" y="383.5" ></text>
</g>
<g >
<title>open_path (1,333,333 samples, 0.33%)</title><rect x="1154.7" y="661" width="3.9" height="15.0" fill="rgb(233,136,53)" rx="2" ry="2" />
<text  x="1157.72" y="671.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::Write (113,333,305 samples, 28.24%)</title><rect x="786.2" y="485" width="333.2" height="15.0" fill="rgb(213,168,2)" rx="2" ry="2" />
<text  x="789.21" y="495.5" >leveldb::DBImpl::Write</text>
</g>
<g >
<title>do_syscall_64 (139,999,965 samples, 34.88%)</title><rect x="57.0" y="629" width="411.7" height="15.0" fill="rgb(224,53,11)" rx="2" ry="2" />
<text  x="60.04" y="639.5" >do_syscall_64</text>
</g>
<g >
<title>std::swap&lt;std::__future_base::_Result_base*&gt; (1,333,333 samples, 0.33%)</title><rect x="515.7" y="517" width="3.9" height="15.0" fill="rgb(232,4,15)" rx="2" ry="2" />
<text  x="518.71" y="527.5" ></text>
</g>
<g >
<title>__getblk_gfp (3,999,999 samples, 1.00%)</title><rect x="433.4" y="437" width="11.7" height="15.0" fill="rgb(213,10,29)" rx="2" ry="2" />
<text  x="436.39" y="447.5" ></text>
</g>
<g >
<title>__mutex_lock.isra.4 (3,999,999 samples, 1.00%)</title><rect x="668.6" y="133" width="11.8" height="15.0" fill="rgb(248,25,37)" rx="2" ry="2" />
<text  x="671.60" y="143.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (201,333,283 samples, 50.17%)</title><rect x="535.3" y="613" width="592.0" height="15.0" fill="rgb(244,194,14)" rx="2" ry="2" />
<text  x="538.32" y="623.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>ext4_group_desc_csum (1,333,333 samples, 0.33%)</title><rect x="355.0" y="405" width="3.9" height="15.0" fill="rgb(232,65,52)" rx="2" ry="2" />
<text  x="357.98" y="415.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_S_check&lt;std::__future_base::_State_baseV2&gt; (2,666,666 samples, 0.66%)</title><rect x="1076.3" y="437" width="7.9" height="15.0" fill="rgb(240,169,12)" rx="2" ry="2" />
<text  x="1079.31" y="447.5" ></text>
</g>
<g >
<title>get_dump_page (3,999,999 samples, 1.00%)</title><rect x="723.5" y="229" width="11.7" height="15.0" fill="rgb(250,0,20)" rx="2" ry="2" />
<text  x="726.49" y="239.5" ></text>
</g>
<g >
<title>ext4_mark_inode_dirty (1,333,333 samples, 0.33%)</title><rect x="351.1" y="405" width="3.9" height="15.0" fill="rgb(226,156,42)" rx="2" ry="2" />
<text  x="354.06" y="415.5" ></text>
</g>
<g >
<title>leveldb::EncodeVarint32 (1,333,333 samples, 0.33%)</title><rect x="821.5" y="389" width="3.9" height="15.0" fill="rgb(205,22,38)" rx="2" ry="2" />
<text  x="824.50" y="399.5" ></text>
</g>
<g >
<title>__x64_sys_write (138,666,632 samples, 34.55%)</title><rect x="61.0" y="613" width="407.7" height="15.0" fill="rgb(249,9,30)" rx="2" ry="2" />
<text  x="63.96" y="623.5" >__x64_sys_write</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2,666,666 samples, 0.66%)</title><rect x="641.2" y="101" width="7.8" height="15.0" fill="rgb(207,21,3)" rx="2" ry="2" />
<text  x="644.16" y="111.5" ></text>
</g>
<g >
<title>ext4_issue_zeroout (1,333,333 samples, 0.33%)</title><rect x="652.9" y="165" width="3.9" height="15.0" fill="rgb(223,44,35)" rx="2" ry="2" />
<text  x="655.92" y="175.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.33%)</title><rect x="531.4" y="549" width="3.9" height="15.0" fill="rgb(216,194,11)" rx="2" ry="2" />
<text  x="534.40" y="559.5" ></text>
</g>
<g >
<title>leveldb::ParseInternalKey (1,333,333 samples, 0.33%)</title><rect x="586.3" y="389" width="3.9" height="15.0" fill="rgb(236,86,49)" rx="2" ry="2" />
<text  x="589.28" y="399.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Insert (63,999,984 samples, 15.95%)</title><rect x="825.4" y="389" width="188.2" height="15.0" fill="rgb(245,217,43)" rx="2" ry="2" />
<text  x="828.42" y="399.5" >leveldb::SkipList&lt;char c..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (2,666,666 samples, 0.66%)</title><rect x="613.7" y="341" width="7.9" height="15.0" fill="rgb(213,112,4)" rx="2" ry="2" />
<text  x="616.72" y="351.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (3,999,999 samples, 1.00%)</title><rect x="735.2" y="261" width="11.8" height="15.0" fill="rgb(223,152,35)" rx="2" ry="2" />
<text  x="738.25" y="271.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (26,666,660 samples, 6.64%)</title><rect x="915.6" y="325" width="78.4" height="15.0" fill="rgb(254,21,9)" rx="2" ry="2" />
<text  x="918.58" y="335.5" >leveldb::..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator[]@plt (1,333,333 samples, 0.33%)</title><rect x="782.3" y="453" width="3.9" height="15.0" fill="rgb(251,16,4)" rx="2" ry="2" />
<text  x="785.29" y="463.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1,333,333 samples, 0.33%)</title><rect x="531.4" y="581" width="3.9" height="15.0" fill="rgb(220,175,28)" rx="2" ry="2" />
<text  x="534.40" y="591.5" ></text>
</g>
<g >
<title>crypto_shash_update (2,666,666 samples, 0.66%)</title><rect x="413.8" y="421" width="7.8" height="15.0" fill="rgb(236,148,12)" rx="2" ry="2" />
<text  x="416.79" y="431.5" ></text>
</g>
<g >
<title>__x64_sys_futex (1,333,333 samples, 0.33%)</title><rect x="480.4" y="613" width="4.0" height="15.0" fill="rgb(251,18,11)" rx="2" ry="2" />
<text  x="483.43" y="623.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::RandomGenerator::RandomGenerator (7,999,998 samples, 1.99%)</title><rect x="762.7" y="485" width="23.5" height="15.0" fill="rgb(253,84,35)" rx="2" ry="2" />
<text  x="765.69" y="495.5" >l..</text>
</g>
<g >
<title>leveldb::Benchmark::ThreadBody (129,333,301 samples, 32.23%)</title><rect x="747.0" y="533" width="380.3" height="15.0" fill="rgb(238,200,23)" rx="2" ry="2" />
<text  x="750.01" y="543.5" >leveldb::Benchmark::ThreadBody</text>
</g>
<g >
<title>find_get_pages_range (1,333,333 samples, 0.33%)</title><rect x="347.1" y="437" width="4.0" height="15.0" fill="rgb(226,86,38)" rx="2" ry="2" />
<text  x="350.14" y="447.5" ></text>
</g>
<g >
<title>__jbd2_log_start_commit (2,666,666 samples, 0.66%)</title><rect x="641.2" y="149" width="7.8" height="15.0" fill="rgb(228,6,53)" rx="2" ry="2" />
<text  x="644.16" y="159.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;leveldb::Status&gt;::~_Result (1,333,333 samples, 0.33%)</title><rect x="1111.6" y="277" width="3.9" height="15.0" fill="rgb(249,16,16)" rx="2" ry="2" />
<text  x="1114.59" y="287.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,666,666 samples, 0.66%)</title><rect x="37.4" y="645" width="7.9" height="15.0" fill="rgb(224,151,16)" rx="2" ry="2" />
<text  x="40.44" y="655.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (201,333,283 samples, 50.17%)</title><rect x="535.3" y="581" width="592.0" height="15.0" fill="rgb(253,201,25)" rx="2" ry="2" />
<text  x="538.32" y="591.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::_Reset::~_Reset (2,666,666 samples, 0.66%)</title><rect x="1084.2" y="453" width="7.8" height="15.0" fill="rgb(239,65,6)" rx="2" ry="2" />
<text  x="1087.15" y="463.5" ></text>
</g>
<g >
<title>[unknown] (201,333,283 samples, 50.17%)</title><rect x="535.3" y="645" width="592.0" height="15.0" fill="rgb(238,55,8)" rx="2" ry="2" />
<text  x="538.32" y="655.5" >[unknown]</text>
</g>
<g >
<title>__madvise (1,333,333 samples, 0.33%)</title><rect x="468.7" y="661" width="3.9" height="15.0" fill="rgb(252,157,7)" rx="2" ry="2" />
<text  x="471.67" y="671.5" ></text>
</g>
<g >
<title>pmem_do_bvec (5,333,332 samples, 1.33%)</title><rect x="366.7" y="373" width="15.7" height="15.0" fill="rgb(252,61,35)" rx="2" ry="2" />
<text  x="369.74" y="383.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.33%)</title><rect x="1154.7" y="613" width="3.9" height="15.0" fill="rgb(218,16,38)" rx="2" ry="2" />
<text  x="1157.72" y="623.5" ></text>
</g>
<g >
<title>leveldb::Status::operator= (1,333,333 samples, 0.33%)</title><rect x="1072.4" y="469" width="3.9" height="15.0" fill="rgb(243,128,16)" rx="2" ry="2" />
<text  x="1075.39" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::resize (3,999,999 samples, 1.00%)</title><rect x="735.2" y="373" width="11.8" height="15.0" fill="rgb(227,79,21)" rx="2" ry="2" />
<text  x="738.25" y="383.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.33%)</title><rect x="531.4" y="645" width="3.9" height="15.0" fill="rgb(225,139,39)" rx="2" ry="2" />
<text  x="534.40" y="655.5" ></text>
</g>
<g >
<title>leveldb::Random::Uniform (3,999,999 samples, 1.00%)</title><rect x="770.5" y="437" width="11.8" height="15.0" fill="rgb(253,178,39)" rx="2" ry="2" />
<text  x="773.53" y="447.5" ></text>
</g>
<g >
<title>vmacache_find (1,333,333 samples, 0.33%)</title><rect x="723.5" y="165" width="3.9" height="15.0" fill="rgb(216,15,41)" rx="2" ry="2" />
<text  x="726.49" y="175.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt; &gt;::destroy&lt;std::__future_base::_State_baseV2&gt; (2,666,666 samples, 0.66%)</title><rect x="1107.7" y="373" width="7.8" height="15.0" fill="rgb(215,13,35)" rx="2" ry="2" />
<text  x="1110.67" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (6,666,665 samples, 1.66%)</title><rect x="594.1" y="341" width="19.6" height="15.0" fill="rgb(242,196,47)" rx="2" ry="2" />
<text  x="597.12" y="351.5" ></text>
</g>
<g >
<title>__mutex_lock_slowpath (2,666,666 samples, 0.66%)</title><rect x="715.6" y="133" width="7.9" height="15.0" fill="rgb(224,31,48)" rx="2" ry="2" />
<text  x="718.65" y="143.5" ></text>
</g>
<g >
<title>vfs_read (2,666,666 samples, 0.66%)</title><rect x="1178.2" y="597" width="7.9" height="15.0" fill="rgb(236,64,52)" rx="2" ry="2" />
<text  x="1181.24" y="607.5" ></text>
</g>
<g >
<title>__do_page_fault (6,666,665 samples, 1.66%)</title><rect x="637.2" y="309" width="19.6" height="15.0" fill="rgb(217,0,13)" rx="2" ry="2" />
<text  x="640.24" y="319.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.33%)</title><rect x="978.3" y="277" width="3.9" height="15.0" fill="rgb(214,191,11)" rx="2" ry="2" />
<text  x="981.31" y="287.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;char*, unsigned long&gt; (3,999,999 samples, 1.00%)</title><rect x="735.2" y="309" width="11.8" height="15.0" fill="rgb(235,92,36)" rx="2" ry="2" />
<text  x="738.25" y="319.5" ></text>
</g>
<g >
<title>mutex_unlock (1,333,333 samples, 0.33%)</title><rect x="61.0" y="581" width="3.9" height="15.0" fill="rgb(223,162,35)" rx="2" ry="2" />
<text  x="63.96" y="591.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (1,333,333 samples, 0.33%)</title><rect x="825.4" y="341" width="3.9" height="15.0" fill="rgb(216,163,14)" rx="2" ry="2" />
<text  x="828.42" y="351.5" ></text>
</g>
<g >
<title>vfs_write (137,333,299 samples, 34.22%)</title><rect x="64.9" y="581" width="403.8" height="15.0" fill="rgb(226,141,9)" rx="2" ry="2" />
<text  x="67.88" y="591.5" >vfs_write</text>
</g>
<g >
<title>tlb_finish_mmu (1,333,333 samples, 0.33%)</title><rect x="1158.6" y="533" width="4.0" height="15.0" fill="rgb(209,140,21)" rx="2" ry="2" />
<text  x="1161.64" y="543.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (134,666,633 samples, 33.55%)</title><rect x="68.8" y="549" width="396.0" height="15.0" fill="rgb(224,135,24)" rx="2" ry="2" />
<text  x="71.80" y="559.5" >ext4_file_write_iter</text>
</g>
<g >
<title>std::__shared_count&lt; (2,666,666 samples, 0.66%)</title><rect x="1107.7" y="421" width="7.8" height="15.0" fill="rgb(254,100,53)" rx="2" ry="2" />
<text  x="1110.67" y="431.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.33%)</title><rect x="1154.7" y="629" width="3.9" height="15.0" fill="rgb(229,206,9)" rx="2" ry="2" />
<text  x="1157.72" y="639.5" ></text>
</g>
<g >
<title>dump_skip (13,333,330 samples, 3.32%)</title><rect x="684.3" y="229" width="39.2" height="15.0" fill="rgb(217,17,1)" rx="2" ry="2" />
<text  x="687.29" y="239.5" >dum..</text>
</g>
<g >
<title>leveldb::(anonymous namespace)::MemTableInserter::Put (69,333,316 samples, 17.28%)</title><rect x="809.7" y="421" width="203.9" height="15.0" fill="rgb(236,63,28)" rx="2" ry="2" />
<text  x="812.73" y="431.5" >leveldb::(anonymous namesp..</text>
</g>
<g >
<title>__vfs_write (134,666,633 samples, 33.55%)</title><rect x="68.8" y="565" width="396.0" height="15.0" fill="rgb(229,143,12)" rx="2" ry="2" />
<text  x="71.80" y="575.5" >__vfs_write</text>
</g>
<g >
<title>__ext4_journal_stop (2,666,666 samples, 0.66%)</title><rect x="390.3" y="485" width="7.8" height="15.0" fill="rgb(211,131,17)" rx="2" ry="2" />
<text  x="393.27" y="495.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::ScheduleNuma (1,333,333 samples, 0.33%)</title><rect x="790.1" y="421" width="4.0" height="15.0" fill="rgb(210,205,21)" rx="2" ry="2" />
<text  x="793.13" y="431.5" ></text>
</g>
<g >
<title>ext4_mb_mark_diskspace_used (1,333,333 samples, 0.33%)</title><rect x="355.0" y="437" width="3.9" height="15.0" fill="rgb(221,130,14)" rx="2" ry="2" />
<text  x="357.98" y="447.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1,333,333 samples, 0.33%)</title><rect x="1146.9" y="581" width="3.9" height="15.0" fill="rgb(247,89,5)" rx="2" ry="2" />
<text  x="1149.88" y="591.5" ></text>
</g>
<g >
<title>__check_block_validity.constprop.81 (3,999,999 samples, 1.00%)</title><rect x="335.4" y="469" width="11.7" height="15.0" fill="rgb(216,179,19)" rx="2" ry="2" />
<text  x="338.38" y="479.5" ></text>
</g>
<g >
<title>smp_call_function_single (2,666,666 samples, 0.66%)</title><rect x="37.4" y="453" width="7.9" height="15.0" fill="rgb(247,185,11)" rx="2" ry="2" />
<text  x="40.44" y="463.5" ></text>
</g>
<g >
<title>blk_status_to_errno (1,333,333 samples, 0.33%)</title><rect x="358.9" y="357" width="3.9" height="15.0" fill="rgb(205,114,34)" rx="2" ry="2" />
<text  x="361.90" y="367.5" ></text>
</g>
<g >
<title>iomap_apply (1,333,333 samples, 0.33%)</title><rect x="49.2" y="341" width="3.9" height="15.0" fill="rgb(240,16,28)" rx="2" ry="2" />
<text  x="52.20" y="351.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::WriteUnbuffered (1,333,333 samples, 0.33%)</title><rect x="1029.3" y="389" width="3.9" height="15.0" fill="rgb(241,42,14)" rx="2" ry="2" />
<text  x="1032.27" y="399.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1,333,333 samples, 0.33%)</title><rect x="1150.8" y="597" width="3.9" height="15.0" fill="rgb(205,224,11)" rx="2" ry="2" />
<text  x="1153.80" y="607.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::FindGreaterOrEqual (62,666,651 samples, 15.61%)</title><rect x="829.3" y="373" width="184.3" height="15.0" fill="rgb(236,191,40)" rx="2" ry="2" />
<text  x="832.34" y="383.5" >leveldb::SkipList&lt;char c..</text>
</g>
<g >
<title>std::__basic_future&lt;leveldb::Status&gt;::__basic_future (1,333,333 samples, 0.33%)</title><rect x="1092.0" y="437" width="3.9" height="15.0" fill="rgb(240,198,30)" rx="2" ry="2" />
<text  x="1094.99" y="447.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,666,666 samples, 0.66%)</title><rect x="1178.2" y="661" width="7.9" height="15.0" fill="rgb(247,26,34)" rx="2" ry="2" />
<text  x="1181.24" y="671.5" ></text>
</g>
<g >
<title>__pthread_once_slow (14,666,663 samples, 3.65%)</title><rect x="476.5" y="661" width="43.1" height="15.0" fill="rgb(248,30,27)" rx="2" ry="2" />
<text  x="479.51" y="671.5" >__pt..</text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, false, true&gt;::_Node_iterator (1,333,333 samples, 0.33%)</title><rect x="609.8" y="309" width="3.9" height="15.0" fill="rgb(231,22,4)" rx="2" ry="2" />
<text  x="612.80" y="319.5" ></text>
</g>
<g >
<title>pipe_write (7,999,998 samples, 1.99%)</title><rect x="656.8" y="181" width="23.6" height="15.0" fill="rgb(229,49,15)" rx="2" ry="2" />
<text  x="659.84" y="191.5" >p..</text>
</g>
<g >
<title>crc32c_pcl_intel_update (1,333,333 samples, 0.33%)</title><rect x="409.9" y="421" width="3.9" height="15.0" fill="rgb(215,93,16)" rx="2" ry="2" />
<text  x="412.87" y="431.5" ></text>
</g>
<g >
<title>__libc_write (1,333,333 samples, 0.33%)</title><rect x="49.2" y="485" width="3.9" height="15.0" fill="rgb(215,155,31)" rx="2" ry="2" />
<text  x="52.20" y="495.5" ></text>
</g>
<g >
<title>jbd2__journal_start (2,666,666 samples, 0.66%)</title><rect x="382.4" y="469" width="7.9" height="15.0" fill="rgb(231,159,54)" rx="2" ry="2" />
<text  x="385.43" y="479.5" ></text>
</g>
<g >
<title>do_syscall_64 (3,999,999 samples, 1.00%)</title><rect x="1158.6" y="661" width="11.8" height="15.0" fill="rgb(248,28,25)" rx="2" ry="2" />
<text  x="1161.64" y="671.5" ></text>
</g>
<g >
<title>handle_mm_fault (2,666,666 samples, 0.66%)</title><rect x="1146.9" y="613" width="7.8" height="15.0" fill="rgb(215,46,47)" rx="2" ry="2" />
<text  x="1149.88" y="623.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.33%)</title><rect x="362.8" y="325" width="3.9" height="15.0" fill="rgb(250,143,38)" rx="2" ry="2" />
<text  x="365.82" y="335.5" ></text>
</g>
<g >
<title>pmem_memcpy (6,666,665 samples, 1.66%)</title><rect x="637.2" y="389" width="19.6" height="15.0" fill="rgb(233,183,16)" rx="2" ry="2" />
<text  x="640.24" y="399.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.33%)</title><rect x="468.7" y="453" width="3.9" height="15.0" fill="rgb(239,174,53)" rx="2" ry="2" />
<text  x="471.67" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__future_base::_State_baseV2&gt;::destroy&lt;std::__future_base::_State_baseV2&gt; (2,666,666 samples, 0.66%)</title><rect x="1107.7" y="357" width="7.8" height="15.0" fill="rgb(239,201,6)" rx="2" ry="2" />
<text  x="1110.67" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::swap (5,333,332 samples, 1.33%)</title><rect x="504.0" y="533" width="15.6" height="15.0" fill="rgb(220,123,35)" rx="2" ry="2" />
<text  x="506.95" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,333,333 samples, 0.33%)</title><rect x="602.0" y="293" width="3.9" height="15.0" fill="rgb(242,1,2)" rx="2" ry="2" />
<text  x="604.96" y="303.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::Sync (1,333,333 samples, 0.33%)</title><rect x="49.2" y="517" width="3.9" height="15.0" fill="rgb(226,116,15)" rx="2" ry="2" />
<text  x="52.20" y="527.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (3,999,999 samples, 1.00%)</title><rect x="939.1" y="293" width="11.8" height="15.0" fill="rgb(219,60,9)" rx="2" ry="2" />
<text  x="942.10" y="303.5" ></text>
</g>
<g >
<title>start_this_handle (1,333,333 samples, 0.33%)</title><rect x="327.5" y="453" width="4.0" height="15.0" fill="rgb(237,212,0)" rx="2" ry="2" />
<text  x="330.54" y="463.5" ></text>
</g>
<g >
<title>__getdents64 (1,333,333 samples, 0.33%)</title><rect x="45.3" y="661" width="3.9" height="15.0" fill="rgb(226,201,32)" rx="2" ry="2" />
<text  x="48.28" y="671.5" ></text>
</g>
<g >
<title>leveldb::GetVarint32Ptr (6,666,665 samples, 1.66%)</title><rect x="892.1" y="309" width="19.6" height="15.0" fill="rgb(249,53,28)" rx="2" ry="2" />
<text  x="895.06" y="319.5" ></text>
</g>
<g >
<title>vmacache_find (1,333,333 samples, 0.33%)</title><rect x="758.8" y="421" width="3.9" height="15.0" fill="rgb(214,130,47)" rx="2" ry="2" />
<text  x="761.77" y="431.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (6,666,665 samples, 1.66%)</title><rect x="484.4" y="549" width="19.6" height="15.0" fill="rgb(211,54,34)" rx="2" ry="2" />
<text  x="487.35" y="559.5" ></text>
</g>
<g >
<title>ksys_write (138,666,632 samples, 34.55%)</title><rect x="61.0" y="597" width="407.7" height="15.0" fill="rgb(236,51,54)" rx="2" ry="2" />
<text  x="63.96" y="607.5" >ksys_write</text>
</g>
<g >
<title>std::future&lt;leveldb::Status&gt;::get (5,333,332 samples, 1.33%)</title><rect x="1076.3" y="469" width="15.7" height="15.0" fill="rgb(207,102,15)" rx="2" ry="2" />
<text  x="1079.31" y="479.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1,333,333 samples, 0.33%)</title><rect x="888.1" y="309" width="4.0" height="15.0" fill="rgb(207,39,14)" rx="2" ry="2" />
<text  x="891.14" y="319.5" ></text>
</g>
<g >
<title>seq_read (1,333,333 samples, 0.33%)</title><rect x="1178.2" y="549" width="4.0" height="15.0" fill="rgb(225,161,51)" rx="2" ry="2" />
<text  x="1181.24" y="559.5" ></text>
</g>
<g >
<title>ext4_mb_new_blocks (2,666,666 samples, 0.66%)</title><rect x="351.1" y="453" width="7.8" height="15.0" fill="rgb(231,87,9)" rx="2" ry="2" />
<text  x="354.06" y="463.5" ></text>
</g>
<g >
<title>note_gp_changes (1,333,333 samples, 0.33%)</title><rect x="531.4" y="565" width="3.9" height="15.0" fill="rgb(211,168,31)" rx="2" ry="2" />
<text  x="534.40" y="575.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (2,666,666 samples, 0.66%)</title><rect x="613.7" y="357" width="7.9" height="15.0" fill="rgb(225,10,19)" rx="2" ry="2" />
<text  x="616.72" y="367.5" ></text>
</g>
<g >
<title>memcpy_flushcache (5,333,332 samples, 1.33%)</title><rect x="366.7" y="341" width="15.7" height="15.0" fill="rgb(218,26,47)" rx="2" ry="2" />
<text  x="369.74" y="351.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (1,333,333 samples, 0.33%)</title><rect x="456.9" y="501" width="3.9" height="15.0" fill="rgb(223,162,43)" rx="2" ry="2" />
<text  x="459.91" y="511.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (1,333,333 samples, 0.33%)</title><rect x="500.0" y="469" width="4.0" height="15.0" fill="rgb(219,95,24)" rx="2" ry="2" />
<text  x="503.03" y="479.5" ></text>
</g>
<g >
<title>generic_update_time (1,333,333 samples, 0.33%)</title><rect x="456.9" y="517" width="3.9" height="15.0" fill="rgb(229,179,33)" rx="2" ry="2" />
<text  x="459.91" y="527.5" ></text>
</g>
<g >
<title>read (2,666,666 samples, 0.66%)</title><rect x="1178.2" y="677" width="7.9" height="15.0" fill="rgb(209,31,10)" rx="2" ry="2" />
<text  x="1181.24" y="687.5" ></text>
</g>
<g >
<title>bdev_dax_pgoff (1,333,333 samples, 0.33%)</title><rect x="72.7" y="485" width="3.9" height="15.0" fill="rgb(210,157,21)" rx="2" ry="2" />
<text  x="75.72" y="495.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (2,666,666 samples, 0.66%)</title><rect x="692.1" y="133" width="7.9" height="15.0" fill="rgb(229,0,18)" rx="2" ry="2" />
<text  x="695.13" y="143.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::KeyBuffer::Set (1,333,333 samples, 0.33%)</title><rect x="747.0" y="501" width="3.9" height="15.0" fill="rgb(228,111,11)" rx="2" ry="2" />
<text  x="750.01" y="511.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (26,666,660 samples, 6.64%)</title><rect x="656.8" y="341" width="78.4" height="15.0" fill="rgb(207,177,42)" rx="2" ry="2" />
<text  x="659.84" y="351.5" >swapgs_re..</text>
</g>
<g >
<title>do_page_fault (2,666,666 samples, 0.66%)</title><rect x="739.2" y="229" width="7.8" height="15.0" fill="rgb(221,1,14)" rx="2" ry="2" />
<text  x="742.17" y="239.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (26,666,660 samples, 6.64%)</title><rect x="656.8" y="325" width="78.4" height="15.0" fill="rgb(209,122,47)" rx="2" ry="2" />
<text  x="659.84" y="335.5" >prepare_e..</text>
</g>
<g >
<title>leveldb::InternalKeyComparator::FindShortestSeparator (1,333,333 samples, 0.33%)</title><rect x="578.4" y="389" width="4.0" height="15.0" fill="rgb(236,100,43)" rx="2" ry="2" />
<text  x="581.44" y="399.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (2,666,666 samples, 0.66%)</title><rect x="1107.7" y="437" width="7.8" height="15.0" fill="rgb(238,179,5)" rx="2" ry="2" />
<text  x="1110.67" y="447.5" ></text>
</g>
<g >
<title>do_futex (1,333,333 samples, 0.33%)</title><rect x="480.4" y="597" width="4.0" height="15.0" fill="rgb(252,105,24)" rx="2" ry="2" />
<text  x="483.43" y="607.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::promise (3,999,999 samples, 1.00%)</title><rect x="1095.9" y="469" width="11.8" height="15.0" fill="rgb(242,202,35)" rx="2" ry="2" />
<text  x="1098.91" y="479.5" ></text>
</g>
<g >
<title>strlen (1,333,333 samples, 0.33%)</title><rect x="45.3" y="581" width="3.9" height="15.0" fill="rgb(228,31,39)" rx="2" ry="2" />
<text  x="48.28" y="591.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::set_value (1,333,333 samples, 0.33%)</title><rect x="1068.5" y="453" width="3.9" height="15.0" fill="rgb(207,195,20)" rx="2" ry="2" />
<text  x="1071.47" y="463.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3,999,999 samples, 1.00%)</title><rect x="1158.6" y="677" width="11.8" height="15.0" fill="rgb(251,99,40)" rx="2" ry="2" />
<text  x="1161.64" y="687.5" ></text>
</g>
<g >
<title>ext4_ext_map_blocks (2,666,666 samples, 0.66%)</title><rect x="351.1" y="469" width="7.8" height="15.0" fill="rgb(252,40,36)" rx="2" ry="2" />
<text  x="354.06" y="479.5" ></text>
</g>
<g >
<title>jbd2_complete_transaction (2,666,666 samples, 0.66%)</title><rect x="641.2" y="165" width="7.8" height="15.0" fill="rgb(210,216,16)" rx="2" ry="2" />
<text  x="644.16" y="175.5" ></text>
</g>
<g >
<title>leveldb::test::CompressibleString (7,999,998 samples, 1.99%)</title><rect x="762.7" y="469" width="23.5" height="15.0" fill="rgb(241,101,54)" rx="2" ry="2" />
<text  x="765.69" y="479.5" >l..</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_deleter (2,666,666 samples, 0.66%)</title><rect x="507.9" y="517" width="7.8" height="15.0" fill="rgb(223,176,14)" rx="2" ry="2" />
<text  x="510.87" y="527.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (201,333,283 samples, 50.17%)</title><rect x="535.3" y="629" width="592.0" height="15.0" fill="rgb(225,24,46)" rx="2" ry="2" />
<text  x="538.32" y="639.5" >[libstdc++.so.6.0.29]</text>
</g>
<g >
<title>__walk_page_range (1,333,333 samples, 0.33%)</title><rect x="468.7" y="533" width="3.9" height="15.0" fill="rgb(227,140,22)" rx="2" ry="2" />
<text  x="471.67" y="543.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator (1,333,333 samples, 0.33%)</title><rect x="629.4" y="373" width="3.9" height="15.0" fill="rgb(252,198,40)" rx="2" ry="2" />
<text  x="632.40" y="383.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::CompactMemTable (71,999,982 samples, 17.94%)</title><rect x="535.3" y="453" width="211.7" height="15.0" fill="rgb(239,227,43)" rx="2" ry="2" />
<text  x="538.32" y="463.5" >leveldb::DBImpl::CompactMem..</text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (1,333,333 samples, 0.33%)</title><rect x="582.4" y="389" width="3.9" height="15.0" fill="rgb(208,129,42)" rx="2" ry="2" />
<text  x="585.36" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.33%)</title><rect x="468.7" y="645" width="3.9" height="15.0" fill="rgb(206,97,25)" rx="2" ry="2" />
<text  x="471.67" y="655.5" ></text>
</g>
<g >
<title>ext4_map_blocks (1,333,333 samples, 0.33%)</title><rect x="49.2" y="309" width="3.9" height="15.0" fill="rgb(206,76,35)" rx="2" ry="2" />
<text  x="52.20" y="319.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,666,666 samples, 0.66%)</title><rect x="476.5" y="645" width="7.9" height="15.0" fill="rgb(234,171,33)" rx="2" ry="2" />
<text  x="479.51" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (2,666,666 samples, 0.66%)</title><rect x="1107.7" y="405" width="7.8" height="15.0" fill="rgb(247,155,26)" rx="2" ry="2" />
<text  x="1110.67" y="415.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadNodeEntryPoint (71,999,982 samples, 17.94%)</title><rect x="535.3" y="533" width="211.7" height="15.0" fill="rgb(242,132,11)" rx="2" ry="2" />
<text  x="538.32" y="543.5" >leveldb::(anonymous namespa..</text>
</g>
<g >
<title>leveldb::TableBuilder::Finish (33,333,325 samples, 8.31%)</title><rect x="637.2" y="405" width="98.0" height="15.0" fill="rgb(233,140,11)" rx="2" ry="2" />
<text  x="640.24" y="415.5" >leveldb::Ta..</text>
</g>
<g >
<title>std::__fill_n_a&lt;unsigned long, char&gt; (3,999,999 samples, 1.00%)</title><rect x="735.2" y="277" width="11.8" height="15.0" fill="rgb(222,174,34)" rx="2" ry="2" />
<text  x="738.25" y="287.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::WriteLevel0Table (71,999,982 samples, 17.94%)</title><rect x="535.3" y="437" width="211.7" height="15.0" fill="rgb(221,226,50)" rx="2" ry="2" />
<text  x="538.32" y="447.5" >leveldb::DBImpl::WriteLevel..</text>
</g>
<g >
<title>leveldb::crc32c::(anonymous namespace)::ReadUint32LE (2,666,666 samples, 0.66%)</title><rect x="1037.1" y="421" width="7.9" height="15.0" fill="rgb(205,179,7)" rx="2" ry="2" />
<text  x="1040.11" y="431.5" ></text>
</g>
<g >
<title>do_page_fault (2,666,666 samples, 0.66%)</title><rect x="754.9" y="453" width="7.8" height="15.0" fill="rgb(249,223,15)" rx="2" ry="2" />
<text  x="757.85" y="463.5" ></text>
</g>
<g >
<title>copy_page_from_iter (3,999,999 samples, 1.00%)</title><rect x="656.8" y="165" width="11.8" height="15.0" fill="rgb(254,0,6)" rx="2" ry="2" />
<text  x="659.84" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,333,333 samples, 0.33%)</title><rect x="617.6" y="293" width="4.0" height="15.0" fill="rgb(227,160,49)" rx="2" ry="2" />
<text  x="620.64" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (2,666,666 samples, 0.66%)</title><rect x="1107.7" y="325" width="7.8" height="15.0" fill="rgb(241,191,52)" rx="2" ry="2" />
<text  x="1110.67" y="335.5" ></text>
</g>
<g >
<title>__ext4_journal_stop (1,333,333 samples, 0.33%)</title><rect x="331.5" y="485" width="3.9" height="15.0" fill="rgb(251,194,29)" rx="2" ry="2" />
<text  x="334.46" y="495.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.33%)</title><rect x="978.3" y="229" width="3.9" height="15.0" fill="rgb(216,123,33)" rx="2" ry="2" />
<text  x="981.31" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::operator (2,666,666 samples, 0.66%)</title><rect x="488.3" y="501" width="7.8" height="15.0" fill="rgb(246,221,45)" rx="2" ry="2" />
<text  x="491.27" y="511.5" ></text>
</g>
<g >
<title>pmem_flush (26,666,660 samples, 6.64%)</title><rect x="656.8" y="373" width="78.4" height="15.0" fill="rgb(235,101,25)" rx="2" ry="2" />
<text  x="659.84" y="383.5" >pmem_flush</text>
</g>
<g >
<title>jbd2_write_access_granted.part.11 (1,333,333 samples, 0.33%)</title><rect x="449.1" y="437" width="3.9" height="15.0" fill="rgb(217,93,40)" rx="2" ry="2" />
<text  x="452.07" y="447.5" ></text>
</g>
<g >
<title>do_lookup_x (2,666,666 samples, 0.66%)</title><rect x="519.6" y="661" width="7.9" height="15.0" fill="rgb(230,202,24)" rx="2" ry="2" />
<text  x="522.63" y="671.5" ></text>
</g>
<g >
<title>pmem_do_bvec (1,333,333 samples, 0.33%)</title><rect x="652.9" y="69" width="3.9" height="15.0" fill="rgb(223,208,4)" rx="2" ry="2" />
<text  x="655.92" y="79.5" ></text>
</g>
<g >
<title>pmem_dax_direct_access (1,333,333 samples, 0.33%)</title><rect x="323.6" y="485" width="3.9" height="15.0" fill="rgb(209,152,4)" rx="2" ry="2" />
<text  x="326.62" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1,333,333 samples, 0.33%)</title><rect x="590.2" y="341" width="3.9" height="15.0" fill="rgb(212,4,28)" rx="2" ry="2" />
<text  x="593.20" y="351.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1,333,333 samples, 0.33%)</title><rect x="531.4" y="629" width="3.9" height="15.0" fill="rgb(216,206,49)" rx="2" ry="2" />
<text  x="534.40" y="639.5" ></text>
</g>
<g >
<title>db_bench (401,333,233 samples, 100.00%)</title><rect x="10.0" y="693" width="1180.0" height="15.0" fill="rgb(211,25,54)" rx="2" ry="2" />
<text  x="13.00" y="703.5" >db_bench</text>
</g>
<g >
<title>__kernel_write (7,999,998 samples, 1.99%)</title><rect x="656.8" y="213" width="23.6" height="15.0" fill="rgb(220,213,5)" rx="2" ry="2" />
<text  x="659.84" y="223.5" >_..</text>
</g>
<g >
<title>handle_mm_fault (6,666,665 samples, 1.66%)</title><rect x="637.2" y="293" width="19.6" height="15.0" fill="rgb(235,214,49)" rx="2" ry="2" />
<text  x="640.24" y="303.5" ></text>
</g>
<g >
<title>dax_read_unlock (82,666,646 samples, 20.60%)</title><rect x="80.6" y="485" width="243.0" height="15.0" fill="rgb(241,145,28)" rx="2" ry="2" />
<text  x="83.56" y="495.5" >dax_read_unlock</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3,999,999 samples, 1.00%)</title><rect x="1143.0" y="677" width="11.7" height="15.0" fill="rgb(239,176,35)" rx="2" ry="2" />
<text  x="1145.96" y="687.5" ></text>
</g>
<g >
<title>__copy_user_nocache (1,333,333 samples, 0.33%)</title><rect x="76.6" y="437" width="4.0" height="15.0" fill="rgb(213,88,13)" rx="2" ry="2" />
<text  x="79.64" y="447.5" ></text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Equal (1,333,333 samples, 0.33%)</title><rect x="825.4" y="373" width="3.9" height="15.0" fill="rgb(211,92,51)" rx="2" ry="2" />
<text  x="828.42" y="383.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (6,666,665 samples, 1.66%)</title><rect x="484.4" y="533" width="19.6" height="15.0" fill="rgb(208,144,47)" rx="2" ry="2" />
<text  x="487.35" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1,333,333 samples, 0.33%)</title><rect x="1099.8" y="357" width="4.0" height="15.0" fill="rgb(215,32,37)" rx="2" ry="2" />
<text  x="1102.83" y="367.5" ></text>
</g>
<g >
<title>write_pmem (1,333,333 samples, 0.33%)</title><rect x="652.9" y="53" width="3.9" height="15.0" fill="rgb(231,127,37)" rx="2" ry="2" />
<text  x="655.92" y="63.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (2,666,666 samples, 0.66%)</title><rect x="1099.8" y="405" width="7.9" height="15.0" fill="rgb(205,18,2)" rx="2" ry="2" />
<text  x="1102.83" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,333,333 samples, 0.33%)</title><rect x="617.6" y="325" width="4.0" height="15.0" fill="rgb(250,142,4)" rx="2" ry="2" />
<text  x="620.64" y="335.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::BackgroundCompaction (71,999,982 samples, 17.94%)</title><rect x="535.3" y="469" width="211.7" height="15.0" fill="rgb(217,14,52)" rx="2" ry="2" />
<text  x="538.32" y="479.5" >leveldb::DBImpl::Background..</text>
</g>
<g >
<title>std::fill_n&lt;char*, unsigned long, char&gt; (3,999,999 samples, 1.00%)</title><rect x="735.2" y="293" width="11.8" height="15.0" fill="rgb(243,137,52)" rx="2" ry="2" />
<text  x="738.25" y="303.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl&lt;std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.33%)</title><rect x="496.1" y="485" width="3.9" height="15.0" fill="rgb(209,143,42)" rx="2" ry="2" />
<text  x="499.11" y="495.5" ></text>
</g>
<g >
<title>leveldb::Slice::size (1,333,333 samples, 0.33%)</title><rect x="982.2" y="293" width="3.9" height="15.0" fill="rgb(244,33,38)" rx="2" ry="2" />
<text  x="985.23" y="303.5" ></text>
</g>
<g >
<title>_cond_resched (1,333,333 samples, 0.33%)</title><rect x="49.2" y="245" width="3.9" height="15.0" fill="rgb(225,185,45)" rx="2" ry="2" />
<text  x="52.20" y="255.5" ></text>
</g>
<g >
<title>std::swap&lt;std::__future_base::_State_baseV2*&gt; (2,666,666 samples, 0.66%)</title><rect x="1084.2" y="405" width="7.8" height="15.0" fill="rgb(209,223,19)" rx="2" ry="2" />
<text  x="1087.15" y="415.5" ></text>
</g>
<g >
<title>__do_softirq (1,333,333 samples, 0.33%)</title><rect x="888.1" y="261" width="4.0" height="15.0" fill="rgb(239,145,53)" rx="2" ry="2" />
<text  x="891.14" y="271.5" ></text>
</g>
<g >
<title>__ext4_journal_get_write_access (2,666,666 samples, 0.66%)</title><rect x="445.1" y="453" width="7.9" height="15.0" fill="rgb(205,201,34)" rx="2" ry="2" />
<text  x="448.15" y="463.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*, std::__future_base::_Result_base::_Deleter&gt;::tuple&lt;std::__future_base::_Result&lt;leveldb::Status&gt;*&amp;, std::__future_base::_Result_base::_Deleter, true&gt; (1,333,333 samples, 0.33%)</title><rect x="496.1" y="469" width="3.9" height="15.0" fill="rgb(228,161,28)" rx="2" ry="2" />
<text  x="499.11" y="479.5" ></text>
</g>
<g >
<title>do_dentry_open (2,666,666 samples, 0.66%)</title><rect x="37.4" y="533" width="7.9" height="15.0" fill="rgb(217,121,10)" rx="2" ry="2" />
<text  x="40.44" y="543.5" ></text>
</g>
<g >
<title>leveldb::Benchmark::Open (1,333,333 samples, 0.33%)</title><rect x="49.2" y="613" width="3.9" height="15.0" fill="rgb(206,102,39)" rx="2" ry="2" />
<text  x="52.20" y="623.5" ></text>
</g>
<g >
<title>map_id_up (1,333,333 samples, 0.33%)</title><rect x="421.6" y="437" width="3.9" height="15.0" fill="rgb(242,104,46)" rx="2" ry="2" />
<text  x="424.63" y="447.5" ></text>
</g>
<g >
<title>mutex_lock (3,999,999 samples, 1.00%)</title><rect x="668.6" y="165" width="11.8" height="15.0" fill="rgb(243,70,50)" rx="2" ry="2" />
<text  x="671.60" y="175.5" ></text>
</g>
<g >
<title>submit_bio (7,999,998 samples, 1.99%)</title><rect x="358.9" y="421" width="23.5" height="15.0" fill="rgb(238,205,27)" rx="2" ry="2" />
<text  x="361.90" y="431.5" >s..</text>
</g>
<g >
<title>leveldb::DBImpl::BackgroundCall (71,999,982 samples, 17.94%)</title><rect x="535.3" y="485" width="211.7" height="15.0" fill="rgb(205,102,51)" rx="2" ry="2" />
<text  x="538.32" y="495.5" >leveldb::DBImpl::Background..</text>
</g>
<g >
<title>__mutex_lock.isra.4 (2,666,666 samples, 0.66%)</title><rect x="715.6" y="117" width="7.9" height="15.0" fill="rgb(244,124,41)" rx="2" ry="2" />
<text  x="718.65" y="127.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr (2,666,666 samples, 0.66%)</title><rect x="496.1" y="501" width="7.9" height="15.0" fill="rgb(229,94,23)" rx="2" ry="2" />
<text  x="499.11" y="511.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_free (1,333,333 samples, 0.33%)</title><rect x="1158.6" y="501" width="4.0" height="15.0" fill="rgb(242,205,23)" rx="2" ry="2" />
<text  x="1161.64" y="511.5" ></text>
</g>
<g >
<title>exit_mmap (2,666,666 samples, 0.66%)</title><rect x="1158.6" y="549" width="7.9" height="15.0" fill="rgb(220,192,18)" rx="2" ry="2" />
<text  x="1161.64" y="559.5" ></text>
</g>
<g >
<title>security_file_free (1,333,333 samples, 0.33%)</title><rect x="1166.5" y="517" width="3.9" height="15.0" fill="rgb(242,207,36)" rx="2" ry="2" />
<text  x="1169.48" y="527.5" ></text>
</g>
<g >
<title>mutex_lock (2,666,666 samples, 0.66%)</title><rect x="715.6" y="149" width="7.9" height="15.0" fill="rgb(237,176,54)" rx="2" ry="2" />
<text  x="718.65" y="159.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,333,333 samples, 0.33%)</title><rect x="743.1" y="197" width="3.9" height="15.0" fill="rgb(249,58,51)" rx="2" ry="2" />
<text  x="746.09" y="207.5" ></text>
</g>
<g >
<title>leveldb::MemTableIterator::key (7,999,998 samples, 1.99%)</title><rect x="535.3" y="405" width="23.5" height="15.0" fill="rgb(229,96,36)" rx="2" ry="2" />
<text  x="538.32" y="415.5" >l..</text>
</g>
<g >
<title>vfs_open (2,666,666 samples, 0.66%)</title><rect x="37.4" y="549" width="7.9" height="15.0" fill="rgb(209,34,38)" rx="2" ry="2" />
<text  x="40.44" y="559.5" ></text>
</g>
<g >
<title>proc_reg_read (1,333,333 samples, 0.33%)</title><rect x="1178.2" y="565" width="4.0" height="15.0" fill="rgb(247,142,8)" rx="2" ry="2" />
<text  x="1181.24" y="575.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1,333,333 samples, 0.33%)</title><rect x="743.1" y="181" width="3.9" height="15.0" fill="rgb(219,95,28)" rx="2" ry="2" />
<text  x="746.09" y="191.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set (11,999,997 samples, 2.99%)</title><rect x="484.4" y="565" width="35.2" height="15.0" fill="rgb(254,142,29)" rx="2" ry="2" />
<text  x="487.35" y="575.5" >st..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1,333,333 samples, 0.33%)</title><rect x="472.6" y="661" width="3.9" height="15.0" fill="rgb(245,86,16)" rx="2" ry="2" />
<text  x="475.59" y="671.5" ></text>
</g>
<g >
<title>jbd2__journal_start (1,333,333 samples, 0.33%)</title><rect x="327.5" y="469" width="4.0" height="15.0" fill="rgb(230,55,33)" rx="2" ry="2" />
<text  x="330.54" y="479.5" ></text>
</g>
<g >
<title>leveldb::log::Writer::AddRecord (14,666,663 samples, 3.65%)</title><rect x="1025.3" y="453" width="43.2" height="15.0" fill="rgb(217,110,52)" rx="2" ry="2" />
<text  x="1028.35" y="463.5" >leve..</text>
</g>
<g >
<title>tc_deletearray_nothrow (2,666,666 samples, 0.66%)</title><rect x="10.0" y="629" width="7.8" height="15.0" fill="rgb(226,40,3)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>__vfs_write (1,333,333 samples, 0.33%)</title><rect x="49.2" y="389" width="3.9" height="15.0" fill="rgb(222,13,32)" rx="2" ry="2" />
<text  x="52.20" y="399.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (1,333,333 samples, 0.33%)</title><rect x="868.5" y="325" width="4.0" height="15.0" fill="rgb(211,187,54)" rx="2" ry="2" />
<text  x="871.54" y="335.5" ></text>
</g>
<g >
<title>_IO_default_xsputn (1,333,333 samples, 0.33%)</title><rect x="1139.0" y="677" width="4.0" height="15.0" fill="rgb(252,199,39)" rx="2" ry="2" />
<text  x="1142.04" y="687.5" ></text>
</g>
<g >
<title>leveldb::EncodeFixed64 (1,333,333 samples, 0.33%)</title><rect x="809.7" y="405" width="4.0" height="15.0" fill="rgb(232,141,50)" rx="2" ry="2" />
<text  x="812.73" y="415.5" ></text>
</g>
<g >
<title>dax_iomap_fault (2,666,666 samples, 0.66%)</title><rect x="649.0" y="213" width="7.8" height="15.0" fill="rgb(222,65,47)" rx="2" ry="2" />
<text  x="652.00" y="223.5" ></text>
</g>
<g >
<title>get_signal (3,999,999 samples, 1.00%)</title><rect x="1158.6" y="613" width="11.8" height="15.0" fill="rgb(220,158,49)" rx="2" ry="2" />
<text  x="1161.64" y="623.5" ></text>
</g>
<g >
<title>arch_tlb_finish_mmu (1,333,333 samples, 0.33%)</title><rect x="1158.6" y="517" width="4.0" height="15.0" fill="rgb(218,50,35)" rx="2" ry="2" />
<text  x="1161.64" y="527.5" ></text>
</g>
<g >
<title>ksys_write (1,333,333 samples, 0.33%)</title><rect x="49.2" y="421" width="3.9" height="15.0" fill="rgb(230,59,30)" rx="2" ry="2" />
<text  x="52.20" y="431.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_Setter&lt;leveldb::Status, leveldb::Status const&amp;&gt;::operator (5,333,332 samples, 1.33%)</title><rect x="488.3" y="517" width="15.7" height="15.0" fill="rgb(246,221,6)" rx="2" ry="2" />
<text  x="491.27" y="527.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::TableBuilder (3,999,999 samples, 1.00%)</title><rect x="735.2" y="405" width="11.8" height="15.0" fill="rgb(233,59,14)" rx="2" ry="2" />
<text  x="738.25" y="415.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (1,333,333 samples, 0.33%)</title><rect x="1080.2" y="421" width="4.0" height="15.0" fill="rgb(226,191,11)" rx="2" ry="2" />
<text  x="1083.23" y="431.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (26,666,660 samples, 6.64%)</title><rect x="656.8" y="309" width="78.4" height="15.0" fill="rgb(206,213,11)" rx="2" ry="2" />
<text  x="659.84" y="319.5" >exit_to_u..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (2,666,666 samples, 0.66%)</title><rect x="605.9" y="325" width="7.8" height="15.0" fill="rgb(246,61,27)" rx="2" ry="2" />
<text  x="608.88" y="335.5" ></text>
</g>
<g >
<title>__do_sys_madvise (1,333,333 samples, 0.33%)</title><rect x="468.7" y="597" width="3.9" height="15.0" fill="rgb(238,11,29)" rx="2" ry="2" />
<text  x="471.67" y="607.5" ></text>
</g>
<g >
<title>__do_page_fault (2,666,666 samples, 0.66%)</title><rect x="739.2" y="213" width="7.8" height="15.0" fill="rgb(236,167,1)" rx="2" ry="2" />
<text  x="742.17" y="223.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (2,666,666 samples, 0.66%)</title><rect x="1084.2" y="437" width="7.8" height="15.0" fill="rgb(239,28,52)" rx="2" ry="2" />
<text  x="1087.15" y="447.5" ></text>
</g>
<g >
<title>std::operator&amp; (1,333,333 samples, 0.33%)</title><rect x="1009.7" y="341" width="3.9" height="15.0" fill="rgb(207,2,23)" rx="2" ry="2" />
<text  x="1012.67" y="351.5" ></text>
</g>
<g >
<title>irq_exit (1,333,333 samples, 0.33%)</title><rect x="531.4" y="613" width="3.9" height="15.0" fill="rgb(213,162,40)" rx="2" ry="2" />
<text  x="534.40" y="623.5" ></text>
</g>
<g >
<title>pipe_write (10,666,664 samples, 2.66%)</title><rect x="692.1" y="165" width="31.4" height="15.0" fill="rgb(213,202,12)" rx="2" ry="2" />
<text  x="695.13" y="175.5" >pi..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.33%)</title><rect x="49.2" y="469" width="3.9" height="15.0" fill="rgb(215,1,50)" rx="2" ry="2" />
<text  x="52.20" y="479.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixEnv::BackgroundThreadNodeMain (71,999,982 samples, 17.94%)</title><rect x="535.3" y="517" width="211.7" height="15.0" fill="rgb(240,129,22)" rx="2" ry="2" />
<text  x="538.32" y="527.5" >leveldb::(anonymous namespa..</text>
</g>
<g >
<title>free_pages_and_swap_cache (1,333,333 samples, 0.33%)</title><rect x="1158.6" y="485" width="4.0" height="15.0" fill="rgb(239,136,1)" rx="2" ry="2" />
<text  x="1161.64" y="495.5" ></text>
</g>
<g >
<title>__srcu_read_unlock (82,666,646 samples, 20.60%)</title><rect x="80.6" y="469" width="243.0" height="15.0" fill="rgb(218,174,30)" rx="2" ry="2" />
<text  x="83.56" y="479.5" >__srcu_read_unlock</text>
</g>
<g >
<title>do_coredump (26,666,660 samples, 6.64%)</title><rect x="656.8" y="261" width="78.4" height="15.0" fill="rgb(239,227,20)" rx="2" ry="2" />
<text  x="659.84" y="271.5" >do_coredump</text>
</g>
<g >
<title>release_pages (1,333,333 samples, 0.33%)</title><rect x="1158.6" y="469" width="4.0" height="15.0" fill="rgb(248,180,19)" rx="2" ry="2" />
<text  x="1161.64" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::__future_base::_State_baseV2&gt;::_M_ptr (1,333,333 samples, 0.33%)</title><rect x="1103.8" y="341" width="3.9" height="15.0" fill="rgb(251,113,1)" rx="2" ry="2" />
<text  x="1106.75" y="351.5" ></text>
</g>
<g >
<title>get_futex_key_refs.isra.16 (1,333,333 samples, 0.33%)</title><rect x="480.4" y="565" width="4.0" height="15.0" fill="rgb(242,177,17)" rx="2" ry="2" />
<text  x="483.43" y="575.5" ></text>
</g>
<g >
<title>__do_fault (6,666,665 samples, 1.66%)</title><rect x="637.2" y="261" width="19.6" height="15.0" fill="rgb(234,81,36)" rx="2" ry="2" />
<text  x="640.24" y="271.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.33%)</title><rect x="45.3" y="629" width="3.9" height="15.0" fill="rgb(229,145,36)" rx="2" ry="2" />
<text  x="48.28" y="639.5" ></text>
</g>
<g >
<title>ext4_ext_map_blocks (1,333,333 samples, 0.33%)</title><rect x="49.2" y="293" width="3.9" height="15.0" fill="rgb(236,68,53)" rx="2" ry="2" />
<text  x="52.20" y="303.5" ></text>
</g>
<g >
<title>do_filp_open (2,666,666 samples, 0.66%)</title><rect x="37.4" y="581" width="7.9" height="15.0" fill="rgb(251,48,30)" rx="2" ry="2" />
<text  x="40.44" y="591.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,333,333 samples, 0.33%)</title><rect x="45.3" y="645" width="3.9" height="15.0" fill="rgb(236,118,12)" rx="2" ry="2" />
<text  x="48.28" y="655.5" ></text>
</g>
<g >
<title>rcu_all_qs (1,333,333 samples, 0.33%)</title><rect x="441.2" y="421" width="3.9" height="15.0" fill="rgb(207,50,23)" rx="2" ry="2" />
<text  x="444.23" y="431.5" ></text>
</g>
<g >
<title>leveldb::Slice::Slice (3,999,999 samples, 1.00%)</title><rect x="970.5" y="293" width="11.7" height="15.0" fill="rgb(216,213,33)" rx="2" ry="2" />
<text  x="973.47" y="303.5" ></text>
</g>
<g >
<title>__get_user_pages (3,999,999 samples, 1.00%)</title><rect x="723.5" y="213" width="11.7" height="15.0" fill="rgb(230,127,52)" rx="2" ry="2" />
<text  x="726.49" y="223.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.33%)</title><rect x="480.4" y="629" width="4.0" height="15.0" fill="rgb(220,23,9)" rx="2" ry="2" />
<text  x="483.43" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.33%)</title><rect x="602.0" y="277" width="3.9" height="15.0" fill="rgb(239,199,29)" rx="2" ry="2" />
<text  x="604.96" y="287.5" ></text>
</g>
<g >
<title>madvise_free_single_vma (1,333,333 samples, 0.33%)</title><rect x="468.7" y="581" width="3.9" height="15.0" fill="rgb(242,211,47)" rx="2" ry="2" />
<text  x="471.67" y="591.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (201,333,283 samples, 50.17%)</title><rect x="535.3" y="661" width="592.0" height="15.0" fill="rgb(215,16,7)" rx="2" ry="2" />
<text  x="538.32" y="671.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>rw_verify_area (1,333,333 samples, 0.33%)</title><rect x="464.8" y="565" width="3.9" height="15.0" fill="rgb(235,97,37)" rx="2" ry="2" />
<text  x="467.75" y="575.5" ></text>
</g>
<g >
<title>leveldb::InternalKeyComparator::Compare (1,333,333 samples, 0.33%)</title><rect x="578.4" y="373" width="4.0" height="15.0" fill="rgb(228,103,4)" rx="2" ry="2" />
<text  x="581.44" y="383.5" ></text>
</g>
<g >
<title>leveldb::MemHashTable::getTableValue (7,999,998 samples, 1.99%)</title><rect x="590.2" y="373" width="23.5" height="15.0" fill="rgb(214,156,30)" rx="2" ry="2" />
<text  x="593.20" y="383.5" >l..</text>
</g>
<g >
<title>ext4_issue_zeroout (7,999,998 samples, 1.99%)</title><rect x="358.9" y="469" width="23.5" height="15.0" fill="rgb(235,15,13)" rx="2" ry="2" />
<text  x="361.90" y="479.5" >e..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (201,333,283 samples, 50.17%)</title><rect x="535.3" y="597" width="592.0" height="15.0" fill="rgb(230,114,35)" rx="2" ry="2" />
<text  x="538.32" y="607.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>leveldb::TableBuilder::Add (26,666,660 samples, 6.64%)</title><rect x="558.8" y="405" width="78.4" height="15.0" fill="rgb(216,22,53)" rx="2" ry="2" />
<text  x="561.84" y="415.5" >leveldb::..</text>
</g>
<g >
<title>pmem_copy_from_iter (1,333,333 samples, 0.33%)</title><rect x="76.6" y="469" width="4.0" height="15.0" fill="rgb(233,22,16)" rx="2" ry="2" />
<text  x="79.64" y="479.5" ></text>
</g>
<g >
<title>ext4_iomap_begin (2,666,666 samples, 0.66%)</title><rect x="649.0" y="197" width="7.8" height="15.0" fill="rgb(230,93,54)" rx="2" ry="2" />
<text  x="652.00" y="207.5" ></text>
</g>
<g >
<title>do_page_fault (1,333,333 samples, 0.33%)</title><rect x="1127.3" y="629" width="3.9" height="15.0" fill="rgb(245,143,30)" rx="2" ry="2" />
<text  x="1130.28" y="639.5" ></text>
</g>
<g >
<title>iomap_apply (131,999,967 samples, 32.89%)</title><rect x="68.8" y="517" width="388.1" height="15.0" fill="rgb(225,147,17)" rx="2" ry="2" />
<text  x="71.80" y="527.5" >iomap_apply</text>
</g>
<g >
<title>dax_copy_from_iter (1,333,333 samples, 0.33%)</title><rect x="76.6" y="485" width="4.0" height="15.0" fill="rgb(217,59,22)" rx="2" ry="2" />
<text  x="79.64" y="495.5" ></text>
</g>
<g >
<title>blkdev_issue_zeroout (1,333,333 samples, 0.33%)</title><rect x="652.9" y="149" width="3.9" height="15.0" fill="rgb(207,39,18)" rx="2" ry="2" />
<text  x="655.92" y="159.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;1ul, std::__future_base::_Result_base::_Deleter&gt; (2,666,666 samples, 0.66%)</title><rect x="507.9" y="501" width="7.8" height="15.0" fill="rgb(234,215,19)" rx="2" ry="2" />
<text  x="510.87" y="511.5" ></text>
</g>
<g >
<title>dump_emit (9,333,331 samples, 2.33%)</title><rect x="656.8" y="229" width="27.5" height="15.0" fill="rgb(224,212,32)" rx="2" ry="2" />
<text  x="659.84" y="239.5" >d..</text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::Flush (1,333,333 samples, 0.33%)</title><rect x="1029.3" y="421" width="3.9" height="15.0" fill="rgb(205,125,12)" rx="2" ry="2" />
<text  x="1032.27" y="431.5" ></text>
</g>
<g >
<title>madvise_free_page_range.isra.16 (1,333,333 samples, 0.33%)</title><rect x="468.7" y="565" width="3.9" height="15.0" fill="rgb(228,11,16)" rx="2" ry="2" />
<text  x="471.67" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,333,333 samples, 0.33%)</title><rect x="617.6" y="309" width="4.0" height="15.0" fill="rgb(240,203,53)" rx="2" ry="2" />
<text  x="620.64" y="319.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (139,999,965 samples, 34.88%)</title><rect x="57.0" y="645" width="411.7" height="15.0" fill="rgb(207,189,20)" rx="2" ry="2" />
<text  x="60.04" y="655.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>dump_emit (13,333,330 samples, 3.32%)</title><rect x="684.3" y="213" width="39.2" height="15.0" fill="rgb(226,101,35)" rx="2" ry="2" />
<text  x="687.29" y="223.5" >dum..</text>
</g>
<g >
<title>do_page_fault (3,999,999 samples, 1.00%)</title><rect x="1143.0" y="645" width="11.7" height="15.0" fill="rgb(216,112,53)" rx="2" ry="2" />
<text  x="1145.96" y="655.5" ></text>
</g>
<g >
<title>__x64_sys_futex (1,333,333 samples, 0.33%)</title><rect x="476.5" y="629" width="3.9" height="15.0" fill="rgb(233,125,17)" rx="2" ry="2" />
<text  x="479.51" y="639.5" ></text>
</g>
<g >
<title>do_signal (3,999,999 samples, 1.00%)</title><rect x="1158.6" y="629" width="11.8" height="15.0" fill="rgb(214,30,14)" rx="2" ry="2" />
<text  x="1161.64" y="639.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::shared_ptr&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt;&gt; (2,666,666 samples, 0.66%)</title><rect x="1099.8" y="421" width="7.9" height="15.0" fill="rgb(221,225,0)" rx="2" ry="2" />
<text  x="1102.83" y="431.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.33%)</title><rect x="1131.2" y="629" width="3.9" height="15.0" fill="rgb(238,113,18)" rx="2" ry="2" />
<text  x="1134.20" y="639.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::MaybeScheduleCompaction (1,333,333 samples, 0.33%)</title><rect x="790.1" y="437" width="4.0" height="15.0" fill="rgb(225,16,5)" rx="2" ry="2" />
<text  x="793.13" y="447.5" ></text>
</g>
<g >
<title>do_sys_open (2,666,666 samples, 0.66%)</title><rect x="37.4" y="597" width="7.9" height="15.0" fill="rgb(206,25,0)" rx="2" ry="2" />
<text  x="40.44" y="607.5" ></text>
</g>
<g >
<title>leveldb::TableBuilder::Flush (14,666,663 samples, 3.65%)</title><rect x="590.2" y="389" width="43.1" height="15.0" fill="rgb(245,198,23)" rx="2" ry="2" />
<text  x="593.20" y="399.5" >leve..</text>
</g>
<g >
<title>page_fault (2,666,666 samples, 0.66%)</title><rect x="739.2" y="245" width="7.8" height="15.0" fill="rgb(232,204,53)" rx="2" ry="2" />
<text  x="742.17" y="255.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (1,333,333 samples, 0.33%)</title><rect x="1092.0" y="405" width="3.9" height="15.0" fill="rgb(221,93,52)" rx="2" ry="2" />
<text  x="1094.99" y="415.5" ></text>
</g>
<g >
<title>memcpy_flushcache (1,333,333 samples, 0.33%)</title><rect x="652.9" y="37" width="3.9" height="15.0" fill="rgb(205,183,44)" rx="2" ry="2" />
<text  x="655.92" y="47.5" ></text>
</g>
<g >
<title>leveldb::GetLengthPrefixedSlice (2,666,666 samples, 0.66%)</title><rect x="1013.6" y="421" width="7.8" height="15.0" fill="rgb(245,63,40)" rx="2" ry="2" />
<text  x="1016.59" y="431.5" ></text>
</g>
<g >
<title>leveldb::Slice::data (1,333,333 samples, 0.33%)</title><rect x="574.5" y="357" width="3.9" height="15.0" fill="rgb(209,61,24)" rx="2" ry="2" />
<text  x="577.52" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_ostringstream (1,333,333 samples, 0.33%)</title><rect x="790.1" y="389" width="4.0" height="15.0" fill="rgb(237,192,53)" rx="2" ry="2" />
<text  x="793.13" y="399.5" ></text>
</g>
<g >
<title>ext4_map_blocks (1,333,333 samples, 0.33%)</title><rect x="652.9" y="181" width="3.9" height="15.0" fill="rgb(248,197,14)" rx="2" ry="2" />
<text  x="655.92" y="191.5" ></text>
</g>
<g >
<title>leveldb::Slice::operator[] (1,333,333 samples, 0.33%)</title><rect x="570.6" y="373" width="3.9" height="15.0" fill="rgb(242,138,51)" rx="2" ry="2" />
<text  x="573.60" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_default_append (3,999,999 samples, 1.00%)</title><rect x="735.2" y="357" width="11.8" height="15.0" fill="rgb(208,8,53)" rx="2" ry="2" />
<text  x="738.25" y="367.5" ></text>
</g>
<g >
<title>std::future&lt;leveldb::Status&gt;::future (1,333,333 samples, 0.33%)</title><rect x="1092.0" y="453" width="3.9" height="15.0" fill="rgb(214,31,6)" rx="2" ry="2" />
<text  x="1094.99" y="463.5" ></text>
</g>
<g >
<title>unuse_pde (1,333,333 samples, 0.33%)</title><rect x="1182.2" y="565" width="3.9" height="15.0" fill="rgb(235,30,54)" rx="2" ry="2" />
<text  x="1185.16" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::swap (5,333,332 samples, 1.33%)</title><rect x="504.0" y="549" width="15.6" height="15.0" fill="rgb(234,143,51)" rx="2" ry="2" />
<text  x="506.95" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::release (1,333,333 samples, 0.33%)</title><rect x="500.0" y="485" width="4.0" height="15.0" fill="rgb(240,84,28)" rx="2" ry="2" />
<text  x="503.03" y="495.5" ></text>
</g>
<g >
<title>flush_clwb (26,666,660 samples, 6.64%)</title><rect x="656.8" y="357" width="78.4" height="15.0" fill="rgb(243,16,34)" rx="2" ry="2" />
<text  x="659.84" y="367.5" >flush_clwb</text>
</g>
<g >
<title>ext4_dax_fault (6,666,665 samples, 1.66%)</title><rect x="637.2" y="245" width="19.6" height="15.0" fill="rgb(223,173,22)" rx="2" ry="2" />
<text  x="640.24" y="255.5" ></text>
</g>
<g >
<title>memmove_movnt_avx512f_clwb (6,666,665 samples, 1.66%)</title><rect x="637.2" y="357" width="19.6" height="15.0" fill="rgb(242,228,15)" rx="2" ry="2" />
<text  x="640.24" y="367.5" ></text>
</g>
<g >
<title>__do_page_fault (1,333,333 samples, 0.33%)</title><rect x="1131.2" y="597" width="3.9" height="15.0" fill="rgb(215,138,4)" rx="2" ry="2" />
<text  x="1134.20" y="607.5" ></text>
</g>
<g >
<title>leveldb::DoWriteStringToFile (1,333,333 samples, 0.33%)</title><rect x="49.2" y="533" width="3.9" height="15.0" fill="rgb(245,66,38)" rx="2" ry="2" />
<text  x="52.20" y="543.5" ></text>
</g>
<g >
<title>leveldb::MemTable::Add (67,999,983 samples, 16.94%)</title><rect x="813.7" y="405" width="199.9" height="15.0" fill="rgb(207,196,1)" rx="2" ry="2" />
<text  x="816.65" y="415.5" >leveldb::MemTable::Add</text>
</g>
<g >
<title>get_page_from_freelist (1,333,333 samples, 0.33%)</title><rect x="1146.9" y="549" width="3.9" height="15.0" fill="rgb(232,99,3)" rx="2" ry="2" />
<text  x="1149.88" y="559.5" ></text>
</g>
<g >
<title>write_pmem (5,333,332 samples, 1.33%)</title><rect x="366.7" y="357" width="15.7" height="15.0" fill="rgb(209,220,25)" rx="2" ry="2" />
<text  x="369.74" y="367.5" ></text>
</g>
<g >
<title>vfs_write (1,333,333 samples, 0.33%)</title><rect x="49.2" y="405" width="3.9" height="15.0" fill="rgb(237,160,12)" rx="2" ry="2" />
<text  x="52.20" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;char*, unsigned long, char&gt; (3,999,999 samples, 1.00%)</title><rect x="735.2" y="341" width="11.8" height="15.0" fill="rgb(250,62,13)" rx="2" ry="2" />
<text  x="738.25" y="351.5" ></text>
</g>
<g >
<title>mutex_unlock (2,666,666 samples, 0.66%)</title><rect x="684.3" y="165" width="7.8" height="15.0" fill="rgb(239,76,53)" rx="2" ry="2" />
<text  x="687.29" y="175.5" ></text>
</g>
<g >
<title>__find_get_block (2,666,666 samples, 0.66%)</title><rect x="433.4" y="421" width="7.8" height="15.0" fill="rgb(238,82,38)" rx="2" ry="2" />
<text  x="436.39" y="431.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::PosixWritableFile::FlushBuffer (1,333,333 samples, 0.33%)</title><rect x="49.2" y="501" width="3.9" height="15.0" fill="rgb(227,209,17)" rx="2" ry="2" />
<text  x="52.20" y="511.5" ></text>
</g>
<g >
<title>ext4_mark_iloc_dirty (1,333,333 samples, 0.33%)</title><rect x="351.1" y="389" width="3.9" height="15.0" fill="rgb(206,32,1)" rx="2" ry="2" />
<text  x="354.06" y="399.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, leveldb::MemHashTableValue*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt; &gt;::operator[] (7,999,998 samples, 1.99%)</title><rect x="590.2" y="357" width="23.5" height="15.0" fill="rgb(222,192,39)" rx="2" ry="2" />
<text  x="593.20" y="367.5" >s..</text>
</g>
<g >
<title>ext4_journal_check_start (1,333,333 samples, 0.33%)</title><rect x="637.2" y="197" width="4.0" height="15.0" fill="rgb(227,111,14)" rx="2" ry="2" />
<text  x="640.24" y="207.5" ></text>
</g>
<g >
<title>follow_page_mask (2,666,666 samples, 0.66%)</title><rect x="727.4" y="197" width="7.8" height="15.0" fill="rgb(245,75,8)" rx="2" ry="2" />
<text  x="730.41" y="207.5" ></text>
</g>
<g >
<title>__ext4_journal_start_sb (1,333,333 samples, 0.33%)</title><rect x="456.9" y="469" width="3.9" height="15.0" fill="rgb(243,127,25)" rx="2" ry="2" />
<text  x="459.91" y="479.5" ></text>
</g>
<g >
<title>ext4_inode_csum.isra.59 (1,333,333 samples, 0.33%)</title><rect x="351.1" y="357" width="3.9" height="15.0" fill="rgb(253,145,28)" rx="2" ry="2" />
<text  x="354.06" y="367.5" ></text>
</g>
<g >
<title>leveldb::crc32c::Extend (7,999,998 samples, 1.99%)</title><rect x="1045.0" y="421" width="23.5" height="15.0" fill="rgb(237,107,39)" rx="2" ry="2" />
<text  x="1047.95" y="431.5" >l..</text>
</g>
<g >
<title>leveldb::SetCurrentFile (1,333,333 samples, 0.33%)</title><rect x="49.2" y="565" width="3.9" height="15.0" fill="rgb(218,198,45)" rx="2" ry="2" />
<text  x="52.20" y="575.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.33%)</title><rect x="888.1" y="229" width="4.0" height="15.0" fill="rgb(244,105,40)" rx="2" ry="2" />
<text  x="891.14" y="239.5" ></text>
</g>
<g >
<title>complete (1,333,333 samples, 0.33%)</title><rect x="362.8" y="341" width="3.9" height="15.0" fill="rgb(229,137,20)" rx="2" ry="2" />
<text  x="365.82" y="351.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (201,333,283 samples, 50.17%)</title><rect x="535.3" y="565" width="592.0" height="15.0" fill="rgb(226,144,26)" rx="2" ry="2" />
<text  x="538.32" y="575.5" >std::__invoke&lt;void </text>
</g>
<g >
<title>_IO_default_xsputn (1,333,333 samples, 0.33%)</title><rect x="17.8" y="645" width="4.0" height="15.0" fill="rgb(224,223,30)" rx="2" ry="2" />
<text  x="20.84" y="655.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::RandomGenerator::Generate (1,333,333 samples, 0.33%)</title><rect x="750.9" y="501" width="4.0" height="15.0" fill="rgb(241,91,0)" rx="2" ry="2" />
<text  x="753.93" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,666,666 samples, 0.66%)</title><rect x="1178.2" y="645" width="7.9" height="15.0" fill="rgb(243,178,38)" rx="2" ry="2" />
<text  x="1181.24" y="655.5" ></text>
</g>
<g >
<title>[unknown] (382,666,571 samples, 95.35%)</title><rect x="10.0" y="677" width="1125.1" height="15.0" fill="rgb(239,114,54)" rx="2" ry="2" />
<text  x="13.00" y="687.5" >[unknown]</text>
</g>
<g >
<title>leveldb::BlockBuilder::Add (5,333,332 samples, 1.33%)</title><rect x="562.8" y="389" width="15.6" height="15.0" fill="rgb(211,197,36)" rx="2" ry="2" />
<text  x="565.76" y="399.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (11,999,997 samples, 2.99%)</title><rect x="484.4" y="597" width="35.2" height="15.0" fill="rgb(239,209,34)" rx="2" ry="2" />
<text  x="487.35" y="607.5" >st..</text>
</g>
<g >
<title>pmem_make_request (7,999,998 samples, 1.99%)</title><rect x="358.9" y="389" width="23.5" height="15.0" fill="rgb(233,72,43)" rx="2" ry="2" />
<text  x="361.90" y="399.5" >p..</text>
</g>
<g >
<title>task_work_run (1,333,333 samples, 0.33%)</title><rect x="1166.5" y="565" width="3.9" height="15.0" fill="rgb(206,53,16)" rx="2" ry="2" />
<text  x="1169.48" y="575.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::~_State_baseV2 (2,666,666 samples, 0.66%)</title><rect x="1107.7" y="341" width="7.8" height="15.0" fill="rgb(248,75,48)" rx="2" ry="2" />
<text  x="1110.67" y="351.5" ></text>
</g>
<g >
<title>memcpy_erms (3,999,999 samples, 1.00%)</title><rect x="656.8" y="149" width="11.8" height="15.0" fill="rgb(208,168,35)" rx="2" ry="2" />
<text  x="659.84" y="159.5" ></text>
</g>
<g >
<title>ext4_iomap_end (25,333,327 samples, 6.31%)</title><rect x="382.4" y="501" width="74.5" height="15.0" fill="rgb(251,228,33)" rx="2" ry="2" />
<text  x="385.43" y="511.5" >ext4_iom..</text>
</g>
<g >
<title>leveldb::Benchmark::WriteRandom (129,333,301 samples, 32.23%)</title><rect x="747.0" y="517" width="380.3" height="15.0" fill="rgb(250,115,14)" rx="2" ry="2" />
<text  x="750.01" y="527.5" >leveldb::Benchmark::WriteRandom</text>
</g>
<g >
<title>__handle_mm_fault (1,333,333 samples, 0.33%)</title><rect x="1146.9" y="597" width="3.9" height="15.0" fill="rgb(231,177,37)" rx="2" ry="2" />
<text  x="1149.88" y="607.5" ></text>
</g>
<g >
<title>__x64_sys_write (1,333,333 samples, 0.33%)</title><rect x="49.2" y="437" width="3.9" height="15.0" fill="rgb(221,21,3)" rx="2" ry="2" />
<text  x="52.20" y="447.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,333,333 samples, 0.33%)</title><rect x="49.2" y="453" width="3.9" height="15.0" fill="rgb(242,141,17)" rx="2" ry="2" />
<text  x="52.20" y="463.5" ></text>
</g>
<g >
<title>submit_bio_wait_endio (1,333,333 samples, 0.33%)</title><rect x="362.8" y="357" width="3.9" height="15.0" fill="rgb(224,44,17)" rx="2" ry="2" />
<text  x="365.82" y="367.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (1,333,333 samples, 0.33%)</title><rect x="456.9" y="485" width="3.9" height="15.0" fill="rgb(241,70,15)" rx="2" ry="2" />
<text  x="459.91" y="495.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,333,333 samples, 0.33%)</title><rect x="1127.3" y="581" width="3.9" height="15.0" fill="rgb(234,10,45)" rx="2" ry="2" />
<text  x="1130.28" y="591.5" ></text>
</g>
<g >
<title>arch_freq_prepare_all (2,666,666 samples, 0.66%)</title><rect x="37.4" y="485" width="7.9" height="15.0" fill="rgb(242,156,54)" rx="2" ry="2" />
<text  x="40.44" y="495.5" ></text>
</g>
<g >
<title>from_kuid (1,333,333 samples, 0.33%)</title><rect x="421.6" y="453" width="3.9" height="15.0" fill="rgb(230,102,39)" rx="2" ry="2" />
<text  x="424.63" y="463.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (1,333,333 samples, 0.33%)</title><rect x="1068.5" y="421" width="3.9" height="15.0" fill="rgb(243,157,28)" rx="2" ry="2" />
<text  x="1071.47" y="431.5" ></text>
</g>
<g >
<title>proc_reg_open (2,666,666 samples, 0.66%)</title><rect x="37.4" y="517" width="7.9" height="15.0" fill="rgb(223,27,16)" rx="2" ry="2" />
<text  x="40.44" y="527.5" ></text>
</g>
<g >
<title>__libc_start_main (1,333,333 samples, 0.33%)</title><rect x="49.2" y="661" width="3.9" height="15.0" fill="rgb(249,18,24)" rx="2" ry="2" />
<text  x="52.20" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::~shared_ptr (2,666,666 samples, 0.66%)</title><rect x="1107.7" y="453" width="7.8" height="15.0" fill="rgb(210,195,16)" rx="2" ry="2" />
<text  x="1110.67" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, leveldb::MemHashTableValue*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1,333,333 samples, 0.33%)</title><rect x="602.0" y="325" width="3.9" height="15.0" fill="rgb(227,67,46)" rx="2" ry="2" />
<text  x="604.96" y="335.5" ></text>
</g>
<g >
<title>ext4_group_desc_csum_set (1,333,333 samples, 0.33%)</title><rect x="355.0" y="421" width="3.9" height="15.0" fill="rgb(239,186,37)" rx="2" ry="2" />
<text  x="357.98" y="431.5" ></text>
</g>
<g >
<title>ext4_inode_csum_set (5,333,332 samples, 1.33%)</title><rect x="405.9" y="453" width="15.7" height="15.0" fill="rgb(208,227,53)" rx="2" ry="2" />
<text  x="408.95" y="463.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1,333,333 samples, 0.33%)</title><rect x="1158.6" y="453" width="4.0" height="15.0" fill="rgb(208,166,37)" rx="2" ry="2" />
<text  x="1161.64" y="463.5" ></text>
</g>
<g >
<title>std::promise&lt;leveldb::Status&gt;::~promise (2,666,666 samples, 0.66%)</title><rect x="1107.7" y="469" width="7.8" height="15.0" fill="rgb(225,15,14)" rx="2" ry="2" />
<text  x="1110.67" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::get (2,666,666 samples, 0.66%)</title><rect x="488.3" y="485" width="7.8" height="15.0" fill="rgb(223,211,27)" rx="2" ry="2" />
<text  x="491.27" y="495.5" ></text>
</g>
<g >
<title>memcpy_erms (5,333,332 samples, 1.33%)</title><rect x="700.0" y="133" width="15.6" height="15.0" fill="rgb(245,104,6)" rx="2" ry="2" />
<text  x="702.97" y="143.5" ></text>
</g>
<g >
<title>leveldb::Status::~Status (2,666,666 samples, 0.66%)</title><rect x="798.0" y="453" width="7.8" height="15.0" fill="rgb(206,176,29)" rx="2" ry="2" />
<text  x="800.97" y="463.5" ></text>
</g>
<g >
<title>page_fault (1,333,333 samples, 0.33%)</title><rect x="1127.3" y="645" width="3.9" height="15.0" fill="rgb(240,30,4)" rx="2" ry="2" />
<text  x="1130.28" y="655.5" ></text>
</g>
<g >
<title>crc32c_pcl_intel_update (1,333,333 samples, 0.33%)</title><rect x="355.0" y="389" width="3.9" height="15.0" fill="rgb(231,84,12)" rx="2" ry="2" />
<text  x="357.98" y="399.5" ></text>
</g>
<g >
<title>path_openat (2,666,666 samples, 0.66%)</title><rect x="37.4" y="565" width="7.9" height="15.0" fill="rgb(210,190,22)" rx="2" ry="2" />
<text  x="40.44" y="575.5" ></text>
</g>
<g >
<title>__ext4_journal_start_sb (2,666,666 samples, 0.66%)</title><rect x="382.4" y="485" width="7.9" height="15.0" fill="rgb(245,30,27)" rx="2" ry="2" />
<text  x="385.43" y="495.5" ></text>
</g>
<g >
<title>ext4_mb_new_blocks (1,333,333 samples, 0.33%)</title><rect x="49.2" y="277" width="3.9" height="15.0" fill="rgb(240,196,39)" rx="2" ry="2" />
<text  x="52.20" y="287.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (2,666,666 samples, 0.66%)</title><rect x="1099.8" y="389" width="7.9" height="15.0" fill="rgb(210,185,40)" rx="2" ry="2" />
<text  x="1102.83" y="399.5" ></text>
</g>
<g >
<title>snappy::internal::CompressFragment (2,666,666 samples, 0.66%)</title><rect x="527.5" y="661" width="7.8" height="15.0" fill="rgb(222,141,42)" rx="2" ry="2" />
<text  x="530.48" y="671.5" ></text>
</g>
<g >
<title>__x64_sys_read (2,666,666 samples, 0.66%)</title><rect x="1178.2" y="629" width="7.9" height="15.0" fill="rgb(216,45,1)" rx="2" ry="2" />
<text  x="1181.24" y="639.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl&lt;std::__future_base::_Result_base::_Deleter&gt; (1,333,333 samples, 0.33%)</title><rect x="496.1" y="453" width="3.9" height="15.0" fill="rgb(209,14,23)" rx="2" ry="2" />
<text  x="499.11" y="463.5" ></text>
</g>
<g >
<title>unmap_vmas (1,333,333 samples, 0.33%)</title><rect x="1162.6" y="533" width="3.9" height="15.0" fill="rgb(253,134,52)" rx="2" ry="2" />
<text  x="1165.56" y="543.5" ></text>
</g>
<g >
<title>walk_page_range (1,333,333 samples, 0.33%)</title><rect x="468.7" y="549" width="3.9" height="15.0" fill="rgb(208,24,34)" rx="2" ry="2" />
<text  x="471.67" y="559.5" ></text>
</g>
<g >
<title>leveldb::(anonymous namespace)::BytewiseComparatorImpl::Compare (6,666,665 samples, 1.66%)</title><rect x="935.2" y="309" width="19.6" height="15.0" fill="rgb(231,180,12)" rx="2" ry="2" />
<text  x="938.18" y="319.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (11,999,997 samples, 2.99%)</title><rect x="484.4" y="613" width="35.2" height="15.0" fill="rgb(241,151,54)" rx="2" ry="2" />
<text  x="487.35" y="623.5" >st..</text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::shared_ptr (1,333,333 samples, 0.33%)</title><rect x="1092.0" y="421" width="3.9" height="15.0" fill="rgb(247,220,32)" rx="2" ry="2" />
<text  x="1094.99" y="431.5" ></text>
</g>
<g >
<title>do_sys_open (1,333,333 samples, 0.33%)</title><rect x="1154.7" y="581" width="3.9" height="15.0" fill="rgb(224,115,42)" rx="2" ry="2" />
<text  x="1157.72" y="591.5" ></text>
</g>
<g >
<title>leveldb::ExtractUserKey (10,666,664 samples, 2.66%)</title><rect x="954.8" y="309" width="31.3" height="15.0" fill="rgb(216,116,8)" rx="2" ry="2" />
<text  x="957.78" y="319.5" >le..</text>
</g>
<g >
<title>file_update_time (1,333,333 samples, 0.33%)</title><rect x="456.9" y="533" width="3.9" height="15.0" fill="rgb(205,215,21)" rx="2" ry="2" />
<text  x="459.91" y="543.5" ></text>
</g>
<g >
<title>unmap_single_vma (1,333,333 samples, 0.33%)</title><rect x="1162.6" y="517" width="3.9" height="15.0" fill="rgb(242,1,2)" rx="2" ry="2" />
<text  x="1165.56" y="527.5" ></text>
</g>
<g >
<title>__vfs_read (2,666,666 samples, 0.66%)</title><rect x="1178.2" y="581" width="7.9" height="15.0" fill="rgb(240,60,52)" rx="2" ry="2" />
<text  x="1181.24" y="591.5" ></text>
</g>
<g >
<title>leveldb::test::RandomString (3,999,999 samples, 1.00%)</title><rect x="770.5" y="453" width="11.8" height="15.0" fill="rgb(235,207,23)" rx="2" ry="2" />
<text  x="773.53" y="463.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;leveldb::Status&gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (1,333,333 samples, 0.33%)</title><rect x="488.3" y="469" width="3.9" height="15.0" fill="rgb(239,5,52)" rx="2" ry="2" />
<text  x="491.27" y="479.5" ></text>
</g>
<g >
<title>__GI___libc_open (2,666,666 samples, 0.66%)</title><rect x="37.4" y="661" width="7.9" height="15.0" fill="rgb(240,104,50)" rx="2" ry="2" />
<text  x="40.44" y="671.5" ></text>
</g>
<g >
<title>blkdev_issue_zeroout (7,999,998 samples, 1.99%)</title><rect x="358.9" y="453" width="23.5" height="15.0" fill="rgb(222,27,27)" rx="2" ry="2" />
<text  x="361.90" y="463.5" >b..</text>
</g>
<g >
<title>leveldb::SkipList&lt;char const*, leveldb::MemTable::KeyComparator&gt;::Node::Next (6,666,665 samples, 1.66%)</title><rect x="994.0" y="357" width="19.6" height="15.0" fill="rgb(239,192,22)" rx="2" ry="2" />
<text  x="996.99" y="367.5" ></text>
</g>
<g >
<title>vfprintf (5,333,332 samples, 1.33%)</title><rect x="21.8" y="645" width="15.6" height="15.0" fill="rgb(223,123,0)" rx="2" ry="2" />
<text  x="24.76" y="655.5" ></text>
</g>
<g >
<title>main (1,333,333 samples, 0.33%)</title><rect x="49.2" y="645" width="3.9" height="15.0" fill="rgb(225,93,9)" rx="2" ry="2" />
<text  x="52.20" y="655.5" ></text>
</g>
<g >
<title>std::make_shared&lt;std::__future_base::_State_baseV2&gt; (3,999,999 samples, 1.00%)</title><rect x="1095.9" y="453" width="11.8" height="15.0" fill="rgb(248,70,44)" rx="2" ry="2" />
<text  x="1098.91" y="463.5" ></text>
</g>
<g >
<title>leveldb::DBImpl::WriteWrapper (97,333,309 samples, 24.25%)</title><rect x="786.2" y="469" width="286.2" height="15.0" fill="rgb(226,10,3)" rx="2" ry="2" />
<text  x="789.21" y="479.5" >leveldb::DBImpl::WriteWrapper</text>
</g>
<g >
<title>_IO_vsnprintf (6,666,665 samples, 1.66%)</title><rect x="17.8" y="661" width="19.6" height="15.0" fill="rgb(252,127,38)" rx="2" ry="2" />
<text  x="20.84" y="671.5" ></text>
</g>
<g >
<title>mutex_spin_on_owner (3,999,999 samples, 1.00%)</title><rect x="668.6" y="117" width="11.8" height="15.0" fill="rgb(242,106,49)" rx="2" ry="2" />
<text  x="671.60" y="127.5" ></text>
</g>
<g >
<title>apparmor_file_free_security (1,333,333 samples, 0.33%)</title><rect x="1166.5" y="501" width="3.9" height="15.0" fill="rgb(209,87,38)" rx="2" ry="2" />
<text  x="1169.48" y="511.5" ></text>
</g>
<g >
<title>submit_bio_wait (1,333,333 samples, 0.33%)</title><rect x="652.9" y="133" width="3.9" height="15.0" fill="rgb(214,30,20)" rx="2" ry="2" />
<text  x="655.92" y="143.5" ></text>
</g>
</g>
</svg>
